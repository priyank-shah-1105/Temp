/*
 *  Â© 2019 Dell Inc.
 *  ALL RIGHTS RESERVED.
 *  dell-asm 8.4.0
 *  Fri Feb 01 2019 10:24:32 GMT-0600 (Central Standard Time)
 */
angular.module('app', ['ngNewRouter', 'ASM.constants', 'ASM.directives', 'ASM.dataservices', 'LocalStorageModule', 'Enums', 'Clarity'])
    //Route Configuration now in AppController definition.
    .config(['$componentLoaderProvider', function ($componentLoaderProvider) {
        $componentLoaderProvider.setTemplateMapping(function (name) {
            // name is component name.  We can replace them all with Template Cache here.
            return 'views/' + name + '.html';
        });
    }])
    .run(['$router', function ($router) {
        $router.config([
            { name: 'ASM', path: '/', redirectTo: '/home', data: { pageTemplate: 'gray' } }, //, pageTemplate: 'gray'
            { name: 'Home', path: '/home', component: 'home', useAsDefault: true, data: { pageTemplate: 'gray' } },
            //{ name: 'Logs', path: '/logs', component: 'logs' },
            { name: 'Devices', path: '/devices', component: 'devices', data: { pageTemplate: 'gray' } },
            { name: 'DevicesAndServerPools', path: '/devices/:resourceType', component: 'devices' },
            { name: 'DevicesByTypeAndHealth', path: '/devices/:resourceType/:health', component: 'devices' },
            { name: 'DeviceDetails', path: '/device/:id/:resourceType', component: 'device' },
            { name: 'GettingStarted', path: '/gettingstarted', component: 'gettingstarted' },
            { name: 'GettingStarted', path: '/gettingstarted/:foo', component: 'gettingstarted' },
            { name: 'Settings', path: '/settings/:settingType/:fullscreen', component: ('settingslist') },
            { name: 'Settings', path: '/settings/:settingType/:fullscreen/:modalOrTab', component: ('settingslist') },
            { name: 'Settings', path: '/settings/:settingType/', component: ('settingslist') },
            { name: 'Settings', path: '/settings', component: ('settingslist') },
            { name: 'Templates', path: '/templates', component: ('templates') },
            { name: 'TemplatesByCategory', path: '/templates/:category', component: ('templates') },
            { name: 'TemplateBuilder', path: '/templatebuilder/:id/:mode', component: 'templatebuilder' },
            { name: 'ServiceDetails', path: '/service/:id/:firmwarereport', component: ('service') },
            { name: 'ServicesByHealth', path: '/services/:health', component: ('services') },
            { name: 'Services', path: '/services', component: ('services') },
            { name: 'Search', path: '/Search', component: ('searchResults') }
        ]);

    }])
    .config([
        '$translateProvider', 'CoreTranslations', 'AppTranslations', function ($translateProvider, CoreTranslations, AppTranslations) {
            var translations = {};
            angular.extend(translations, CoreTranslations.en);
            angular.extend(translations, AppTranslations.en);
            $translateProvider.translations('en', translations);
            $translateProvider.preferredLanguage('en');
            $translateProvider.useSanitizeValueStrategy('sanitizeParameters');
        }
    ])
    .config([
        'localStorageServiceProvider', function (localStorageServiceProvider) {
            localStorageServiceProvider.prefix = 'ASM';
            localStorageServiceProvider.setStorageType('sessionStorage');
        }
    ])
    .config([
        '$httpProvider', function ($httpProvider) {

            if (!$httpProvider.defaults.headers.get) {
                $httpProvider.defaults.headers.common = {};
            }
            $httpProvider.defaults.headers.common['Cache-Control'] = 'no-cache';
            $httpProvider.defaults.headers.common.Pragma = 'no-cache';

            $httpProvider.interceptors.push([
                '$q', '$window', '$translate', function ($q, $window, $translate) {
                    return {
                        'request': function (config) {


                            //prevent caching of html files that are not in template cache
                            if (config.method === 'GET' && config.url.indexOf('.html') > -1 && config.cache.get(config.url) === undefined) {
                                config.url += ((config.url.indexOf('?') > -1) ? '&' : '?')
                                    + config.paramSerializer({ v: $window['cacheKey'] || '' });
                            }

                            if ($window.sessionStorage.token) {

                                //Configure defaults for global variables that don't change... use interceptors to change headers on a call by call basis
                                //$httpProvider.defaults.headers.common['JSESSIONID'] = $window.sessionStorage.token;
                                config.headers['JSESSIONID'] = $window.sessionStorage.token;
                            }

                            //if (!config.data) return config;
                            if (config.method === 'GET' || config.directPost) return config;

                            config.data = config.data || { requestObj: null, criteriaObj: null };

                            var __buildJobRequest = function (requestObj, criteriaObj) {
                                var jobRequest;

                                if (requestObj) {
                                    jobRequest = { requestObj: requestObj };
                                } else {
                                    jobRequest = { requestObj: null };
                                }

                                if (criteriaObj)
                                    jobRequest.criteriaObj = criteriaObj;

                                return jobRequest;
                            };

                            var requestObjData;

                            //if we send in explicit object to post use that, otherwise use the associated model                
                            if (config.data && config.data.requestObj) {
                                requestObjData = config.data.requestObj;
                            } else {
                                requestObjData = config.data;
                            }

                            var jobRequestObj = __buildJobRequest(requestObjData, config.data.criteriaObj);

                            config.data = JSON.stringify(jobRequestObj, function (key, value) {

                                if (config.options && config.options.customstringify) {
                                    var newValue = config.options.customstringify(this, key, value);
                                    if (newValue !== false)
                                        return newValue;
                                }

                                if (typeof value === 'function') {
                                    return value.toString();
                                } else {
                                    return value;
                                }

                            });

                            return config;
                        },
                        'response': function (response) {

                            if (response && (response.status === 403 || response.status === 401)) {
                                $window.location.href = 'login.html';
                                return null;
                            }

                            //replace xhr response data for error testing
                            //if (response.config.url === "devices/getscaleiobyid") {
                            //    response.data =
                            //        { "criteriaObj": null, "responseCode": 0, "errorObj": null, "requestObj": null, "responseObj": { "id": "scaleio-10.239.139.190", "systemId": "2e83a313221c6f03", "name": "flex-os-gateway-2", "ipaddressurl": "https://10.239.139.190", "scaleIOInformation": { "protectedInKb": 13505658880, "inMaintenanceInKb": 0, "degradedInKb": 0, "failedInKb": 0, "unusedInKb": 40567895040, "spareInKb": 27856071680, "decreasedInKb": 0, "unavailableUnusedInKb": 0, "maxCapacityInKb": 81929625600 }, "scaleIOProtectionDomains": [{ "id": "4921f70f00000000", "protectionDomainName": "fpr2-cluster-service-2.0-PD-1", "storageVolumes": 3, "storageSize": "76.0 TB", "mappedSDCs": 3, "scaleIOServerTypes": [{ "id": "sds", "name": "SDS", "scaleIOServerDetails": [{ "id": "dab4fe8d00000002", "name": "Sds-10.239.139.110", "connected": "Connected", "ipAddresses": ["192.168.161.19", "192.168.162.19"] }, { "id": "dab4fe8c00000001", "name": "Sds-10.239.139.108", "connected": "Connected", "ipAddresses": ["192.168.161.17", "192.168.162.17"] }, { "id": "dab4fe8b00000000", "name": "Sds-10.239.139.109", "connected": "Connected", "ipAddresses": ["192.168.161.18", "192.168.162.18"] }] }, { "id": "sdc", "name": "SDC", "scaleIOServerDetails": [{ "id": "fb32450500000000", "name": "192.168.161.15", "connected": "Connected", "ipAddresses": ["192.168.161.15"] }, { "id": "fb32450700000002", "name": "192.168.161.13", "connected": "Connected", "ipAddresses": ["192.168.161.13"] }, { "id": "fb32450600000001", "name": "192.168.162.14", "connected": "Connected", "ipAddresses": ["192.168.162.14"] }] }], "scaleIOStoragePools": [{ "id": "0366b83900000000", "name": "2-SP-SSD-1", "scaleIOStorageVolumes": [{ "id": "68be565300000000", "name": "2-DS-SSD-1", "size": "184.0 GB", "type": "ThickProvisioned", "mappedSDCs": 3 }, { "id": "68be565400000001", "name": "2-DS-SSD-3", "size": "184.0 GB", "type": "ThickProvisioned", "mappedSDCs": 3 }] }, { "id": "0366b83a00000001", "name": "2-SP-HDD-1", "scaleIOStorageVolumes": [{ "id": "68be565500000002", "name": "2-DS-HDD-2", "size": "5.0 TB", "type": "ThickProvisioned", "mappedSDCs": 3 }] }] }], "protectionDomainCount": 1, "volumeCount": 3, "sDCCount": 3, "sDSCount": 3, "management": "Clustered", "ioData": { "total": { "id": "iops", "category": "iops", "currentvalue": 2.11, "currentvaluelabel": "Value", "peakvalue": 13.16, "peaktime": "2018-10-22T00:00:00.000Z", "starttime": "2018-10-01T00:00:00.000Z", "threshold": 13.818000000000001, "historicaldata": null }, "read": { "id": "iops", "category": "iops", "currentvalue": 0.91, "currentvaluelabel": "Value", "peakvalue": 6.61, "peaktime": "2018-10-22T00:00:00.000Z", "starttime": "2018-10-01T00:00:00.000Z", "threshold": 6.940500000000001, "historicaldata": null }, "write": { "id": "iops", "category": "iops", "currentvalue": 1.2, "currentvaluelabel": "Value", "peakvalue": 6.55, "peaktime": "2018-10-22T00:00:00.000Z", "starttime": "2018-10-01T00:00:00.000Z", "threshold": 6.8775, "historicaldata": null } }, "bandwidthData": { "total": { "id": "bw", "category": "bw", "currentvalue": 6.05, "currentvaluelabel": "Value", "peakvalue": 39.13, "peaktime": "2018-10-22T00:00:00.000Z", "starttime": "2018-10-01T00:00:00.000Z", "threshold": 41.0865, "historicaldata": null }, "read": { "id": "bw", "category": "bw", "currentvalue": 5.4, "currentvaluelabel": "Value", "peakvalue": 35.51, "peaktime": "2018-10-22T00:00:00.000Z", "starttime": "2018-10-01T00:00:00.000Z", "threshold": 37.2855, "historicaldata": null }, "write": { "id": "bw", "category": "bw", "currentvalue": 1.2, "currentvaluelabel": "Value", "peakvalue": 38.77, "peaktime": "2018-10-22T00:00:00.000Z", "starttime": "2018-10-01T00:00:00.000Z", "threshold": 40.8123, "historicaldata": null } } } }
                            //        ;
                            //}

                            if (response && response.data['responseCode'] != null && response.data['responseCode'] !== 0) {

                                var e = {
                                    error: {
                                        refId: '',
                                        code: response.data['responseCode'],
                                        severity: 'CRITICAL',
                                        message: $translate.instant('GENERIC_UnknownError'),
                                        details: '',
                                        errors: []
                                    }
                                };

                                if (response.data.errorObj) {

                                    if (response.data.errorObj.errorMessage) {
                                        e.error.message = response.data.errorObj.errorMessage;
                                    }

                                    if (response.data.errorObj.errorAction) {
                                        e.error.details = response.data.errorObj.errorAction;
                                        if (e.error.details) { e.error.details += '<br />'; }
                                    }

                                    if (response.data.errorObj.errorDetails) {
                                        e.error.details = response.data.errorObj.errorDetails;
                                    }

                                    if (response.data.errorObj.errorCode) {
                                        e.error.code = response.data.errorObj.errorCode;
                                    }

                                    //copy fldErrors to error.errors collection for errorDisplay directive
                                    e.error.fldErrors = response.data.errorObj.fldErrors || undefined;
                                    if (e.error.fldErrors) {
                                        angular.forEach(e.error.fldErrors, function (suberror) {
                                            if (suberror.errorAction) {
                                                if (suberror.errorDetails) {
                                                    suberror.errorAction += ('<br />' + suberror.errorDetails);
                                                }
                                            }
                                            var fldError = {
                                                message: suberror.errorMessage || null,
                                                details: suberror.errorAction || suberror.errorDetails || null,
                                                code: suberror.errorCode || null,
                                                severity: suberror.errorSeverity || 'CRITICAL'
                                            };

                                            if (!e.error.errors)
                                                e.error.errors = [];

                                            e.error.errors.push(fldError);
                                        });
                                    }

                                    e.error.Message = '' + e.error.code + ': ' + e.error.message;
                                    e.error.refId = '' + response.config.url;
                                    response.data = e.error;
                                }

                                return $q.reject(response);
                            }

                            window.setTimeout(function () {
                                $(window).trigger('resize');
                            }, 500);


                            return response;
                        },
                        'responseError': function (rejection) {


                            if (rejection && (rejection.status === 403 || rejection.status === 401)) {
                                $window.location.href = 'login.html';
                            }

                            //convert all ajax errors to common error format
                            var e = {
                                error: {
                                    refId: '',
                                    code: '',
                                    severity: 'CRITICAL',
                                    message: $translate.instant('GENERIC_UnknownError'),
                                    details: ''
                                }
                            };

                            if (rejection) {

                                //if no EEMI error returned
                                if (rejection.status)
                                    e.error.code = rejection.status;
                                if (rejection.statusText)
                                    e.error.message = rejection.statusText;

                                if (rejection.data && rejection.data.ExceptionMessage) {
                                    e.error.message = rejection.data.ExceptionMessage;
                                }

                                if (rejection.data && rejection.data.Message) {
                                    e.error.message = rejection.data.Message;
                                }

                                if (rejection.data && rejection.data.MessageDetail) {
                                    e.error.details = rejection.data.MessageDetail;
                                }

                                if (rejection.data && rejection.data.error) {
                                    e.error = rejection.data.error;
                                }

                                e.error.Message = '' + e.error.code + ': ' + e.error.message;
                                e.error.refId = '' + rejection.config.url;
                                rejection.data = e.error;
                            }


                            return $q.reject(rejection);
                        }
                    };
                }
            ]);

        }
    ])
    .run([
        '$rootScope', '$location', 'localStorageService', '$translate', function ($rootScope, $location, localStorageService, $translate) {

            var updatePageTemplate = function () {
                var pageTemplate = $location.url().indexOf('gettingstarted') > 0 ? 'gray' : '';

                if ($location.url().indexOf('device') > 0 && $location.url().indexOf('devices') < 0) {
                    pageTemplate = 'gray';
                }

                if ($location.url().indexOf('home') > 0) {
                    pageTemplate = 'gray';
                }
                $rootScope.pageTemplate = pageTemplate;

                if ($location.absUrl().indexOf('#/gettingstarted') !== -1) { $rootScope.helpToken = 'gettingstarted'; $rootScope.pageTitle = $translate.instant('GETTINGSTARTED_instructiontitle'); }
                if ($location.absUrl().indexOf('#/home') !== -1) { $rootScope.helpToken = 'dashboardoverview'; $rootScope.pageTitle = $translate.instant('DASHBOARD_Title'); }
                if ($location.absUrl().indexOf('#/service') !== -1) { $rootScope.helpToken = 'servicedetails'; $rootScope.pageTitle = $translate.instant('SERVICE_DETAIL_Details'); }
                if ($location.absUrl().indexOf('#/services') !== -1) { $rootScope.helpToken = 'services'; $rootScope.pageTitle = $translate.instant('SERVICE_DETAIL_Services'); }
                if ($location.absUrl().indexOf('#/templates') !== -1) { $rootScope.helpToken = 'templateshomepage'; $rootScope.pageTitle = $translate.instant('TEMPLATES_Templates'); }
                if ($location.absUrl().indexOf('#/templates/mytemplates') !== -1) { $rootScope.helpToken = 'templateshomepage'; $rootScope.pageTitle = $translate.instant('TEMPLATES_Templates'); }
                if ($location.absUrl().indexOf('#/templates/sampletemplates') !== -1) { $rootScope.helpToken = 'sampletemplates'; $rootScope.pageTitle = $translate.instant('TEMPLATES_Templates'); }
                if ($location.absUrl().indexOf('#/templatebuilder') !== -1) { $rootScope.helpToken = 'templateshomepage'; $rootScope.pageTitle = $translate.instant('TEMPLATES_TemplateBuilder'); }
                if ($location.absUrl().indexOf('#/device') !== -1) { $rootScope.helpToken = 'resourcedetails'; $rootScope.pageTitle = $translate.instant('DEVICEDETAILS_Title'); }
                if ($location.absUrl().indexOf('#/devices') !== -1) { $rootScope.helpToken = 'resources'; $rootScope.pageTitle = $translate.instant('DEVICES_Resources'); }
                if ($location.absUrl().indexOf('#/devices/serverpools') !== -1) { $rootScope.helpToken = 'serverpools'; $rootScope.pageTitle = $translate.instant('DEVICES_Resources'); }
                if ($location.absUrl().indexOf('#/settings') !== -1) { $rootScope.helpToken = 'Settings'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }

                //if ($location.absUrl().indexOf('#/settings/AddOnModule') !== -1) { $rootScope.helpToken = 'addonmodules'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }
                if ($location.absUrl().indexOf('#/settings/BackupAndRestore') !== -1) { $rootScope.helpToken = 'backupandrestore'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }
                if ($location.absUrl().indexOf('#/settings/CredentialsManagement') !== -1) { $rootScope.helpToken = 'credentialslandingpage'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }
                if ($location.absUrl().indexOf('#/settings/GettingStarted') !== -1) { $rootScope.helpToken = 'gettingstarted'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }
                if ($location.absUrl().indexOf('#/settings/Jobs') !== -1) { $rootScope.helpToken = 'scheduledjobs'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }
                if ($location.absUrl().indexOf('#/settings/Logs') !== -1) { $rootScope.helpToken = 'Logs'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }
                if ($location.absUrl().indexOf('#/settings/Networks') !== -1) { $rootScope.helpToken = 'networkslandingpage'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }
                if ($location.absUrl().indexOf('#/settings/Repositories') !== -1) { $rootScope.helpToken = 'repositorieshomepage'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }
                if ($location.absUrl().indexOf('#/settings/InitialApplianceSetup') !== -1) { $rootScope.helpToken = 'initialsetupwelcome'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }
                if ($location.absUrl().indexOf('#/settings/Users') !== -1) { $rootScope.helpToken = 'SettingsUsersHomePage'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }
                if ($location.absUrl().indexOf('#/settings/VirtualApplianceManagement') !== -1) { $rootScope.helpToken = 'appliancemanagementhomepage'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }
                //if ($location.absUrl().indexOf('#/settings/VirtualIdentityPools') !== -1) { $rootScope.helpToken = 'virtualidentitypoolslandingpage'; $rootScope.pageTitle = $translate.instant('SETTINGS_Settings'); }

                //fullscreen settings pages
                //if ($location.absUrl().indexOf('#/settings/AddOnModule/true') !== -1) { $rootScope.helpToken = 'addonmodules'; $rootScope.pageTitle = $translate.instant('SETTINGS_AddOnModule'); }
                if ($location.absUrl().indexOf('#/settings/BackupAndRestore/true') !== -1) { $rootScope.helpToken = 'backupandrestore'; $rootScope.pageTitle = $translate.instant('SETTINGS_BackupRestore'); }
                if ($location.absUrl().indexOf('#/settings/CredentialsManagement/true') !== -1) { $rootScope.helpToken = 'credentialslandingpage'; $rootScope.pageTitle = $translate.instant('SETTINGS_CredentialsManagement'); }
                if ($location.absUrl().indexOf('#/settings/GettingStarted/true') !== -1) { $rootScope.helpToken = 'gettingstarted'; $rootScope.pageTitle = $translate.instant('SETTINGS_GettingStarted'); }
                if ($location.absUrl().indexOf('#/settings/Jobs/true') !== -1) { $rootScope.helpToken = 'scheduledjobs'; $rootScope.pageTitle = $translate.instant('SETTINGS_Jobs'); }
                if ($location.absUrl().indexOf('#/settings/Logs/true') !== -1) { $rootScope.helpToken = 'Logs'; $rootScope.pageTitle = $translate.instant('SETTINGS_Logs'); }
                if ($location.absUrl().indexOf('#/settings/Networks/true') !== -1) { $rootScope.helpToken = 'networkslandingpage'; $rootScope.pageTitle = $translate.instant('SETTINGS_Networks'); }
                if ($location.absUrl().indexOf('#/settings/Repositories/true') !== -1) { $rootScope.helpToken = 'repositorieshomepage'; $rootScope.pageTitle = $translate.instant('SETTINGS_Repositories'); }
                if ($location.absUrl().indexOf('#/settings/InitialApplianceSetup/true') !== -1) { $rootScope.helpToken = 'initialsetupwelcome'; $rootScope.pageTitle = $translate.instant('SETTINGS_InitialApplianceSetup'); }
                if ($location.absUrl().indexOf('#/settings/Users/true') !== -1) { $rootScope.helpToken = 'SettingsUsersHomePage'; $rootScope.pageTitle = $translate.instant('SETTINGS_Users'); }
                if ($location.absUrl().indexOf('#/settings/VirtualApplianceManagement/true') !== -1) { $rootScope.helpToken = 'appliancemanagementhomepage'; $rootScope.pageTitle = $translate.instant('SETTINGS_VirtualApplianceManagement'); }
                //if ($location.absUrl().indexOf('#/settings/VirtualIdentityPools/true') !== -1) { $rootScope.helpToken = 'virtualidentitypoolslandingpage'; $rootScope.pageTitle = $translate.instant('SETTINGS_VirtualIdPools'); }

                //console.log('$rootScope.helpToken:  ' + $rootScope.helpToken);
                if ($rootScope.pageTitle) {
                    $rootScope.pageTitle = $rootScope.pageTitle + ' - ' + $translate.instant('ApplicationTitle');
                    $rootScope.backgroundPageTitle = angular.copy($rootScope.pageTitle);
                };

            }

            $rootScope.$on('modalClose', function (event, args) {
                if (args) {
                    $rootScope.pageTitle = $rootScope.backgroundPageTitle;
                }
            });

            $rootScope.$on('modalOpen', function (event, args) {
                if (args) {
                    $rootScope.pageTitle = args + ' - ' + $translate.instant('ApplicationTitle');
                }
            });

            $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {
                if (previous && current.originalPath !== previous.originalPath) {
                    localStorageService.set('tabstate', {});
                }
                updatePageTemplate();

                $('.tooltip').remove();

            });

            $rootScope.$on('$locationChangeSuccess', function () {

                updatePageTemplate();

                $('.tooltip').remove();

            });

        }
    ])
    //Allow you to include HTML in your translations (Add ng-bind-html="'TOKEN'|translate|htmlSafe" to your element).
    .filter('htmlSafe', ['$sce', function ($sce) { return function (htmlCode) { return $sce.trustAsHtml(htmlCode); }; }])
;


angular.module('app-login', ['ASM.constants', 'ASM.directives', 'ASM.dataservices', 'LocalStorageModule', 'Enums', 'Clarity'])
    .config([
        '$routeProvider', function ($routeProvider) {
            $routeProvider.
                otherwise({ templateUrl: '', controller: '' });
        }
    ]).config([
        'localStorageServiceProvider', function (localStorageServiceProvider) {
            localStorageServiceProvider.prefix = 'ASM';
        }
    ])
    .config([
        '$translateProvider', 'CoreTranslations', 'AppTranslations', function ($translateProvider, CoreTranslations, AppTranslations) {
            var translations = {};
            angular.extend(translations, CoreTranslations.en);
            angular.extend(translations, AppTranslations.en);
            $translateProvider.translations('en', translations);
            $translateProvider.preferredLanguage('en');
            $translateProvider.useSanitizeValueStrategy('sanitizeParameters');
        }
    ])
   .config([
        '$httpProvider', function ($httpProvider) {

            if (!$httpProvider.defaults.headers.get) {
                $httpProvider.defaults.headers.common = {};
            }
            $httpProvider.defaults.headers.common["Cache-Control"] = "no-cache";
            $httpProvider.defaults.headers.common.Pragma = "no-cache";

            $httpProvider.interceptors.push([
                '$q', '$window', '$translate', function ($q, $window, $translate) {
                    return {
                        'request': function (config) {

                            if ($window.sessionStorage.token) {

                                //Configure defaults for global variables that don't change... use interceptors to change headers on a call by call basis
                                //$httpProvider.defaults.headers.common['JSESSIONID'] = $window.sessionStorage.token;
                                config.headers['JSESSIONID'] = $window.sessionStorage.token;
                            }

                            if (!config.data) return config;

                            var __appendRequestOptions = function (jobRequest) {
                                /// <summary>This is a private DellClarity API function.  DO NOT USE IT IN YOUR APPLICATION!</summary>
                                //$(DellClarity.Ajax.requestOptions).each(function(index, item) {
                                //    jobRequest[item.name] = item.value;
                                //});
                            };

                            var __buildJobRequest = function (requestObj, criteriaObj) {
                                var jobRequest;

                                if (requestObj) {
                                    jobRequest = { requestObj: requestObj };
                                } else {
                                    jobRequest = { requestObj: null };
                                }

                                if (criteriaObj)
                                    jobRequest.criteriaObj = criteriaObj;

                                __appendRequestOptions(jobRequest);

                                return jobRequest;
                            };


                            var data;
                            var requestObjData;

                            //if we send in explicit object to post use that, otherwise use the associated model                
                            if (config.data.requestObj) {
                                requestObjData = config.data.requestObj;
                            } else {
                                requestObjData = config.data;
                            }


                            var jobRequestObj = __buildJobRequest(requestObjData, config.data.criteriaObj);

                            config.data = JSON.stringify(jobRequestObj, function (key, value) {

                                if (config.options && config.options.customstringify) {
                                    var newValue = config.options.customstringify(this, key, value);
                                    if (newValue !== false)
                                        return newValue;
                                }

                                if (typeof value === 'function') {
                                    return value.toString();
                                } else {
                                    return value;
                                }

                            });

                            return config;
                        },
                        'response': function (response) {

                            if (response && (response.status === 403 || response.status === 401)) {
                                $window.location.href = 'login.html';
                                return null;
                            }

                            //if (response && response.data['return-code'] != null && response.data['return-code'] != 0) {
                            //    response.config.response = response.data;
                            //    return $q.reject(response.data['return-msg']);
                            //}

                            window.setTimeout(function () {
                                $(window).trigger('resize');
                            }, 500);


                            return response;
                        },
                        'responseError': function (rejection) {


                            if (rejection && (rejection.status === 403 || rejection.status === 401)) {
                                $window.location.href = 'login.html';
                            }

                            //convert all ajax errors to common error format
                            var e = {
                                error: {
                                    refId: '',
                                    code: '',
                                    severity: 'CRITICAL',
                                    message: $translate.instant('GENERIC_UnknownError'),
                                    details: ''
                                }
                            };

                            if (rejection) {

                                //if no EEMI error returned
                                if (rejection.status)
                                    e.error.code = rejection.status;
                                if (rejection.statusText)
                                    e.error.message = rejection.statusText;

                                if (rejection.data && rejection.data.ExceptionMessage) {
                                    e.error.message = rejection.data.ExceptionMessage;
                                }

                                if (rejection.data && rejection.data.Message) {
                                    e.error.message = rejection.data.Message;
                                }

                                if (rejection.data && rejection.data.MessageDetail) {
                                    e.error.details = rejection.data.MessageDetail;
                                }

                                if (rejection.data && rejection.data.error) {
                                    e.error = rejection.data.error;
                                }

                                e.error.Message = '' + e.error.code + ': ' + e.error.message;
                                e.error.refId = '' + rejection.config.url;
                                rejection.data = e.error;
                            }


                            return $q.reject(rejection);
                        }
                    };
                }
            ]);
        }
   ])
    .run([
        '$rootScope', '$route', function ($rootScope, $route) {

            var updatePageTemplate = function () {
                var pageTemplate = $route.current ? $route.current.pageTemplate || '' : '';
                $rootScope.pageTemplate = pageTemplate;
            }

            $rootScope.$on('$routeChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                updatePageTemplate();
            });

            $rootScope.$on('$locationChangeSuccess', function () {
                updatePageTemplate();
            });

        }
    ])




;

angular.module('ASM.constants', []);
    

var asm;
(function (asm) {
    var ConstantsFactory = (function () {
        function ConstantsFactory($translate) {
            this.$translate = $translate;
            this.genericSelectOption = { name: this.$translate.instant("GENERIC_select"), id: undefined };
            this.availableCMCUserRoles = [
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_Administrator"), id: "Administrator" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_PowerUser"), id: "PowerUser" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_GuestUser"), id: "GuestUser" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_None"), id: "None" }
            ];
            this.availableDeviceViews = [
                { name: this.$translate.instant('GENERIC_All'), id: '' },
                { name: this.$translate.instant('DEVICES_ElementManager'), id: 'em' },
                { name: this.$translate.instant('GENERIC_Servers'), id: 'server' },
                { name: this.$translate.instant('GENERIC_Switches'), id: 'switch' },
                //{ name: this.$translate.instant('DEVICES_VMManager'), id: 'vmm' },
                { name: this.$translate.instant('DEVICES_VMManager'), id: 'vcenter' },
                { name: this.$translate.instant('DEVICES_ScaleIO'), id: 'scaleio' }
            ];
            this.availableDeviceHealthViews = [
                { name: this.$translate.instant('GENERIC_All'), id: '' },
                { name: this.$translate.instant('GENERIC_Healthy'), id: 'green' },
                { name: this.$translate.instant('GENERIC_Warning'), id: 'yellow' },
                { name: this.$translate.instant('GENERIC_Critical'), id: 'red' },
                { name: this.$translate.instant('GENERIC_Unknown'), id: 'unknown' },
                { name: this.$translate.instant('GENERIC_ServiceMode'), id: 'servicemode' }
            ];
            this.availableiDracUserRoles = [
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_Administrator"), id: "Administrator" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_Operator"), id: "Operator" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_ReadOnly"), id: "ReadOnly" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_None"), id: "None" }
            ];
            this.availableLanRoles = [
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_User"), id: "User" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_Operator"), id: "Operator" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_Administrator"), id: "Administrator" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_NoAccess"), id: "No Access" }
            ];
            this.availableLogCategories = [
                { name: this.$translate.instant('SERVICES_Logs_Security') },
                { name: this.$translate.instant('SERVICES_Logs_Appliance_Configuration') },
                { name: this.$translate.instant('SERVICES_Logs_Template_Configuration') },
                { name: this.$translate.instant('SERVICES_Logs_Network_Configuration') },
                { name: this.$translate.instant('SERVICES_Logs_Hardware_Configuration') },
                { name: this.$translate.instant('SERVICES_Logs_Monitoring') },
                { name: this.$translate.instant('SERVICES_Logs_Deployment') },
                { name: this.$translate.instant('SERVICES_Logs_Licensing') },
                { name: this.$translate.instant('SERVICES_Logs_Miscellaneous') }
            ];
            this.availableManagedStates = [
                { name: this.$translate.instant('DEVICES_Managed'), id: "managed" },
                { name: this.$translate.instant('DEVICES_Unmanaged'), id: "unmanaged" },
                { name: this.$translate.instant('DEVICES_Reserved'), id: "reserved" }
            ];
            this.availableNicTypes = [
                { name: this.$translate.instant('NICTYPE_2port'), id: "2x10Gb" },
                //{ name: this.$translate.instant('NICTYPE_4port'), id: "4x10Gb" },
                { name: this.$translate.instant('NICTYPE_2port25Gb'), id: "2x25Gb" },
                { name: this.$translate.instant('NICTYPE_2x1Gb2x10Gb'), id: "2x10Gb,2x1Gb" }
            ];
            this.availablePowercapMeasurementTypes = [
                { name: this.$translate.instant("GENERIC_Watts"), id: "watts" },
                { name: this.$translate.instant("GENERIC_BtuHour"), id: "btuh" },
                { name: this.$translate.instant("GENERIC_PercentSymbol"), id: "percentage" }
            ];
            this.availableRedundancyPolicies = [
                { name: this.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_NoRedundancy"), id: "none" },
                { name: this.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_GridRedundancy"), id: "grid" },
                { name: this.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_PowerSupplyRedundancy"), id: "powersupply" },
                { name: this.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_RedundancyAlertingOnly"), id: "alertonly" }
            ];
            this.availableResourceTypes = [
                { name: this.$translate.instant('GENERIC_ElementManager'), id: "em" },
                { name: this.$translate.instant('GENERIC_Server'), id: "server" },
                { name: this.$translate.instant('GENERIC_Switch'), id: "switch" },
                //{ name: this.$translate.instant('DEVICES_VMManager'), id: 'vmm' },
                { name: this.$translate.instant('DEVICES_VMManager'), id: 'vcenter' },
                { name: this.$translate.instant('DEVICES_ScaleIO'), id: "scaleio" },
            ];
            this.availableCredentialTypes = [
                { name: this.$translate.instant('GENERIC_Server'), id: "server" },
                { name: this.$translate.instant('GENERIC_Switch'), id: "iom" },
                { name: this.$translate.instant('GENERIC_VCenter'), id: "vcenter" },
                { name: this.$translate.instant('GENERIC_ElementManager'), id: "em" },
                { name: this.$translate.instant('DEVICES_ScaleIO'), id: "scaleio" },
                { name: this.$translate.instant('GENERIC_OS'), id: "os" },
            ];
            this.availableStorageModeOptions = [
                { name: this.$translate.instant("CONFIGURECHASSIS_StorageOption_Single"), id: "single" },
                { name: this.$translate.instant("CONFIGURECHASSIS_StorageOption_Dual"), id: "dual" },
                { name: this.$translate.instant("CONFIGURECHASSIS_StorageOption_Joined"), id: "joined" }
            ];
            this.basicRaidOptions = [
                { name: this.$translate.instant('RAIDCONFIGURATION_raid0'), id: "raid0" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid1'), id: "raid1" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid5'), id: "raid5" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid6'), id: "raid6" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid10'), id: "raid10" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid50'), id: "raid50" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid60'), id: "raid60" }
            ];
            this.comparators = [
                { name: this.$translate.instant('COMPARATOR_Minimum'), id: "minimum" },
                { name: this.$translate.instant('COMPARATOR_Exactly'), id: "exact" }
            ];
            this.resourceStates = [
                { name: this.$translate.instant('SERVICE_DETAIL_Ready'), id: "deployed", icon: "success ci-health-square-check", color: "green" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_InProgress'), id: "inprogress", icon: "info ci-schedule-clock-o", color: "standby" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Pending'), id: "pending", icon: "info ci-schedule-clock-o", color: "standby" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Warning'), id: "warning", icon: "ci-health-warning-tri-bang text-warning", color: "yellow" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Error'), id: "error", icon: "critical ci-action-circle-remove", color: "red" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Cancelled'), id: "cancelled", icon: "danger ci-action-circle-remove-slash-o", color: "cancelled" },
                { name: this.$translate.instant('GENERIC_ServiceMode'), id: "servicemode", icon: "warning ci-action-circle-wrench", color: "servicemode" }
            ];
            this.componentStatus = [
                { name: this.$translate.instant('SERVICE_DETAIL_Deployed'), id: "complete", icon: "success ci-health-square-check", color: "green" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_InProgress'), id: "inprogress", icon: "info ci-schedule-clock-o", color: "standby" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Pending'), id: "pending", icon: "info ci-schedule-clock-o", color: "standby" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Warning'), id: "warning", icon: "ci-health-warning-tri-bang text-warning", color: "yellow" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Error'), id: "error", icon: "critical ci-action-circle-remove", color: "red" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Cancelled'), id: "cancelled", icon: "danger ci-action-circle-remove-slash-o", color: "cancelled" },
                { name: this.$translate.instant('GENERIC_ServiceMode'), id: "servicemode", icon: "warning ci-action-circle-wrench", color: "servicemode" }
            ];
            this.deviceTypes = [
                { id: 'AggregatorIOM', name: this.$translate.instant('DEVICETYPE_AggregatorIOM') },
                { id: 'BladeServer', name: this.$translate.instant('DEVICETYPE_BladeServer') },
                { id: 'ChassisFX', name: this.$translate.instant('DEVICETYPE_ChassisFX') },
                { id: 'ChassisM1000e', name: this.$translate.instant('DEVICETYPE_Chassis') },
                { id: 'ChassisVRTX', name: this.$translate.instant('DEVICETYPE_VRTX') },
                { id: 'compellent', name: this.$translate.instant('DEVICETYPE_Compellent') },
                { id: 'dellswitch', name: this.$translate.instant('DEVICETYPE_DellSwitch') },
                { id: 'ciscoswitch', name: this.$translate.instant('DEVICETYPE_CiscoSwitch') },
                { id: 'em', name: this.$translate.instant('DEVICETYPE_EM') },
                { id: 'emcvnx', name: this.$translate.instant('DEVICETYPE_EMCVNX') },
                { id: 'emcunity', name: this.$translate.instant('DEVICETYPE_EMCUnity') },
                { id: 'equallogic', name: this.$translate.instant('DEVICETYPE_Equallogic') },
                { id: 'FXIOM', name: this.$translate.instant('DEVICETYPE_FXIOM') },
                { id: 'FXServer', name: this.$translate.instant('DEVICETYPE_FXServer') },
                { id: 'genericswitch', name: this.$translate.instant('DEVICETYPE_GenericSwitch') },
                { id: 'MXLIOM', name: this.$translate.instant('DEVICETYPE_MXLIOM') },
                { id: 'netapp', name: this.$translate.instant('DEVICETYPE_NetApp') },
                { id: 'RackServer', name: this.$translate.instant('DEVICETYPE_RackServer') },
                { id: 'scvmm', name: this.$translate.instant('DEVICETYPE_SCVMM') },
                { id: 'Server', name: this.$translate.instant('DEVICETYPE_Server') },
                { id: 'storage', name: this.$translate.instant('DEVICETYPE_Storage') },
                { id: 'TowerServer', name: this.$translate.instant('DEVICETYPE_TowerServer') },
                { id: 'unknown', name: this.$translate.instant('DEVICETYPE_Unknown') },
                { id: 'vcenter', name: this.$translate.instant('DEVICETYPE_VCenter') },
                { id: 'vm', name: this.$translate.instant('DEVICETYPE_VM') },
                { id: 'scaleio', name: this.$translate.instant('DEVICETYPE_ScaleIO') },
            ];
            this.deviceState = [
                { id: 'available', name: this.$translate.instant('DEVICESTATE_Available') },
                { id: 'deployed', name: this.$translate.instant('DEVICESTATE_Deployed') },
                { id: 'unknown', name: this.$translate.instant('DEVICESTATE_Unknown') },
                { id: 'copying', name: this.$translate.instant('DEVICESTATE_Copying') },
                { id: 'error', name: this.$translate.instant('DEVICESTATE_Error') },
                { id: 'pending', name: this.$translate.instant('DEVICESTATE_Pending') },
                { id: 'updating', name: this.$translate.instant('DEVICESTATE_Updating') },
                { id: 'deploying', name: this.$translate.instant('DEVICESTATE_Deploying') },
                { id: 'poweringoff', name: this.$translate.instant('DEVICESTATE_PoweringOff') },
                { id: 'poweringon', name: this.$translate.instant('DEVICESTATE_PoweringOn') },
                { id: 'reserved', name: this.$translate.instant('DEVICESTATE_Reserved') },
                { id: 'unmanaged', name: this.$translate.instant('DEVICESTATE_Unmanaged') },
                { id: 'online', name: this.$translate.instant('DEVICESTATE_Online') }
            ];
            this.diskTypes = [
                { name: this.$translate.instant('DISKTYPES_Any'), id: "any" },
                { name: this.$translate.instant('DISKTYPES_First'), id: "first" },
                { name: this.$translate.instant('DISKTYPES_Last'), id: "last" },
                { name: this.$translate.instant('DISKTYPES_Hdd'), id: "requirehdd" },
                { name: this.$translate.instant('DISKTYPES_Ssd'), id: "requiressd" }
            ];
            this.firmwareCriticality = [
                { name: this.$translate.instant('SETTINGS_Repositories_Urgent'), id: "urgent" },
                { name: this.$translate.instant('SETTINGS_Repositories_Recommended'), id: "recommended" },
                { name: this.$translate.instant('SETTINGS_Repositories_Optional'), id: "optional" }
            ];
            this.firmwareStatus = [
                { id: 'unknown', name: this.$translate.instant('DEVICES_CompliantStatus_Unknown'), icon: "unknown" },
                { id: 'updaterequired', name: this.$translate.instant('DEVICES_CompliantStatus_UpdateRequired'), icon: "yellow" },
                { id: 'compliant', name: this.$translate.instant('DEVICES_CompliantStatus_Compliant'), icon: "green" },
                { id: 'noncompliant', name: this.$translate.instant('DEVICES_CompliantStatus_NonCompliant'), icon: "yellow" },
                { id: 'updating', name: this.$translate.instant('DEVICES_Updating'), icon: "blue" },
                { id: 'updatefailed', name: this.$translate.instant('DEVICES_UpdateFailed'), icon: "red" },
            ];
            this.logSeverities = [
                { name: this.$translate.instant("LOGS_RESOURCE_SEVERITIES_Healthy"), id: "success" },
                { name: this.$translate.instant("LOGS_RESOURCE_SEVERITIES_Critical"), id: "critical" },
                { name: this.$translate.instant("LOGS_RESOURCE_SEVERITIES_Warning"), id: "warning" },
                { name: this.$translate.instant("LOGS_RESOURCE_SEVERITIES_Info"), id: "info" }
            ];
            this.repositoryImageTypes = [
                { name: this.$translate.instant('SETTINGS_Repositories_imagetype_vmware'), id: "vmware_esxi" },
                //{ name: this.$translate.instant('SETTINGS_Repositories_imagetype_redhat'), id: "redhat" },
                { name: this.$translate.instant('SETTINGS_Repositories_imagetype_redhat7'), id: "redhat7" }
            ];
            this.resourceStateFilter = [
                { name: this.$translate.instant('GENERIC_All'), id: '' },
                { name: this.$translate.instant('DEVICES_Managed'), id: 'managed' },
                { name: this.$translate.instant('DEVICES_Unmanaged'), id: 'unmanaged' },
                { name: this.$translate.instant('DEVICES_Reserved'), id: 'reserved' }
            ];
            this.serviceHealths = [
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Healthy'), id: "green", alias: this.$translate.instant("GENERIC_Healthy") },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Warning'), id: "yellow", alias: this.$translate.instant("GENERIC_Warning") },
                { name: this.$translate.instant('GENERIC_Critical'), id: "red", alias: this.$translate.instant("GENERIC_Critical") },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Pending'), id: "pending", alias: this.$translate.instant("GENERIC_Pending") },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_InProgress'), id: "unknown", alias: this.$translate.instant("GENERIC_InProgress") },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Cancelled'), id: "cancelled", alias: this.$translate.instant("GENERIC_Cancelled") },
                { name: this.$translate.instant('GENERIC_Incomplete'), id: "incomplete", alias: this.$translate.instant("GENERIC_Incomplete") },
                { name: this.$translate.instant('GENERIC_ServiceMode'), id: "servicemode", alias: this.$translate.instant("GENERIC_ServiceMode") }
            ];
            this.serviceStates = [
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Error'), id: "Error", alias: 1, health: "red" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Healthy'), id: "Healthy", alias: 2, health: "green" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_InProgress'), id: "In Progress", alias: 3, health: "unknown" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Pending'), id: "Pending", alias: 4, health: "pending" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Warning'), id: "Warning", alias: 5, health: "yellow" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Cancelled'), id: "Cancelled", alias: 6, health: "cancelled" },
                { name: this.$translate.instant('GENERIC_ServiceMode'), id: "Service Mode", alias: 7 },
            ];
            this.serviceTypes = [
                { name: this.$translate.instant("SERVICE_ADD_EXISTING_Service_Types_Hyperconverged"), id: "hyperconverged" },
                { name: this.$translate.instant("SERVICE_ADD_EXISTING_Service_Types_ComputeOnly"), id: "computeonly" },
                { name: this.$translate.instant("SERVICE_ADD_EXISTING_Service_Types_StorageOnly"), id: "storageonly" }
            ];
            this.spanningTreeMode = [
                { name: this.$translate.instant("DEFINE_UPLINKS_RSTP"), id: "1" },
                { name: this.$translate.instant("DEFINE_UPLINKS_MSTP"), id: "2" },
                { name: this.$translate.instant("DEFINE_UPLINKS_PVST"), id: "3" },
                { name: this.$translate.instant("DEFINE_UPLINKS_None"), id: "4" }
            ];
            this.staticIPState = [
                { id: 'inuse', name: this.$translate.instant('NETWORKSSTATE_InUse') },
                { id: 'available', name: this.$translate.instant('NETWORKSSTATE_Available') }
            ];
            this.staticIPAddressDetailsViews = [
                { id: "all", name: this.$translate.instant('NETWORKSVIEW_All') },
                { id: "inuse", name: this.$translate.instant('NETWORKSVIEW_InUse') },
                { id: "available", name: this.$translate.instant('NETWORKSVIEW_Available') }
            ];
            this.ipAddressRangeRole = [
                { id: 'sdsorsdc', name: this.$translate.instant('NETWORKS_Edit_IPAddressRangeRole_SDSorSDC') },
                { id: 'sdsonly', name: this.$translate.instant('NETWORKS_Edit_IPAddressRangeRole_SDSOnly') },
                { id: 'sdconly', name: this.$translate.instant('NETWORKS_Edit_IPAddressRangeRole_SDCOnly') }
            ];
        }
        return ConstantsFactory;
    }());
    asm.ConstantsFactory = ConstantsFactory;
})(asm || (asm = {}));
angular.module('ASM.constants').service('constants', ['$translate', function ($translate) {
        return new asm.ConstantsFactory($translate);
    }]);
//# sourceMappingURL=constants.js.map
angular.module('ASM.constants')
    .constant('CoreTranslations',
    {
        en: {
            GENERIC_AC: 'AC',
            GENERIC_About: 'About',
            GENERIC_Acknowledge: 'Acknowledge',
            GENERIC_Action: 'Action',
            GENERIC_Actions: 'Actions',
            GENERIC_Active: 'Active',
            GENERIC_Activity: 'Activity',
            GENERIC_Add: 'Add',
            GENERIC_Address: 'Address',
            GENERIC_Address1: 'Address Line 1',
            GENERIC_Address2: 'Address Line 2',
            GENERIC_Address3: 'Address Line 3',
            GENERIC_AnotherAction: 'Another Action',
            GENERIC_Aisle: 'Aisle',
            GENERIC_alert: 'alert',
            GENERIC_Alert: 'Alert',
            GENERIC_Alerts: 'Alerts',
            GENERIC_All: 'All',
            GENERIC_AlternateEmail: 'Alternate Email',
            GENERIC_Amps: 'Amps',
            GENERIC_Application: 'Application',
            GENERIC_Apply: 'Apply',
            GENERIC_Array: 'Array',
            GENERIC_Arrays: 'Arrays',
            GENERIC_AssetTag: 'Asset Tag',
            GENERIC_AssetServiceTag: 'Asset/Service Tag',
            GENERIC_Assign: 'Assign',
            GENERIC_Assigned: 'Assigned',
            GENERIC_Attribute: 'Attribute',
            GENERIC_AvailableMemory: 'Available Memory',
            GENERIC_Available: 'Available',
            GENERIC_AvailableActions: 'Available Actions',
            GENERIC_Average: 'Average',
            GENERIC_Back: 'Back',
            GENERIC_Backplane: 'Backplane',
            GENERIC_Bandwidth: 'Bandwidth',
            GENERIC_Baseline: 'Baseline',
            GENERIC_Baselines: 'Baselines',
            GENERIC_BiWeekly: 'Bi-Weekly',
            GENERIC_Bottom: 'Bottom',
            GENERIC_Browse: 'Browse',
            GENERIC_BtuHour: "BTU/h",
            GENERIC_Cancel: 'Cancel',
            GENERIC_Cancelled: 'Cancelled',
            GENERIC_Capacity: 'Capacity',
            GENERIC_Category: 'Category',
            GENERIC_Chassis: 'Chassis',
            GENERIC_CheckUpdates: 'Check for Updates',
            GENERIC_CityTown: 'City/Town',
            GENERIC_City: 'City',
            GENERIC_Clear: 'Clear',
            GENERIC_ClearLogs: 'Clear Logs',
            GENERIC_Close: 'Close',
            GENERIC_Cluster: 'Cluster',
            GENERIC_Command: 'Command',
            GENERIC_Community: 'Community',
            GENERIC_Completed: 'Completed',
            GENERIC_Compliance: 'Compliance',
            GENERIC_Component: 'Component',
            GENERIC_Components: 'Components',
            GENERIC_Compute: 'Compute',
            GENERIC_Configuration: 'Configuration',
            GENERIC_ConfigureDeploy: 'Configure and Deploy',
            GENERIC_Configure: 'Configure',
            GENERIC_Confirm: 'Confirm',
            GENERIC_confirm: 'confirm',
            GENERIC_Console: 'Console',
            GENERIC_Connect: 'Connect',
            GENERIC_Connections: 'Connections',
            GENERIC_Consistent: 'Consistent',
            GENERIC_ContactInfo: 'Contact Info',
            GENERIC_Continue: 'Continue',
            GENERIC_Controller: 'Controller',
            GENERIC_CopywriteStatement: 'Copyright Â© {{year}} Dell Inc. or its subsidiaries. All Rights Reserved.',
            GENERIC_CPU: 'CPU',
            GENERIC_cpus: 'CPUs',
            GENERIC_create: 'create',
            GENERIC_Create: 'Create',
            GENERIC_Created: 'Created',
            GENERIC_CreatedBy: 'Created By',
            GENERIC_CreatedDate: 'Created Date',
            GENERIC_CreateNew: 'Create New',
            GENERIC_CreatedOn: 'Created On',
            GENERIC_Critical: 'Critical',
            GENERIC_Criticality: 'Criticality',
            GENERIC_CriticalErrors: 'Critical Errors',
            GENERIC_Country: 'Country',
            GENERIC_CountryTerritory: 'Country or Territory',
            GENERIC_Current: 'Current',
            GENERIC_CurrentVersion: 'Current Version',
            GENERIC_CurrentUpdateStatus: 'Current Update Status',
            GENERIC_Daily: 'Daily',
            GENERIC_Database: 'Database',
            GENERIC_DataCenter: 'Data Center',
            GENERIC_Datastore: 'Datastore',
            GENERIC_Date: 'Date',
            GENERIC_DateInstalled: 'Date Installed',
            GENERIC_DateUpdated: 'Date Updated',
            GENERIC_DateTime: 'Date and Time',
            GENERIC_Day_: 'day',
            GENERIC_Days_: 'days',
            GENERIC_DayOfWeek_Sunday: 'Sunday',
            GENERIC_DayOfWeek_Monday: 'Monday',
            GENERIC_DayOfWeek_Tuesday: 'Tuesday',
            GENERIC_DayOfWeek_Wednesday: 'Wednesday',
            GENERIC_DayOfWeek_Thursday: 'Thursday',
            GENERIC_DayOfWeek_Friday: 'Friday',
            GENERIC_DayOfWeek_Saturday: 'Saturday',
            GENERIC_DC: 'DC',
            GENERIC_Debug: 'Debug',
            GENERIC_Default: 'Default',
            GENERIC_Delete: 'Delete',
            GENERIC_delete: 'delete',
            GENERIC_DellNews: 'Dell News',
            GENERIC_Deploy: 'Deploy',
            GENERIC_Deployed: 'Deployed',
            GENERIC_DeployedBy: 'Deployed By',
            GENERIC_DeployedOn: 'Deployed On',
            GENERIC_Device: 'Device',
            GENERIC_Devices: 'Devices',
            GENERIC_Description: 'Description',
            GENERIC_Destination: 'Destination',
            GENERIC_Detail: 'Detail',
            GENERIC_Details: 'Details',
            GENERIC_ResourceName: 'Resource Name',
            GENERIC_ResourceType: 'Resource Type',
            GENERIC_ResetPassword: 'Reset Password',
            GENERIC_Disable: 'Disable',
            GENERIC_Disabled: 'Disabled',
            GENERIC_Discover: 'Discover',
            GENERIC_Discovered: 'Discovered',
            GENERIC_Disk: 'Disk',
            GENERIC_Disks: 'Disks',
            GENERIC_Discovering: 'Discovering',
            GENERIC_Display: 'Display',
            GENERIC_Domain: 'Domain',
            GENERIC_Drives: 'Drives',
            GENERIC_Edit: 'Edit',
            GENERIC_ElementManager: 'Element Manager',
            GENERIC_Email: 'Email',
            GENERIC_EmailAddress: 'Email Address',
            GENERIC_EmptyTable: 'There are no items to display.',
            GENERIC_Enable: 'Enable',
            GENERIC_Enabled: 'Enabled',
            GENERIC_Enclosures: 'Enclosures',
            GENERIC_Enclosure: 'Enclosure',
            GENERIC_EndTime: 'End Time',
            GENERIC_Environmental: 'Environmental',
            GENERIC_Error: 'Error',
            GENERIC_estimatedtime: 'estimated time:',
            GENERIC_Events: 'Events',
            GENERIC_Expand: 'Expand',
            GENERIC_Expire: 'Expire',
            GENERIC_Expires: 'Expires',
            GENERIC_Export: 'Export',
            GENERIC_ExportAll: 'Export All',
            GENERIC_Fabric: 'Fabric',
            GENERIC_Facility: 'Facility',
            GENERIC_Failed: 'Failed',
            GENERIC_FileName: 'File Name',
            GENERIC_ClearFilter: 'Clear All',
            GENERIC_Filter: 'Filter',
            GENERIC_FilterResults: 'Filter',
            GENERIC_Finish: 'Finish',
            GENERIC_FirstName: 'First Name',
            GENERIC_FirmwareVersion: 'Firmware Version',
            GENERIC_FirmwareStatus: 'Firmware Status',
            GENERIC_FirmwareSoftwareCompliance: 'Firmware/Software Compliance',
            GENERIC_Firmware: 'Firmware',
            GENERIC_Free: 'Free',
            GENERIC_GB: 'GB',
            GENERIC_Gateway: 'Gateway',
            GENERIC_General: 'General',
            GENERIC_GeneralInfo: 'General Info',
            GENERIC_Group: "Group",
            GENERIC_Growth: 'Growth',
            GENERIC_Good: 'Good',
            GENERIC_Health: 'Health',
            GENERIC_Healthy: 'Healthy',
            GENERIC_Help: 'Help',
            GENERIC_HideDetails: 'Hide Details',
            GENERIC_Host: 'Host',
            GENERIC_Hosts: 'Hosts',
            GENERIC_HostName: 'Host Name',
            GENERIC_Hours: 'Hours',
            GENERIC_ID: 'ID',
            GENERIC_Identify: 'Identify',
            GENERIC_Immediate: 'Immediate',
            GENERIC_Import: 'Import',
            GENERIC_Incomplete: 'Incomplete',
            GENERIC_Index: 'Index',
            GENERIC_Information: 'Information',
            GENERIC_Informational: 'Informational',
            GENERIC_InProgress: 'In Progress',
            GENERIC_Instances: 'Instances',
            GENERIC_InUse: 'In Use',
            GENERIC_Install: 'Install',
            GENERIC_InstallOptions: 'Install Options',
            GENERIC_InService: 'In Service',
            GENERIC_Interconnects: 'Interconnects',
            GENERIC_IO: 'I/O',
            GENERIC_IpAddress: 'IP Address',
            GENERIC_IPMI: 'IPMI',
            GENERIC_IssuedTo: 'Issued To',
            GENERIC_IssuedBy: 'Issued By',
            GENERIC_Job: 'Job',
            GENERIC_Jobs: 'Jobs',
            GENERIC_K: 'K',
            GENERIC_Last: 'Last',
            GENERIC_LastName: 'Last Name',
            GENERIC_Leader: 'Leader',
            GENERIC_Learn: 'Learn',
            GENERIC_LearnMore: 'Learn More',
            GENERIC_LicensedFor: 'Licensed for',
            GENERIC_List: 'List',
            GENERIC_Loading: 'Loading...',
            GENERIC_LoadingResources: 'Loading Resource(s)',
            GENERIC_LoadingPleaseWait: 'Loading... Please Wait.',
            GENERIC_LocalUser: 'Local User',
            GENERIC_Location: 'Location',
            GENERIC_location: 'Location',
            GENERIC_Login: 'Log In',
            GENERIC_LoginDateTime: 'Login Date and Time',
            GENERIC_LoginFailed: 'The specified User Name and/or password is incorrect. Make sure the correct login ID and password are entered and retry the operation.',
            GENERIC_NoConnection: 'Unable to connect to node. Verify the network connection and then retry the operation.',
            GENERIC_NoUpdate: 'No Updates',
            GENERIC_Logout: 'Logout',
            GENERIC_Logs: 'Logs',
            GENERIC_Major: 'Major',
            GENERIC_Manufacturer: 'Manufacturer',
            GENERIC_Mappings: 'Mappings',
            GENERIC_Mbps: 'Mbps',
            GENERIC_Memory: 'Memory (GB)',
            GENERIC_Message: 'Message',
            GENERIC_Min: 'Min',
            GENERIC_Model: 'Model',
            GENERIC_Monthly: 'Monthly',
            GENERIC_More: 'More',
            GENERIC_MoreActions: 'More Actions',
            GENERIC_NA: 'NA',
            GENERIC_Name: 'Name',
            GENERIC_Network: 'Network',
            GENERIC_Networking: 'Networking',
            GENERIC_Networks: 'Networks',
            GENERIC_New: 'New',
            GENERIC_New_: 'New...',
            GENERIC_Next: 'Next',
            GENERIC_No: 'No',
            GENERIC_NoPassword: 'No Password',
            GENERIC_None: 'None',
            GENERIC_Note: 'Note',
            GENERIC_Notes: 'Notes',
            GENERIC_FeatureNotImplemented: 'This feature is not yet implemented.',
            GENERIC_Offline: 'Offline',
            GENERIC_OK: 'OK',
            GENERIC_on: 'on',
            GENERIC_On_: 'On',
            GENERIC_Online: 'Online',
            GENERIC_Onboarding: 'Onboarding',
            GENERIC_optional_: '(optional)',
            GENERIC_OperatingSystem: 'Operating System',
            GENERIC_DellSupportAssistTickets: 'Dell Support Assist Tickets',
            GENERIC_RecentDellSupportAssistTickets: 'Recent Dell Support Assist Tickets',
            GENERIC_Overview: 'Overview',
            GENERIC_Password: 'Password',
            GENERIC_PasswordRequired: 'Password Required',
            GENERIC_ConfirmPasswordRequired: 'Confirm Password Required',
            GENERIC_Path: 'Path',
            GENERIC_Peak: 'Peak',
            GENERIC_Pending: 'Pending',
            GENERIC_PendingDelete: 'Pending Delete',
            GENERIC_PercentSymbol: '%',
            GENERIC_Phone: 'Phone',
            GENERIC_PhoneNumber: 'Phone Number',
            GENERIC_Port: 'Port',
            GENERIC_Ports: 'Ports',
            GENERIC_Power: 'Power',
            GENERIC_Present: 'Present',
            GENERIC_Print: 'Print',
            GENERIC_Product: 'Product',
            GENERIC_Progress: 'Progress',
            GENERIC_Protocol: 'Protocol',
            GENERIC_Proxy: 'Proxy',
            GENERIC_Purpose: 'Purpose',
            GENERIC_PWToolTip: 'Click and hold to show password',
            GENERIC_Rack: 'Rack',
            GENERIC_Reading: 'Reading',
            GENERIC_Recheck: 'Recheck',
            GENERIC_Rediscover: 'Rediscover',
            GENERIC_Register: 'Register',
            GENERIC_ReleaseNotes: 'Release Notes',
            GENERIC_Relevancy: 'Relevancy',
            GENERIC_Refresh: 'Refresh',
            GENERIC_RememberMe: 'Remember Me',
            GENERIC_Remove: 'Remove',
            GENERIC_RepositoryName: 'Repository Name',
            GENERIC_Repositories: 'Repositories',
            GENERIC_Repository: 'Repository',
            GENERIC_Required_: 'REQUIRED',
            GENERIC_RequiredField: 'Required Field',
            GENERIC_Restart: 'Restart',
            GENERIC_Restore: 'Restore',
            GENERIC_Retry: 'Retry',
            GENERIC_Role: 'Role',
            GENERIC_Roles: 'Roles',
            GENERIC_Room: 'Room',
            GENERIC_Running: 'Running',
            GENERIC_RunReport: 'Run Report',
            GENERIC_Save: 'Save',
            GENERIC_SaveAndContinue: 'Save and Continue',
            GENERIC_SaveAsDraft: 'Save as Draft',
            GENERIC_SaveSettings: 'Save Settings',
            GENERIC_ScaleIOGateway: 'ScaleIO Gateway',
            GENERIC_OS: 'OS',
            GENERIC_Scheduled: 'Scheduled',
            GENERIC_SCVMM: 'SCVMM',
            GENERIC_Search: 'Search',
            GENERIC_SearchResults: 'Search Results',
            GENERIC_Secured: 'Secured',
            GENERIC_select: 'Select',
            GENERIC_Select_: '--Select--',
            GENERIC_Server: 'Node',
            GENERIC_Servers: 'Nodes',
            GENERIC_ServerInformation: 'Node Information',
            GENERIC_ServerName: 'Node Name',
            GENERIC_ServerPools: 'Node Pools',
            GENERIC_ServerPool: 'Node Pool',
            GENERIC_Service: 'Service',
            GENERIC_Services: 'Services',
            GENERIC_ServiceHealth: 'Service Health',
            GENERIC_ServiceInformation: 'Service Information',
            GENERIC_ServiceMode: 'Service Mode',
            GENERIC_ServiceName: 'Service Name',
            GENERIC_ServiceSettings: 'Service Settings',
            GENERIC_ServiceTag: 'Service Tag',
            GENERIC_Settings: 'Settings',
            GENERIC_Severity: 'Severity',
            GENERIC_Shutdown: 'Shutdown',
            GENERIC_Size: 'Size',
            GENERIC_Slot: 'Slot',
            GENERIC_Source: 'Source',
            GENERIC_Speed: 'Speed',
            GENERIC_stars: '********',
            GENERIC_State: 'State',
            GENERIC_StartDate: 'Start Date',
            GENERIC_StartTime: 'Start Time',
            GENERIC_StateProvinceRegion: 'State / Province / Region',
            GENERIC_Statistic: 'Statistic',
            GENERIC_Status: 'Status',
            GENERIC_Storage: 'Storage',
            GENERIC_StorageInformation: 'Storage Information',
            GENERIC_Submit: 'Submit',
            GENERIC_Subnet: 'Subnet',
            GENERIC_Success: 'Success',
            GENERIC_Summary: 'Summary',
            GENERIC_Support: 'Support',
            GENERIC_SupportAssist: 'Support Assist',
            GENERIC_Switch: 'Switch',
            GENERIC_Switches: 'Switches',
            GENERIC_SystemVersion: 'System Version',
            GENERIC_TB: 'TB',
            GENERIC_Tags: 'Tags',
            GENERIC_Temperature: 'Temperature',
            GENERIC_Test: 'Test',
            GENERIC_Time: 'Time',
            GENERIC_TimeZone: 'Time Zone',
            GENERIC_ToggleDropdown: 'Toggle Dropdown',
            GENERIC_Top: 'Top',
            GENERIC_TopOffenders: 'Top Offenders',
            GENERIC_Total: 'Total',
            GENERIC_TotalUsage: 'Total Usage',
            GENERIC_Troubleshoot: 'Troubleshoot',
            GENERIC_Type: 'Type',
            GENERIC_Unknown: 'Unknown',
            GENERIC_UnknownError: 'Unknown Error',
            GENERIC_unmanage: 'Unmanage',
            GENERIC_Unallocated: 'Unallocated',
            GENERIC_Unsuccessful: 'Unsuccessful',
            GENERIC_UpdatedBy: 'Updated By',
            GENERIC_UpdatedDate: 'Updated Date',
            GENERIC_UpdatedOn: 'Updated On',
            GENERIC_Update: 'Update',
            GENERIC_Updated: 'Updated',
            GENERIC_UpdateRequiredFields: '*Update Required Fields',
            GENERIC_UpdateStatus: 'Update Status',
            GENERIC_UpdateFirmware: 'Update Firmware',
            GENERIC_Upload: 'Upload',
            GENERIC_UploadConfigure: 'Upload and Configure',
            GENERIC_Urgent: 'Urgent',
            GENERIC_Used: 'Used',
            GENERIC_User: 'User',
            GENERIC_UserNameRequired: 'Username required',
            GENERIC_UserDetails: 'User Details',
            GENERIC_Users: 'Users',
            GENERIC_UserRoles: 'User and Roles',
            GENERIC_UsersRolesDirectoryService: 'Users, Roles, and Directory Service',
            GENERIC_UserNameEmail: 'User Name (email)',
            GENERIC_UserName: 'User Name',
            GENERIC_Utilization: 'Utilization',
            GENERIC_Value: 'Value',
            GENERIC_ValidFrom: 'Valid From',
            GENERIC_ValidTo: 'Valid To',
            GENERIC_Validate: 'Validate',
            GENERIC_VCenter: 'vCenter',
            GENERIC_Vendor: 'Vendor',
            GENERIC_Version: 'Version',
            GENERIC_Version_: 'version',
            GENERIC_View: 'View',
            GENERIC_ViewAll: 'View All',
            GENERIC_ViewLess: 'View Less',
            GENERIC_ViewBy: 'View By',
            GENERIC_View_By: 'View By:',
            GENERIC_ViewDetails: 'View Details',
            GENERIC_VirtualMachine: 'Virtual Machine',
            GENERIC_VLANS: 'VLANS',
            GENERIC_Volts: 'Volts',
            GENERIC_Volume: 'Volume',
            GENERIC_Volumes: 'Volumes',
            GENERIC_Warning: 'Warning',
            GENERIC_WarningAt: 'Warning at',
            GENERIC_Warnings: 'Warnings',
            GENERIC_Watts: 'Watts',
            GENERIC_Welcome: 'Welcome',
            GENERIC_Weekly: 'Weekly',
            GENERIC_Yes: 'Yes',
            GENERIC_ZipPostalCode: 'Zip/Postal Code',

            ERROR_Title_Success: 'Success!',
            ERROR_Title_Warning: 'Warning:',
            ERROR_Title_Critical: 'Critical Error:',
            ERROR_Title_Note: 'Note:',
            ERROR_Title_Multiple: 'Warning: Multiple Alerts',

            NAVIGATION_Home: 'Home',
            NAVIGATION_Services: 'Services',
            NAVIGATION_Templates: 'Templates',
            NAVIGATION_SampleTemplates: 'Sample Templates',
            NAVIGATION_MyTemplates: 'My Templates',
            NAVIGATION_Resources: 'Resources',
            NAVIGATION_AllResources: 'All Resources',
            NAVIGATION_ServerPools: 'Node Pools',
            NAVIGATION_Settings: 'Settings',
            NAVIGATION_Settings_ApplicationLogs: 'Application Logs',
            NAVIGATION_Settings_BackupRestore: 'Backup and Restore',
            NAVIGATION_Settings_CredentialsManagement: 'Credentials Management',
            NAVIGATION_Settings_GettingStarted: 'Getting Started',
            NAVIGATION_Settings_Networks: 'Networks',
            NAVIGATION_Settings_Repositories: 'Repositories',
            NAVIGATION_Settings_Users: 'Users',
            NAVIGATION_Settings_VirtualApplianceManagement: 'Virtual Appliance Management',

            VALIDATIONMESSAGES_creditcard: 'Please enter a valid credit card number.',
            VALIDATIONMESSAGES_date: 'Please enter a valid date.',
            VALIDATIONMESSAGES_dateISO: 'Please enter a valid date (ISO).',
            VALIDATIONMESSAGES_digits: 'Please enter only digits.',
            VALIDATIONMESSAGES_email: 'Please enter a valid email address.',
            VALIDATIONMESSAGES_equalTo: 'Please enter the same value again.',
            VALIDATIONMESSAGES_ipaddress: 'Please enter a valid IP Address.',
            VALIDATIONMESSAGES_max: 'Please enter a value less than or equal to {0}.',
            VALIDATIONMESSAGES_maxlength: 'Please enter no more than {{length}} characters.',
            VALIDATIONMESSAGES_min: 'Please enter a value greater than or equal to {0}.',
            VALIDATIONMESSAGES_minlength: 'Please enter at least {0} characters.',
            VALIDATIONMESSAGES_number: 'Please enter a valid number.',
            VALIDATIONMESSAGES_range: 'Please enter a value between {0} and {1}.',
            VALIDATIONMESSAGES_rangelength: 'Please enter a value between {{min}} and {{max}} characters long.',
            VALIDATIONMESSAGES_remote: 'Please fix this field.',
            VALIDATIONMESSAGES_required: 'This field is required.',
            VALIDATIONMESSAGES_url: 'Please enter a valid URL.',
            VALIDATIONMESSAGES_maxNumber: 'Please enter a number less than or equal to {{max}}',
            VALIDATIONMESSAGES_minNumber: 'Please enter a number greater than or equal to {{min}}'

        }
    });
angular.module('ASM.constants')
.constant('Enums', {});

angular.module('ASM.constants')
    .constant('AppTranslations',
    {

        en: {


            //Please see CoreTranslations for generic terms.
            'ApplicationTitle': 'VxFlex Manager',
            'ApplicationWelcome': 'Welcome to Dell EMC VxFlex Manager',
            'Version': 'Ludwig Version 3.0.0',
            'VersionName': 'Dell EMC VxFlex Manager - Ludwig Version 3.0.0',
            'Patents': '',

            'STARTSCREEN_USERNAME_LABEL': 'User Name',
            'STARTSCREEN_PASSWORD_LABEL': 'Password',
            'STARTSCREEN_SIGN_IN_LABEL': 'Sign In',
            'STARTSCREEN_DOMAIN_LABEL': 'Domain',
            'DELL_COPYRIGHT': 'Copyright Â© 2018 Dell Inc. or its subsidiaries.  All Rights Reserved.',
            
            'MENU_DeployNewService': 'New Service',
            'MENU_Reports': 'Reports',
            'MENU_GettingStarted': 'Getting Started',
            'MENU_CommonTasks': 'Common Tasks',

            'WIZARD_Step': 'Step {{current}} of {{total}}',

            'INDEX_DeployNewService': 'Deploy New Service',
            'INDEX_CreateTemplate': 'Create Template',
            'INDEX_AddExistingService': 'Add Existing Service',
            'INDEX_Logout': ' Logout',
            'INDEX_Settings': ' Settings',
            'INDEX_NoResultsFound': 'Sorry, no results were found.',
            'INDEX_SearchResults': 'Search Results',
            'INDEX_ResultsFor': 'Results for',
            'INDEX_Searching': 'Searching',
            'INDEX_ViewAllResults': 'View All Results',
            'INDEX_STORAGE_BANNER_Title': 'You have used {{percentage}}% of the available storage on \'{{partitionName}}\'.</strong>',
            'INDEX_STORAGE_BANNER_Description': 'If appliance partitions reach 100% utilization, appliance functionality such as deployments, updates and repository uploads could be impacted. Remove content from partition to make more space available.',
            'INDEX_STORAGE_BANNER_LearnMore': 'Learn More',
            'INDEX_STORAGE_BANNER_DontShowAgain': 'Do not show again',
            'INDEX_Banner_Actions_Actions': 'Actions',
            'INDEX_Banner_Actions_View': 'View Details',
            'INDEX_Banner_Actions_Hide': 'Hide',
            'INDEX_Banner_Actions_Dismiss': 'Dismiss 30 days',
            'INDEX_Banner_Actions_AnewRCMversionisavailablefordownload': 'A new RCM version is available for download.',
            'INDEX_Banner_Actions_Viewfordetails': 'View Details',
            'INDEX_Banner_Actions_VirtualAppliance_description': 'A new version of the VxFlex Manager Appliance is available for download and install.',
            'INDEX_Banner_Actions_VirtualAppliance_': '',
            'INDEX_Banner_Actions_VirtualAppliance_': '',
            'INDEX_Banner_Actions_': '',
            'INDEX_Banner_Actions_': '',
            'INDEX_Banner_Actions_': '',
            'INDEX_Banner_Actions_': '',
            'INDEX_Banner_Actions_': '',
            'INDEX_Banner_Actions_': '',
            'INDEX_Banner_Actions_': '',
            'INDEX_Banner_Actions_': '',
            'INDEX_Banner_Actions_': '',
            'INDEX_': '',

            'SEARCHRESULTS_NoResultsFoundFor': 'Sorry, no results were found for',
            'SEARCHRESULTS_BackToPrevPage': 'Back to Previous Page',

            'SEARCHRESULTS_ResourceSubcategory': 'Resource Sub-category',
            'SEARCHRESULTS_OSHostname': 'OS Hostname',
            'SEARCHRESULTS_ManagementIP': 'Management IP',
            'SEARCHRESULTS_Model': 'Model',

            'SEARCHRESULTS_ResourcesEmptyTable': 'No Resources found',
            'SEARCHRESULTS_ServicesEmptyTable': 'No Services found',
            'SEARCHRESULTS_TemplatesEmptyTable': 'No Templates found',

            'APPLICATION_Status': 'Application Status: ',
            'APPLICATION_Status_Ready': 'VxFlex Manager available.',
            'APPLICATION_Status_Notready': 'VxFlex Manager updating...',
            'APPLICATION_Status_Restarting': 'VxFlex Manager restarting...',
            'APPLICATION_Status_Upgrading': 'VxFlex Manager upgrading...',

            'DEFAULTPASSWORD_Title': 'Warning',
            'DEFAULTPASSWORD_Confirm': 'The login password for the "admin" user has not been changed from the default. <br /> <br /> For security purposes, consider changing the password for this user by editing it in Settings > Users.',
            'DEFAULTPASSWORD_DoNotShow': 'Do Not Show Again',

            'ADD_USERS_AddUsers': 'Add User(s)',
            'ADD_USERS_SelectWhichUsersInstructions': 'Select which users will have access to this service.',
            'ADD_USERS_Therearenoitemsavailable': 'There are no items available.',
            'ADD_USERS_': '',

            'ADDAPPLICATION_Title': 'Add Application',
            'EDITAPPLICATION_Title': 'Edit Applications for {{componentName}}',
            'ADDAPPLICATION_IdentifyResources': 'Identify Resources',
            'ADDAPPLICATION_IdentifyApplications': 'Identify Applications',
            'ADDAPPLICATION_AddApplications': 'Add Applications',
            'ADDAPPLICATION_IdentifyResourcesText1': 'Select Applications to Install on the selected resources.',
            'ADDAPPLICATION_IdentifyResourcesText2': 'If you want to add applications to resources with existing applications, go to the Application Details for the desired resource and click Edit Applications. ',
            'ADDAPPLICATION_SelectResources': 'Select Resources',
            'ADDAPPLICATION_IdentifyApplicationsText': 'Select Applications to Install on the selected resources.',
            'ADDAPPLICATION_AddApplication': 'Add Application',
            'ADDAPPLICATION_ApplicationType': 'Application Type',
            'ADDAPPLICATION_THInstallOrder': 'Install Order',
            'ADDAPPLICATION_ExpandAllSections': 'Expand All Sections',
            'ADDAPPLICATION_CollapseAllSections': 'Collapse All Sections',
            'ADDAPPLICATION_ApplicationSettingsHelp': 'Applications are shown in installation order, from first to last, as defined on the previous step. Click the Back button to modify the install order.',
            'ADDAPPLICATION_ApplicationSettings': 'Application Settings',
            'ADDAPPLICATION_InstallOrder': 'Install Order: ',
            'ADDAPPLICATION_Areyousureyouwanttofinishconfiguration': 'Are you sure you want to finish configuration?',

            //jek 3.29.2016
            'ADDPOOL_Title': 'Create Virtual Identity Pool',
            'ADDPOOL_PoolInformation_Title': 'Pool Information',
            'ADDPOOL_PoolInformation_Instructions': 'Enter the name and description by which you can identify this pool.',
            'ADDPOOL_PoolInformation_Name': 'Pool Name',
            'ADDPOOL_PoolInformation_Description': 'Pool Description',

            'ADDPOOL_VirtualMAC_Title': 'Virtual MAC',
            'ADDPOOL_VirtualMAC_Instructions': 'Enter the total Number of Virtual MAC Identities that you want to create (you can create up to 1,024 identities at a time).',
            'ADDPOOL_VirtualMAC_Identities': 'Number of Virtual MAC Identities',
            'ADDPOOL_VirtualMAC_Prefix': 'MAC Address Prefix',
            'ADDPOOL_VirtualMAC_Prefix_Value': '00:0E:AA',
            'ADDPOOL_VirtualMAC_Auto_Generate': 'Auto Generate Identities if needed during deployments',

            'ADDPOOL_VirtualIQN_Title': 'Virtual IQN',
            'ADDPOOL_VirtualIQN_Instructions': 'Enter the total Number of Virtual IQN Identities that you want to create (you can create up to 1,024 identities at a time).',
            'ADDPOOL_VirtualIQN_Identities': 'Number of Virtual iSCSI Identities ',
            'ADDPOOL_VirtualIQN_Prefix': 'IQN Prefix',
            'ADDPOOL_VirtualIQN_Auto_Generate': 'Auto Generate Identities if needed during deployments',

            'ADDPOOL_VirtualWWPN_Title': 'Virtual WWPN',
            'ADDPOOL_VirtualWWPN_Instructions': 'Enter the total Number of Virtual WWPN Identities that you want to create (you can create up to 1,024 identities at a time).',
            'ADDPOOL_VirtualWWPN_Identities': 'Number of Virtual WWPN Identities ',
            'ADDPOOL_VirtualWWPN_Prefix': 'WWPN Prefix',
            'ADDPOOL_VirtualWWPN_Prefix_Value': '20:01:00:0E',
            'ADDPOOL_VirtualWWPN_Auto_Generate': 'Auto Generate Identities if needed during deployments',

            'ADDPOOL_VirtualWWNN_Title': 'Virtual WWNN',
            'ADDPOOL_VirtualWWNN_Instructions': 'Enter the total Number of Virtual WWNN Identities that you want to create (you can create up to 1,024 identities at a time).',
            'ADDPOOL_VirtualWWNN_Identities': 'Number of Virtual WWNN Identities ',
            'ADDPOOL_VirtualWWNN_Prefix': 'WWNN Prefix',
            'ADDPOOL_VirtualWWNN_Prefix_Value': '20:00:00:0E ',
            'ADDPOOL_VirtualWWNN_Auto_Generate': 'Auto Generate Identities if needed during deployments',

            'ADDPOOL_Summary_Title': 'Pool Summary',
            'ADDPOOL_Summary_Header': 'Summary',
            'ADDPOOL_Summary_Instructions': 'Click <b>Finish</b> to create Virtual Identities with the following settings. If you want to change the settings, click <b>Back</b>.',
            'ADDPOOL_Summary_Pool_Information': 'Pool Information',
            'ADDPOOL_Summary_Pool_Name': 'Pool Name*',
            'ADDPOOL_Summary_Pool_Description': 'Pool Description',

            'ADDPOOL_Summary_VirtualMAC_Information': 'Virtual MAC',
            'ADDPOOL_Summary_VirtualMAC_Identities': 'Number of Virtual MAC Identities',
            'ADDPOOL_Summary_VirtualMAC_Prefix': 'MAC Address Prefix',

            'ADDPOOL_Summary_VirtualIQN_Information': 'Virtual IQN',
            'ADDPOOL_Summary_VirtualIQN_Identities': 'Number of Virtual iSCSI Identities',
            'ADDPOOL_Summary_VirtualIQN_Prefix': 'IQN Prefix',

            'ADDPOOL_Summary_VirtualWWPN_Information': 'Virtual WWPN',
            'ADDPOOL_Summary_VirtualWWPN_Identities': 'Number of Virtual WWPN Identities',
            'ADDPOOL_Summary_VirtualWWPN_Prefix': 'WWPN Prefix',

            'ADDPOOL_Summary_VirtualWWNN_Information': 'Virtual WWNN',
            'ADDPOOL_Summary_VirtualWWNN_Identities': 'Number of Virtual WWNN Identities',
            'ADDPOOL_Summary_VirtualWWNN_Prefix': 'WWNN Prefix',

            'ADDPOOL_Submit_Confirmation': 'Are you sure you want to submit this information?',
            'ADDPOOL_Cancel_Confirmation': 'Are you sure you want to cancel?',

            'BACKUPANDRESTORE_Title': 'Backup and Restore',
            'BACKUPANDRESTORE_btnbackupnow': 'Backup Now',
            'BACKUPANDRESTORE_btnrestorenow': 'Restore Now',
            'BACKUPANDRESTORE_settingsanddetailstitle': 'Settings And Details',
            'BACKUPANDRESTORE_lastBackupDate': 'Last Backup Date',
            'BACKUPANDRESTORE_lastBackupStat': 'Last Backup Status',
            'BACKUPANDRESTORE_directoryPath': 'Backup Directory Path',
            'BACKUPANDRESTORE_directoryUserName': 'Backup Directory User Name',
            'BACKUPANDRESTORE_autoBackups': 'Automatically Scheduled Backups',
            'BACKUPANDRESTORE_scheduledbackup_title': 'Automatically Scheduled Backups',
            'BACKUPANDRESTORE_daysforbackup': 'Days for Backup',
            'BACKUPANDRESTORE_timeforbackup': 'Time for Backup',
            'BACKUPNOW_testconnection_title': 'Success',

            'BACKUPNOW_testconnection': 'Test Connection',
            'BACKUPNOW_testconnection_success_title': 'Success',
            'BACKUPNOW_testconnection_success_message': 'The test was successful',
            'BACKUPNOW_usebackupsettings': 'Use Backup Directory Path and Encryption Password from Backup Settings and Details',
            'BACKUPNOW_backupdirpath': 'Backup Directory Path',
            'BACKUPNOW_backupdirpathinfo': '<div style="width: 210px;">CIFS: \\\\192.168.2.1\\LAB\\backups\\<br />NFS: 192.168.0.1:/var/nfs/backups/</div>',
            'BACKUPNOW_backupDirUserName': 'Backup Directory User Name',
            'BACKUPNOW_backupDirPassword': 'Backup Directory Password',
            'BACKUPNOW_backupFileDescription': 'Enter the password that will be required to open backup files.',
            'BACKUPNOW_encrypPassword': 'Encryption Password',
            'BACKUPNOW_confirmencrypPassword': 'Confirm Encryption Password',
            'BACKUPNOW_NotConfigured': 'Not Configured',

            'BACKUPSETTINGSANDDETAILS_Title': 'Settings And Details',

            'BIOSCONFIGURATION_Title': 'BIOS Settings *',
            'BIOSCONFIGURATION_BasicBIOS': 'Basic',
            'BIOSCONFIGURATION_AdvancedBIOS': 'Advanced',

            'COMPARATOR_Minimum': 'Minimum',
            'COMPARATOR_Exactly': 'Exactly',

            'COMPONENTEDITOR_StorageComponent': 'Storage',
            'COMPONENTEDITOR_AddVolume': 'Add Volume',
            'COMPONENTEDITOR_AddServerComponent': 'Duplicate Node',
            'COMPONENTEDITOR_ServerComponent': 'Node',
            'COMPONENTEDITOR_ClusterComponent': 'Cluster',
            'COMPONENTEDITOR_VxFlexOsCluster': 'VxFlex OS Cluster',
            'COMPONENTEDITOR_VmWareCluster': 'VMWare Cluster',
            'COMPONENTEDITOR_VMComponent': 'VM Component',
            'COMPONENTEDITOR_AddVirtualMachinesVMs': 'Add Virtual Machines (VMs)',
            'COMPONENTEDITOR_SelectComponent': 'Select a Component',
            'COMPONENTEDITOR_BasicSettings': 'Basic Settings',
            'COMPONENTEDITOR_ComponentName': 'Component Name',
            'COMPONENTEDITOR_Instances': 'Number of Instances',
            'COMPONENTEDITOR_RelatedComponents': 'Related Components',
            'COMPONENTEDITOR_RelatedComponentsHelp': 'When adding a new component to a template, associate all existing components with the new component or as needed by checking them from the list below.',
            'COMPONENTEDITOR_AssociateAll': 'Associate All',
            'COMPONENTEDITOR_AssociateSelected': 'Associate Selected',
            'COMPONENTEDITOR_NoComponentsToAssociate': 'There are no components to associate.',
            'COMPONENTEDITOR_ImportConfig': 'Import Configuration from Reference Node',
            'COMPONENTEDITOR_ImportFromExisting': 'Import from Existing Template',
            'COMPONENTEDITOR_UploadServer': 'Upload Node Configuration Profile',
            'COMPONENTEDITOR_ReferenceServerIPAddress': 'Reference Node IP Address',
            'COMPONENTEDITOR_ImportConfigFileName': 'Upload Node Configuration File Name',
            'COMPONENTEDITOR_RequiredFieldsRemaining': 'Required Fields Remaining:',
            'COMPONENTEDITOR_ValidateSettings': 'Validate Settings',
            "COMPONENTEDITOR_SourceLocation": 'Source Location',
            "COMPONENTEDITOR_SQLServer": 'SQL Node',
            "COMPONENTEDITOR_DeliveryController": 'Deliver Controller',
            "COMPONENTEDITOR_CitrixStudio": 'Citrix Studio',
            "COMPONENTEDITOR_LicenseServer": 'License Node',
            "COMPONENTEDITOR_CitrixDirector": 'Citrix Director',
            "COMPONENTEDITOR_StoreFront": 'StoreFront',
            "COMPONENTEDITOR_InstallPackages": 'Install Packages',
            "COMPONENTEDITOR_UploadShare": 'Upload Share',
            "COMPONENTEDITOR_UploadRecursive": 'Upload Recursive',
            "COMPONENTEDITOR_ExecuteFileCommand": 'Execute File Command',
            "COMPONENTEDITOR_Share": 'Share',
            "COMPONENTEDITOR_InstallCommand": 'Install Command',
            "COMPONENTEDITOR_UploadFile": 'Upload File',
            "COMPONENTEDITOR_UploadRecurse": 'Upload Recurse',
            "COMPONENTEDITOR_Media": 'Media',
            "COMPONENTEDITOR_MediaLocation": 'Media Location',
            "COMPONENTEDITOR_InstanceName": 'Instance Name',
            "COMPONENTEDITOR_Features": 'Features',
            "COMPONENTEDITOR_SAPassword": 'SA Password',
            "COMPONENTEDITOR_SQLAgentServiceAccountName": 'SQL Agent Service Account Name',
            "COMPONENTEDITOR_SQLAgentServiceAccountPassword": 'SQL Agent Service Account Password',
            "COMPONENTEDITOR_AnalysisServicesAccountName": 'Analysis Services Account Name',
            "COMPONENTEDITOR_AnalysisServicesAccountPassword": 'Analysis Service Account Password',
            "COMPONENTEDITOR_ReportingServicesAccountName": 'Reporting Services Account Name',
            "COMPONENTEDITOR_ReportingServicesAccountPassword": 'Reporting Services Account Password',
            "COMPONENTEDITOR_SQLServiceAccountName": 'SQL Service Account Name',
            "COMPONENTEDITOR_SQLSystemAdminAccounts": 'SQL System Admin Accounts',
            "COMPONENTEDITOR_SQLServiceAccountPassword": 'SQL Service Account Password',
            "COMPONENTEDITOR_InstanceDirectory": 'Instance Directory',
            "COMPONENTEDITOR_AnalysisServicesCollation": 'Analysis Services Collation',
            "COMPONENTEDITOR_SQLCollation": 'SQL Collation',
            "COMPONENTEDITOR_Administrator": 'Administrator',
            "COMPONENTEDITOR_.NETSourceDirectory": '.NET Source Directory',
            "COMPONENTEDITOR_numInstances": '({{number}} instances)',
            "COMPONENTEDITOR_": '',
            "COMPONENTEDITOR_": '',
            "COMPONENTEDITOR_": '',

            "CONFIGURECHASSIS_WelcomeMessage1": 'The <b>Configure Resources</b> wizard will walk you through two scenarios: firmware compliance and an optional chassis on-boarding or reconfiguration for chassis that have been discovered within your environment.',
            "CONFIGURECHASSIS_WelcomeMessage2": '<h4><b>Firmware Compliance</b></h4>VxFlex Manager requires a minimum firmware level for all resources it manages. You can also download the default repository VxFlex Manager recommends or load your own custom repositories. Either way, the firmware on your resources will be compared against VxFlex Managerâs minimum and the default repository set, if applicable. If any resources are found to be out of compliance you can choose to automatically update those resources before bringing them into your environment.',
            "CONFIGURECHASSIS_WelcomeMessage3": '<h4><b>Chassis Configuration</b></h4>If chassis appear in your list of discovered resources, you will be prompted to select them for configuration. All steps in this process are optional. You may choose to on-board new chassis or reconfigure existing chassis through these settings. This configuration includes chassis, iDRAC and I/O Modules. If no chassis are discovered, these steps will not appear in this wizard. ',
            "CONFIGURECHASSIS_LoadingResources": 'Loading Resource(s)',
            "CONFIGURECHASSIS_DeleteConfirm": 'Are you sure you want to delete the selected resource?',
            "CONFIGURECHASSIS_AddRepository": 'Add Repository',
            "CONFIGURECHASSIS_CheckingFirmwareVersions": 'Checking Firmware Versions',
            "CONFIGURECHASSIS_SelectResources": 'Select Resources for Immediate Firmware Update',
            "CONFIGURECHASSIS_Components": 'Components',
            "CONFIGURECHASSIS_CurrentVersion": 'Current Version',
            "CONFIGURECHASSIS_FabricSlot": "Fabric Slot",
            "CONFIGURECHASSIS_ExpectedVersion": 'Expected Version',
            "CONFIGURECHASSIS_FD332StorageMode": 'FD332 Storage Mode',
            "CONFIGURECHASSIS_FirmwareCompliance": 'Firmware Compliance',
            "CONFIGURECHASSIS_SupportedIOMs": 'Supported IOMs',
            "CONFIGURECHASSIS_SupportedBlades": 'Supported Blades',
            "CONFIGURECHASSIS_ChassisIpAddress": 'Chassis: IP Address: ',
            "CONFIGURECHASSIS_ServiceTag": ' / Service Tag: ',
            "CONFIGURECHASSIS_ChassisName": 'ChassisName',
            "CONFIGURECHASSIS_ChassisSettings": 'Chassis Settings',
            "CONFIGURECHASSIS_ServerSettings": 'Node Settings',
            "CONFIGURECHASSIS_IOMSettings": 'I/O Module Settings',
            "CONFIGURECHASSIS_CMCDNSName": 'CMC DNS Name(a-z, A-Z, 0-9, -only)',
            "CONFIGURECHASSIS_SystemInputPowerCap": 'System Input Power Cap',
            "CONFIGURECHASSIS_LocationDetails": 'Location Details',
            "CONFIGURECHASSIS_Datacenter": 'Datacenter',
            "CONFIGURECHASSIS_RackSlot": 'Rack Slot',
            "CONFIGURECHASSIS_ManagementIP": 'Management IP',
            "CONFIGURECHASSIS_iDRACDNSName": 'iDRAC DNS Name',
            "CONFIGURECHASSIS_NumIOModules": ' / # of I/O Modules: ',
            "CONFIGURECHASSIS_NumBlades": ' / # of Blades: ',
            "CONFIGURECHASSIS_Warning": 'Warning: ',
            "CONFIGURECHASSIS_FNIOAFirwmare1": 'FNIOA firmware must be on version 9.9 or above to configure uplinks. Please go to ',
            "CONFIGURECHASSIS_FNIOAFirwmare2": ' and update your catalog to proceed with uplink configuration.',
            "CONFIGURECHASSIS_StorageOption_Single": "Single",
            "CONFIGURECHASSIS_StorageOption_Dual": "Dual",
            "CONFIGURECHASSIS_StorageOption_Joined": "Joined",
            "CONFIGURECHASSIS_StorageOption_NumComponents": "{{num}} components",
            //"CONFIGURECHASSIS_UplinkPortConfigHelp": "Check the box below to configure the uplink ports of the switches manually or upload a custom configuration file.",


            "CONFIGURECHASSIS_DEVICE_CONFIG_Manage_Credentials": 'Manage Credentials',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Credentials_Help": 'Manage existing credentials or create new credentials to be set for the root user (recommended if using Dell Default Credentials).',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Credentials_Chassis": 'Chassis Credentials*',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Credentials_Blade": 'Blade Credentials*',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Credentials_IOM": 'I/O Module Credentials*',

            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing": 'IP Addressing',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Chassis": 'Chassis',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Chassis_Use_Existing": 'Use existing chassis IP address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Chassis_Assign_Static": 'Assign static IP address from this network',

            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Servers": 'Nodes',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Servers_Use_Existing": 'Use existing chassis IP address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Servers_Assign_DHCP": 'Assign IP address via DHCP',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Servers_Assign_Static": 'Assign static IP address from this network',

            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_IOM": 'I/O Modules',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_IOM_Use_Existing": 'Use existing chassis IP address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_IOM_Assign_DHCP": 'Assign IP address via DHCP',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_IOM_Assign_Static": 'Assign static IP address from this network',



            "CONFIGURECHASSIS_DEVICE_CONFIG_Users": 'Users',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Monitoring": 'Monitoring',
            "CONFIGURECHASSIS_DEVICE_CONFIG_NTP": 'NTP',
            "CONFIGURECHASSIS_DEVICE_CONFIG_PowerConfig": 'Power Config',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Networking": 'Networking',
            "CONFIGURECHASSIS_DEVICE_CONFIG_CMCUsers": 'CMC Users',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Nousershavebeenentered": 'No users have been entered.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Group": 'Group',
            "CONFIGURECHASSIS_DEVICE_CONFIG_iDRACUsers": 'iDRAC Users',
            "CONFIGURECHASSIS_DEVICE_CONFIG_LANRole": 'LAN Role',
            "CONFIGURECHASSIS_DEVICE_CONFIG_AlertDestinations": 'Alert Destinations',
            "CONFIGURECHASSIS_DEVICE_CONFIG_AddAlertDestination": 'Add Alert Destination',
            "CONFIGURECHASSIS_DEVICE_CONFIG_DestinationIPAddress": 'Destination IP Address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_CommunityString": 'Community String',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Notrapsettingshavebeenentered": 'No trap settings have been entered.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_EmailAlertSettings": 'Email Alert Settings',
            "CONFIGURECHASSIS_DEVICE_CONFIG_SMTPServer": 'SMTP Node',
            "CONFIGURECHASSIS_DEVICE_CONFIG_AddEmailAlert": 'Add Email Alert',
            "CONFIGURECHASSIS_DEVICE_CONFIG_DestinationEmailAddress": 'Destination Email Address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Nodestinationemailshavebeenentered": 'No destination emails have been entered.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_SyslogConfig": 'Syslog Configuration (for I/O Modules only)',
            "CONFIGURECHASSIS_DEVICE_CONFIG_SyslogDestinationIPAddress": 'Syslog Destination IP Address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_TimeZoneStar": 'Time Zone*',
            "CONFIGURECHASSIS_DEVICE_CONFIG_EnableNTPServer": 'Enable NTP Node',
            "CONFIGURECHASSIS_DEVICE_CONFIG_PreferredNTPServerStar": 'Preferred NTP Node*',
            "CONFIGURECHASSIS_DEVICE_CONFIG_PreferredNTPServerStar_placeholder": 'ntpserver1.com',
            "CONFIGURECHASSIS_DEVICE_CONFIG_SecondaryNTPServerOptional": 'Secondary NTP Node (optional)',
            "CONFIGURECHASSIS_DEVICE_CONFIG_SecondaryNTPServerOptional_placeholder": 'ntpserver2.com',
            "CONFIGURECHASSIS_DEVICE_CONFIG_RedundancyPolicy": 'Redundancy Policy',
            "CONFIGURECHASSIS_DEVICE_CONFIG_ConfiguretheuplinksoneachIModuleIndependently": 'Configure the uplinks on each I/O Module Independently',
            "CONFIGURECHASSIS_ConfigureUplinksChassis": 'Configure Uplink Ports on All Chassis independently',
            "CONFIGURECHASSIS_UploadFile": 'Upload Switch Configuration File',
            "CONFIGURECHASSIS_DEVICE_CONFIG_ConfigureUplinks": 'Configure Uplinks',
            "CONFIGURECHASSIS_DEVICE_CONFIG_DNSNetworkConfiguration": 'DNS Network Configuration',
            "CONFIGURECHASSIS_DEVICE_CONFIG_RegisterChassisControlleronDNS": 'Register Chassis Controller on DNS',
            "CONFIGURECHASSIS_DEVICE_CONFIG_RegisteriDRAConDNS": 'Register iDRAC on DNS',
            "CONFIGURECHASSIS_DEVICE_CONFIG_EnableIPMIoverLAN": 'Enable IPMI over LAN',
            "CONFIGURECHASSIS_DefineUplinks": 'Define Uplinks',
            "CONFIGURECHASSIS_UplinksDefined": 'Uplinks Defined',
            "CONFIGURECHASSIS_ConfigIOMIndependently": 'Configure the uplinks on each I/O Module Independently',
            "CONFIGURECHASSIS_VLTEnabled": 'VLT Enabled',
            "CONFIGURECHASSIS_VLTEnabledDesctiption": 'VLT Enabled - Must be configured on like ports (e.g., all 10Gb, or all 40Gb ports)',
            "CONFIGURECHASSIS_QuadportMode": 'Quadport Mode',
            "CONFIGURECHASSIS_ExistingFileName": 'Existing File Name',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Empty": 'Empty',
            "CONFIGURECHASSIS_Empty": 'Empty',
            //"CONFIGURECHASSIS_DEVICE_CONFIG_ThewizardidentifiedNonCompliant": 'The wizard identified {{numIdentified}} non-compliant chassis. You selected {{numSelected}} to be updated automatically',
            //"CONFIGURECHASSIS_DEVICE_CONFIG_ThewizardidentifiedChassisWithRequiredUpdates": 'The wizard identified {{numIdentified}} chassis that require an update. You selected {{numSelected}} to be updated automatically.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_ThewizardidentifiedNonCompliant": 'The wizard identified {{numIdentified}} non-compliant resource(s). You selected {{numSelected}} to be updated automatically',
            "CONFIGURECHASSIS_DEVICE_CONFIG_ThewizardidentifiedChassisWithRequiredUpdates": 'The wizard identified {{numIdentified}} resource(s) that require an update. You selected {{numSelected}} to be updated automatically.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Off": 'Off',
            "CONFIGURECHASSIS_DEVICE_CONFIG_NotConfigured": 'Not Configured.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_NoRedundancy": 'No Redundancy',
            "CONFIGURECHASSIS_DEVICE_CONFIG_GridRedundancy": 'Grid Redundancy',
            "CONFIGURECHASSIS_DEVICE_CONFIG_PowerSupplyRedundancy": 'Power Supply Redundancy',
            "CONFIGURECHASSIS_DEVICE_CONFIG_RedundancyAlertingOnly": 'Redundancy Alerting Only',
            "CONFIGURECHASSIS_DEVICE_CONFIG_ServerPerformance": 'Node Performance over Power Redundancy',
            "CONFIGURECHASSIS_DEVICE_CONFIG_DynamicSupply": 'Enable Dynamic Power Supply Engagement',
            "CONFIGURECHASSIS_DEVICE_CONFIG_10Gb": '10Gb',
            "CONFIGURECHASSIS_DEVICE_CONFIG_40Gb": '40Gb',

            "DEFINE_UPLINKS_DefineUplinks": 'Define Uplinks',
            "DEFINE_UPLINKS_AddUplink": 'Add Uplink',
            "DEFINE_UPLINKS_Uplinks": 'Uplinks',
            "DEFINE_UPLINKS_PortChannel": 'Port Channel',
            "DEFINE_UPLINKS_NetworkType": 'Network Type',
            "DEFINE_UPLINKS_NetworkNames": 'Network Name(s)',
            "DEFINE_UPLINKS_NumberSelected": '{{number}} Selected',
            "DEFINE_UPLINKS_NoItemsAvailable": 'There are no items available.',
            "DEFINE_UPLINKS_AddNetwork": 'Add Network',
            "DEFINE_UPLINKS_ConfigureUplinkPortsonAllChassistheSame": 'Configure Uplink Ports on All Chassis the Same',
            "DEFINE_UPLINKS_SelectedNetworks": 'Selected Network(s)',
            "DEFINE_UPLINKS_ChooseFile": 'Choose File',
            "DEFINE_UPLINKS_UploadFile": 'Upload File',
            "DEFINE_UPLINKS_NewFileName": 'New File Name',
            "DEFINE_UPLINKS_RSTP": 'RSTP',
            "DEFINE_UPLINKS_MSTP": 'MSTP',
            "DEFINE_UPLINKS_PVST": 'PVST',
            "DEFINE_UPLINKS_None": 'None',
            "DEFINE_UPLINKS_SpanningTreeMode": 'Spanning Tree Mode',
            "DEFINE_UPLINKS_OnlyMXLs": '(Only applicable to MXLs)',
            "DEFINE_UPLINKS_ErrorMessage": 'At least one port on the switch needs to be assigned to an uplink.',
            "DEFINE_UPLINKS_mismatchPortSpeed": 'VLT configuration does not support mixing 10Gb and 40Gb ports. Please update your configuration so that VLT is on either all 10Gb ports, or all 40Gb ports.',
            "CONFIGURECHASSIS_NumModules": '/# of IOMs:',

            'CONFIGUREDEVICE_Credentials': 'Manage Credentials',
            'CONFIGUREDEVICE_IPAddressing': 'IP Addressing',

            'CREDENTIALS_EditTitle': 'Edit Credentials',
            'CREDENTIALS_CreateTitle': 'Create Credentials',
            'CREDENTIALS_EditModeDisabled': 'This credential is a default credential and cannot be edited.',
            'CREDENTIALS_DeleteConfirmation': 'Are you sure you want to delete this credential?',
            'CREDENTIALSFORM_Create_Help': 'Enter the following information to create the credentials to access the resources.',
            'CREDENTIALS_CredentialType': 'Credential Type',
            'CREDENTIALS_Name': 'Credential Name*',
            'CREDENTIALS_UserName': 'User Name*',
            'CREDENTIALS_GatewayAdminUserName': 'Gateway Admin User Name*',
            'CREDENTIALS_GatewayOSUserName': 'Gateway OS User Name*',
            'CREDENTIALS_Domain': 'Domain',
            'CREDENTIALS_Password': 'Password*',
            'CREDENTIALS_GatewayAdminPassword': 'Gateway Admin Password*',
            'CREDENTIALS_GatewayOSPassword': 'Gateway OS Password*',
            'CREDENTIALS_ConfirmPassword': 'Confirm Password*',
            'CREDENTIALS_ConfirmGatewayAdminPassword': 'Confirm Gateway Admin Password*',
            'CREDENTIALS_ConfirmGatewayOSPassword': 'Confirm Gateway OS Password*',
            'CREDENTIALS_SNMPConfig': 'SNMP Configuration',
            'CREDENTIALS_CommunityString': 'SNMP v2 Community String',
            'CREDENTIALS_Title': 'Credentials Management',
            'CREDENTIALS_THName': 'Name',
            'CREDENTIALS_THType': 'Type',
            'CREDENTIALS_THDevices': 'Resources',
            'CREDENTIALSDETAILS_Header': 'Credential',
            'CREDENTIALSDETAILS_Tabs_Summary': 'Summary',
            'CREDENTIALSDETAILS_Tabs_Devices': 'Resources',
            'CREDENTIALSDETAILS_Tabs_Templates': 'Templates',
            'CREDENTIALSDETAILS_Credential_CreatedBy': 'Created By',
            'CREDENTIALSDETAILS_Credential_CreationTime': 'Creation Time',
            'CREDENTIALSDETAILS_Credential_UpdateTime': 'Update Time',
            'CREDENTIALSDETAILS_Credential_UpdatedBy': 'Updated By',
            'CREDENTIALS_Field_Required': 'This field is required.',
            'CREDENTIALS_SelectaCredentialType': 'Select a Credential Type...',
            'CREDENTIALS_cannotEdit': 'This credential is a default credential and cannot be edited.',
            'CREDENTIALS_Servers': 'Nodes',
            'CREDENTIALS_UseexistingserverIPaddress': 'Use existing node IP address',
            'CREDENTIALS_AssignstaticIPaddressfromthisnetwork': 'Assign static IP address from this network  ',
            'CREDENTIALS_SelectedRackServers': 'Selected Rack Nodes for Initial Configuration',
            'CREDENTIALS_RackServers': 'Rack Nodes for Initial Configuration',
            'CREDENTIALS_': '',
            'CREDENTIALS_': '',
            'CREDENTIALS_': '',
            'CREDENTIALS_Password_Match': 'Please enter the same value again.',

            'CREDENTIALSDETAILS_THDevices_Health': 'Health',
            'CREDENTIALSDETAILS_THDevices_IP': 'IP Address',
            'CREDENTIALSDETAILS_THDevices_ServiceTag': 'Service Tag',
            'CREDENTIALSDETAILS_THDevices_Blades': 'Blades',
            'CREDENTIALSDETAILS_THDevices_LastTemplate': 'Last Template Applied',
            'CREDENTIALSDETAILS_THDevices_State': 'State',
            'CREDENTIALSDETAILS_THDevices_SystemModel': 'System Model',
            'CREDENTIALSDETAILS_THDevices_Ports': 'Ports',
            'CREDENTIALSDETAILS_THDevices_Memory': 'Memory',
            'CREDENTIALSDETAILS_THDevices_CPUs': 'CPUs',

            'CREDENTIALSDETAILS_THTemplates_Name': 'Name',
            'CREDENTIALSDETAILS_THTemplates_Description': 'Description',
            'CREDENTIALSDETAILS_THTemplates_LastUpdatedBy': 'Last Updated By',
            'CREDENTIALSDETAILS_THTemplates_State': 'State',
            'CREDENTIALSDETAILS_THTemplates_Usage': 'Usage',

            'DASHBOARD_AllDeployments': 'All Deployments',
            'DASHBOARD_DellEquallogicGroup': 'Dell EqualLogic Group',
            'DASHBOARD_DellCompellentArrays': 'Dell Compellent Arrays',
            'DASHBOARD_EMCUnityArrays': 'EMC Unity Arrays',
            'DASHBOARD_EMCVNXArrays': 'EMC VNX Arrays',
            'DASHBOARD_DeployedBy': 'Deployed By: ',
            'DASHBOARD_DeployedDate': 'Deployed On: ',
            'DASHBOARD_Errors': 'ERROR(S): ',
            'DASHBOARD_ExpiresStatus': 'The current license has expired. For more information about licences, contact your system administrator.',
            'DASHBOARD_LastMonth': 'Last Month',
            'DASHBOARD_LastSixMonths': 'Last 6 Months',
            'DASHBOARD_LastTen': 'Last 10 Deployments',
            'DASHBOARD_LastWeek': 'Last Week',
            'DASHBOARD_LastYear': 'Last Year',
            'DASHBOARD_Learn': 'Learn',
            'DASHBOARD_LearnDeploy': 'Learn about Service Deployments',
            'DASHBOARD_LearnTemps': 'Learn about Templates',
            'DASHBOARD_ApplianceOverview': 'Appliance Overview',
            'DASHBOARD_Licenses': 'License Information',
            'DASHBOARD_NetAppArrays': 'NetApp Arrays',
            'DASHBOARD_NoServices': 'No Services',
            'DASHBOARD_Of': '{{numerator}} of {{denominator}} Nodes In Use',
            'DASHBOARD_QuickActions': 'Quick Actions',
            'DASHBOARD_RecentActivity': 'Recent Activity',
            'DASHBOARD_ResourcesDiscovered': 'Discovered Resources',
            'DASHBOARD_ResourceOverview': 'Resource Overview',
            'DASHBOARD_ServerHealth': ' Node Health',
            'DASHBOARD_Servers': ' Nodes: ',
            'DASHBOARD_STORAGE_CAPACITY_ChartTitle': 'VxFlex Manager Appliance Storage Utilized',
            'DASHBOARD_ViewAllServers': 'View All Nodes',
            'DASHBOARD_ViewAllServices': 'View All Services',
            'DASHBOARD_ViewServicesInError': 'View Services in Error',
            'DASHBOARD_ViewServicesInWarning': 'View Services with Warnings ',
            'DASHBOARD_ViewServicesInProgress': 'View In Progress Services',
            'DASHBOARD_ViewServicesInHealthy': 'View Healthy Services',
            'DASHBOARD_ViewServicesInCancelled': 'View Cancelled Services',
            'DASHBOARD_ViewServersInError': 'View Nodes in Error',
            'DASHBOARD_ViewServersInWarning': 'View Nodes with Warnings',
            'DASHBOARD_ViewServersInHealthy': 'View Healthy Nodes',
            'DASHBOARD_ViewServersInUnknown': 'View Nodes in an Unknown State',
            'DASHBOARD_ViewService': 'View Service',
            'DASHBOARD_ServiceHistory': 'Service History',
            'DASHBOARD_ServiceOverview': 'Service Overview',
            'DASHBOARD_StorageGroupBreakdown': 'Utilization by Storage Component',
            'DASHBOARD_Title': 'Dashboard',
            'DASHBOARD_TotalServices': 'Total Services',
            'DASHBOARD_TotalStorageCapacity': 'Storage',
            'DASHBOARD_Updating': 'Updating...',
            'DASHBOARD_AllStorage': 'All Storage',
            'DASHBOARD_Storage': 'Storage',
            'DASHBOARD_ProtectionDomains': 'Protection Domains',
            'DASHBOARD_Volumes': 'Volumes',
            'DASHBOARD_ScaleIODataClients': 'VxFlex OS Data Clients',
            'DASHBOARD_ScaleIODataServers': 'VxFlex OS Data Nodes',
            'DASHBOARD_Used': 'Used',
            'DASHBOARD_ViewDetails': 'View details',
            'DASHBOARD_NotUsed': 'Not Used',
            'DASHBOARD_ServerUtilizationInServices': 'Node Utilization in Services',
            'DASHBOARD_UtilizationByServerPool': 'Utilization By Node Pool',
            'DASHBOARD_ZeroAvailableStatus': 'No licenses are available for resources.',
            'DASHBOARD_ServersInUse': 'Nodes In Use',
            'DASHBOARD_ServersAvailable': 'Nodes Available',
            'DASHBOARD_StorageUsed': 'Storage Used',
            'DASHBOARD_StorageAvailable': 'Storage Available',
            'DASHBOARD_TotalServers': 'Total Nodes',
            'DASHBOARD_GettingStarted': 'Getting Started',
            'DASHBOARD_ActivityLog': 'Activity Log',
            'DASHBOARD_TOOLTIP_ViewCritical': 'View Services with Critical Errors',
            'DASHBOARD_TOOLTIP_ViewWarnings': 'View Services with Warnings',
            'DASHBOARD_TOOLTIP_ViewInProgress': 'View Services In-Progress',
            'DASHBOARD_TOOLTIP_ViewHealthy': 'View Healthy Services',
            'DASHBOARD_TOOLTIP_ViewCancelled': 'View Cancelled Services',
            'DASHBOARD_TOOLTIP_ViewServersWithCritical': 'View Nodes with Critical Errors',
            'DASHBOARD_TOOLTIP_ViewServersWithWarnings': 'View Nodes with Warnings',
            'DASHBOARD_TOOLTIP_ViewServersWithHealthy': 'View Healthy Nodes',
            'DASHBOARD_TOOLTIP_ViewServersWithUnknown': 'View Nodes with an Unknown State',
            'DASHBOARD_TOOLTIP_Health_Critical': 'Critical',
            'DASHBOARD_TOOLTIP_Health_Warning': 'Warning',
            'DASHBOARD_TOOLTIP_Health_InProgress': 'In Progress',
            'DASHBOARD_TOOLTIP_Health_Healthy': 'Healthy',
            'DASHBOARD_TOOLTIP_Health_Cancelled': 'Cancelled',
            'DASHBOARD_TOOLTIP_Health_ServiceMode': 'Service Mode',
            'DASHBOARD_TOOLTIP_Health_Incomplete': 'Incomplete',
            'DASHBOARD_TOOLTIP_Critical': 'View {{count}} Services with Critical Errors',
            'DASHBOARD_TOOLTIP_Warning': 'View {{count}} Services with Warnings',
            'DASHBOARD_TOOLTIP_InProgress': 'View {{count}} Services In-Progress',
            'DASHBOARD_TOOLTIP_Pending': 'View {{count}} Services Pending',
            'DASHBOARD_TOOLTIP_Healthy': 'View {{count}} Healthy Services',
            'DASHBOARD_TOOLTIP_Cancelled': 'View {{count}} Cancelled Services',
            'DASHBOARD_TOOLTIP_Server_Health_Critical': 'View {{count}} Nodes with Critical Errors',
            'DASHBOARD_TOOLTIP_Server_Health_Warning': 'View {{count}} Nodes with Warnings',
            'DASHBOARD_TOOLTIP_Server_Health_Healthy': 'View {{count}} Healthy Nodes',
            'DASHBOARD_TOOLTIP_Server_Health_Unknown': 'View {{count}} Nodes with an Unknown State',
            'DASHBOARD_TOOLTIP_Server_Health_ServiceMode': 'View {{count}} Nodes in Service Mode',
            'DASHBOARD_TOOLTIP_Server_Health_Incomplete': 'View {{count}} Incomplete Services',
            'DASHBOARD_TOOLTIP_ViewServerPool': 'View Node Pool: {{serverPoolName}}',
            'DASHBOARD_TOOLTIP_Storageutilization': '{{percentageUsed}}% storage used on {{partitionName}}',
            'DASHBOARD_TOOLTIP_': '',
            'DASHBOARD_STORAGE_CAPACITY_ChartTitle': 'VxFlex Manager Appliance Storage Utilized',
            'DASHBOARD_STORAGE_CAPACITY_YellowDescription': 'More than 75% capacity used',
            'DASHBOARD_STORAGE_CAPACITY_RedDescription': 'More than 95% capacity used',
            'DASHBOARD_STORAGE_CAPACITY_': '',
            'DASHBOARD_Unused' : 'Unused',
            'DASHBOARD_InUse' : 'In Use',
            'DASHBOARD_': '',
            'DASHBOARD_': '',
            'DASHBOARD_': '',
            'DASHBOARD_': '',
            'DASHBOARD_': '',
            'DASHBOARD_': '',
            'DASHBOARD_': '',

            'DEVICE_Summary': 'Summary',
            'DEVICE_PortView': 'Port View',
            'DEVICE_NetworkInterfaces': 'Network Interfaces',
            'DEVICE_FirmwareRevisions': 'Firmware Revisions',
            'DEVICE_FirmwareSoftwareRevisions': 'Firmware/Software Revisions',
            'DEVICE_CPUs': 'CPUs',
            'DEVICE_Memory': 'Memory',
            'DEVICE_Blades': 'Blades',
            'DEVICE_IOModules': 'I/O Modules',
            'DEVICE_ChassisControllers': 'Chassis Controllers',
            'DEVICE_Ikvm': 'IKVM',
            'DEVICE_PowerSupplies': 'Power Supplies',
            'DEVICE_Volumes': 'Volumes',
            'DEVICE_LocalStorage': 'Local Storage',

            'DEVICEDETAILS_Title': 'Device Details',
            'DEVICEDETAILS_RecentActivity': 'Recent Activity',
            'DEVICEDETAILS_ResourcesTitle': 'Resources',
            'DEVICEDETAILS_DetailsTitle': 'Details',
            'DEVICEDETAILS_InService': 'In Service: ',
            'DEVICEDETAILS_ChassisInformation': 'Chassis Information',
            'DEVICEDETAILS_SwitchInformation': 'Switch Information',
            'DEVICEDETAILS_RackServerInformation': 'Rack Node Information',
            'DEVICEDETAILS_TowerServerInformation': 'Tower Node Information',
            'DEVICEDETAILS_BladeServerInformation': 'Blade Node Information',
            'DEVICEDETAILS_ServerInformation': 'Node Information',
            'DEVICEDETAILS_IOModInfo': 'I/O Module Information',
            'DEVICEDETAILS_StorageGroupInformation': 'Storage Information',
            'DEVICEDETAILS_ResourceName': 'Resource Name',
            'DEVICEDETAILS_PowerState': 'Power State',
            'DEVICEDETAILS_SerialNumber': 'Serial Number',
            'DEVICEDETAILS_ChassisLocation': 'Chassis Location',
            'DEVICEDETAILS_DataCenter': 'Data Center',
            'DEVICEDETAILS_Aisle': 'Aisle',
            'DEVICEDETAILS_Rack': 'Rack',
            'DEVICEDETAILS_RackSlot': 'Rack Slot',
            'DEVICEDETAILS_IOModuleInfo': 'I/O Module Information',
            'DEVICEDETAILS_FabricSlot': 'Fabric/Slot',
            'DEVICEDETAILS_FabricPurpose': 'Fabric Purpose',
            'DEVICEDETAILS_ManagementIP': 'Management IP',
            'DEVICEDETAILS_MACAddress': 'MAC Address',
            'DEVICESDETAILS_RCMCompliance': 'RCM Compliance',
            'DEVICEDETAILS_SlotName': 'Slot Name',
            'DEVICEDETAILS_SlotNumber': 'Slot Number',
            'DEVICEDETAILS_CurrentUtilization': 'Current Utilization',
            'DEVICEDETAILS_CurrentAvailable': 'Current Availailable',
            'DEVICEDETAILS_HistoricalData': 'Historical Data',
            'DEVICEDETAILS_CPUUsage': 'CPU Usage',
            'DEVICEDETAILS_UsageDetails': 'Usage Details',
            'DEVICEDETAILS_CollapseExpandChart': 'Collapse/Expand Chart',
            'DEVICEDETAILS_Minimum': 'Minimum',
            'DEVICEDETAILS_Maximum': 'Maximum',
            'DEVICEDETAILS_PeakValues': 'Peak Values',
            'DEVICEDETAILS_Average': 'Average',
            'DEVICEDETAILS_PeakValue': 'Peak Value',
            'DEVICEDETAILS_PeakTime': 'Peak Time',
            'DEVICEDETAILS_StartTime': 'Start Time',
            'DEVICEDETAILS_StorageCapacity': 'Storage Capacity',
            'DEVICEDETAILS_StorageDiskSpaceTotal': 'Total Disk Space',
            'DEVICEDETAILS_Servers': 'Nodes',
            'DEVICEDETAILS_ServersOnline': 'Online',
            'DEVICEDETAILS_ServersInUse': 'In Use',
            'DEVICEDETAILS_ServersOS': 'Operating System',
            'DEVICEDETAILS_DiskTitle': 'Disks',
            'DEVICEDETAILS_ManagedDisks': 'Managed Disks',
            'DEVICEDETAILS_SpareDisks': 'Spare Disks',
            'DEVICEDETAILS_ReplayProfile': 'Replay Profile',
            'DEVICEDETAILS_ReplaysOnline': 'Online',
            'DEVICEDETAILS_ReplaysInUse': 'In Use',
            'DEVICEDETAILS_GroupDiskSpace': 'Group Disk Space',
            'DEVICEDETAILS_StoragePoolMembers': 'Members',
            'DEVICEDETAILS_StoragePoolTotal': 'Total',
            'DEVICEDETAILS_SnapshotTitle': 'Snapshots',
            'DEVICEDETAILS_SnapshotsOnline': 'Online',
            'DEVICEDETAILS_SnapshotsInUse': 'In Use',
            'DEVICEDETAILS_VolumeCollectionsTitle': 'Collections',
            'DEVICEDETAILS_VolumeCollections': 'Volume Collections',
            'DEVICEDETAILS_SnapshotCollections': 'Snapshot Collections',
            'DEVICEDETAILS_CustomSnapshotCollections': 'Custom Snapshot Collections',
            'DEVICEDETAILS_StoragePool': 'Storage Pool',
            'DEVICEDETAILS_StoragePoolCapacity': 'Storage Pool Capacity',
            'DEVICEDETAILS_ServerTitle': 'Nodes',
            'DEVICEDETAILS_ActionItems': 'Action Items',
            'DEVICEDETAILS_LaunchGroupManager': 'Launch Group Manager',
            'DEVICEDETAILS_LaunchStorageCenter': 'Launch Storage Center',
            'DEVICEDETAILS_LaunchGUILink': 'Launch GUI',
            'DEVICEDETAILS_LaunchMgmtGUILink': 'Launch Mgmt GUI',
            'DEVICEDETAILS_LaunchiDRACGUIDLink': 'Launch iDRAC GUI',
            'DEVICEDETAILS_LaunchCMCGUILink': 'Launch CMC GUI',
            'DEVICEDETAILS_AssociatedCredential': 'Associated Credential',
            'DEVICEDETAILS_ChassisModel': 'Chassis Model',
            'DEVICEDETAILS_ChassisDNSName': 'Chassis DNS Name',
            'DEVICEDETAILS_ChassisMidVersion': 'Chassis Midplane Version',
            'DEVICEDETAILS_PowerCapPercent': 'Power Cap Percent',
            'DEVICEDETAILS_TotalVolumes': 'Total Volumes',
            'DEVICEDETAILS_ISCSIConnections': 'ISCSI Connections',
            'DEVICEDETAILS_VolumesUp': 'Up',
            'DEVICEDETAILS_VolumesDown': 'Down',
            'DEVICEDETAILS_DellSwitchMACAddress': 'MAC Address',
            'DEVICEDETAILS_SoftwareVersion': 'Software Version',
            'DEVICEDETAILS_SystemDescription': 'System Description',
            'DEVICEDETAILS_VolumeReserve': 'Volume Reserve',
            'DEVICEDETAILS_SnapshotReserve': 'Snapshot Reserve',
            'DEVICEDETAILS_ReplicationReserve': 'Replication Reserve',
            'DEVICEDETAILS_Delegated': 'Delegated',
            'DEVICEDETAILS_Free': 'Free',
            'DEVICEDETAILS_UsedDiskSpace': 'Used Disk Space',
            'DEVICEDETAILS_FreeDiskSpace': 'Free Disk Space',
            'DEVICEDETAILS_StoragePools': 'Storage Pools',
            'DEVICEDETAILS_Members': 'Members',
            'DEVICEDETAILS_Total': 'Total',
            'DEVICEDETAILS_Hosts': 'Hosts',
            'DEVICEDETAILS_TotalHosts': 'Total Hosts',
            'DEVICEDETAILS_Online': 'Online',
            'DEVICEDETAILS_InUse': 'In Use',
            'DEVICEDETAILS_Disks': 'Disks',
            'DEVICEDETAILS_ManagedDisks': 'Managed Disks',
            'DEVICEDETAILS_SpareDisks': 'Spare Disks',
            'DEVICESDETAILS_UsageDetails': 'Usage Details',
            'DEVICESDETAILS_EnterServiceMode': 'Enter Service Mode',
            'DEVICESDETAILS_ExitServiceMode': 'Exit Service Mode',
            'DEVICESDETAILS_WarningMessageForServiceMode': 'WARNING: Limited actions are available for this service because it contains a node that has been put in service Mode',
            'DEVICESDETAILS_InfoMessageForIncomplete_part1': 'For this service to be fully functional volumes need to be added.  Click ',
            'DEVICESDETAILS_InfoMessageForIncomplete_part2': ' and follow the steps to create new volumes for the service.',
            'DEVICES_DETAILS_Blades_State': 'State',
            'DEVICES_DETAILS_Blades_PowerState': 'Power State',
            'DEVICES_DETAILS_Blades_ManagementIP': 'Management IP',
            'DEVICES_DETAILS_Blades_Hostname': 'Hostname',
            'DEVICES_DETAILS_Blades_Location': 'Location',
            'DEVICES_DETAILS_Blades_ServiceTag': 'Service Tag',
            'DEVICES_DETAILS_Blades_SystemModel': 'System Model',
            'DEVICES_DETAILS_Blades_CPUs': 'CPUs',
            'DEVICES_DETAILS_Blades_Memory': 'Memory',
            'DEVICES_DETAILS_IOModules_ManagementIP': 'Management IP',
            'DEVICES_DETAILS_IOModules_ServiceTag': 'Service Tag',
            'DEVICES_DETAILS_IOModules_SystemModel': 'System Model',
            'DEVICES_DETAILS_IOModules_Ports': 'Ports',
            'DEVICES_DETAILS_IOModules_State': 'State',
            'DEVICES_DETAILS_ChassisControllers_PrimaryChassisController': 'Primary Chassis Management Controller',
            'DEVICES_DETAILS_ChassisControllers_Location': 'Location',
            'DEVICES_DETAILS_ChassisControllers_FirmwareVersion': 'Firmware Version',
            'DEVICES_DETAILS_ChassisControllers_StandbyChassisCMCInfo': 'Standby Chassis Management Controller',
            'DEVICES_DETAILS_ChassisControllers_Present': 'Present',
            'DEVICES_DETAILS_IKVM_Present': 'Present',
            'DEVICES_DETAILS_IKVM_Name': 'Name',
            'DEVICES_DETAILS_IKVM_Manufacturer': 'Manufacturer',
            'DEVICES_DETAILS_IKVM_FirmwareVersion': 'Firmware Version',
            'DEVICES_DETAILS_PowerSupplies_Name': 'Name',
            'DEVICES_DETAILS_PowerSupplies_PowerStatus': 'Power Status',
            'DEVICES_DETAILS_PowerSupplies_Capacity': 'Capacity',
            'DEVICES_DETAILS_LOCAL_STORAGE_ControllerName': 'Controller Name',
            'DEVICES_DETAILS_LOCAL_STORAGE_DeviceDescription': 'Device Description',
            'DEVICES_DETAILS_LOCAL_STORAGE_PCISlot': 'PCI Slot',
            'DEVICES_DETAILS_LOCAL_STORAGE_FirmwareVersion': 'Firmware Version',
            'DEVICES_DETAILS_LOCAL_STORAGE_DriverVersion': 'Driver Version',
            'DEVICES_DETAILS_LOCAL_STORAGE_CacheMemorySize': 'Cache Memory Size',
            'DEVICES_DETAILS_LOCAL_STORAGE_LogicalDiskName': 'Logical Disk Name',
            'DEVICES_DETAILS_LOCAL_STORAGE_State': 'State',
            'DEVICES_DETAILS_LOCAL_STORAGE_Layout': 'Layout',
            'DEVICES_DETAILS_LOCAL_STORAGE_Size': 'Size',
            'DEVICES_DETAILS_LOCAL_STORAGE_MediaType': 'Media Type',
            'DEVICES_DETAILS_LOCAL_STORAGE_ReadPolicy': 'Read Policy',
            'DEVICES_DETAILS_LOCAL_STORAGE_WritePolicy': 'Write Policy',
            'DEVICES_DETAILS_LOCAL_STORAGE_ViewPhysicalDisks': '(View Physical Disks)',
            'DEVICES_DETAILS_LOCAL_STORAGE_LogicalDisks': 'Logical Disks',
            'DEVICES_DETAILS_LOCAL_STORAGE_PhysicalDisks': 'Physical Disks',
            'DEVICES_DETAILS_LOCAL_STORAGE_PhysicalDisksForLogicalDiskModalTitle': 'Physical Disks for {{diskName}}',
            'DEVICES_DETAILS_LOCAL_STORAGE_PhysicalDiskName': 'Physical Disk Name',
            'DEVICES_DETAILS_LOCAL_STORAGE_SlotNumber': 'Slot Number',
            'DEVICES_DETAILS_LOCAL_STORAGE_SecurityStatus': 'Security Status',
            'DEVICES_DETAILS_LOCAL_STORAGE_BusProtocol': 'Bus Protocol',
            'DEVICES_DETAILS_LOCAL_STORAGE_HotSpare': 'Hot Spare',
            'DEVICES_DETAILS_LOCAL_STORAGE_': '',
            'DEVICES_DETAILS_LOCAL_STORAGE_': '',
            'DEVICES_DETAILS_LOCAL_STORAGE_': '',
            'DEVICES_DETAILS_LOCAL_STORAGE_': '',
            'DEVICES_DETAILS_LOCAL_STORAGE_': '',
            'DEVICES_DETAILS_LOCAL_STORAGE_': '',
            'DEVICES_DETAILS_LOCAL_STORAGE_': '',


            'DEVICES_Aggregates': 'Aggregates',
            'DEVICES_AllResources': 'All Resources',
            'DEVICES_AssetServiceTag': 'Asset/Service Tag',
            'DEVICES_AvailableStorage': 'Available Storage',
            'DEVICES_ChangeResourceTypeTo': 'Change resource state to...',
            'DEVICES_ChangeResourceType': 'Change resource state to',
            'DEVICES_ConfirmManage': 'Are you sure you want to mark the selected resources as Managed?',
            'DEVICES_ConfirmUnmanage': 'Are you sure you want to mark the selected resources as Unmanaged?',
            'DEVICES_ConfirmReserve': 'Are you sure you want to mark the selected resources as Reserved?',
            'DEVICES_Clusters': 'Clusters',
            'DEVICES_CompellentStorageName': 'Resource Name',
            'DEVICES_ConfigureChassis': 'Configure Chassis',
            'DEVICES_ConfigError': 'Config Error',
            'DEVICES_CPU': 'CPU',
            'DEVICES_DataCenters': 'Data Centers',
            'DEVICES_DellChassis': 'Dell Chassis',
            'DEVICES_ScaleIO': 'VxFlex OS Gateway',
            'DEVICES_Discover': 'Discover',
            'DEVICES_Disks': 'Disks',
            'DEVICES_DisplayServices': 'Service(s)',
            'DEVICES_DeploymentStatus': 'Deployment Status',
            'DEVICES_DeploymentFailed': 'Deployment Failed',
            'DEVICES_DeploymentCancelled': 'Deployment Cancelled',
            'DEVICES_DNSDracName': 'Resource Name',
            'DEVICES_DNSName': 'DNS Name',
            'DEVICES_ElementManager': 'Element Manager',
            'DEVICES_EmptyTable': 'No Devices found',
            'DEVICES_FirmwareStatus': 'Firmware Status',
            'DEVICES_RCMCompliance': 'RCM Compliance',
            'DEVICES_FreeDiskSpace': 'Free Disk Space',
            'DEVICES_GroupMembers': 'Group Members',
            'DEVICES_HideFilters': 'Hide Filters',
            'DEVICES_Host Groups': 'Host Groups',
            'DEVICES_HostIP': 'Host IP',
            'DEVICES_Hosts': 'Hosts',
            'DEVICES_NetAppStorageName': 'Resource Name',
            'DEVICES_Luns': 'LUNs',
            'DEVICES_Managed': 'Managed',
            'DEVICES_ManagedState': 'Managed State',
            'DEVICES_State': 'State',
            'DEVICES_ManagementIp': 'Management IP',
            'DEVICES_IPAddress': 'IP Address',
            'DEVICES_Manufacturer': 'Manufacturer',
            'DEVICES_ManufacturerModel': 'Manufacturer/Model',
            'DEVICES_NotInUse': 'Not in Use',
            'DEVICES_Online': 'Online',
            'DEVICES_OS': 'OS',
            'DEVICES_OSHostName': 'OS Hostname',
            'DEVICES_PowerState': 'Power State',
            'DEVICES_Processors': 'Processors',
            'DEVICES_Processor': 'Processor',
            'DEVICES_PendingUpdates': 'Pending Updates',
            'DEVICES_RemoveConfirm': 'Are you sure you want to remove the selected resources?',
            'DEVICES_ReplayProfile': 'Replay Profile',
            'DEVICES_UpdateResources': 'Update Resources',
            'DEVICES_UpdateResource': 'Update Resource',
            'DEVICES_CannotUpdateStorage': "Storage components must be updated outside of VxFlex Manager through the element manager.",
            'DEVICES_FirmwareRepository': 'Firmware Repository',
            'DEVICES_Reserved': 'Reserved',
            'DEVICES_Unknown': 'Unknown',
            'DEVICES_ResourceName': 'Resource Name',
            'DEVICES_Resources': 'Resources',
            'DEVICES_ResourceState': 'Resource State',
            'DEVICES_ResourceStateTooltip': 'Resource State:<br/> Â· Managed - Resources currently deployed or available for deployment by VxFlex Manager. Monitor firmware compliance and/or upgrade firmware for these resources. Includes states such as: Available, Error, and Unknown.<br/><br/>' +
                                                      'Â· Reserved - Resources not available for deployment by VxFlex Manager. These may be resources that are already deployed and in use in your environment. Monitor firmware compliance and/or upgrade firmware for these resources.<br/><br/>' +
                                                      'Â· Unmanaged - Resources not available for deployment by VxFlex Manager. Monitor firmware compliance, but firmware connot be upgraded.<br/><br/>',
            'DEVICES_ResourceType': 'Resource Type',
            'DEVICES_Compliance': 'RCM Compliance',
            'DEVICES_ComplianceToolTip': 'Compliance is determined by the firmware/software<br /> version for the selected resource based on the<br /> default Release Certification Matrix (RCM).',
            'DEVICES_ComplianceToolTipText': 'Compliance is determined by the firmware/software version for the selected resource based on the default Release Certification Matrix (RCM).',
            'DEVICES_ModelToolTipText': 'Dell EMC VxFlex OS is based on ScaleIO software.  VxFlex OS or ScaleIO values may be entered/shown in this field.',
            'DEVICES_UsedInServices': 'In Use in Service(s)',
            'DEVICES_NoncompliantDefault': 'Non-Compliant with Default Catalog {{name}}',
            'DEVICES_CompliantwithDefault': 'Compliant with Default Catalog - {{name}}',
            'DEVICES_NoncompliantService': 'Non-Compliant with Service Catalog - {{name}}',
            'DEVICES_CompliantService': 'Compliant with Service Catalog - {{name}}',
            'DEVICES_UpdateRequiredDefault': 'Update Required with Default Catalog - {{name}}',
            'DEVICES_UpdateRequiredService': 'Update Required with Service Catalog - {{name}}',
            'DEVICES_UpdateFailedDefault': 'Update Failed with Default Catalog - {{name}}',
            'DEVICES_UpdateFailedService': 'Update Failed with Service Catalog - {{name}}',
            'DEVICES_RunInventory': 'Run Inventory',
            'DEVICES_Alert_RunInventorySuccess': 'The Run Inventory process has started.',
            'DEVICES_SCVMMDeviceTitle': 'SCVMM Details',
            'DEVICES_SerialNumber': 'Serial Number',
            'DEVICES_ServerPools': 'Node Pools',
            'DEVICES_Service': 'Service',
            'DEVICES_ShowFilters': 'Show Filters',
            'DEVICES_SnapshotsTitle': 'Snapshots',
            'DEVICES_FreeGroupSpace': 'Free Group Space',
            'DEVICES_InUse': 'In Use',
            'DEVICES_Deploying': 'Deploying',
            'DEVICES_SystemStatus': 'System Status',
            'DEVICES_Title': 'Resources',
            'DEVICES_Unknown': 'Unknown',
            'DEVICES_Unmanaged': 'Unmanaged',
            'DEVICES_UpdateRequired': 'Update required',
            'DEVICES_UpdateFailed': 'Update failed',
            'DEVICES_Updating': 'Updating',
            'DEVICES_UpdatingResource': 'Updating Resource',
            'DEVICES_UpdatingService': 'Updating Service',
            'DEVICES_VCenterDeviceTitle': 'vCenter Details',
            'DEVICES_VMManager': 'VM Manager',
            'DEVICES_VMs': 'Virtual Machines',
            'DEVICES_Volumes': 'Volumes',
            'DEVICES_ExportAll_ErrorExportingDevices': 'Error Exporting Devices',
            'DEVICES_CompliantStatus_Unknown': 'Unknown',
            'DEVICES_CompliantStatus_Compliant': 'Compliant',
            'DEVICES_CompliantStatus_NonCompliant': 'Non-Compliant',
            'DEVICES_CompliantStatus_UpdateRequired': 'Update Required',
            'DEVICES_CompliantStatus_UpdateFailed': 'Update Failed',
            'DEVICES_CompliantStatus_PendingUpdates': 'Pending Updates',
            'DEVICES_WithDefaultCatalog': 'with Default Catalog -',
            'DEVICES_WithServiceCatalog': 'with Service Catalog -',
            'DEVICES_WithMinimum': 'with minimum',

            'DEVICES_SPAIPAddress': 'SP A IP Address',
            'DEVICES_SPBIPAddress': 'SP B IP Address',
            'DEVICES_Services': 'Service(s)',
            'DEVICEDETAILS_ServerOS': 'Node OS',
            'DEVICEDETAILS_ReplayInUse': 'Replay in use',
            'DEVICES_StoragePool': 'Storage Pool',
            'DEVICES_default': 'default',
            'DEVICES_backup': 'backup',
            'DEVICES_TotalDiskSpace': 'Total Disk Space',
            'DEVICES_EMC_StorageInformation': 'Storage Information',
            'DEVICES_EMC_ResourceName': 'Resource Name',
            'DEVICES_EMC_SoftwareVersion': 'Software Version',
            'DEVICES_EMC_SPAIPAddress': 'SP A IP Address',
            'DEVICES_EMC_SPBIPAddres': 'SP B IP Address',
            'DEVICES_EMC_LUNs': 'LUNs',
            'DEVICES_EMC_TotalLUNs': 'Total LUNs',
            'DEVICES_EMC_Up': 'Up',
            'DEVICES_EMC_Down': 'Down',
            'DEVICES_EMC_LaunchUnisphere': 'Launch Unisphere',
            'DEVICES_EMC_Members': 'Members',
            'DEVICES_EMC_storagepooltotal': 'Total',
            'DEVICES_EMC_Hosts': 'Hosts',
            'DEVICES_EMC_HostsOnline': 'Online',
            'DEVICES_EMC_serversinuse': 'In Use',
            'DEVICES_EMC_Disks': 'Disks',
            'DEVICES_EMC_manageddisks': 'Managed Disks',
            'DEVICES_EMC_sparedisks': 'Spare Disks',
            'DEVICES_EMC_ManagementIp': 'Management IP',
            'DEVICES_EMC_FileSystems': 'File Systems',
            'DEVICES_EMC_NFSShares': 'NFS Shares',
            'DEVICES_EMC_SMBShares': 'SMB Shares',
            'DEVICES_EMC_LUNs': 'LUNs',
            'DEVICES_EMC_Allocated': 'Allocated',
            'DEVICES_EMC_Pool': 'Pool',
            'DEVICES_EMC_LUNName': 'LUN Name',
            'DEVICES_EMC_BlockSoftwareVersion': 'Block Software Version',
            'DEVICES_EMC_SCALEIO_Performance': 'Performance',
            'DEVICES_EMC_SCALEIO_TabStorage': 'Storage',
            'DEVICES_EMC_SCALEIO_TabServers': 'Nodes',
            'DEVICES_EMC_SCALEIO_Storage_ProtectionDomain': 'Protection Domain',
            'DEVICES_EMC_SCALEIO_Storage_StoragePools': 'Storage Pools',
            'DEVICES_EMC_SCALEIO_Storage_Volumes': 'Volumes',
            'DEVICES_EMC_SCALEIO_Storage_Size': 'Size',
            'DEVICES_EMC_SCALEIO_Storage_Type': 'Type',
            'DEVICES_EMC_SCALEIO_Storage_MappedSDCs': 'Mapped SDCs',
            'DEVICES_EMC_SCALEIO_Server_ProtectionDomain': 'Protection Domain',
            'DEVICES_EMC_SCALEIO_Server_Type': 'Type',
            'DEVICES_EMC_SCALEIO_Server_Name': 'Name',
            'DEVICES_EMC_SCALEIO_Server_Connection': 'Connection',
            'DEVICES_EMC_SCALEIO_Server_IPAddress': 'IP Address',
            'DEVICES_EMC_SCALEIO_ScaleImageText': 'VxFlex OS',
            'DEVICES_EMC_SCALEIO_ScaleInformation': 'VxFlex OS Information',
            'DEVICES_EMC_SCALEIO_Used': 'Used',
            'DEVICES_EMC_SCALEIO_Available': 'Available',
            'DEVICES_EMC_SCALEIO_ProtectionDomains': 'Protection Domains',
            'DEVICES_EMC_SCALEIO_Servers': 'Nodes',
            'DEVICES_EMC_SCALEIO_Volumes': 'Volumes',
            'DEVICES_EMC_SCALEIO_SDCs': 'SDCs',
            'DEVICES_EMC_SCALEIO_SDSs': 'SDSs',
            'DEVICES_EMC_SCALEIO_Management': 'Management',
            'DEVICES_EMC_SCALEIO_launchScaleIOManager': 'Launch VxFlex OS Manager',
            'DEVICES_EMC_SCALEIO_ScaleIODataClients': 'VxFlex Data Clients (SDC)',
            'DEVICES_EMC_SCALEIO_ScaleIODataServers': 'VxFlex Data Nodes (SDS)',
            'DEVICES_EMC_SCALEIO_DevicesProtectionDomains': 'Protection Domains',
            'DEVICES_EMC_SCALEIO_DevicesVolumes': 'Volumes',
            'DEVICES_EMC_SCALEIO_TotalCapacity': 'Total Capacity',
            'DEVICES_EMC_SCALEIO_CapacityUsed': 'Capacity Used',
            'DEVICES_EMC_SCALEIO_AvailableCapacity': 'Available Capacity',
            'DEVICES_EMC_SCALEIO_Protected': 'Protected',
            'DEVICES_EMC_SCALEIO_InMaintenance': 'In Maintenance',
            'DEVICES_EMC_SCALEIO_Degraded': 'Degraded',
            'DEVICES_EMC_SCALEIO_Failed': 'Failed',
            'DEVICES_EMC_SCALEIO_Unused': 'Unused',
            'DEVICES_EMC_SCALEIO_Spare': 'Spare',
            'DEVICES_EMC_SCALEIO_Decreased': 'Decreased',
            'DEVICES_EMC_SCALEIO_Unavailable': 'Unavailable Unused',
            'DEVICES_EMC_SCALEIO_Max': 'Max',
            'DEVICES_EMC_SCALEIO_Management2': 'Management',
            'DEVICES_EMC_SCALEIO_LastHour': 'Last Hour',
            'DEVICES_EMC_SCALEIO_Last8Hours': 'Last 8 Hours',
            'DEVICES_EMC_SCALEIO_LastDay': 'Last Day',
            'DEVICES_EMC_SCALEIO_LastWeek': 'Last Week',
            'DEVICES_EMC_SCALEIO_LastMonth': 'Last Month',
            'DEVICES_EMC_SCALEIO_LastYear': 'Last Year',
            'DEVICES_EMC_SCALEIO_IOPS': 'IOPS',
            'DEVICES_EMC_SCALEIO_TotalIOPS': 'Total IOPS',
            'DEVICES_EMC_SCALEIO_ReadIOPS': 'Read IOPS',
            'DEVICES_EMC_SCALEIO_WriteIOPS': 'Write IOPS',
            'DEVICES_EMC_SCALEIO_Bandwidth': 'Bandwidth',
            'DEVICES_EMC_SCALEIO_TotalBandwidth': 'Total Bandwidth',
            'DEVICES_EMC_SCALEIO_ReadBandwith': 'Read Bandwith',
            'DEVICES_EMC_SCALEIO_WriteBandwidth': 'Write Bandwidth',
            'DEVICES_EMC_SCALEIO_IOWorkload': 'I/O Workload',
            'DEVICES_EMC_SCALEIO_Nodataavailable': 'No data available',
            'DEVICES_EMC_SCALEIO_NoDataDescription': 'Performance information is available when VxFlex OS is deployed to a service and VxFlex Manager is receiving data from the VxFlexOS Gateway',
            'DEVICES_EMC_SCALEIO_Minutes': 'Minutes',
            'DEVICES_EMC_SCALEIO_Hours': 'Hours',
            'DEVICES_EMC_SCALEIO_Days': 'Days',
            'DEVICES_EMC_SCALEIO_Months': 'Months',
            'DEVICES_EMC_SCALEIO_': '',
            'DEVICES_EMC_SCALEIO_': '',
            'DEVICES_EMC_SCALEIO_': '',

            'DEVICES_EM_ServiceTag': 'Asset/Service Tag',
            'DEVICES_EM_DescoveredDevices': 'Discovered Devices',
            'DEVICES_EM_Launch': 'Launch OME',

            'DEVICES_EMC_SCALEIO_Protected_DonutTitle': 'Protected',
            'DEVICES_EMC_SCALEIO_InMaintenance_DonutTitle': 'In Maintenance',
            'DEVICES_EMC_SCALEIO_Degraded_DonutTitle': 'Degraded',
            'DEVICES_EMC_SCALEIO_Failed_DonutTitle': 'Failed',
            'DEVICES_EMC_SCALEIO_Unused_DonutTitle': 'Unused',
            'DEVICES_EMC_SCALEIO_Spare_DonutTitle': 'Spare',
            'DEVICES_EMC_SCALEIO_Decreased_DonutTitle': 'Decreased',
            'DEVICES_EMC_SCALEIO_Unavailable_DonutTitle': 'Unavailable Unused',
            'DEVICES_EMC_SCALEIO_Max_DonutTitle': 'Max',

            'DEVICES_Apply_Firmware_Updates_Title': 'Apply Node Firmware Updates',
            'DEVICES_Apply_Resource_Updates_Title': 'Apply Resource Updates',
            'DEVICES_Apply_Firmware_Updates_Cancel_Confirmation': 'Are you sure you want to cancel?',

            'DEVICES_CONFIGURE_CHASSIS_ConfigureChassis': 'Configure Chassis',
            'DEVICES_CONFIGURE_CHASSIS_Welcome': 'Welcome',
            'DEVICES_CONFIGURE_CHASSIS_DiscoveredResources': 'Discovered Resources',
            'DEVICES_CONFIGURE_CHASSIS_DefaultFirmwareRepository': 'Default Firmware Repository',
            'DEVICES_CONFIGURE_CHASSIS_FirmwareCompliance': 'Firmware Compliance',
            'DEVICES_CONFIGURE_CHASSIS_ChassisConfiguration': 'Chassis Configuration',
            'DEVICES_CONFIGURE_CHASSIS_UniqueChassisSettings': 'Unique Chassis Settings',
            'DEVICES_CONFIGURE_CHASSIS_UniqueServerSettings': 'Unique Node Settings',
            'DEVICES_CONFIGURE_CHASSIS_UniqueIOModuleSettings': 'Unique I/O Module Settings',
            'DEVICES_CONFIGURE_CHASSIS_IOModuleConfiguration': 'I/O Module Configuration',
            'DEVICES_CONFIGURE_CHASSIS_Summary': 'Summary',
            'DEVICES_CONFIGURE_CHASSIS_WelcomeMessage': 'The <strong>Configure Chassis</strong> wizard will walk you through settings to on-board or reconfigure the chassis you have selected. This configuration includes chassis, iDRAC and I/O Modules. All steps in this process are optional. These settings will be applied at the end of the configuration process.',
            'DEVICES_CONFIGURE_CHASSIS_Thefollowingresourceshave': 'The following resources have been discovered within your environment.',
            'DEVICES_CONFIGURE_CHASSIS_Page2message2': 'If a resource has been discovered that you do not want to be in VxFlex Manager\'s environment, you may remove it from VxFlex Manager by clicking on the trashcan icon.',
            'DEVICES_CONFIGURE_CHASSIS_DefaultFirmwareRepoMessage': 'If you want VxFlex Manager to manage firmware on your resources beyond the minimum requirements, you can download the recommended VxFlex Manager repository or load custom repositories by clicking the <strong>Add Repository</strong> button below.',
            'DEVICES_CONFIGURE_CHASSIS_FirmwareComplianceMessage': 'All firmware on the discovered resources is compliant to the default repository selected.',
            'DEVICES_CONFIGURE_CHASSIS_FirmwareComplianceMessageIfNonCompliant': 'The following resources do not have compliant firmware.' +
                '<ul><li><strong>Update Required:</strong> Resources that do not meet the minimum required by VxFlex Manager</li><li><strong>Non-compliant:</strong> Resources that differ from the default repository</li></ul>' +
                '<br /> <p>You can select to update these resources immediately during the configuration process to bring them into compliance. Any resource that does not meet VxFlex Managerâs minimum will not be available in for deployments until the resource is brought into compliance.</p>',
            'DEVICES_CONFIGURE_CHASSIS_ChassisConfigMessage': 'Check the box below to identify those chassis you want to configure. All configuration settings will be applied at the end of the configuration process.',
            'DEVICES_CONFIGURE_CHASSIS_SelectChassisforInitialConfiguration': 'Select Chassis for Initial Configuration',
            'DEVICES_CONFIGURE_CHASSIS_ChassisConfigSelectWhichChassisMessage': 'Select which chassis you wish to configure and expand the different sections below the table to edit global settings.',
            'DEVICES_CONFIGURE_CHASSIS_UniqueChassisCheckTheBoxMessage': 'Check the box below to modify unique settings for chassis individually.',
            'DEVICES_CONFIGURE_CHASSIS_ConfigureUniqueChassisSettings': 'Configure Unique Chassis Settings',
            'DEVICES_CONFIGURE_CHASSIS_UniqueServerSettingsCheckTheBoxMessage': 'Check the box below to modify unique settings for the nodes within the chassis.',
            'DEVICES_CONFIGURE_CHASSIS_ConfigureUniqueServerSettings': 'Configure Unique Node Settings',
            'DEVICES_CONFIGURE_CHASSIS_UniqueIOModSettingsCheckTheBoxMessage': 'Check the box below to modify unique settings for the I/O Modules within the chassis.',
            'DEVICES_CONFIGURE_CHASSIS_ConfigureUniqueIOModuleSettings': 'Configure Unique I/O Module Settings',
            'DEVICES_CONFIGURE_CHASSIS_IOModConfigCheckTheBoxMessage': 'Check the box below to configure the uplink ports of the switches manually or upload a custom configuration file.',
            'DEVICES_CONFIGURE_CHASSIS_ConfigureUplinks': 'Configure Uplinks',

            'DEVICES_DETAILS_FIRMWARE_Components': 'Firmware Components',
            'DEVICES_DETAILS_SOFTWARE_Components': 'Software Components',
            'DEVICES_DETAILS_FIRMWARE_Component': 'Component',
            'DEVICES_DETAILS_FIRMWARE_Version': 'Version',
            'DEVICES_DETAILS_FIRMWARE_LastUpdated': 'Last Updated',

            'DEVICES_DETAILS_SOFTWARE_Component': 'Component',
            'DEVICES_DETAILS_SOFTWARE_Vendor': 'Vendor',
            'DEVICES_DETAILS_SOFTWARE_Version': 'Version',
            'DEVICES_DETAILS_SOFTWARE_LastUpdated': 'Last Updated',



            'DEVICES_DETAILS_CPU_ID': 'ID',
            'DEVICES_DETAILS_CPU_Manufacturer': 'Manufacturer',
            'DEVICES_DETAILS_CPU_Model': 'Model',
            'DEVICES_DETAILS_CPU_NumberofCores': 'Number of Cores',
            'DEVICES_DETAILS_CPU_EnabledCores': 'Enabled Cores',
            'DEVICES_DETAILS_CPU_MaxClockSpeed': 'Max Clock Speed (GHz)',
            'DEVICES_DETAILS_CPU_CurrentSpeed': 'Current Speed (GHz)',

            'DEVICES_DETAILS_MEMORY_ID': 'ID',
            'DEVICES_DETAILS_MEMORY_BankLabel': 'Bank Label',
            'DEVICES_DETAILS_MEMORY_CurrentSpeed': 'Current Speed',
            'DEVICES_DETAILS_MEMORY_Manufacturer': 'Manufacturer',
            'DEVICES_DETAILS_MEMORY_MemoryType': 'Memory Type',
            'DEVICES_DETAILS_MEMORY_PartNumber': '	Part Number',
            'DEVICES_DETAILS_MEMORY_Rank': 'Rank',
            'DEVICES_DETAILS_MEMORY_SerialNumber': 'Serial Number',
            'DEVICES_DETAILS_MEMORY_Size': 'Size',
            'DEVICES_DETAILS_MEMORY_Speed': 'Speed',
            'DEVICES_DETAILS_Volumes_Name': 'Name',
            'DEVICES_DETAILS_Volumes_LogicalSize': 'Logical Size',
            'DEVICES_DETAILS_Volumes_ReplayProfile': 'Replay Profile',
            'DEVICES_DETAILS_Volumes_StorageProfile': '	Storage Profile',
            'DEVICES_DETAILS_Volumes_DiskFolder': 'Disk Folder',

            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_Volume': 'Volume',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_StoragePool': 'Storage Pool',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_ReportedSize': 'Reported Size',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_VolumeReserve': 'Volume Reserve',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_SnapshotReserve': 'Snapshot Reserve',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_BorrowedSpace': 'Borrowed Space',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_VolumeStatus': 'Volume Status',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_ReplicationPartner': '	Replication Partner',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_SyncRepStatus': 'SyncRep Status',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_NumberofSnapshot': 'Number of Snapshot',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_ISCSIConnections': 'ISCSI Connections',
            'DEVICES_DETAILS_COMPELLENT_Volumes_Name': 'Name',
            'DEVICES_DETAILS_COMPELLENT_Volumes_LogicalSize': 'Logical Size',
            'DEVICES_DETAILS_COMPELLENT_Volumes_ReplayProfile': 'Replay Profile',
            'DEVICES_DETAILS_COMPELLENT_Volumes_StorageProfile': 'Storage Profile',
            'DEVICES_DETAILS_COMPELLENT_Volumes_DiskFolder': 'Disk Folder',

            'DEVICES_NETWORK_INTERFACES_InstanceID': 'Instance ID',
            'DEVICES_NETWORK_INTERFACES_Vendor': 'Vendor',
            'DEVICES_NETWORK_INTERFACES_Product': 'Product',
            'DEVICES_NETWORK_INTERFACES_NetworkMode': 'Network Mode',
            'DEVICES_NETWORK_INTERFACES_PermanentMACAddress': 'Permanent MAC Address',
            'DEVICES_NETWORK_INTERFACES_VirtualMACAddress': 'Virtual MAC Address',
            'DEVICES_NETWORK_INTERFACES_PermanentISCSIMACAddress': 'Permanent ISCSI MAC Address',
            'DEVICES_NETWORK_INTERFACES_VirtualISCSIMACAddress': 'Virtual ISCSI MAC Address',
            'DEVICES_NETWORK_INTERFACES_PermanentFCOEAddress': 'Permanent FCOE Address',
            'DEVICES_NETWORK_INTERFACES_VirtualFIPSMACAddress': 'Virtual FIPS MAC Address',
            'DEVICES_NETWORK_INTERFACES_InitiatorIQN': 'Initiator IQN',
            'DEVICES_NETWORK_INTERFACES_InitiatorIP': 'Initiator IP',
            'DEVICES_NETWORK_INTERFACES_World-wideportname(WWPN)': 'World-wide port name (WWPN)',
            'DEVICES_NETWORK_INTERFACES_VirtualWWPN': 'Virtual WWPN',
            'DEVICES_NETWORK_INTERFACES_WWnodeWeb': 'World-wide node name (WWNN)',
            'DEVICES_HostGroups': 'Host Groups',
            'DEVICES_InUseNoCatMessage': 'Service Firmware/Software Repository Not Set',

            'DEVICESTATE_Available': 'Available',
            'DEVICESTATE_Deployed': 'Deployed',
            'DEVICESTATE_Unknown': 'Unknown',
            'DEVICESTATE_Copying': 'Copying',
            'DEVICESTATE_Error': 'Error',
            'DEVICESTATE_Pending': 'Pending',
            'DEVICESTATE_Updating': 'Updating',
            'DEVICESTATE_Deploying': 'Deploying',
            'DEVICESTATE_PoweringOff': 'Powering Off',
            'DEVICESTATE_PoweringOn': 'Powering On',
            'DEVICESTATE_Reserved': 'Reserved',
            'DEVICESTATE_Unmanaged': 'Unmanaged',
            'DEVICESTATE_Online': 'Online',
            'DEVICESTATE_Yes': 'Yes',

            'DEVICETYPE_Chassis': 'Chassis',
            'DEVICETYPE_VRTX': 'Chassis',
            'DEVICETYPE_ChassisFX': 'Chassis',
            'DEVICETYPE_FXServer': 'FX Node',
            'DEVICETYPE_BladeServer': 'Blade Node',
            'DEVICETYPE_RackServer': 'Rack Node',
            'DEVICETYPE_TowerServer': 'Tower Node',
            'DEVICETYPE_AggregatorIOM': 'Switch',
            'DEVICETYPE_MXLIOM': 'Switch',
            'DEVICETYPE_FXIOM': 'Switch',
            'DEVICETYPE_Unknown': 'Unknown',
            'DEVICETYPE_VM': 'Virtual Machine',
            'DEVICETYPE_EM': 'Element Manager',
            'DEVICETYPE_Server': 'Node',
            'DEVICETYPE_GenericSwitch': 'Switch',
            'DEVICETYPE_DellSwitch': 'Switch',
            'DEVICETYPE_CiscoSwitch': 'Switch',
            'DEVICETYPE_Compellent': 'Storage Group',
            'DEVICETYPE_Equallogic': 'Storage Group',
            'DEVICETYPE_NetApp': 'Storage Group',
            'DEVICETYPE_VCenter': 'VM Manager',
            'DEVICETYPE_SCVMM': 'VM Manager',
            'DEVICETYPE_Storage': 'Storage Group',
            'DEVICETYPE_EMCVNX': 'EMC VNX',
            'DEVICETYPE_EMCUnity': 'EMC Unity',
            'DEVICETYPE_ScaleIO': 'VxFlex',

            'DISCOVERY_AddResourceType': 'Add Resource Type',
            'DISCOVERY_ChassisCredentials': 'Chassis Credentials*',
            'DISCOVERY_RackServerCredentials': 'Rack Node Credentials*',
            'DISCOVERY_BladeCredentials': 'Blade Credentials*',
            'DISCOVERY_IPAddressing': 'IP Addressing',

            'DISCOVERY_IPAddressing_Chassis': 'Chassis',
            'DISCOVERY_IPAddressing_Chassis_Use_Existing': 'Use existing chassis IP address',
            'DISCOVERY_IPAddressing_Chassis_Assign_Static': 'Assign static IP address from this network',

            'DISCOVERY_IPAddressing_Servers': 'Nodes',
            'DISCOVERY_IPAddressing_Servers_Use_Existing': 'Use existing chassis IP address',
            'DISCOVERY_IPAddressing_Servers_Assign_Static': 'Assign static IP address from this network',
            'DISCOVERY_IPAddressing_Servers_Assign_DHCP': 'Assign IP address via DHCP',

            'DISCOVERY_IPAddressing_IOM': 'I/O Modules',
            'DISCOVERY_IPAddressing_IOM_Use_Existing': 'Use existing chassis IP address',
            'DISCOVERY_IPAddressing_IOM_Assign_Static': 'Assign static IP address from this network',
            'DISCOVERY_IPAddressing_IOM_Assign_DHCP': 'Assign IP address via DHCP',


            'DISCOVERY_IOMCredentials': 'I/O Module Credentials*',
            'DISCOVERY_Credentials': 'Credentials',
            'DISCOVERY_Delete_Resource_Type': 'Delete Resurce Type',
            'DISCOVERY_Add_Server_Pool': 'Add Node Pool',
            'DISCOVERY_Add_Credential': 'Add Credential',
            'DISCOVERY_Edit_Credential': 'Edit Credential',

            'DISCOVERY_Select_Chassis_Credential': 'Select Chassis Credential',
            'DISCOVERY_Select_Blade_Credential': 'Select Blade Credential',
            'DISCOVERY_Select_IOM_Credential': 'Select I/O Module Credential',
            'DISCOVERY_Select_Server_Credential': 'Select Node Credential',
            'DISCOVERY_Select_Storage_Credential': 'Select Storage Credential',
            'DISCOVERY_Select_Switch_Credential': 'Select Switch Credential',
            'DISCOVERY_Select_SCVMM_Credential': 'Select SCVMM Credential',
            'DISCOVERY_Select_vCenter_Credential': 'Select vCenter Credential',
            'DISCOVERY_Select_EM_Credential': 'Select EM Credential',
            'DISCOVERY_Select_ScaleIOGateway_Credential': 'Select VxFlex OS Gateway Credential',


            'DISCOVERY_DiscoverIntoServerPool': 'Discover into Node Pool',
            //'DISCOVERY_EmptyChassisList': 'There were no Chassis identified in the selected IP Range. You may continue with discovery on the next step or go back and adjust the selected IP Ranges.',
            //'DISCOVERY_EmptyResourceList': 'There were no Resources identified in the selected IP Range. You may continue with discovery on the next step or go back and adjust the selected IP Ranges.',
            'DISCOVERY_EmptyChassisList': 'There were no Chassis identified in the selected IP Range. Please go back and adjust the IP Ranges provided.',
            'DISCOVERY_EmptyResourceList': 'There were no Resources identified in the selected IP Range. Please go back and adjust the IP Ranges provided.',
            'DISCOVERY_IdentifyResources': 'Identify Resources',
            'DISCOVERY_IdentifyResources_ResourceTypeToolTipText': 'Dell EMC VxFlex OS is based on ScaleIO software.  VxFlex OS or ScaleIO values may be entered/shown in this field.',
            'DISCOVERY_IdentifyResources_ResourceStateTooltipTitle': 'Resource State: ',
            'DISCOVERY_IdentifyResources_ResourceStateTooltip': 'Â· Choose Managed if you would like VxFlex Manager to monitor firmware compliance and/or upgrade firmware, and for these resources to be available to be deployed by VxFlex Manager. These are typically resources that are either un-configured, or are being repurposed.<br/><br/>' +
                                        'Â· Choose Reserved if you would like VxFlex Manager to monitor firmware compliance and/or upgrade firmware, but do not want these resources available to be deployed by VxFlex Manager. These may be resources that are already deployed and in use in your environment.<br/><br/>' +
                                        'Â· Choose Unmanaged if you would like VxFlex Manager to monitor firmware compliance, but not have VxFlex Manager upgrade these resources or have them available to be deployed by VxFlex Manager.<br/><br/>',
            'DISCOVERY_IdentifyResourcesText1': 'Click <b>Add Resource Type</b> to enter the IP address(es) and credentials for the resource(s) you want to discover. Only a starting IP address is required, but to discover resources in an IP range, both starting and ending IP addresses are needed. ',
            'DISCOVERY_IdentifyResourcesText2': 'Choose the Reserved Resource State if you would like to manage resource RCM compliance, but do not want these resources to be deployed by VxFlex Manager.  Reserved state may also be used for resources that are already deployed and in use, in order to monitor RCM compliance. ',
            'DISCOVERY_IdentifyResourcesText3': 'Choose Unmanaged if you would like to discover resources, but not have VxFlex Manager administer resource RCM compliance or deploy these resources.',
            'DISCOVERY_InitialResourceConfig': 'Initial Resource Configuration',
            'DISCOVERY_InitialResourceConfig_ConfirmDeleteResourceType': 'Are you sure you want to delete the selected resource type?',
            'DISCOVERY_InitialChassisConfigHelp1': 'VxFlex Manager has discovered one or more rack nodes.',
            'DISCOVERY_InitialChassisConfigHelp2': 'Check any unconfigured resources or resources that VxFlex Manager should initially reconfigure as part of the discovery process in the table below.',
            'DISCOVERY_InitialChassisConfigTitle2': 'Select Chassis for Initial Configuration',
            'DISCOVERY_InitialChassisConfigHelp3': 'These settings below will be applied to the selected chassis during the discovery process.',
            'DISCOVERY_InitialChassisConfigHelp4': 'These settings defined below will be applied to the selected resources upon completion of the discovery and configuration process.',
            'DISCOVERY_InitialChassisConfigSelectChassis': 'Select Chassis for Initial Configuration',
            'DISCOVERY_InitialChassisConfigSelectRack': 'Select Rack Nodes for Initial Configuration',
            'DISCOVERY_InitialChassisConfigConnecting': 'Connecting to Chassis...',
            'DISCOVERY_InitialResourcesConfigConnecting': 'Connecting to Resources...',
            'DISCOVERY_SelectRackServersforInitialConfiguration': 'Select Rack Nodes for Initial Configuration',
            'DISCOVERY_ResourcesDiscovered': '{{num}} Resources Successfully Discovered',
            'DISCOVERY_ChassisDiscovered': '{{num}} Chassis Successfully Discovered',
            'DISCOVERY_IPAddressRange': 'IP Address Range',
            'DISCOVERY_PlaceholderServer': 'Mgmt IP',
            'DISCOVERY_PlaceholderStorage': 'Mgmt IP',
            'DISCOVERY_PlaceholderSwitch': 'Mgmt IP',
            'DISCOVERY_PlaceholderVCenter': 'vCenter Host IP',
            'DISCOVERY_PlaceholderSCVMM': 'SCVMM Host IP',
            'DISCOVERY_PlaceholderChassis': 'CMC IP',
            'DISCOVERY_PlaceholderOptional': 'Optional',
            'DISCOVERY_SelectServerPool': 'Select Node Pool',
            'DISCOVERY_SummaryHelp1': 'Click finish to run the discovery and inventory process.</p><p>While discovery is running a progress indicator will appear on the Dashboard in Recent Activity and in the upper right corner of the Resources page.',
            'DISCOVERY_SummaryHelp1.5': 'While discovery is running a progress indicator will appear on the Dashboard in Recent Activity and in the upper right corner of the Resources page.',
            'DISCOVERY_SummaryHelp2': 'Click finish to run the discovery, inventory and initial resource configuration processes.',
            'DISCOVERY_SummaryHelp2.5': 'While discovery is running a progress indicator will appear on the Dashboard in Recent Activity and in the upper right corner of the Resources page.',
            'DISCOVERY_SummaryHelp3': 'Click finish to run the discovery and inventory process.',
            'DISCOVERY_SummaryHelp3.5': 'While discovery is running a progress indicator will appear in the Discovery step. Once discovery is complete you will be able to preview those resources VxFlex Manager has been able to inventory in the next configuration step.',
            'DISCOVERY_SummaryHelp4': 'Click finish to run the discovery, inventory and initial resource configuration processes.',
            'DISCOVERY_SummaryHelp4.5': 'While discovery is running a progress indicator will appear in the Discovery step. Once discovery is complete you will be able to preview those resources VxFlex Manager has been able to inventory in the next configuration step.',
            'DISCOVERY_SupportedBlades': 'Supported Blades',
            'DISCOVERY_SupportedIOMs': 'Supported IOMs',
            'DISCOVERY_Title': 'Discovery Wizard',
            'DISCOVERY_WelcomeTitle': 'Welcome',
            'DISCOVERY_WelcomeText1': 'Use this wizard to discover and collect inventory data from resources within your environment. The supported resource types include nodes, switches, and virtual machine managers.',
            'DISCOVERY_WelcomeText2': 'Before discovering the resources, it is recommended to:',
            'DISCOVERY_WelcomeText3': '<li>Gather IP addresses and credentials to access the resources.</li><li>Make sure the resources and the virtual appliances are connected to the network</li>',
            'DISCOVERY_WelcomeText4': '* Indicates that data is mandatory.',
            'DISCOVERY_LongRunningNotice': 'The Discovery and Configuration process may take several minutes before resources are available in the Resources page.<br /><br />Are you sure you want to submit this discovery job?',
            'DISCOVERY_LongRunningNotice_NoChassis': 'The Discovery process may take several minutes before resources are available in the Resources page.<br /><br />Are you sure you want to submit this discovery job?',
            'DISCOVERY_Cancel_Confirmation': 'Are you sure you want to cancel?',
            'DISCOVERY_IDResourcesErrorNoResources': 'Please add one or more resources in order to proceed.',
            'DISCOVERY_IDResourcesErrorIncomplete': 'Please complete the remaining required fields.',

            'DISKTYPES_Any': 'Any Available',
            'DISKTYPES_First': 'First Disks',
            'DISKTYPES_Last': 'Last/Rear Disks',
            'DISKTYPES_Hdd': 'Require HDD',
            'DISKTYPES_Ssd': 'Require SSD',

            'EDIT_FIRMWARE_Default_Repository': 'Default Firmware Repository',
            'EDIT_FIRMWARE_Default_Firmware_Software_Repository': 'Default Firmware/Software Repository',
            'EDIT_FIRMWARE_Default_Release_Certification_Matrix': 'Default Release Certification Matrix (RCM)',
            'EDIT_FIRMWARE_THState': 'State',
            'EDIT_FIRMWARE_THRepository_Name': 'RCM Name',
            'EDIT_FIRMWARE_TH_Source': 'Source',
            'EDIT_FIRMWARE_THAvailableActions': 'Available Actions',
            'EDIT_FIRMWARE_THCustom_Bundles': 'Custom Bundles',
            'EDIT_FIRMWARE_View_Bundles': 'View Bundles',
            'EDIT_FIRMWARE_Add_Custom_Bundle': 'Add Custom Bundle',
            'EDIT_FIRMWARE_Bundles': 'Bundles',
            'EDIT_FIRMWARE_Components': 'Components',
            'EDIT_FIRMWARE_Created_On': 'Created On',
            'EDIT_FIRMWARE_Last_Updated': 'Last Updated',
            'EDIT_FIRMWARE_Custom_Bundles': 'Custom Bundles',
            'EDIT_FIRMWARE_Services_Affected': 'Services Affected',
            'EDIT_FIRMWARE_Delete_Confirmation': 'Are you sure you want to remove this repository?<br /><br />Warning:  If this repository is specified in a template any future deployments of that template will fail.<br /><br />NOTE:  This action will only remove the repository from VxFlex Manager.  It will not affect the original source.',
            'EDIT_FIRMWARE_Delete_Tooltip': 'Delete Firmware Repository',
            'EDIT_FIRMWARE_AddRepository': 'Add RCM',
            'EDIT_FIRMWARE_NoReleaseCertificationMatrixadded': 'No Release Certification Matrix added',
            'EDIT_FIRMWARE_AddNow': 'Add Now',
            'EDIT_FIRMWARE_DownloadRCM': 'If you would like VxFlex Manager to monitor your resource compliance beyond standard requirements, you can download the recommended Release Certification Matrix (RCM) from either Dell EMC Secure Remote Services or from a local network path.',
            'EDIT_FIRMWARE_': '',
            'EDIT_FIRMWARE_': '',
            'EDIT_FIRMWARE_': '',
            'EDIT_FIRMWARE_': '',
            'EDIT_FIRMWARE_': '',


            'EDITPOOL_EditVirtualMac_IdentityCountToAdd': 'Number of Virtual MAC Identities to Add',
            'EDITPOOL_EditVirtualIQN_IdentityCountToAdd': 'Number of Virtual iSCSI Identities to Add',
            'EDITPOOL_EditVirtualWWPN_IdentityCountToAdd': 'Number of Virtual WWPN Identities to Add',
            'EDITPOOL_EditVirtualWWNN_IdentityCountToAdd': 'Number of Virtual WWNN Identities to Add',
            'EDITPOOL_Field_Required': 'This field is required',
            'EDITPOOL_Field_Range': 'A value greater than or equal to 0 is required',
            'EDITPOOL_Auto_Generate': 'Auto Generate Identities if needed during deployments',

            'ERROR_InvalidDate': 'Invalid Date',
            'ERROR_InvalidURL_Error': 'Invalid URL format.',
            'ERROR_InvalidIpURL_Error': 'Invalid IP or URL format.',
            'ERROR_Required_Error': 'You must enter a value for this field.',
            'ERROR_Email_Error': 'Provide a email address.',

            'FIRMWARE_UpdateInProgress': 'Firmware Update In Progress',

            "FORM_BUILDER_LABELS_citrix_xd7_source": "Source Location",
            "FORM_BUILDER_LABELS_citrix_xd7_sql": "SQL Node",
            "FORM_BUILDER_LABELS_citrix_xd7_controller": "Delivery Controller",
            "FORM_BUILDER_LABELS_citrix_xd7_desktopstudio": "Citrix Studio",
            "FORM_BUILDER_LABELS_citrix_xd7_licenseserver": "License Node",
            "FORM_BUILDER_LABELS_citrix_xd7_desktopdirector": "Citrix Director",
            "FORM_BUILDER_LABELS_citrix_xd7_storefront": "StoreFront",
            "FORM_BUILDER_LABELS_linux_postinstall_install_packages": "Install Packages",
            "FORM_BUILDER_LABELS_linux_postinstall_upload_share": "Upload Share",
            "FORM_BUILDER_LABELS_linux_postinstall_upload_file": "Upload File",
            "FORM_BUILDER_LABELS_linux_postinstall_upload_recursive": "Upload Recursive",
            "FORM_BUILDER_LABELS_linux_postinstall_execute_file_command": "Execute File Command",
            "FORM_BUILDER_LABELS_windows_postinstall_share": "Share",
            "FORM_BUILDER_LABELS_windows_postinstall_install_command": "Install Command",
            "FORM_BUILDER_LABELS_windows_postinstall_upload_file": "Upload File",
            "FORM_BUILDER_LABELS_windows_postinstall_upload_recurse": "Upload Recurse",
            "FORM_BUILDER_LABELS_windows_postinstall_execute_file_command": "Execute File Command",
            "FORM_BUILDER_LABELS_mssql_media": "Media",
            "FORM_BUILDER_LABELS_mssql2012_media": "Media Location",
            "FORM_BUILDER_LABELS_mssql2012_instancename": "Instance Name",
            "FORM_BUILDER_LABELS_mssql2012_features": "Features",
            "FORM_BUILDER_LABELS_mssql2012_sapwd": "SA Password",
            "FORM_BUILDER_LABELS_mssql2012_agtsvcaccount": "SQL Agent Service Account Name",
            "FORM_BUILDER_LABELS_mssql2012_agtsvcpassword": "SQL Agent Service Account Password",
            "FORM_BUILDER_LABELS_mssql2012_assvcaccount": "Analysis Services Account Name",
            "FORM_BUILDER_LABELS_mssql2012_assvcpassword": "Analysis Services Account Password",
            "FORM_BUILDER_LABELS_mssql2012_rssvcaccount": "Reporting Services Account Name",
            "FORM_BUILDER_LABELS_mssql2012_rssvcpassword": "Reporting Services Account Password",
            "FORM_BUILDER_LABELS_mssql2012_sqlsvcaccount": "SQL Service Account Name",
            "FORM_BUILDER_LABELS_mssql2012_sqlsysadminaccounts": "SQL System Admin Accounts",
            "FORM_BUILDER_LABELS_mssql2012_sqlsvcpassword": "SQL Service Account Password",
            "FORM_BUILDER_LABELS_mssql2012_instancedir": "Instance Directory",
            "FORM_BUILDER_LABELS_mssql2012_ascollation": "Analysis Services Collation",
            "FORM_BUILDER_LABELS_mssql2012_sqlcollation": "SQL Collation",
            "FORM_BUILDER_LABELS_mssql2012_admin": "Administrator",
            "FORM_BUILDER_LABELS_mssql2012_netfxsource": ".Net Source Directory",
            "FORM_BUILDER_LABELS_": "",

            //Getting Started
            'GETTINGSTARTED_systemsettings': 'Initial Appliance Setup',
            'GETTINGSTARTED_welcome': 'Welcome to Dell EMC VxFlex Manager',
            'GETTINGSTARTED_title': 'VxFlex Manager is Dell EMC\'s unified management platform that enables automated delivery of IT resources, empowering users to quickly deploy infrastructure and workloads.',
            'GETTINGSTARTED_about': 'It provides additional third-party hardware support to aggregate customers\' existing heterogeneous infrastructure investments. This speeds up workload delivery and streamlines infrastructure management, enabling IT organizations to accelerate service delivery and time to value for customers.',
            'GETTINGSTARTED_instructions': 'Follow the steps below to discover resources and deploy services based on default templates.',
            'GETTINGSTARTED_instructions_initialsetup': 'Not able to proceed? Make sure you have completed the ',
            'GETTINGSTARTED_instructiontitle': 'Getting Started',
            'GETTINGSTARTED_step1': 'Step 1:',
            'GETTINGSTARTED_step2title': 'Networks',
            'GETTINGSTARTED_step2help': 'Define networks currently configured in your environment that your resources can access.',
            'GETTINGSTARTED_step2btn': 'Define Networks',
            'GETTINGSTARTED_step2': 'Step 2:',
            'GETTINGSTARTED_step3title': 'Discover',
            'GETTINGSTARTED_step3help': 'Discover resources that will be managed by VxFlex Manager.',
            'GETTINGSTARTED_step3btn': 'Discover Resources',
            'GETTINGSTARTED_jobsinprogress': 'Jobs In-Progress: {{jobsInProgress}} Running',
            'GETTINGSTARTED_jobs_ViewJobsPage': 'View Jobs Page',
            'GETTINGSTARTED_jobs_': '',
            'GETTINGSTARTED_jobs_': '',
            'GETTINGSTARTED_jobs_': '',
            'GETTINGSTARTED_initialhardwareconfiginprogress': 'Initial Hardware Configuration',
            'GETTINGSTARTED_firmwaresoftwareupdating': 'Firmware/Software Updating',
            'GETTINGSTARTED_inventoryupdating': 'Inventory Updating',
            'GETTINGSTARTED_deploymentupdating': 'Deployment Updating',
            'GETTINGSTARTED_discoveryjobrunning': 'Discovery Job Running:',
            'GETTINGSTARTED_discoveryjobs': 'Discovery Jobs',
            'GETTINGSTARTED_updatesinprogress': 'Updates In-Progress',
            'GETTINGSTARTED_noupdatesinprogress': 'No Jobs Currently In-Progress',
            'GETTINGSTARTED_discoveredresources': 'Discovered Resources: ',
            'GETTINGSTARTED_pendingresources': 'Pending Resources: ',
            'GETTINGSTARTED_errorresources': 'Resources with Errors: ',
            'GETTINGSTARTED_step3': 'Step 3:',
            'GETTINGSTARTED_defineexistingservices': 'Define Existing Services',
            'GETTINGSTARTED_addexistingservice': 'Add Existing Service',
            'GETTINGSTARTED_defineexistingserviceshelp': 'Define existing ESXi services for resources that you do not want to re-configure.',
            'GETTINGSTARTED_addexistingserviceshelp': 'Add existing ESXi services for resources that you do not want to re-configure.',
            'GETTINGSTARTED_step4': 'Step 4:',
            'GETTINGSTARTED_step4title': 'Release Certification Matrix (RCM)',
            'GETTINGSTARTED_step4help': 'Provide RCM resource location and authentication to keep devices compliant.',
            'GETTINGSTARTED_step4btn': 'Configure RCM',
            'GETTINGSTARTED_ConfigureReleaseCertificationMartix': 'Configure Release Certification Martix (RCM)',
            'GETTINGSTARTED_step5': 'Step 5:',
            'GETTINGSTARTED_step5title': 'Templates',
            'GETTINGSTARTED_step5help': 'Create a new template or clone and edit one of the sample templates, publish and deploy a service.',
            'GETTINGSTARTED_step5btn': 'Add a Template',
            'GETTINGSTARTED_showwelcome': 'Show welcome screen on next launch. (This welcome screen may always be accessed through your settings if needed.)',
            'GETTINGSTARTED_restorefrombackup': 'Restore From Backup',
            'GETTINGSTARTED_ShowWelcomeScreen': 'Show welcome screen on next launch.',
            'GETTINGSTARTED_ShowWelcomeScreenExplanation': '(This welcome screen may always be accessed through your settings)',
            'GETTINGSTARTED_SupportGetHelpDescription': 'Get help with racking and cabling your new hardware, or access information about setting up your controller software.',
            'GETTINGSTARTED_VisitASMSiteSupport': 'Visit our VxFlex Manager Support site',
            'GETTINGSTARTED_CommunityDescription': 'Access our VxFlex Manager Community to learn more about Dell\'s new line of unified management solutions, or to share your experience.',
            'GETTINGSTARTED_CommunityLink': 'Visit our VxFlex Manager Community center',

            'IMPORTTEMPLATE_Title': 'Import Template',
            'IMPORTTEMPLATE_SelectATemplate': 'Select A Template',

            'INVENTORYUPDATE_InProgress': 'Inventory Update In Progress',

            'LOGS_Title': 'Logs',
            'LOGS_ExportAll': 'Export All',
            'LOGS_Purge': 'Purge',
            'LOGS_ViewCategories': 'View Categories',
            'LOGS_THSeverity': 'Severity',
            'LOGS_THCategory': 'Category',
            'LOGS_THDescription': 'Description',
            'LOGS_THDate': 'Date',
            'LOGS_THUser': 'User',
            'LOGS_RESOURCE_SEVERITIES_Healthy': 'Healthy',
            'LOGS_RESOURCE_SEVERITIES_Critical': 'Critical',
            'LOGS_RESOURCE_SEVERITIES_Warning': 'Warning',
            'LOGS_RESOURCE_SEVERITIES_Info': 'Info',
            'LOGS_RESOURCE_SEVERITIES_EmptyTable': 'There are no items available.',
            'LOGS_RESOURCE_SEVERITIES_ViewbySeverity': 'View by Severity',
            'LOGS_RESOURCE_SEVERITIES_ExportAll': 'Export All',
            'LOGS_RESOURCE_SEVERITIES_ComponentLogsModalTitle': '{{componentName}} Logs',

            'LISTPOOLS_Title': 'Virtual Identity Pools',
            'LISTPOOLS_THName': 'Name',
            'LISTPOOLS_THDescription': 'Description',
            'LISTPOOLS_THCreatedBy': 'Created By',
            'LISTPOOLS_THCreatedDate': 'Created Date',
            'LISTPOOLS_Detail_Heading': 'Pool : ',
            'LISTPOOLS_Tab_Summary': 'Summary',
            'LISTPOOLS_Tab_Server_Templates': 'Node Templates',
            'LISTPOOLS_Summary_LAN_Header': 'MAC',
            'LISTPOOLS_Summary_ISCSI_Header': 'IQN',
            'LISTPOOLS_Summary_WWPN_Header': 'WWPN',
            'LISTPOOLS_Summary_WWNN_Header': 'WWNN',
            'LISTPOOLS_Summary_Prefix': 'Selected Prefix',
            'LISTPOOLS_Summary_Reserved': 'Reserved',
            'LISTPOOLS_Summary_Assigned': 'Assigned',
            'LISTPOOLS_Summary_Available': 'Available',
            'LISTPOOLS_Summary_Auto_Generate': 'Auto Generate',
            'LISTPOOLS_Summary_Update_Pool_Identities': 'Update Pool Identities',
            'LISTPOOLS_Summary_Template_Useage_Name': 'Name',
            'LISTPOOLS_Summary_Template_Useage_None': 'There are no templates using this pool.',
            'LISTPOOLS_Export_Confirmation': 'Are you sure you want to export the selected pools?',
            'LISTPOOLS_Delete_Confirmation': 'Are you sure you want to delete the selected pools?',
            'LISTPOOLS_Update_Pool_Title': 'Update Pool Identities',

            'MIGRATE_SERVER_Title': 'Migrate Node(s)',
            'MIGRATE_SERVER_Help': '',
            'MIGRATE_SERVER_Current_Devices': 'Select specific nodes to migrate',
            'MIGRATE_SERVER_THState': 'State',
            'MIGRATE_SERVER_THHost_IP': 'IP Address',
            'MIGRATE_SERVER_THResource_ID': 'Asset/Service Tag',
            'MIGRATE_SERVER_THModel': 'Model',
            'MIGRATE_SERVER_THServer_Pool': 'Current Node Pool',
            'MIGRATE_SERVER_THNew_Server_Pool': 'New Node Pool',
            'MIGRATE_SERVER_Migrate': 'Migrate',
            'MIGRATE_SERVER_Confirm': 'Are you sure you want to migrate the selected node(s)?',
            'MIGRATE_SERVER_Submitted': 'The node migration process has been submitted.',

            'NETWORKS_ADD_PreviouslyDeployedNetworks': 'Previously Deployed Networks',
            'NETWORKS_ADD_ResourceName': 'Resource Name',
            'NETWORKS_ADD_Networks': 'Networks',
            'NETWORKS_ADD_AvailableNetworks': 'Available Networks',
            'NETWORKS_ADD_NetworkstobeAdded': 'Networks to be Added',
            'NETWORKS_ADD_NetworkName': 'Network Name',
            'NETWORKS_ADD_SelectPortGroupStar': 'Select Port Group *',
            'NETWORKS_ADD_SelectResourcesStar': 'Select Resources *',
            'NETWORKS_ADD_Actions': 'Actions',
            'NETWORKS_ADD_Add': 'Add',
            'NETWORKS_ADD_DefineaNewNetwork': 'Define a New Network',
            'NETWORKS_ADD_NewPortGroup': 'New Port Group',
            'NETWORKS_ADD_enteraPortGroupname': 'enter a Port Group name',
            'NETWORKS_ADD_FirstselectaPortGroup': 'First, select a Port Group.',
            'NETWORKS_ADD_AllHosts': 'All Hosts',
            'NETWORKS_ADD_SelectResources': 'Select Resources',
            'NETWORKS_ADD_Remove': 'Remove',
            'NETWORKS_ADD_SelectAnAvailableNetwork': 'Select an available network above, or click Define a New Network to begin.',
            'NETWORKS_Define': 'Define',
            'NETWORKS_Edit': 'Edit',
            'NETWORKS_Delete': 'Delete',
            'NETWORKS_ExportAll': 'Export All',
            'NETWORKS_TH_Name': 'Name',
            'NETWORKS_TH_Description': 'Description',
            'NETWORKS_TH_NetworkType': 'Network Type',
            'NETWORKS_TH_NetworkTypeTooltipText': 'Dell EMC VxFlex OS is based on ScaleIO software.  VxFlex OS or ScaleIO values may be entered/shown in this field.',
            'NETWORKS_TH_VLANID': 'VLAN ID',
            'NETWORKS_TH_IPAddressSetting': 'IP Address Setting',
            'NETWORKS_TH_StartingIPAddress': 'Starting IP Address',
            'NETWORKS_TH_EndingIPAddress': 'Ending IP Address',
            'NETWORKS_TH_IPAddressesinUse': 'IP Address in Use',
            'NETWORKS_Empty': 'There are no items available.',
            'NETWORKS_Details': 'Details',
            'NETWORKS_ExportNetworkDetails': 'Export Network Details',
            'NETWORKS_LastUpdatedBy': 'Last Updated By',
            'NETWORKS_DateLastUpdated': 'Date Last Updated',
            'NETWORKS_CreatedBy': 'Created By',
            'NETWORKS_DateCreated': 'Date Created',
            'NETWORKS_SubnetMask': 'Subnet Mask',
            'NETWORKS_Gateway': 'Gateway',
            'NETWORKS_PrimaryDNS': 'Primary DNS',
            'NETWORKS_SecondaryDNS': 'Secondary DNS',
            'NETWORKS_DNSSuffix': 'DNS Suffix',
            'NETWORKS_StaticIPAddressDetails': 'Static IP Address Details',
            'NETWORKS_IPAddressesinUse': 'IP Addresses in Use',
            'NETWORKS_View': 'View',
            'NETWORKS_State': 'State',
            'NETWORKS_IPAddress': 'IP Address',
            'NETWORKS_ServiceUsingIPAddress': 'Service Using IP Address',
            'NETWORKS_ResourceUsingIPAddress': 'Resource Using IP Address',
            'NETWORKS_ConfirmDelete': 'Are you sure you want to delete this network?<br /><br />NOTE: This action will only delete the network from VxFlex Manager.',
            'NETWORKSSTATE_InUse': 'In Use',
            'NETWORKSSTATE_Available': 'Available',
            'NETWORKSVIEW_All': 'All IP Addresses',
            'NETWORKSVIEW_InUse': 'IP Addresses in Use',
            'NETWORKSVIEW_Available': 'Available IP Addresses',

            'NETWORKS_Edit_CreateTitle': 'Define Network',
            'NETWORKS_Edit_EditTitle': 'Edit Network',
            'NETWORKS_Edit_CreateHelp': 'Enter the information of the networks that are currently configured in your environment that VxFlex Manager and the resources can access.',
            'NETWORKS_Edit_EditHelp': '',
            'NETWORKS_Edit_Name': 'Name',
            'NETWORKS_Edit_Description': 'Description',
            'NETWORKS_Edit_NetworkType': 'Network Type',
            'NETWORKS_Edit_SelectNetworkType': 'Select Network Type...',
            'NETWORKS_Edit_VLANID': 'VLAN ID* (any number between 1 and 4094)',
            'NETWORKS_Edit_ConfigureStatic': 'Configure Static IP Address Ranges',
            'NETWORKS_Edit_GatewayHelp': 'To configure a static network, you must add at least one valid IP address range and additional required information. IP address ranges must not overlap, and should be used exclusively for the static network defined here.',
            'NETWORKS_Edit_SubnetMask': 'Subnet Mask',
            'NETWORKS_Edit_Gateway': 'Gateway',
            'NETWORKS_Edit_PrimaryDNS': 'Primary DNS',
            'NETWORKS_Edit_SecondaryDNS': 'Secondary DNS',
            'NETWORKS_Edit_DNSSuffix': 'DNS Suffix',
            'NETWORKS_Edit_IPAddressRanges': 'IP Address Range(s)',
            'NETWORKS_Edit_AddIPAddressRange': 'Add IP Address Range',
            'NETWORKS_Edit_TH_StartingIPAddress': 'Starting IP Address',
            'NETWORKS_Edit_TH_EndingIPAddress': 'Ending IP Address',
            'NETWORKS_Edit_TableEmpty': ' There are no items available. ',
            'NETWORKS_Edit_SaveIPAddressRange': 'Save IP Address Range',
            'NETWORKS_Edit_AlertSaveIPCheck': 'The Ending IP Address must be larger than the Starting IP Address.',
            'NETWORKS_Edit_Field_Required': 'This field is required.',
            'NETWORKS_Edit_IPAddressRangeRole_SDSorSDC': 'SDS or SDC',
            'NETWORKS_Edit_IPAddressRangeRole_SDSOnly': 'SDS Only',
            'NETWORKS_Edit_IPAddressRangeRole_SDCOnly': 'SDC Only',

            'NETWORKCONFIGURATION_Help': 'Added interfaces will be matched to interfaces on a node based on specifications you define.',
            'NETWORKCONFIGURATION_AddNewInterface': 'Add New Interface',
            'NETWORKCONFIGURATION_ConfirmDelete': 'Confirm Delete',
            'NETWORKCONFIGURATION_FabricType': 'Fabric Type',
            'NETWORKCONFIGURATION_Ethernet': 'Ethernet (NIC/CNA)',
            'NETWORKCONFIGURATION_FibreChannel': 'Fibre Channel (HBA)',
            'NETWORKCONFIGURATION_PortLayout': 'Port Layout',
            'NETWORKCONFIGURATION_Partitioning': 'Partitioning',
            'NETWORKCONFIGURATION_EnablePartitioningPorts': 'Enable Partitioning Ports (NPAR)',
            'NETWORKCONFIGURATION_Redundancy': 'Redundancy',
            'NETWORKCONFIGURATION_DuplicatePortSettings': 'Duplicate port settings and configure teaming',
            'NETWORKCONFIGURATION_Partition': 'Partition',
            'NETWORKCONFIGURATION_NetworkVLAN': 'Network (VLAN)',
            'NETWORKCONFIGURATION_MinBandwidth': 'Minimum Bandwidth (%)',
            'NETWORKCONFIGURATION_MaxBandwidth': 'Maximum Bandwidth (%)',

            'NICTYPE_2port': 'Two port, 10 gigabit',
            'NICTYPE_2port25Gb': 'Two port, 25 gigabit',
            //'NICTYPE_4port': 'Four port, 10 gigabit',
            'NICTYPE_2x1Gb2x10Gb': 'Two port, 10 gigabit and Two port, 1 gigabit',

            'NIOC_CUSTOM_CONTROL_helptext': 'One or more VDS switches must be created in this template by selecting âCreate VDS Nameâ¦â to configure NIOC.  If there is a mix of new and existing VDS switches, NIOC configuration is only applied to the new switches. Any pre-existing VDS switches will not be reconfigured based on the settings in this template.',
            'NIOC_CUSTOM_CONTROL_TH_NetworkResourcePool' : 'Network Resource Pool',
            'NIOC_CUSTOM_CONTROL_TH_ShareValue' : 'Share Value (1-100)',
            'NIOC_CUSTOM_CONTROL_LABEL_management' : 'Management Traffic',
            'NIOC_CUSTOM_CONTROL_LABEL_vMotion': 'vMotion Traffic',
            'NIOC_CUSTOM_CONTROL_LABEL_vsan': 'vSAN Traffic',
            'NIOC_CUSTOM_CONTROL_LABEL_vm' : 'Virtual Machine (VM) Traffic',
            'NIOC_CUSTOM_CONTROL_LABEL_iscsi': 'iSCSI Traffic',
            'NIOC_CUSTOM_CONTROL_LABEL_nfs': 'NFS',
            'NIOC_CUSTOM_CONTROL_LABEL_protection': 'vSphere Data Protection Traffic',
            'NIOC_CUSTOM_CONTROL_LABEL_replication': 'vSphere Replication Traffic',
            'NIOC_CUSTOM_CONTROL_LABEL_faultTolerance': 'Fault Tolerance (FT) Traffic',
            'NIOC_CUSTOM_CONTROL_' : '',
            'NIOC_CUSTOM_CONTROL_' : '',
            'NIOC_CUSTOM_CONTROL_' : '',
            'NIOC_CUSTOM_CONTROL_' : '',
            'NIOC_CUSTOM_CONTROL_' : '',
            'NIOC_CUSTOM_CONTROL_' : '',
            'NIOC_CUSTOM_CONTROL_' : '',

            'PURGELOGS_Title': 'Purge Logs',
            'PURGELOGS_Instructions': 'Select the date and type of logs to purge. ',
            'PURGELOGS_OlderThanDisplay': 'Current and Older Than ',
            'PURGELOGS_Severity': 'Severity ',
            'PURGELOGS_Information': 'Information ',
            'PURGELOGS_Warning': 'Warning ',
            'PURGELOGS_Critical': 'Critical ',
            'PURGELOGS_Purge': 'Purge',
            'PURGELOGS_Field_Required': 'This field is required.',
            'PURGELOGS_Date_Error': 'Please enter a valid date.',
            'PURGELOGS_Confirmation': 'Are you sure you want to purge the log?',

            'PORTVIEW_Instructions': 'Hover and click to explore the additional information.',
            'PORTVIEW_ServerSelect': 'Port View details for:',

            'PORTVIEW_PortViewSVG_DisplayConnections': 'Display Connections',
            'PORTVIEW_PortViewSVG_VLAN': 'VLAN - Networks',
            'PORTVIEW_PortViewSVG_ToR': 'Top of Rack (ToR) Switches',
            'PORTVIEW_PortViewSVG_IOM': 'I/O Modules',
            'PORTVIEW_PortViewSVG_Interface_Cards': 'Interface Cards (NIC/HBA)',
            'PORTVIEW_PortViewSVG_NPAR': 'NIC Partitioning (NPAR)',
            'PORTVIEW_PortViewSVG_ShowAllConnections': 'Show All Connections',
            'PORTVIEW_PortViewSVG_AllresourcesinWarningorErrorstate': 'All resources in Warning or Error state',
            'PORTVIEW_PortViewSVG_NicDetails': '{{nicName}} - {{portName}} Details',
            'PORTVIEW_PortViewSVG_FabricPopoverTitle': 'Fabric {{fabric}} {{hostName}}',
            'PORTVIEW_PortViewSVG_vlanName': '{{vlan}} - {{vlanName}}',
            'PORTVIEW_PortViewSVG_': '',
            'PORTVIEW_PortViewSVG_': '',
            'PORTVIEW_PortViewSVG_': '',

            'PORTVIEW_Popover_Model': 'Model: ',
            'PORTVIEW_Popover_IP_Address': 'IP Address: ',
            'PORTVIEW_Popover_VLANS': 'VLANS',
            'PORTVIEW_Details_Connection_Details': 'Connection Details',

            'PORTVIEW_Details_NPAR': 'NIC Partitioning (NPAR) Details',
            'PORTVIEW_Details_NPAR_TH': 'NIC Partition (NPAR)',
            'PORTVIEW_Details_iSCSI_TH': 'iSCSI Enabled',
            'PORTVIEW_Details_FcOE_TH': 'FCoE Enabled',
            'PORTVIEW_Details_PXE_TH': 'PXE Enabled',
            'PORTVIEW_Details_IP_Address_TH': 'IP Address',
            'PORTVIEW_Details_MAC_Address_TH': 'MAC Address',
            'PORTVIEW_Details_WWPN_TH': 'World Wide Port Name (WWPN)',

            'PORTVIEW_Details_Interface_Card': 'Interface Card (NIC/HBA) Details',
            'PORTVIEW_Details_Location_TH': 'Location',
            'PORTVIEW_Details_Model_TH': 'Model',
            'PORTVIEW_Details_Port_TH': 'Port',
            'PORTVIEW_Details_Fabric_TH': 'Fabric',
            'PORTVIEW_Details_NPAREnabled_TH': 'NPAR Enabled',

            'PORTVIEW_Details_IOM': 'I/O Module Details',
            'PORTVIEW_Details_Host_Name_TH': 'Host Name',
            'PORTVIEW_Details_Asset_Tag_TH': 'Asset Tag/Service Tag',
            'PORTVIEW_Details_Server_Port_TH': 'Node Port',

            'PORTVIEW_Details_ToR': 'Top of Rack (ToR) Switch Details',
            'PORTVIEW_Details_Downlink_Port_TH': 'Downlink Port',
            'PORTVIEW_Details_Port_Channel_TH': 'Port Channel',

            'PORTVIEW_Details_VLAN': 'VLAN - Network Details',
            'PORTVIEW_Details_VLAN_TH': 'VLAN',
            'PORTVIEW_Details_Name_TH': 'Name',
            'PORTVIEW_Details_Description_TH': 'Description',
            'PORTVIEW_Details_Type_TH': 'Type',

            'PORTVIEW_Details_Zone': 'Network (VLAN/Zone) Details',
            'PORTVIEW_Details_Zone_Configuration_TH': 'Zone Configuration',
            'PORTVIEW_Details_Zone_TH': 'Zone',




            'RAIDCONFIGURATION_Title': 'RAID Configuration *',
            'RAIDCONFIGURATION_Basic': 'Basic',
            'RAIDCONFIGURATION_Advanced': 'Advanced',
            'RAIDCONFIGURATION_raid0': 'RAID 0',
            'RAIDCONFIGURATION_raid1': 'RAID 1',
            'RAIDCONFIGURATION_raid5': 'RAID 5',
            'RAIDCONFIGURATION_raid6': 'RAID 6',
            'RAIDCONFIGURATION_raid10': 'RAID 10',
            'RAIDCONFIGURATION_raid50': 'RAID 50',
            'RAIDCONFIGURATION_raid60': 'RAID 60',
            'RAIDCONFIGURATION_AddNewVirtualDisk': 'Add Internal Virtual Disk',
            'RAIDCONFIGURATION_EmptyVirtualDisks': 'There are no virtual disks defined.',
            'RAIDCONFIGURATION_VirtualDisk': 'Virtual Disk',
            'RAIDCONFIGURATION_RAIDLevel': 'RAID Level',
            'RAIDCONFIGURATION_NumberOfDisks': '# of Disks',
            'RAIDCONFIGURATION_DiskType': 'Disk Type',
            'RAIDCONFIGURATION_EnableGlobalHotSpares': 'Enable Global Hotspares',
            'RAIDCONFIGURATION_TotalHotSpares': 'Total # Hotspares',
            'RAIDCONFIGURATION_MinimumSSD': 'Minimum # SSDs from total hotspares',
            'RAIDCONFIGURATION_AddExternalVirtualDisk': 'Add External Virtual Disk',
            'RAIDCONFIGURATION_EnableGlobalHotspareTooltip': 'Enable Global Hotspares',
            'RAIDCONFIGURATION_AddExternalDiskTootip': 'Requires supported direct attached storage (ex. MD 1400) and second supported RAID controller (ex. PERC H830)',
            'RAIDCONFIGURATION_Atleastonediskmustbepresent': 'At least one disk must be present when raid type is set to, "Advanced"',
            'RAIDCONFIGURATION_': '',
            'RAIDCONFIGURATION_': '',

            'RESOURCE_CREATE_SERVER_POOL_CreateServerPool': 'Create Node Pool',
            'RESOURCE_CREATE_SERVER_POOL_Welcome': 'Welcome',
            'RESOURCE_CREATE_SERVER_POOL_BeginTypingSearch': 'Begin typing to search...',
            'RESOURCE_CREATE_SERVER_POOL_WelcomeMessage': 'Use this wizard to add nodes to a node pool and grant access rights to the users for the pools.',
            'RESOURCE_CREATE_SERVER_POOL_ServerPoolInformation': 'Node Pool Information',
            'RESOURCE_CREATE_SERVER_POOL_ServerPoolNameStar': 'Node Pool Name*',
            'RESOURCE_CREATE_SERVER_POOL_Description': 'Description',
            'RESOURCE_CREATE_SERVER_POOL_AddServers': 'Add Nodes',
            'RESOURCE_CREATE_SERVER_POOL_SelectServersMessage': 'Select the nodes that you want to add to the node pool.',
            'RESOURCE_CREATE_SERVER_POOL_Health': 'Health',
            'RESOURCE_CREATE_SERVER_POOL_State': 'State',
            'RESOURCE_CREATE_SERVER_POOL_ManagementIP': 'Management IP',
            'RESOURCE_CREATE_SERVER_POOL_ServiceTag': 'Service Tag',
            'RESOURCE_CREATE_SERVER_POOL_Model': 'Model',
            'RESOURCE_CREATE_SERVER_POOL_ServerPools': 'Node Pools',
            'RESOURCE_CREATE_SERVER_POOL_CPUs': 'CPUs',
            'RESOURCE_CREATE_SERVER_POOL_Memory': 'Memory',
            'RESOURCE_CREATE_SERVER_POOL_NICs': 'NICs',
            'RESOURCE_CREATE_SERVER_POOL_Location': 'Location',
            'RESOURCE_CREATE_SERVER_POOL_SelectUsersMessage': 'Select the users you want to grant access to use the node pool.',
            'RESOURCE_CREATE_SERVER_POOL_UserName': 'User Name',
            'RESOURCE_CREATE_SERVER_POOL_Domain': 'Domain',
            'RESOURCE_CREATE_SERVER_POOL_Role': 'Role',
            'RESOURCE_CREATE_SERVER_POOL_LastName': 'Last Name',
            'RESOURCE_CREATE_SERVER_POOL_FirstName': 'First Name',
            'RESOURCE_CREATE_SERVER_POOL_ViewDetails': 'View Details',
            'RESOURCE_CREATE_SERVER_POOL_AssignUsers': 'Assign Users',
            'RESOURCE_CREATE_SERVER_POOL_Summary': 'Summary',
            'RESOURCE_CREATE_SERVER_POOL_Type': 'Type',
            'RESOURCE_CREATE_SERVER_POOL_LastLogin': 'Last Login',
            'RESOURCE_CREATE_SERVER_POOL_AddUsers': '',
            'RESOURCE_EDIT_SERVER_POOL_EditServerPool': 'Edit Node Pool',

            'RESTORENOW_testconnection': 'Test Connection',
            'RESTORENOW_testconnection_success_title': 'Success',
            'RESTORENOW_testconnection_success_message': 'The test was successful',
            'RESTORENOW_usebackupsettings': 'Use Backup Directory Path and Encryption Password from Backup Settings and Details',
            'RESTORENOW_backupdirpath': 'Backup Directory Path and File Name',
            'RESTORENOW_backupFileDescription': 'Enter the password that is required to open the backup file.',
            'RESTORENOW_confirm_title': 'Warning',
            'RESTORENOW_confirm_text': 'Restoring will restart the system. This action will log off all current users and cancel all jobs in progress.',
            'RESTORENOW_confirm_footnote': 'The restore process will take approximately 15 minutes depending on your data connection.<br/><br/>Are you sure you want to perform a restore?',
            'RESTORENOW_confirm_userinfo': 'Logged-in Users: ',
            'RESTORENOW_confirm_jobinfo': 'In Progress Jobs: ',
            'RESTORENOW_confirm_scheduledjobinfo': 'Scheduled Jobs: ',
            'RESTORENOW_backupdirpathinfo': '<b>CIFS:</b> \\\\192.168.2.1\\LAB\\backups\\VxFlex_Manager_Appliance_Backup_12345.tar.gz <br/> <b>NFS</b>: 192.168.0.1:/var/nfs/backups/VxFlex_Manager_Appliance_Backup_12345.tar.gz',
            'RESTORENOW_backupDirUserName': 'Backup Directory User Name',
            'RESTORENOW_backupDirPassword': 'Backup Directory Password',
            'RESTORENOW_backupFileDescription': 'Enter the password that will be required to open backup files.',
            'RESTORENOW_encrypPassword': 'Encryption Password',
            'RESTORENOW_confirmencrypPassword': 'Confirm Encryption Password',


            'UPDATE_VIRTUAL_APPLIANCE_Description': 'Updating the appliance will restart the system. This action will log off all current users and cancel all jobs in progress.' +
             '<ul>' +
                '<li>Logged-in Users: {{numUsers}}</li>' +
                '<li>In Progress Jobs: {{numProgressJobs}}</li>' +
                '<li>Scheduled Jobs: {{numScheduledJobs}}</li>' +
                '</ul>'
            + 'The update process will take approximately 25 minutes depending on your data connection: 15 minutes to download the update and 10 minutes to apply.' +
            '<br /> <br />' +
            'Are you sure you want to perform an appliance update?',

            'SERVICES_Logs_Security': 'Security',
            'SERVICES_Logs_Appliance_Configuration': 'Appliance Configuration',
            'SERVICES_Logs_Template_Configuration': 'Template Configuration',
            'SERVICES_Logs_Network_Configuration': 'Network Configuration',
            'SERVICES_Logs_Hardware_Configuration': 'Hardware Configuration',
            'SERVICES_Logs_Monitoring': 'Monitoring',
            'SERVICES_Logs_Deployment': 'Deployment',
            'SERVICES_Logs_Licensing': 'Licensing',
            'SERVICES_Logs_Miscellaneous': 'Miscellaneous',

            'SETUPWIZARD_DefineNetworksDescription': 'Enter the information of the networks that are currently configured in your environment that VxFlex Manager and the resources can access. To define networks after initial setup is complete, click <strong>Settings > Networks</strong>.',
            'SETUPWIZARD_Title': 'Setup Wizard',
            'SETUPWIZARD_WelcomeTitle': 'Welcome',
            'SETUPWIZARD_WelcomeHelp': '<p>Use this wizard to complete the initial setup before you start using VxFlex Manager.</p><p>Before configuring the initial setup, it is recommended to gather the following information:</p><ul><li>Time zone of the virtual appliance that hosts VxFlex Manager </li><li> IP addresses of at least two NTP nodes </li><li>(Optional) IP address, port, and credentials of a proxy node </li><li> (Optional) Identify the networks in your environment for VxFlex Manager to access.</li></ul><p>If you do not have all the information required to complete the Initial Setup wizard, you can cancel and continue later.  The information you saved on each page of the wizard will be retained.</p><p>To change the basic settings after initial setup is complete, click <b>Settings</b> > <b>Virtual Appliance Management</b>.  To define the networks after initial setup is complete, click <b>Settings </b> > <b>Networks.</b></p><p>* Indicates that data is mandatory. </p>',
            'SETUPWIZARD_LicensingTitle': 'Licensing',
            'SETUPWIZARD_LicensingHelp': 'Licensing Info',
            'SETUPWIZARD_LicensingUpload': 'Upload License',
            'SETUPWIZARD_LicensingType': 'Type',
            'SETUPWIZARD_LicensingTotalNodes': 'Total Resources',
            'SETUPWIZARD_LicensingExpirationDate': 'Expiration Date',
            'SETUPWIZARD_ServiceTag': 'Dell EMC VxFlex Manager Service Tag',
            'SETUPWIZARD_NTPSettingsTitle': 'Time Zone and NTP Settings',
            'SETUPWIZARD_NTPSettingsHelp': 'Set the time zone of the virtual appliance that hosts VxFlex Manager and configure the NTP node.<br><br>Configuring NTP will adjust your VxFlex Manager system time. If the time is adjusted forward it will end your current user session. The time will sync 5-10 minutes after this step. If this occurs, log back in and continue with the setup process.<br>',
            'SETUPWIZARD_NTPSettingsTimeZone': 'Time Zone*',
            'SETUPWIZARD_NTPSettingsPreferredServer': 'Preferred NTP Node*',
            'SETUPWIZARD_NTPSettingsSecondaryServer': 'Secondary NTP Node (optional)',
            'SETUPWIZARD_ProxySettingsTitle': 'Proxy Settings',
            'SETUPWIZARD_ProxySettingsHelp': '<p>If your environment uses a proxy node for external communication, click <b>Use a proxy node</b> and then enter the configuration details.</p>',
            'SETUPWIZARD_ProxySettingsEnableProxy': 'Use a proxy node',
            'SETUPWIZARD_ProxySettingsServerAddress': 'Node IP Address*',
            'SETUPWIZARD_ProxySettingsPort': 'Port*',
            'SETUPWIZARD_ProxySettingsUseCredentials': 'Use proxy credentials',
            'SETUPWIZARD_ProxySettingsUserName': 'User Name*',
            'SETUPWIZARD_ProxySettingsPassword': 'Password*',
            'SETUPWIZARD_ProxySettingsVerifyPassword': 'Confirm Password*',
            'SETUPWIZARD_ProxySettingsProxyConnection': 'Test Proxy Connection',
            'SETUPWIZARD_ProxySettingsProxyConnectionSuccess': 'The connection to the proxy node was successful.',
            'SETUPWIZARD_ProxySettingsTestConnection': 'Testing Proxy Connection',
            'SETUPWIZARD_DHCPSettingsTitle': 'DHCP Settings',
            'SETUPWIZARD_DHCPSettingsHelp': '',
            'SETUPWIZARD_DHCPSettingsEnable': 'Enable DHCP/PXE Node',
            'SETUPWIZARD_DHCPSettingsSubnet': 'Subnet*',
            'SETUPWIZARD_DHCPSettingsNetMask': 'Netmask*',
            'SETUPWIZARD_DHCPSettingsStartingIP': 'DHCP Scope Starting IP Address*',
            'SETUPWIZARD_DHCPSettingsEndingIP': 'DHCP Scope Ending IP Address*',
            'SETUPWIZARD_DHCPSettingsDefaultLeaseTime': 'Default Lease Time* (DD:hh:mm:ss)',
            'SETUPWIZARD_DHCPSettingsMaxLeaseTime': 'Max Lease Time*  (DD:hh:mm:ss)',
            'SETUPWIZARD_DHCPSettingsGateway': 'Default Gateway',
            'SETUPWIZARD_DHCPSettingsDNS': 'DNS Node',
            'SETUPWIZARD_DHCPSettingsDomain': 'Domain',
            'SETUPWIZARD_SummaryTitle': 'Summary',
            'SETUPWIZARD_SummaryHelp': 'Review the summary and click <b>Finish</b> to complete the initial setup..',
            'SETUPWIZARD_SummaryNoTimeZone': 'Time Zone not set',
            'SETUPWIZARD_SummaryProxySettings': 'Proxy Settings',
            'SETUPWIZARD_SummaryNoProxySettings': 'Do not use a proxy node',
            'SETUPWIZARD_SubmitInfo': 'Are you sure you want to submit this information?',
            'SETUPWIZARD_ErrorInUpload': 'Error in upload',
            'SETUPWIZARD_VXFlexAlertConnectorSettings': 'VxFlex Alert Connector Settings',
            'SETUPWIZARD_Hours': 'Hours',
            'SETUPWIZARD_Minutes': 'Minutes',
            'SETUPWIZARD_': '',
            'SETUPWIZARD_': '',



            'SETTINGS_ActiveDirectoryUsers': 'Users',
            'SETTINGS_ActiveDirectoryAll': 'All',
            'SETTINGS_ActiveDirectoryGroups': 'Groups',
            'SETTINGS_ActiveDirectoryView': 'View',
            'SETTINGS_ActiveDirectoryEnterName': 'Enter name or email address',
            'SETTINGS_ActiveDirectoryItemCount': '{{total}} Item(s) Found. Displaying 1 - {{subTotal}}',
            'SETTINGS_ActiveDirectorySelectedItems': 'Selected Items: {{numSelectedItems}}',
            'SETTINGS_ActiveDirectoryImported': 'Users/Groups to be imported',
            'SETTINGS_ActiveDirectoryUserRole': 'User Role',
            'SETTINGS_ActiveDirectoryFindUser': 'Find a User/Group',
            'SETTINGS_ActiveDirectoryFindUser_Data_Entry_Error': '3 or more characters are required',
            'SETTINGS_ActiveDirectoryFindUser_Data_Entry_Hint': '3 or more characters are required to perform a search for User/Group',
            'SETTINGS_ActiveDirectoryNoUsersOrGroups': 'No Users or Groups found matching your criteria',
            'SETTINGS_ActiveDirectorySelectARoleAlt': 'Select...',
            'SETTINGS_ActiveDirectorySelectARole': 'Select a Role',
            'SETTINGS_ActiveDirectoryDirectorySrc': 'Directory Source',
            'SETTINGS_ActiveDirectoryAvailableUsers': 'Available Users/Groups',
            'SETTINGS_ActiveDirectoryDistinguishedName': 'Distinguished Name',
            'SETTINGS_MembersFound': 'Member(s) Found',
            'SETTINGS_Settings': 'Settings',


            'SETTINGS_DirectoryServicesCreateDir': 'Create Directory Service',
            'SETTINGS_DirectoryServicesEditDir': 'Edit Directory Service',
            'SETTINGS_DirectorySerivcesConfirmDir': 'Are you sure you want to submit this information?',
            'SETTINGS_DirectoryServicesNoDirAdded': 'No directories have been added',
            'SETTINGS_DirectoryServiceWizardTypeOfDir': 'Type of Directory Service',
            'SETTINGS_DirectoryServicesWizardExample': '(Example: user@domain)',
            'SETTINGS_DirectoryServicesWizardNameTooltip': 'Only alphanumeric characters, hyphens, and underscores are valid. This value will be the domain value when logging into the WebUI',
            'SETTINGS_DirectoryServicesWizardSelectDirectoryCaption': 'Select Directory Type',
            'SETTINGS_DirectoryServicesWizardConfirmPassword': 'Confirm Password',
            'SETTINGS_DirectoryServicesWizardPassword_Match': 'Please enter the same value again.',
            'SETTINGS_DirectoryServicesWizardIP_Format': 'Invalid IP format.',
            'SETTINGS_DirectoryServicesWizardBaseDN': 'Base DN',
            'SETTINGS_DirectoryServicesWizard_ConnectionSettings': 'Connection Settings',
            'SETTINGS_DirectoryServicesWizard_AttributeSettings': 'Attribute Settings',
            'SETTINGS_DirectoryServicesWizard_numResourcesUndiscovered': 'VxFlex Manager was unable to discover {{num}} resources <a>View Undiscovered Resources</a>',
            'SETTINGS_DirectoryServicesWizard_ViewUndiscoveredResources': 'View Undiscovered Resources',
            'SETTINGS_DirectoryServicesWizard_resourcesCannotBeEdited': 'VxFlex Manager was unable to discover the {{num}} resources shown in the table below. Resources that have not been successfully discovered cannot be configured in VxFlex Manager.',
            'SETTINGS_DirectoryServicesWizard_': '',
            'SETTINGS_DirectoryServicesWizard_': '',
            'SETTINGS_DirectoryServicesWizard_': '',
            'SETTINGS_DirectoryServicesWizardUserAttribute': 'User Name Attribute',
            'SETTINGS_DirectoryServicesWizardFirstNameAttr': 'First Name Attribute',
            'SETTINGS_DirectoryServicesWizardLastNameAttr': 'Last Name Attribute',
            'SETTINGS_DirectoryServicesWizardEmailAttr': 'Email Attribute',
            'SETTINGS_DirectoryServicesWizardEditDescription': 'Click Save to update Directory Services with the following settings. If you want to change the settings, click desired settings hyperlink.',
            'SETTINGS_DirectoryServicesWizardCreateDescription': 'Click Finish to create Directory Services with the following settings. If you want to change the settings, click Back.',
            'SETTINGS_DirectoryServicesWizardConnectionSettings': 'Connection Settings',
            'SETTINGS_DirectoryServicesWizardAttrSettings': 'Attribute Settings',

            'SETTINGS_USERS_SelectARole': 'Select a Role...',
            'SETTINGS_Users': 'Users',
            'SETTINGS_UsersSecurityMessage': 'For security purposes, please confirm your password before creating a new user:',
            'SETTINGS_': '',
            'SETTINGS_': '',
            'SETTINGS_AddOnModule': 'Add-On Modules',
            'SETTINGS_AllUsers': 'All Users',
            'SETTINGS_ActiveDirectoryGroup': 'Active Directory Group',
            'SETTINGS_ConfirmJobCancel': 'Are you sure you want to cancel these jobs?',
            'SETTINGS_UserDeleteConfirm': 'Are you sure you want to delete the selected user(s)?',
            'SETTINGS_BackupRestore': 'Backup and Restore',
            'SETTINGS_CredentialsManagement': 'Credentials Management',
            'SETTINGS_CurrentPassword': 'Current Password',
            'SETTINGS_ConfirmPassword': 'Confirm Password',
            'SETTINGS_Password_Match': 'Please enter the same value again.',
            'SETTINGS_Enter_Login_Password': 'Please enter the same password that you used to log into the application',
            'SETTINGS_CreateUser': 'Create User',
            'SETTINGS_DirectoryServices': 'Directory Services',
            'SETTINGS_DirectoryType': 'Directory Type',
            'SETTINGS_DeleteDirectory': 'Are you sure you want to delete the selected Directory Service(s)?',
            'SETTINGS_EditUser': 'Edit User',
            'SETTINGS_EnableUser': 'Enable User',
            'SETTINGS_FilterByGroup': 'Filter by Group',
            'SETTINGS_GettingStarted': 'Getting Started',
            'SETTINGS_Jobs': 'Job Name',
            'SETTINGS_HostIpAddress': 'Host IP Address',
            'SETTINGS_ImportActiveDirectoryUsers': 'Import Active Directory Users',
            'SETTINGS_InUseTemplates': 'In Use By Templates',
            'SETTINGS_InUseServices': 'In Use By Services',
            'SETTINGS_InUserServices': 'Identify a user or group of users to be imported.',
            'SETTINGS_NoJobs': 'There are currently no jobs scheduled or running.',
            'SETTINGS_Logs': 'Logs',
            'SETTINGS_Networks': 'Networks',
            'SETTINGS_NoEmail': 'No available email',
            'SETTINGS_NoUsersAdded': 'No users have been added',
            'SETTINGS_NoPhoneNumber': 'No available phone number',
            'SETTINGS_EnterValidEmail': 'Please enter a valid email address.',
            'SETTINGS_CurrentUserPassword': 'Password for the currently logged in user',
            'SETTINGS_Repositories': 'Repositories',
            'SETTINGS_OSRCMRepositories': 'RCM and OS Repositories',
            'SETTINGS_RoleRequired': 'Role Required',
            'SETTINGS_SelectedUser': 'Selected User:',
            'SETTINGS_TimeElapsed': 'Time Elapsed',
            'SETTINGS_aday': 'a day',
            'SETTINGS_numDays': '{{number}} days',
            'SETTINGS_anhour': 'an hour',
            'SETTINGS_numHours': '{{number}} hours',
            'SETTINGS_amimute': 'a minute',
            'SETTINGS_numMinutes': '{{number}} minutes',
            'SETTINGS_InitialApplianceSetup': 'Initial Appliance Setup',
            'SETTINGS_VirtualIdPools': 'Virtual Identity Pools',
            'SETTINGS_AddOnModuleDescription': 'Add-on modules that are currently in use by one or more templates cannot be deleted.',
            'SETTINGS_AddModule': 'Add Module',
            'SETTINGS_FileRequired': 'File required to upload',
            'SETTINGS_': '',
            'SETTINGS_': '',
            'SETTINGS_': '',
            'SETTINGS_': '',
            'SETTINGS_': '',
            'SETTINGS_DeleteConfirmation': 'Are you sure you want to delete this add-on module?',
            'SETTINGS_NoModules': 'No modules have been added',
            'SETTINGS_UploadedBy': 'Uploaded By',
            'SETTINGS_UploadedOn': 'Uploaded On',
            'SETTINGS_ChooseFile': 'Choose a file to upload, and then click Save.',
            'SETTINGS_VirtualApplianceManagement': 'Virtual Appliance Management',

            'SETTINGS_VirtualApplianceManagement_ConfigureServersforAlertConnector': 'Configure nodes for alert connector',
            'SETTINGS_VirtualApplianceManagement_Deregister': 'Deregister',
            'SETTINGS_VirtualApplianceManagement_None': 'None',
            'SETTINGS_VirtualApplianceManagement_Not_Configured': 'No connection configured',
            'SETTINGS_VirtualApplianceManagement_AlertConfigJobModal': 'As part of the configuration job all nodes in OME inventory will have critical alerts enabled for node and storage level events. IPMI will be enabled temporarily during this process to allow node support data to be inventoried.',
            'SETTINGS_VirtualApplianceManagement_DeregisterWarning': 'Deregistering Alert Connector stops the collection and sending of events to Secure Remote Services.',
            'SETTINGS_VirtualApplianceManagement_DeregisterWarning_PhoneHome': 'Deregistering Alert Connector stops the collection and sending of events to PhoneHome Services.',
            'SETTINGS_VirtualApplianceManagement_AlertConfigJobModalWarning': 'Warning',
            'SETTINGS_VirtualApplianceManagement_DeregisterWarningTitle': 'Warning',
            'SETTINGS_VirtualApplianceManagement_Ok': 'Ok',
            'SETTINGS_VirtualApplianceManagement_': '',
            'SETTINGS_VirtualApplianceManagement_': '',
            'SETTINGS_VirtualApplianceManagement_': '',
            'SETTINGS_VirtualApplianceManagement_Update_Not_Required': 'No Update Required',
            'SETTINGS_VirtualApplianceManagement_Update_Warning': 'You are currently on the latest version of the appliance.',
            'SETTINGS_VirtualApplianceManagement_Update_Current_Version': 'Current Version:',
            'SETTINGS_VirtualApplianceManagement_Update_Confirm': 'Do you still want to continue and force an update?',
            'SETTINGS_VirtualApplianceManagement_State': 'State',
            'SETTINGS_VirtualApplianceManagement_SerialNumber': 'Serial Number',
            'SETTINGS_VirtualApplianceManagement_Model': 'Model',
            'SETTINGS_VirtualApplianceManagement_SRSAddress': 'SRS Address',
            'SETTINGS_VirtualApplianceManagement_Status': 'Status',
            'SETTINGS_VirtualApplianceManagement_VxRackFLEXAlertConnector': 'Alert Connector',
            'SETTINGS_VirtualApplianceManagement_Add': 'Add',
            'SETTINGS_VirtualApplianceManagement_Error': 'Error',
            'SETTINGS_VirtualApplianceManagement_Enabled': 'Enabled',
            'SETTINGS_VirtualApplianceManagement_Disabled': 'Disabled',
            'SETTINGS_VirtualApplianceManagement_Suspend3hours': 'Suspend 3 hours',
            'SETTINGS_VirtualApplianceManagement_Suspend6hours': 'Suspend 6 hours',
            'SETTINGS_VirtualApplianceManagement_Suspend12hours': 'Suspend 12 hours',
            'SETTINGS_VirtualApplianceManagement_Suspend24hours': 'Suspend 24 hours',
            'SETTINGS_VirtualApplianceManagement_Suspendedxhours': 'Suspended {{number}} hours',
            'SETTINGS_VirtualApplianceManagement_NotAvailable': 'None',
            'SETTINGS_VirtualApplianceManagement_WarningBannerWarning': 'Warning',
            'SETTINGS_VirtualApplianceManagement_WarningBannerWarningDescription': 'As part of the configuration job all nodes in OME inventory will have critical alerts enabled for node and storage level events. IPMI will be enabled temporarily during this process to allow node support data to be inventoried.',
            'SETTINGS_VirtualApplianceManagement_VxRackFLEXAlertConnectorModalTitle': 'Alert Connector',
            'SETTINGS_VirtualApplianceManagement_PrerequisitesDescription': 'Prerequisites: RACADM must be turned on in the iDRACs, OpenManage Enterprise (OME) and VxRack alert connector must have network connectivity, OME and iDRAC SNMP community strings need to be identical, and set to SNMP v2. Alert filtering must be set to the same level in iDRACs and OME.',
            'SETTINGS_VirtualApplianceManagement_PrerequisitesDescList': 'Before you configure Alert Connector, ensure:',
            'SETTINGS_VirtualApplianceManagement_PrerequisitesDescListItem1': 'Remote Access Controller Admin (RACADM) is enabled on the iDRACs of the discovered nodes.',
            'SETTINGS_VirtualApplianceManagement_PrerequisitesDescListItem1_1': 'VxFlex OS is discovered.',
            'SETTINGS_VirtualApplianceManagement_PrerequisitesDescListItem2': 'OpenManage Enterprise application discovered all the nodes.',
            'SETTINGS_VirtualApplianceManagement_PrerequisitesDescListItem3': 'OpenManage Enterprise application and the discovered nodesâ iDRAC SNMP community strings are identical and SNMP is set to Version 2.',
            'SETTINGS_VirtualApplianceManagement_PrerequisitesDescListItem4': 'SNMP alert filtering is set to the same level in the discovered nodesâ iDRACs and the OpenManage Enterprise application.',
            'SETTINGS_VirtualApplianceManagement_PrerequisitesDescListItem5': 'Confirm SRS Gateway is configured in the datacenter and connected to SRS.',
            'SETTINGS_VirtualApplianceManagement_ConnectionType_SRS': 'Secure Remote Services (SRS)',
            'SETTINGS_VirtualApplianceManagement_ConnectionType_PhoneHome': 'Phone Home',
            'SETTINGS_VirtualApplianceManagement_OpenManageEnterpriseOMESetting': 'Open Manage Enterprise (OME) Settings',
            'SETTINGS_VirtualApplianceManagement_IPorFQDN': 'Host IP or FQDN',
            'SETTINGS_VirtualApplianceManagement_Username': 'Username',
            'SETTINGS_VirtualApplianceManagement_omePassword': 'Password',
            'SETTINGS_VirtualApplianceManagement_AlertFilter': 'Alert Filter',
            'SETTINGS_VirtualApplianceManagement_Critical': 'Critical (Recommended)',
            'SETTINGS_VirtualApplianceManagement_Warning': 'Warning',
            'SETTINGS_VirtualApplianceManagement_Info': 'Info',
            'SETTINGS_VirtualApplianceManagement_AlertPollingInterval': 'Alert Polling Interval',
            'SETTINGS_VirtualApplianceManagement_DeviceRegistration': 'Device Registration',
            'SETTINGS_VirtualApplianceManagement_DeviceType': 'Device Type',
            'SETTINGS_VirtualApplianceManagement_ConnectionType': 'Connection Type',
            'SETTINGS_VirtualApplianceManagement_Type': 'Type',
            'SETTINGS_VirtualApplianceManagement_VxRackFlex': 'VxRack FLEX',
            'SETTINGS_VirtualApplianceManagement_EnterpriseLicenseManagementSystems': 'Enterprise License Management Systems (ELMS) Software Unique ID',
            'SETTINGS_VirtualApplianceManagement_SoftwareUniqueId': 'Software Unique ID',
            'SETTINGS_VirtualApplianceManagement_SolutionSerialNumber': 'Solution Serial Number',
            'SETTINGS_VirtualApplianceManagement_SRSGatewayHostIPorFQDN': 'SRS Gateway Host IP or FQDN',
            'SETTINGS_VirtualApplianceManagement_SRSGatewayHostOrPhoneHomeIp': 'Gateway Host IP',
            'SETTINGS_VirtualApplianceManagement_SRSGatewayHostPort': 'SRS Gateway Host Port',
            'SETTINGS_VirtualApplianceManagement_UserID': 'User ID',
            'SETTINGS_VirtualApplianceManagement_PasswordorNTToken': 'Password or NT Token',
            'SETTINGS_VirtualApplianceManagement_PhoneHomeIP': 'Phone Home Hostname or IP',
            'SETTINGS_VirtualApplianceManagement_PhoneHomeIPTooltip': 'Phone Home Hostname or IP',
            'SETTINGS_VirtualApplianceManagement_PhoneHomePort': 'Phone Home Port',
            'SETTINGS_VirtualApplianceManagement_PhoneHomePortTooltip': 'Phone Home Port',
            'SETTINGS_VirtualApplianceManagement_AlertFilterTooltip': 'Minimum alert level that should be forwarded. This will include all alerts at and above selected severity. For instance if Warning is selected, Warning and Critical would be sent.',
            'SETTINGS_VirtualApplianceManagement_AlertPollingIntervalTooltip': ' Recommended 10 minutes. Minimum allowed value 5 minutes or greater.',
            'SETTINGS_VirtualApplianceManagement_ElmsTooltip': ' Consult your License Authorization email for information on how to obtain your Software Uniquie ID. For more information visit <a href=\"https:\\\\licensing.emc.com\">Dell EMC Licensing Central</a>',
            'SETTINGS_VirtualApplianceManagement_SecureRemoteServicesTooltip': ' Connectivty information for the SRS Gateway, a VM running locally in your data center that is used to proxy connections to Dell EMC Secure Remote Services',
            'SETTINGS_VirtualApplianceManagement_SRSHostPortTooltip': 'Default port 9443. Please contact network administrator to change',
            'SETTINGS_VirtualApplianceManagement_UserIdTooltip': ' Customer: Use customer Dell EMC online support account (must have one deployable device associated with online support account). Employee/Partner: RSA authentication information. ',
            'SETTINGS_VirtualApplianceManagement_alertPollingIntervalLabelHours': '(0-23 hours)',
            'SETTINGS_VirtualApplianceManagement_alertPollingIntervalMinutes': '(0-59 minutes)',
            'SETTINGS_VirtualApplianceManagement_VxFlexAppliance': 'VxFlex Appliance',
            'SETTINGS_VirtualApplianceManagement_SecureRemoteServices': 'Secure Remote Services (SRS) Information',
            'SETTINGS_VirtualApplianceManagement_AlertConnectorSettings': 'Connector Settings',
            'SETTINGS_VirtualApplianceManagement_Unique8': ' Unique 8 digital number associated with your VxFlex Manager. Example v12345678',
            'SETTINGS_VirtualApplianceManagement_ConfigureServersForAlertConnectorTooltip': 'In order for the alert connector to pass information to SRS, the'
                + ' nodes in VxFlex Manager must be configured appropriately.'
                + '<br /><br />'
                + 'As part of the Alert connector configuration job all nodes present in OME inventory will have critical alerts enabled for node and storage level events. IPMI will be enabled temporarily during this process to allow sever support data to be inventoried.'
                + '<br /><br />'
                + 'If this configuration is not performed, alerts could not be passed or identification information could be missing, and could result in critical issues not being received by support.'
                + '<br /><br /> This process is run automatically when the configuration is initially completed. You can subsequently run the job after when your environment expands or there are hardware changes.',
            'SETTINGS_VirtualApplianceManagement_': '',
            'SETUPWIZARD_VxFlexAlertConnectorTitle': 'Alert Connector',
            'SETUPWIZARD_EnableVxFlexAlertConnector': 'Enable Alert Connector',
            'SETTINGS_UpdateVirtualAppliance': 'Update Virtual Appliance',
            'SETTINGS_GenerateTroubleshoot': 'Generate Troubleshooting Bundle',
            'SETTINGS_GenerateTroubleshootingBundle': 'Generate Troubleshooting Bundle',
            'SETTINGS_GenerateTroubleshootingBundle_SendToConfiguredSecureRemoteServices': 'Send to Configured Secure Remote Services (SRS)',
            'SETTINGS_GenerateTroubleshootingBundle_DellEMCSecureRemoteServices': 'Dell EMC Secure Remote Services needs to be configured.  Please contact Services for assistance.',
            'SETTINGS_GenerateTroubleshootingBundle_DownloadLocally': 'Download Locally',
            'SETTINGS_GenerateTroubleshootingBundle_Generate': 'Generate',
            'SETTINGS_GenerateTroubleshootingBundle_Cancel': 'Cancel',
            'SETTINGS_GenerateTroubleshootingBundle_SendtoSRSInfo': 'Troubleshoot Bundle will be sent directly to SRS.  These services will need to be set-up in Virtual Appliance settings to use this option.',
            'SETTINGS_GenerateTroubleshootingBundle_FilePathExample': 'CIFS:Â Â Â Â Â  \\\\192.168.1.1\\uploadDirectory <br\> NFS:Â Â Â Â Â Â  192.168.1.1:/var/nfs/uploadDirectory',
            'SETTINGS_GenerateTroubleshootingBundle_Path': 'Path',
            'SETTINGS_GenerateTroubleshootingBundle_UserName': 'User Name',
            'SETTINGS_GenerateTroubleshootingBundle_Password': 'Password',
            'SETTINGS_GenerateTroubleshootingBundle_TestConnection': 'Test Connection',
            'SETTINGS_GenerateTroubleshootingBundle_Edit_Field_Required': 'This field is required.',
            'SETTINGS_GenerateTroubleshootingBundle_testconnection_success_title': 'Success',
            'SETTINGS_GenerateTroubleshootingBundle_testconnection_success_message': 'The test was successful.',

            'SETTINGS_TimeZoneNTPSettings': 'Time Zone and NTP Settings',
            'SETTINGS_TimeZone': 'Time Zone',
            'SETTINGS_PreferredNTPServer': 'Preferred NTP Node',
            'SETTINGS_SecondaryNTPServer': 'Secondary NTP Node',
            'SETTINGS_UpdateRepositoryPath': 'Appliance Upgrade Settings',
            'SETTINGS_VirtualAppliance': 'Virtual Appliance',
            'SETTINGS_CurrentVirtualApplianceVersion': 'Current Virtual Appliance Version',
            'SETTINGS_CurrentVersion': 'Current Version',
            'SETTINGS_AvailableVirtualApplianceVersion': 'Available Virtual Appliance Version',
            'SETTINGS_RepositoryPath': 'Repository Path',
            'SETTINGS_ReleaseNotesOnFollowingPage': '<strong>Note:</strong> Release notes for the upgrade can be found on the following page:',
            'SETTINGS_SecureRemoteServices': 'Dell EMC Secure Remote Services (SRS)',
            'SETTINGS_releaseNotesLink': 'http://support.dell.com/repository',
            'SETTINGS_releaseNotesLink1': 'http://dell.com/asmdocs',
            'SETTINGS_ProxyServerDetails': 'Proxy Node Details',
            'SETTINGS_UseHTTPProxySettings': 'Use HTTP Proxy Settings',
            'SETTINGS_ServerAddressIpHost': 'Node Address (IP or Hostname)',
            'SETTINGS_ApplianceManagementServerAddress': '',
            'SETTINGS_Port': 'Port',
            'SETTINGS_Enabled': 'Enabled',
            'SETTINGS_Disabled': 'Disabled',
            'SETTINGS_Monitoring': 'Monitoring',
            'SETTINGS_DestinationIPAddress': 'Destination IP Address',
            'SETTINGS_CommunityString': 'Community String',
            'SETTINGS_EmailAlertSettings': 'Email Alert Settings',
            'SETTINGS_SMTPServer': 'SMTP Node',
            'SETTINGS_SourceEmailName': 'Source Email Name',
            'SETTINGS_DestinationEmailAddress': 'Destination Email Address',
            'SETTINGS_NoDestinationEmailsHaveBeenEntered': 'No destination emails have been entered.',
            'SETTINGS_NoTrapSettingsHaveBeenEntered.': 'No trap settings have been entered.',
            'SETTINGS_SSLCertificates': 'SSL Certificates',
            'SETTINGS_GenerateSigningRequest': 'Generate Certificate Signing Request',
            'SETTINGS_DownloadCertificateSigReq': 'Download Certificate Signing Request',
            'SETTINGS_CertificateDetails': 'Certificate Details',
            'SETTINGS_Certificate_ConfirmationDialog': 'The certificate signing request has been generated. <br /> <br /> Do you want to download it now?',
            'SETTINGS_IssuedTo': 'Issued To',
            'SETTINGS_IssuedBy': 'Issued By',
            'SETTINGS_ValidFrom': 'Valid From',
            'SETTINGS_ValidTo': 'Valid To',
            'SETTINGS_Add': 'Add',
            'SETTINGS_Edit': 'Edit',
            'SETTINGS_LicenseType': 'License Type',
            'SETTINGS_NumberofResources': 'Number of Resources',
            'SETTINGS_NumberofUsedResources': 'Number of Used Resources',
            'SETTINGS_NumberofAvailableResources': 'Number of Available Resources',
            'SETTINGS_Upload': 'Upload',
            'SETTINGS_LicenseManagement': 'License Management',
            'SETTINGS_ASMServiceTag': 'Dell EMC VxFlex Manager Service Tag',
            'SETTINGS_IPVerificationPortNumber': 'IP Verification Port Number',
            'SETTINGS_ASMServiceTag_Help': 'Enter Dell EMC VxFlex Manager support Service Tag, and then click Save.',
            'SETTINGS_EditIPVerificationPortNumbers': 'Edit IP Verification Port Numbers',
            'SETTINGS_EditIPVerificationInstructionalMessage': 'Add or remove port numbers used by VxFlex Manager to verify IP addresses, then click <strong>Save</strong>.',
            'SETTINGS_EditIPVerificationServiceTaglabel': 'Dell VxFlex Manager Service Tag',
            'SETTINGS_EditIPVerificationThisfieldcontainsinvalidcharacters': 'This field contains invalid characters.',
            'SETTINGS_EditIPVerification_PortNumbersUsedforIPVerification': 'Port Numbers Used for IP Verification',
            'SETTINGS_EditApplianceUpgradeSettings_ModalTitle': 'Edit Appliance Upgrade Settings',
            'SETTINGS_EditApplianceUpgradeSettings_DellEMCSecureRemoteServices': 'Dell EMC Secure Remote Services needs to be configured. Please contact Services for assistance',
            'SETTINGS_EditApplianceUpgradeSettings_UpdateAppliancefromconfiguredDellEMC': 'Update Appliance from configured Dell EMC Secure Remote Services. (Recommended)',
            'SETTINGS_EditApplianceUpgradeSettings_UpdateAppliancefromlocalrepositorypath': 'Update Appliance from local repository path',
            'SETTINGS_EditApplianceUpgradeSettings_Enterthepathtothelocalrepositorythatcontainstheupgradefile': 'Enter the path to the local repository that contains the upgrade file.',
            'SETTINGS_EditApplianceUpgradeSettings_RepoPath': 'Repository Path*',
            'SETTINGS_EditApplianceUpgradeSettings_': '',
            'SETTINGS_EditApplianceUpgradeSettings_': '',
            'SETTINGS_EditApplianceUpgradeSettings_': '',
            'SETTINGS_EditApplianceUpgradeSettings_': '',
            'SETTINGS_': '',

            'SETTINGS_LongSetTimeMessage': 'Set the time zone of the virtual appliance that hosts VxFlex Manager and configure the NTP node.',
            'SETTINGS_LongSetTimeMessage2': 'WARNING:  Make sure the information entered about NTP node and time is correct before you click Save. If not, all the time stamps will be affected.',
            'SETTINGS_Save': 'Save',
            'SETTINGS_Cancel': 'Cancel',
            'SETTINGS_EnterPathParagraph': 'Enter the path to the local repository that contains the upgrade file.',
            'SETTINGS_EditProxyDetailsParagraph': 'Enter the details of the proxy node that you want to use for external communication.',
            'SETTINGS_PasswordRequired': 'A password is required',
            'SETTINGS_PasswordMatch': 'Passwords must match',
            'SETTINGS_VerifiedPassword': 'A verified password is required',
            'SETTINGS_UseProxyCredentials': 'Use proxy credentials',
            'SETTINGS_UserName': 'User Name',
            'SETTINGS_Password': 'Password',
            'SETTINGS_TestProxy': 'Test Proxy Connection',
            'SETTINGS_SummaryProxySettings': 'Proxy Settings',
            'SETTINGS_DHCPSettings': 'DHCP Settings',
            'SETTINGS_SelectTimeZone': 'Select Time Zone...',

            'SETTINGS_DHCPSettingsEnable': 'Enable DHCP/PXE Node',
            'SETTINGS_DHCPSettingsSubnet': 'Subnet*',
            'SETTINGS_DHCPSettingsNetMask': 'Netmask*',
            'SETTINGS_DHCPSettingsStartingIP': 'DHCP Scope Starting IP Address*',
            'SETTINGS_DHCPSettingsEndingIP': 'DHCP Scope Ending IP Address*',
            'SETTINGS_DHCPSettingsDefaultLeaseTime': 'Default Lease Time* (DD:hh:mm:ss)',
            'SETTINGS_DHCPSettingsMaxLeaseTime': 'Max Lease Time*  (DD:hh:mm:ss)',
            'SETTINGS_DHCPSettingsGateway': 'Default Gateway',
            'SETTINGS_DHCPSettingsDNS': 'DNS Node',
            'SETTINGS_DHCPSettingsDomain': 'Domain',
            'SETTINGS_UploadSSLCertificate': 'Upload SSL Certificate',
            'SETTINGS_SSLInstructions': 'Enter the details of the VxFlex Manager virtual appliance and click Generate. VxFlex Manager will use this information to generate a Certificate Signing Request (CSR).',
            'SETTINGS_SSLDistinguishedDomain': 'Distinguished Name (www.domain.com)*',
            'SETTINGS_BusinessName': 'Business Name*',
            'SETTINGS_DepartmentName': 'Department Name',
            'SETTINGS_Locality': 'Locality (Town/City)*',
            'SETTINGS_State': 'State (Province/Region)*',
            'SETTINGS_Country': 'Country*',
            'SETTINGS_Email': 'Email*',
            'SETTINGS_SSLModalDownloadCert': 'Download Certificate Signing Request',
            'SETTINGS_SelectaCountry': 'Select a Country',
            'SETTINGS_Generate': 'Generate',
            'SETTINGS_BrowseAndSave': 'Click Browse, select a valid SSL certificate, and then click Save.',
            'SETTINGS_SSLCert': 'SSL Certificate',
            'SETTINGS_AddLicense': 'Add License',
            'SETTINGS_AddLicenseDescription': 'Select Choose File to upload new or additional license. If additional, the resources will be added to your current total resources.',
            'SETTINGS_UploadLicense': 'Upload License',
            'SETTINGS_ErrorInUpload': 'Error in upload',
            'SETTINGS_Type': 'Type',
            'SETTINGS_TotalResources': 'Total Resources',
            'SETTINGS_ExpirationDate': 'Expiration Date',
            'SETTINGS_CertSignRequest': 'Certificate Signing Request',
            'SETTINGS_EditServiceTag': 'Edit Service Tag',
            'SETTINGS_Close': 'Close',
            'SETTINGS_CertDownloadInstructions': 'Copy the text below, and submit it to a certificate authority to receive a valid SSL certificate.',
            'SETTINGS_UploadingWarning': 'Uploading the certificate will restart the system. This action will log off all current users and cancel all jobs in progress.',
            'SETTINGS_LoggedInusers': 'Logged-in Users',
            'SETTINGS_InProgressJobs': 'In Progress Jobs',
            'SETTINGS_ScheduledJobs': 'Scheduled Jobs',
            'SETTINGS_SureYouWantToUploadSSL': 'Are you sure you want to upload the certificate?',
            'SETTINGS_Yes': 'Yes',
            'SETTINGS_No': 'No',
            'SETTINGS_TestSuccessful': 'The connection to the proxy node was successful.',
            'SETTINGS_Repositories_Repositories': 'Repositories',
            'SETTINGS_Repositories_OSRCMRepositories': 'RCM and OS Repositories',
            'SETTINGS_Repositories_OSImageRepositories': 'OS Image Repositories',
            'SETTINGS_Repositories_Firmware': 'Firmware',
            'SETTINGS_Repositories_FirmwareSoftwareRepositories': 'Firmware/Software Repositories',
            'SETTINGS_Repositories_ManageRCMVersions': 'Manage RCM Versions',
            'SETTINGS_Repositories_State': 'State',
            'SETTINGS_Repositories_SourcePath': 'Source Path',
            'SETTINGS_Repositories_InUse': 'In Use',
            'SETTINGS_Repositories_IsRCM': 'Is RCM',
            'SETTINGS_Repositories_AvailableActions': 'Available Actions',
            'SETTINGS_Repositories_Delete': 'Delete',
            'SETTINGS_Repositories_SelectAction': 'Select an Action',
            'SETTINGS_Repositories_Edit': 'Edit',
            'SETTINGS_Repositories_ViewBundles': 'View Bundles',
            'SETTINGS_Repositories_Resynchronize': 'Resynchronize',
            'SETTINGS_Repositories_ConfirmDeleteMessage1': 'Are you sure you want to remove this repository?',
            'SETTINGS_Repositories_ConfirmDeleteMessage2': 'Warning: If this repository is specified in a template any future deployments of that template will fail.',
            'SETTINGS_Repositories_ConfirmDeleteMessage3': 'NOTE: This action will only remove the repository from VxFlex Manager. It will not affect the original source.',
            'SETTINGS_Repositories_ResyncMessage': 'Please enter the user name and password for the selected OS repository.',
            'SETTINGS_Repositories_Name': 'Repository Name*',
            'SETTINGS_Repositories_ImageTypeStar': 'Image Type*',
            'SETTINGS_Repositories_ImageType': 'Image Type',
            'SETTINGS_Repositories_Path': 'Source Path and Filename*',
            'SETTINGS_Repositories_UserName': 'User Name',
            'SETTINGS_Repositories_EditOSImageRepo': 'Edit OS Image Repository',
            'SETTINGS_Repositories_Save': 'Save',
            'SETTINGS_Repositories_Add': 'Add',
            'SETTINGS_Repositories_Cancel': 'Cancel',
            'SETTINGS_Repositories_TestConnection': 'Test Connection',
            'SETTINGS_Repositories_SelectImageType': 'Select An Image Type',
            'SETTINGS_Repositories_imagetype_vmware': 'ESXi',
            'SETTINGS_Repositories_imagetype_redhat': 'Red Hat 6',
            'SETTINGS_Repositories_imagetype_redhat7': 'Red Hat / CentOS 7',
            'SETTINGS_Repositories_imagetype_suse11': 'SuSE Enterprise Linux Node 11',
            'SETTINGS_Repositories_imagetype_suse12': 'SuSE Enterprise Linux Node 12',
            'SETTINGS_Repositories_imagetype_windows2008': 'Windows 2008',
            'SETTINGS_Repositories_imagetype_windows2012': 'Windows 2012',
            'SETTINGS_Repositories_imagetype_hyperv': 'Hyper-V',
            'SETTINGS_Repositories_TestSuccess': 'The test was successful',
            'SETTINGS_Repositories_TestFailed': 'The test Failed',
            'SETTINGS_Repositories_Success': 'Success',
            'SETTINGS_Repositories_Failure': 'Failure',
            'SETTINGS_Repositories_Confirm': 'Confirm',
            'SETTINGS_Repositories_Yes': 'Yes',
            'SETTINGS_Repositories_No': 'No',
            'SETTINGS_Repositories_AddOSRepo': 'Add OS Image Repository',
            'SETTINGS_Repositories_ResyncOSRepo': 'Resynchronize OS Repository',
            'SETTINGS_Repositories_True': 'True',
            'SETTINGS_Repositories_False': 'False',
            'SETTINGS_Repositories_Select': 'Select',
            'SETTINGS_Repositories_Error': 'Error',
            'SETTINGS_Repositories_Available': 'Available',
            'SETTINGS_Repositories_Pending': 'Pending',
            'SETTINGS_Repositories_Copying': 'Copying',
            'SETTINGS_Repositories_AddFirmwareRepository': 'Add Release Certification Matrix (RCM)',
            'SETTINGS_Repositories_ImportASMRec': 'Import VxFlex Manager\'s recommended repository from ftp.dell.com (Requires public internet access)',
            'SETTINGS_Repositories_Loadrepositoryfromnetworkpath': 'Load RCM from local network path',
            'SETTINGS_Repositories_LoadRCMfromConfigured': 'Load RCM from configured Dell EMC Secure Remote Services. (Recommended)',
            'SETTINGS_Repositories_DellEMCSecureRemoteServices': 'Dell EMC Secure Remote Services needs to be configured. Please contact Services for assistance.',
            'SETTINGS_Repositories_AvailableRCMs': 'Available RCMs',
            'SETTINGS_Repositories_TherearenoRCMversionsavailable': 'There are no RCM versions available for download for your VxFlex Manager System. Contact Support for additional assistance.',
            'SETTINGS_Repositories_LoadFromSRSTitle': 'Load RCM from configured Dell EMC Secure Remote Services',
            'SETTINGS_Repositories_LoadFromSRSInfo': 'Before downloading an RCM from Dell EMC Secure Remote Services, you need to configure the Alert Connector.  To configure the Alert Connector, navigate to <a id="goToSettingsLinkButton" ng-click="addFirmwareBundleModalController.goToSettings()">settings</a>, and make changes within the Virtual Appliance Management section.',
            'SETTINGS_Repositories_LoadFromSRSInfo_part1': 'Before downloading an RCM from Dell EMC Secure Remote Services, you need to configure the Alert Connector.  To configure the Alert Connector, navigate to ',
            'SETTINGS_Repositories_LoadFromSRSSettingsLink': 'settings',
            'SETTINGS_Repositories_LoadFromSRSInfo_part2': ', and make changes within the Virtual Appliance Management section.',
            'SETTINGS_Repositories_': '',
            'SETTINGS_Repositories_': '',
            'SETTINGS_Repositories_Filepath': 'File Path',
            'SETTINGS_Repositories_FilepathStar': 'File Path* ',
            'SETTINGS_Repositories_Username': 'User Name',
            'SETTINGS_Repositories_Password': 'Password',
            'SETTINGS_RepositSETTINGS_Repositories_Filepathories_': '',
            'SETTINGS_Repositories_MakeDefault': 'Make this the default RCM for compliance checking',
            'SETTINGS_Repositories_OptionalUN': 'Username is optional and is only used if specifying a CIFS share.',
            'SETTINGS_Repositories_OptionalPW': 'Password is optional and is only used if specifying a CIFS share.',
            'SETTINGS_Repositories_FilePathExample': 'CIFS:Â Â Â Â Â  \\\\192.168.1.1\\lab\\RCM.zip <br/> NFS:Â Â Â Â Â Â  192.168.1.1:/var/nfs/RCM.tar.gz',
            'SETTINGS_Repositories_OSFilePathExample': 'CIFS:Â Â Â Â Â  \\\\192.168.2.1\\lab\\isos\\Windows2012r2.iso NFS:Â Â Â Â Â Â  192.168.10.1:/var/nfs/linux.iso',

            'SETTINGS_Repositories_AddCustomBundle': 'Add Custom Bundle',
            'SETTINGS_Repositories_EditCustomBundle': 'Edit Custom Bundle',
            'SETTINGS_Repositories_ViewCustomBundle': 'View Custom Bundle',
            'SETTINGS_Repositories_Repository': 'Repository',
            'SETTINGS_Repositories_CustomBundleDescription': 'A custom bundle enables compliance for storage in addition to compliance and update for switches not already present in the selected repository.  Uploading of switch firmware is not required for compliance only.',
            'SETTINGS_Repositories_NameStar': 'Name*',
            'SETTINGS_Repositories_Description': 'Description',
            'SETTINGS_Repositories_DeviceTypeStar': 'Device Type*',
            'SETTINGS_Repositories_DeviceModelStar': 'Device Model*',
            'SETTINGS_Repositories_VersionStar': 'Version*',
            'SETTINGS_Repositories_CriticalityStar': 'Criticality*',
            'SETTINGS_Repositories_FirmwareVersionToolTip': 'Version should include parenthesis. Sample: 9:5(0.1)',
            'SETTINGS_Repositories_ExistingFileName': 'Existing File Name',
            'SETTINGS_Repositories_UploadFirmware': 'Upload Firmware',
            'SETTINGS_Repositories_Close': 'Close',
            'SETTINGS_Repositories_Urgent': 'Urgent',
            'SETTINGS_Repositories_Recommended': 'Recommended',
            'SETTINGS_Repositories_Optional': 'Optional',

            'SETTINGS_Repositories_testconnection_success_title': 'Success',
            'SETTINGS_Repositories_testconnection_success_message': 'The test was successful',



            'SERVERPOOLS_Name': 'Node Pool Name',
            'SERVERPOOLS_NICs': 'NICs',
            'SERVERPOOLS_Ports': 'Ports',
            'SERVERPOOLS_NumServers': '# Nodes',
            'SERVERPOOLS_NumUsers': '# Users',
            'SERVERPOOLS_RemoveConfirm': 'Are you sure you want to remove the selected node pools?',

            'SERVICES_NoPublishedTemplates': "There are no published templates to deploy",
            'SERVICES_ExistingServiceConfirmationMessage': 'Are you sure you would like to submit this information?',

            'SERVICE_ADD_EXISTING_SERVICE_Title': 'Add Existing Service',
            'SERVICE_ADD_EXISTING_SERVICE_Cancel_Confirmation': 'Are you sure you want to cancel?',

            'SERVICE_APPLY_FIRMWARE_UPDATES_Title': 'Apply Node Firmware Updates',
            'SERVICE_APPLY_RESOURCE_UPDATES_Title': 'Apply Resource Updates',
            'SERVICE_APPLY_FIRMWARE_UPDATES_Cancel_Confirmation': 'Are you sure you want to cancel?',

            'SERVICE_DELETE_SERVICE': 'Are you sure you want to delete this service?',

            'SERVICE_DETAIL_Title': 'Details',
            'SERVICE_DETAIL_Install_Order': 'Install Order',
            'SERVICE_DETAIL_Service_Details': 'Service Details',
            'SERVICE_DETAIL_Details': 'Details',
            'SERVICE_DETAIL_Port_View': 'Port View',

            'SERVICE_DETAIL_Name': 'Name',
            'SERVICE_DETAIL_Stop_Managing_Applications': 'Stop Managing Applications',
            'SERVICE_DETAIL_Legend_Label': 'Resource States',
            'SERVICE_DETAIL_Legend_Healthy': 'Deployed',
            'SERVICE_DETAIL_Legend_InProgress': 'In Progress',
            'SERVICE_DETAIL_Legend_Pending': 'Pending',
            'SERVICE_DETAIL_Legend_Warning': 'Warning',
            'SERVICE_DETAIL_Legend_Critical': 'Critical',
            'SERVICE_DETAIL_Legend_Cancelled': 'Cancelled',
            'SERVICE_DETAIL_Legend_ServiceMode': 'Service Mode',
            'SERVICE_DETAIL_Topology_Help': '[ Click on a component icon above to view its details. ]',
            'SERVICE_DETAIL_Virtual_Machines': 'Virtual machines',
            'SERVICE_DETAIL_Virtual_Machines_THComponent_Name': 'Component Name',
            'SERVICE_DETAIL_Virtual_Machines_THHost_Name': 'Hostname',
            'SERVICE_DETAIL_Virtual_Machines_THOS_Type': 'OS Type',
            'SERVICE_DETAIL_Virtual_Machines_THCPUs': 'CPUs',
            'SERVICE_DETAIL_Virtual_Machines_THDisk_Size': 'Disk Size',
            'SERVICE_DETAIL_Virtual_Machines_THMemory': 'Memory',

            'SERVICE_DETAIL_Clusters': 'Clusters',
            'SERVICE_DETAIL_Clusters_THComponent_Name': 'Component Name',
            'SERVICE_DETAIL_Clusters_THHost_IP': 'IP Address',
            'SERVICE_DETAIL_Clusters_THResource_ID': 'Asset/Service Tag',

            'SERVICE_DETAIL_Physical_Servers': 'Physical Nodes',
            'SERVICE_DETAIL_Physical_Servers_THComponent_Name': 'Component Name',
            'SERVICE_DETAIL_Physical_Servers_THHost_Name': 'Hostname',
            'SERVICE_DETAIL_Physical_Servers_THHost_IP': 'IP Address',
            'SERVICE_DETAIL_Physical_Servers_THHypervisor_IP': 'OS IP Address',
            'SERVICE_DETAIL_Physical_Servers_THResource_ID': 'Asset/Service Tag',

            'SERVICE_DETAIL_Storage_THComponent_Name': 'Component Name',
            'SERVICE_DETAIL_Storage_THHost_IP': 'IP Address',
            'SERVICE_DETAIL_Storage_THResource_ID': 'Asset/Service Tag',
            'SERVICE_DETAIL_Storage_Volume_Name': 'Volume: ',
            'SERVICE_DETAIL_Storage_Volume_Size': 'Size: ',

            'SERVICE_DETAIL_Service_Information': 'Service Information',
            'SERVICE_DETAIL_EditServiceInformation': 'Edit Service Information',
            'SERVICE_DETAIL_EditServiceHelpText': 'Edit Service Information',
            'SERVICE_DETAIL_EditService_ServiceName': 'Service Name*',
            'SERVICE_DETAIL_EditService_ServiceDescription': 'Service Description',
            'SERVICE_DETAIL_EditService_ManageServerFirmware': 'Manage Node Firmware',
            'SERVICE_DETAIL_EditService_UseFirmwareRepository': 'Use Firmware / Software Repository',
            'SERVICE_DETAIL_EditService_ManageServicePermissions': 'Manage Service Permissions',
            'SERVICE_DETAIL_EditService_GrantPermissions': 'In addition to all Admins, grant Standard Users access to this service',
            'SERVICE_DETAIL_EditService_AllStandardUsers': 'All Standard Users',
            'SERVICE_DETAIL_EditService_SpecificStandardUsers': 'Specific Standard Users',
            'SERVICE_DETAIL_EditService_AddUsers': 'Add User(s)',
            'SERVICE_DETAIL_EditService_RemoveUsers': 'Remove User(s)',
            'SERVICE_DETAIL_EditService_AssignUsers_Title': 'Add User(s)',
            'SERVICE_DETAIL_EditService_AssignUsers_Instructions': 'Select which users will have access to this service.',
            'SERVICE_DETAIL_EditService_AssignUsers_THName': 'Name',
            'SERVICE_DETAIL_EditService_AssignUsers_THRold': 'Role',
            'SERVICE_DETAIL_EditService_AssignUsers_THLastName': 'Last Name',
            'SERVICE_DETAIL_EditService_AssignUsers_THFirstName': 'First Name',
            'SERVICE_DETAIL_EditService_AssignUsers_TableEmpty': ' There are no items available. ',
            'SERVICE_DETAIL_EditService_Field_Required': 'This field is required.',
            'SERVICE_DETAIL_EditService_UseASMappliancedefaultcatalog': 'Use VxFlex Manager appliance default catalog',
            'SERVICE_DETAIL_HealthToolTip': 'Aggregate view of the service state comprised of health, firmware compliance, and deployment status of the underlying resources that make up a service.<br/>' +
                    'Service states include:' + '<br/><br/>' +
                    'Â· Healthy â Successful deployment and compliant with the desired firmware levels.<br/>' +
                    'Â· In Progress â The deployment is still in progress.<br/>' +
                    'Â· Warning â A node is no longer compliant with the desired firmware level, or a node or storage array has a health status of warning.<br/>' +
                    'Â· Error â The deployment process failed, a node or storage array has a resource state of âerrorâ, or all node or storage components in the service are in a<br/>' +
                    '  warning state.<br/>' +
                    'Â· Cancelled â The deployment has been cancelled by the user, and is waiting to either be retried or deleted.',
            'SERVICE_DETAIL_UpdateRequired': 'You must first upgrade existing components.',
            'SERVICE_DETAIL_Overall_Service_Health': 'Overall Service Health',
            'SERVICE_DETAIL_Resource_Health': 'Resource Health',
            'SERVICE_DETAIL_Compliance': 'Compliance',
            'SERVICE_DETAIL_Deployment_State': 'Deployment State',
            'SERVICE_DETAIL_Deployed_By': 'Deployed By',
            'SERVICE_DETAIL_Deployed_On': 'Deployed On',
            'SERVICE_DETAIL_Reference_Template': 'Reference Template',
            'SERVICE_DETAIL_Reference_Firmware_Repository': 'Reference Firmware/Software Repository',
            'SERVICE_DETAIL_TargetRCMVersion': 'Target RCM Version',
            'SERVICE_DETAIL_User_Permissions': 'User Permissions',
            'SERVICE_DETAIL_Service_Actions': 'Service Actions',
            'SERVICE_DETAIL_Update_Resources': 'Update Resources',
            'SERVICE_DETAIL_View_All_Settings': 'View All Settings',
            'SERVICE_DETAIL_Generate_Troubleshoot_Bundle': 'Generate Troubleshooting Bundle',
            'SERVICE_DETAIL_ViewComplianceReportToolTip': "View Release Certification Matrix (RCM) Compliance Report",
            'SERVICE_DETAIL_Resource_Actions': 'Resource Actions',
            'SERVICE_DETAIL_Update_Components': 'Upgrade Components',
            'SERVICE_DETAIL_Adjust_Resources': 'Add Resources',
            'SERVICE_DETAIL_Service_Removal_Type': 'Service removal type',
            'SERVICE_DETAIL_RemoveService': 'Remove Service',
            'SERVICE_DETAIL_RemoveService_Text': 'Removes deployment information, but does not make any configuration changes to the nodes, switch ports, Virtual Machine Managers or VxFlex OS, and returns components to available inventory.',
            'SERVICE_DETAIL_RemoveService_Warning': 'Removing a service will delete the deployment information that VxFlex Manager uses to do management tasks such as node expansions and RCM remediation. Services should only be removed if the resources in the service are no longer needed, or will be repurposed.',
            'SERVICE_DETAIL_RemoveService_Types_InfoText': 'There are two types of Service removal',
            'SERVICE_DETAIL_RemoveService_From_VxFM': 'Remove service from VxFlex Manager',
            'SERVICE_DETAIL_RemoveServersFromInventory': 'Remove nodes from VxFlex Manager Inventory',
            'SERVICE_DETAIL_LeaveServersInInventory': 'Leave nodes in VxFlex Manger inventory and set state to ',
            'SERVICE_DETAIL_Add_Application': 'Applications',
            'SERVICE_DETAIL_Add_VM': 'VM',
            'SERVICE_DETAIL_Add_Cluster': 'Cluster',
            'SERVICE_DETAIL_Add_Server': 'Node',
            'SERVICE_DETAIL_Add_Storage': 'Storage',
            'SERVICE_DETAIL_Add_Volume': 'Volume',
            'SERVICE_DETAIL_Add_Network': 'Network',
            'SERVICE_DETAIL_Migrate': 'Migrate Node(s)',
            'SERVICE_DETAIL_Delete_Resource': 'Delete Resources',
            'SERVICE_DETAIL_Firmware_Actions': 'Firmware Actions',
            'SERVICE_DETAIL_Update_Server_Firmware': 'Update Node Firmware',
            'SERVICE_DETAIL_View_Firmware_Report': 'View Compliance Report',
            'SERVICE_DETAIL_ReferenceFirmwareRepository': 'Reference Firmware/Software Repository',
            'SERVICE_DETAIL_Change_Firmware_Baseline': 'Change Node Firmware Baseline',
            'SERVICE_DETAIL_Recent_Activity': 'Recent Activity',
            'SERVICE_DETAIL_UpgradeServiceComponents': 'Upgrade Service Components',
            'SERVICE_DETAIL_ChangeRepository': 'Change Repository',
            'SERVICE_DETAIL_ChangeTargetRCM': 'Change Target RCM',
            'SERVICE_DETAIL_ExporttoFile': 'Export to File',
            'SERVICE_DETAIL_AddServices': 'Add Resources',
            'SERVICE_DETAIL_NoActions': 'There are currently no actions you may take.',
            'SERVICE_DETAIL_RemoveService': 'Remove Service',
            'SERVICE_DETAIL_': '',
            'SERVICE_DETAIL_': '',
            'SERVICE_DETAIL_': '',
            'SERVICE_DETAIL_': '',
            'SERVICE_DETAIL_': '',
            'SERVICE_DETAIL_': '',
            'SERVICE_DETAIL_': '',


            'SERVICE_DETAIL_ManagementIPAddress': 'Management IP Address',
            'SERVICE_DETAIL_ResourceHealth': 'Resource Health',
            'SERVICE_DETAIL_FirmwareCompliance': 'Compliance',
            'SERVICE_DETAIL_DeploymentStatus': 'Deployment Status',
            'SERVICE_DETAIL_Deployed': 'Deployed',
            'SERVICE_DETAIL_Healthy': 'Healthy',
            'SERVICE_DETAIL_Ready': 'Ready',
            'SERVICE_DETAIL_Services': 'Services',
            'SERVICE_DETAIL_Migrate_Servers': 'Migrate Node(s)',
            'SERVICE_DETAIL_IP_Address': 'IP Address',
            'SERVICE_DETAIL_OS_IP_Address': 'OS IP Address',
            'SERVICE_DETAIL_View_Logs': 'View Logs',

            'SERVICE_DETAIL_Application': 'Application:',
            'SERVICE_DETAIL_Virtual_Machine': 'Virtual Machine:',
            'SERVICE_DETAIL_Cluster': 'Cluster:',
            'SERVICE_DETAIL_Server': 'Node:',
            'SERVICE_DETAIL_Storage': 'Storage:',

            'SERVICE_UPGRADE_COMPONENTS_Message1': 'The following required settings have been added to the components within your service based on an upgrade to the VxFlex Manager software.',
            'SERVICE_UPGRADE_COMPONENTS_ApplyNowMessage': '<strong>Apply Now: </strong>immediately retries the service and applies the new settings',
            'SERVICE_UPGRADE_COMPONENTS_SaveMessage': '<strong>Save: </strong>saves the settings and applies when taking an action on the service such as retry or add resource',
            'SERVICE_UPGRADE_COMPONENTS_ApplyNow': 'Apply Now',
            'SERVICE_UPGRADE_COMPONENTS_PasswordFields': 'Password Fields',
            'SERVICE_UPGRADE_COMPONENTS_': '',

            'SERVICE_DELETE_RESOURCES_Title': 'Delete Resources from Service',
            'SERVICE_DELETE_RESOURCES_Helptext': 'Select resources that you wish to delete.',
            'SERVICE_DELETE_RESOURCES_Delete_Warning': 'VxFlex Manager may reconfigure nodes with proper MDM role when required.',
            'SERVICE_DELETE_RESOURCES_Add_Warning': 'VxFlex Manager may reconfigure nodes with proper MDM role when required.',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines': 'Virtual Machines',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THComponent_Name': 'Component Name',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_OS_IP': 'OS IP',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_OS_IP_Address': 'OS IP Address',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THHost_Name': 'Hostname',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THOS_Type': 'OS Type',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THCPUs': 'CPUs',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THDisk_Size': 'Disk Size',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THMemory': 'Memory',

            'SERVICE_DELETE_RESOURCES_Clusters': 'Clusters',
            'SERVICE_DELETE_RESOURCES_Clusters_THComponent_Name': 'Component Name',
            'SERVICE_DELETE_RESOURCES_Clusters_THDataCenterName': 'Data Center Name',
            'SERVICE_DELETE_RESOURCES_Clusters_THClusterName': 'Cluster Name',
            'SERVICE_DELETE_RESOURCES_Clusters_THManagement_IP': 'Management IP',
            'SERVICE_DELETE_RESOURCES_Clusters_THHost_IP': 'Management IP Address',
            'SERVICE_DELETE_RESOURCES_Clusters_THResource_ID': 'Asset/Service Tag',

            'SERVICE_DELETE_RESOURCES_Physical_Servers': 'Physical Nodes',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_THComponent_Name': 'Component Name',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_THHost_Name': 'Hostname',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_TH_VxFlexOSManagement_IP': 'VxFlex OS Management IP',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_THiDRACManagement_IP': 'iDRAC Management IP',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_THHost_IP': 'Management IP',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_THHypervisor_IP': 'OS IP',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_THResource_ID': 'Asset/Service Tag',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_TH_VxFlexOSMode': 'VxFlex OS Mode',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_TH_MDMRole': 'MDM Role',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_TH_tooltipstorageonly': 'Storage only is SDS only, Compute Only is SDC only and Hyper-converged is both SDS and SDC.<br /><br />Dell EMC VxFlex OS is based on ScaleIO software.  VxFlex OS or ScaleIO values may be entered/shown in this field.',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_TH_MDMTooltip': 'MDM Role refers to Metadata Manager Role in VxFlex OS.',
            'SERVICE_DELETE_RESOURCES_Storage': 'Storage',
            'SERVICE_DELETE_RESOURCES_Storage_THComponent_Name': 'Component Name',
            'SERVICE_DELETE_RESOURCES_Storage_THManagement_IP': 'Management IP',
            'SERVICE_DELETE_RESOURCES_Storage_THHost_IP': 'Management IP Address',
            'SERVICE_DELETE_RESOURCES_Storage_THResource_ID': 'Asset/Service Tag',
            'SERVICE_DELETE_RESOURCES_Storage_Volume_Name': 'Volume: ',
            'SERVICE_DELETE_RESOURCES_Storage_Volume_Size': 'Size: ',
            'SERVICE_DELETE_RESOURCES_Footnote': '*NOTE: Deleting a shared resource could affect other running services.',

            'SERVICE_RESOURCES_STORAGE_Volume': 'Volume',
            'SERVICE_RESOURCES_STORAGE_Size': 'Size',
            'SERVICE_RESOURCES_STORAGE_Type': 'Type',
            'SERVICE_RESOURCES_STORAGE_': '',
            'SERVICE_RESOURCES_STORAGE_': '',
            'SERVICE_RESOURCES_STORAGE_': '',

            'SERVICE_DELETE_RESOURCES_ScaleIOGateways': 'VxFlex OS Gateways',
            'SERVICE_DELETE_RESOURCES_ScaleIOGateways_tooltip': 'Dell EMC VxFlex OS is based on ScaleIO software.  VxFlex OS or ScaleIO values may be entered/shown in these fields.',
            'SERVICE_DELETE_RESOURCES_ScaleIOGateways_THComponent_Name': 'Component Name',
            'SERVICE_DELETE_RESOURCES_ScaleIOGateways_THHost_Name': 'System Name',
            'SERVICE_DELETE_RESOURCES_ScaleIOGateways_THPrimary_MDM_IP': 'Primary MDM IP',
            'SERVICE_DELETE_RESOURCES_ScaleIOGateways_THManagement_IP': 'Management IP',
            'SERVICE_DELETE_RESOURCES_ScaleIOGateways_THHost_IP': 'Management IP Address',
            'SERVICE_DELETE_RESOURCES_ScaleIOGateways_StoragePools': 'Storage Pools',
            'SERVICE_DELETE_RESOURCES_ScaleIOGateways_Volumes': 'Volumes',
            'SERVICE_DELETE_RESOURCES_ScaleIOGateways_ProtectionDomain': 'Protection Domain',

            'SERVICE_ADD_EXISTING_ServiceInformation': 'Service Information',
            'SERVICE_ADD_EXISTING_Service_Welcome': 'Welcome',
            'SERVICE_ADD_EXISTING_Service_WelcomeMessage': 'Use this wizard to discover and collect inventory data from resources within your environment. Once your environment has been added as an existing service, VxFlex Manager will include those resources in future management tasks. These tasks may include adding additional resources to the environment, removing/replacing resources, updating firmware and driver versions, and reconfiguring MDM roles.' +
                                                             '<br/><br/>The supported resource types include nodes, switches, VxFlex OS Gateways and virtual machine managers.' +
                                                             '<br/><br/>Before discovering the resources, it is recommended to:' +
                                                             '<br/><ul><li>Ensure Inventory is current - Resources that have not been discovered by VxFlex Manager cannot be added to this service</li><li>Gather IP addresses and credentials to access the resources</li><li>Make sure the resources and the virtual appliances are connected to the network</li></ul>',
            'SERVICE_ADD_EXISTING_Service_OSCredentials': 'OS Credentials',
            'SERVICE_ADD_EXISTING_Service_Types_Hyperconverged': 'Hyperconverged',
            'SERVICE_ADD_EXISTING_Service_Types_ComputeOnly': 'Compute Only',
            'SERVICE_ADD_EXISTING_Service_Types_StorageOnly': 'Storage Only',
            'SERVICE_ADD_EXISTING_Service_OS_Credentials_TH_Name': 'Name',
            'SERVICE_ADD_EXISTING_Service_OS_Credentials_TH_IPAddress': 'IP Address',
            'SERVICE_ADD_EXISTING_Service_OS_Credentials_TH_Credentials': 'Credentials',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping': 'Network Mapping',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_HelpText': 'For all port groups listed below that you want VxFlex Manager to manage in this service, select the VxFlex Manager network that corresponds to that port group. For any port groups that you do NOT want VxFlex Manager to manage, leave the network field set to âSelectâ.',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_TH_PortGroupName': 'Port Group Name',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_TH_VLANID': 'VLAN ID',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_TH_Network': 'Network',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_Storage_TH_Network': 'Network',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_Storage_TH_Role': 'Role',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_Storage_TH_Type': 'Type',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_Storage_Nodes': 'Nodes',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_Storage_CreateNew': 'Create New',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_Storage_': '',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_Storage_': '',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_Storage_': '',
            'SERVICE_ADD_EXISTING_Service_NetworkMapping_Storage_': '',
            'SERVICE_ADD_EXISTING_Service_InventorySummary': 'Inventory Summary',
            'SERVICE_ADD_EXISTING_Service_SVMs': 'SVMs',
            'SERVICE_ADD_EXISTING_Service_NoCredentials': 'No Credentials Required',
            'SERVICE_ADD_EXISTING_Service_NewResources': 'New Resources',
            'SERVICE_ADD_EXISTING_Service_Clusters': 'Clusters',
            'SERVICE_ADD_EXISTING_Service_Servers': 'Nodes',
            'SERVICE_ADD_EXISTING_Service_Storages': 'Storages',
            'SERVICE_ADD_EXISTING_Service_VxFlexOSGateways': 'VxFlex OS Gateways',
            'SERVICE_ADD_EXISTING_Service_': '',
            'SERVICE_ADD_EXISTING_Service_': '',
            'SERVICE_ADD_EXISTING_Service_': '',
            'SERVICE_ADD_EXISTING_Type': 'Type',
            'SERVICE_ADD_EXISTING_NameStar': 'Name *',
            'SERVICE_ADD_EXISTING_Description': 'Description',
            'SERVICE_ADD_EXISTING_ReleaseCertificationMatrix': 'Release Certification Matrix (RCM)',
            'SERVICE_ADD_EXISTING_RCMVersion': 'RCM Version',
            'SERVICE_ADD_EXISTING_FirmwareCompliance': 'Firmware Compliance',
            'SERVICE_ADD_EXISTING_PerformFirmwareCompliance': 'Perform compliance check with selected RCM version',
            'SERVICE_ADD_EXISTING_FirmwareRespositoryStar': 'Firmware Respository *',
            'SERVICE_ADD_EXISTING_ServicePermissions': 'Service Permissions',
            'SERVICE_ADD_EXISTING_GrantStandardUsership': 'In addition to Administrators, grant Standard Users access to this service',
            'SERVICE_ADD_EXISTING_AllStandardUsers': 'All Standard Users',
            'SERVICE_ADD_EXISTING_SpecificStandardUsers': 'Specific Standard Users',
            'SERVICE_ADD_EXISTING_ESXi': 'ESXi',
            'SERVICE_ADD_EXISTING_ComponentNameStar': 'Component Name*',
            'SERVICE_ADD_EXISTING_ComponentName': 'Component Name',
            'SERVICE_ADD_EXISTING_ClusterSettings': 'Cluster Settings',
            'SERVICE_ADD_EXISTING_BasicSettings': 'Basic Settings',
            'SERVICE_ADD_EXISTING_ClusterInformation': 'Cluster Information',
            'SERVICE_ADD_EXISTING_SummaryForService': 'Summary for Service {{serviceName}}',
            'SERVICE_ADD_EXISTING_SummaryDescription': 'VxFlex Manager resource inventory was compared to the inventory for the selected cluster.  Discrepancies could be a result of a resource not being discovered during the most recent VxFlex Manager inventory, the resource is not supported by VxFlex Manager, or the VxFlex OS Gateway has not been discovered. Additional resources can be added to this service after creation, if desired.',
            'SERVICE_ADD_EXISTING_ASMClusterInventory': 'VxFlex Manager / Cluster Inventory',
            'SERVICE_ADD_EXISTING_Clusters': 'Clusters',
            'SERVICE_ADD_EXISTING_PhysicalServers': 'Physical Nodes',
            'SERVICE_ADD_EXISTING_Storage': 'Storage',
            'SERVICE_ADD_EXISTING_ScaleIOGateway': 'VxFlex OS Gateways',
            'SERVICE_ADD_EXISTING_Applications': 'Applications',
            'SERVICE_ADD_EXISTING_Name': 'Name',
            'SERVICE_ADD_EXISTING_IP': 'IP',
            'SERVICE_ADD_EXISTING_IPAddress': 'IP Address',
            'SERVICE_ADD_EXISTING_AssetServiceTag': 'Asset/Service Tag',
            'SERVICE_ADD_EXISTING_AvailableInventory': 'Available Inventory',
            'SERVICE_ADD_EXISTING_OK': 'OK',
            'SERVICE_ADD_EXISTING_AvailableInventoryToolTip': '<ul><li>"Available" nodes include those in VxFlex Manager inventory that are:<ul><li>Not in use in a service</li><li>Marked "Reserved" or "Managed"</li></ul><br /><li>"Unavailable" nodes include:<ul><li>Nodes with an unsupported VxFlex OS configuration (storage only nodes)</li><li>"Updating" or "Unmanaged" nodes</li><li>Instances where all associated nodes are unavailable</li></ul></li></ul>',
            'SERVICE_ADD_EXISTING_UnavailableScaleIOGateway': 'Unavailable VxFlex OS Gateway',
            'SERVICE_ADD_EXISTING_UnavailableScaleIOGatewayInventoryTooltip': 'VxFlex Manager is not able to update RCM firmware and software versions for VxFlex clusters that do not have available VxFlex OS Gateways.  If expected VxFlex OS Gateways are not shown as âAvailableâ in the VxFlex OS Gateways table, you may need to discover these gateways and re-run this wizard.',

            'SERVICE_DETAIL_DELETE_SERVICE_DeleteService': 'Delete Service',
            'SERVICE_DETAIL_DeleteService_Text': 'Makes configuration changes to nodes, switch ports, Virtual Machine Managers and VxFlex OS to unconfigure those compononents, and returns the components to available inventory.',
            'SERVICE_DETAIL_DELETE_SERVICE_Warning': 'Deleting a service cannot be UNDONE. Are you sure you want to proceed?',
            'SERVICE_DETAIL_DELETE_SERVICE_Confirm': 'Type âDELETE SERVICEâ to confirm',
            'SERVICE_DETAIL_DELETE_SERVICE_ReturnServers': 'Return Node(s) to Resource Pool',
            'SERVICE_DETAIL_DELETE_SERVICE_ServerDescription': 'This mandatory action powers off the node, and returns it to its designated resource pool. If RAID was configured during the deployment it will be removed from the node.',
            'SERVICE_DETAIL_DELETE_SERVICE_DeleteVms': 'Delete VM(s)',
            'SERVICE_DETAIL_DELETE_SERVICE_DeleteCluster': 'Delete Cluster(s) and Remove from vCenter*',
            'SERVICE_DETAIL_DELETE_SERVICE_DeleteStorage': 'Delete Storage Volume(s)*',
            'SERVICE_DETAIL_DELETE_SERVICE_DeleteScaleios': 'Remove Protection Domain and Storage Pools from VxFlex OS*',
            'SERVICE_DETAIL_DELETE_SERVICE_Footnote': '*NOTE: Deleting a shared resource could affect other running services.',

            'SERVICE_CANCEL_ModalTitle': 'Cancel Deployment',
            'SERVICE_CANCEL_cancellingStopsPendingDeploymentsMessage': 'Cancelling a deployment stops a scheduled/pending or in-progress service deployment. This enables you to update content as needed and retry the deployment at a later time.',
            'SERVICE_CANCEL_DeleteToRevertChangesMessage': 'You can also delete this service if you want to revert all changes made and return resources to their available pools. Services are scheduled to deploy and are in a pending state must be deleted.',
            'SERVICE_CANCEL_Doyoualsowanttodeletethisservice': 'Do you also want to delete this service?',
            'SERVICE_CANCEL_CancelDeploymentBtn': 'Cancel Deployment',
            'SERVICE_CANCEL_DoNotCancelDeployment': 'Do Not Cancel Deployment',
            'SERVICE_CANCEL_processofbeingcancelledbanner': '<strong>Warning: </strong>This service is in the process of being cancelled. During cancellation this service will continue to be updated to reflect the most recent activity.',
            'SERVICE_CANCEL_': '',
            'SERVICE_CANCEL_': '',

            'SERVICE_SETTINGS_Title': 'Service Deployment Settings',
            'SERVICE_SETTINGS_Reference_IP_Address': 'Reference Node IP Address',
            'SERVICE_SETTINGS_Application_Settings': 'Application Settings',

            'SERVICES_Title': 'Services',
            'SERVICES_No_Published_Templates_Tooltip': 'There are no published templates to deploy.',
            'SERVICES_Deploy': 'Deploy',
            'SERVICES_Add_Existing_Service': 'Add Existing Service',
            'SERVICES_View_As': 'View As',
            'SERVICES_Tile_View': 'Tile View',
            'SERVICES_Grid_View': 'List View',
            'SERVICES_Filter_By': 'Filter By',
            'SERVICES_None_Found': 'There are no services that match this criteria.',
            'SERVICES_THStatus': 'Status',
            'SERVICES_THName': 'Name',
            'SERVICES_THDeployed_By': 'Deployed By',
            'SERVICES_THDeployed_On': 'Deployed On',
            'SERVICES_THComponents': 'Components',
            'SERVICES_AllServices': 'All Services',
            'SERVICES_Service_Published_Template': 'A service is a deployment of a published template that is categorized in the following states.',
            'SERVICES_Service_States': 'Service States',
            'SERVICES_Service_State_Description_Cancelled': 'Service deployment has been stopped by user. Resources can be updated and deployment retried, if desired.',
            'SERVICES_Service_State_Description_Incomplete': 'Volumes have not been added to a service to make it fully functional.',
            'SERVICES_Service_State_Description_Critical': 'Services are in a severely degraded or non-functional state and require attention.',
            'SERVICES_Service_State_Description_Healthy': 'Services are fully functional and compliant.',
            'SERVICES_Service_State_Description_InProgress': 'Services are currently being deployed',
            'SERVICES_Service_State_Description_Pending': 'Services are scheduled for deployment',
            'SERVICES_Service_State_Description_Warning': 'Services are degraded or need attention to be brought into compliance.',
            'SERVICES_Service_State_Description_ServiceMode': 'A node in the service has been put in service mode. Limited actions are available for services in this state.',
            'SERVICES_View_Details': 'View Details',
            'SERVICES_Update_Firmware': 'Update Firmware',
            'SERVICES_UpdateResources': 'Update Resources',
            'SERVICES_Export_To_File': 'Export to File',
            'SERVICES_ExportSelected': 'Export Selected',
            'SERVICES_Deployed_By': 'Deployed By',
            'SERVICES_Deployed_On': 'Deployed On',
            'SERVICES_Reference_Template': 'Reference Template',
            'SERVICES_Components': 'Components',
            'SERVICES_Application': 'Application',
            'SERVICES_VM': 'VM',
            'SERVICES_Cluster': 'Cluster',
            'SERVICES_Server': 'Node',
            'SERVICES_Storage': 'Storage',
            'SERVICES_AddApplication': 'Add Application',
            'SERVICES_AddNetwork': 'Add Network',
            'SERVICES_NewComponentSettings': 'New Component Settings',
            'SERVICES_Duplicate': 'Duplicate',
            'SERVICES_New': 'New',
            'SERVICES_ResourcetoDuplicate': 'Resource to Duplicate',
            'SERVICES_UpgradeExistingComponents': 'You must first upgrade existing components.',
            'SERVICES_Continue': 'Continue',
            'SERVICES_Cancel': 'Cancel',
            'SERVICES_NumberofInstances': 'Number of Instances',
            'SERVICES_ComponentName': 'Component Name',
            'SERVICES_duplicateVmMessage': '(Recommended for virtualization cluster scale up scenarios)',
            'SERVICES_duplicateServerMessage': '(Recommended for virtualization cluster scale up scenarios)',
            'SERVICES_Areyousureyouwishtodeploythisservice': 'Are you sure you wish to deploy this service?',
            'SERVICES_ComputeOnlyNoVolumesAvailable': 'No Volumes Currently available. Please create a volume(s) in your Storage Only or Hyperconverged Service',
            'SERVICES_': '',
            'SERVICES_': '',
            'SERVICES_': '',


            'SERVICES_UPDATE_RESOURCES_UpdateResources': 'Update Resources',
            'SERVICES_UPDATE_RESOURCES_InventorySummary': 'Inventory Summary',
            'SERVICES_UPDATE_RESOURCES_OSCredentials': 'OS Credentials',
            'SERVICES_UPDATE_RESOURCES_Summary': 'Summary',
            'SERVICES_UPDATE_RESOURCES_NewDevice_Cluster': '{{num}} New Cluster(s)',
            'SERVICES_UPDATE_RESOURCES_NewDevice_Server': '{{num}} New Node(s)',
            'SERVICES_UPDATE_RESOURCES_NewDevice_VxFlex': '{{num}} New VxFlex OS Gateway(s)',
            'SERVICES_UPDATE_RESOURCES_NewDevice_Storage': '{{num}} New Storage(s)',
            'SERVICES_UPDATE_RESOURCES_': '',
            'SERVICES_UPDATE_RESOURCES_': '',

            'SERVICE_SVG_POPOVER_MultipleErrors': 'Multiple Alerts',
            'SERVICE_SVG_POPOVER_AlertDetails': 'Alert Details',
            'SERVICE_SVG_POPOVER_Warning': 'Warning',
            'SERVICE_SVG_POPOVER_ViewDetails': 'View Details',
            'SERVICE_SVG_POPOVER_': '',
            'SERVICE_SVG_POPOVER_': '',
            'SERVICE_SVG_POPOVER_': '',


            'SERVICES_CancelledServices': 'Cancelled Services',
            'SERVICES_CriticalServices': 'Error Services',
            'SERVICES_DeployNew': 'Deploy New Services',
            'SERVICES_DeployNewService': 'Deploy New Service',
            'SERVICES_HealthyServices': 'Healthy Services',
            'SERVICES_InProgressServices': 'In Progress Services',
            'SERVICES_WarningServices': 'Warning Services',
            'SERVICES_ServiceModeServices': 'Service Mode Services',

            'SERVICES_DEPLOY_Confirm': 'Are you sure you want to publish this template?',
            'SERVICES_NEW_SERVICE_DeployService': 'Deploy Service',
            'SERVICES_NEW_SERVICE_SelectPublishedTemplateStar': 'Select Published Template*',
            'SERVICES_NEW_SERVICE_ServiceInfo': 'Service Information',
            'SERVICES_NEW_SERVICE_ServiceNameStar': 'Service Name*',
            'SERVICES_NEW_SERVICE_ServiceDescription': 'Service Description',
            'SERVICES_NEW_SERVICE_NumberofDeployments': 'Number of Deployments',
            'SERVICES_NEW_SERVICE_ManageServerFirmware': 'Manage Node Firmware',
            'SERVICES_NEW_SERVICE_DeployInterp': 'Deploy',
            'SERVICES_NEW_SERVICE_DeploymentSettings': 'Deployment Settings',

            'SERVICES_DEPLOY_ViewAllSettings': 'View All Settings',
            'SERVICES_DEPLOY_ScheduleDeployment': 'Schedule Deployment',
            'SERVICES_DEPLOY_DeployNow': 'Deploy Now',
            'SERVICES_DEPLOY_DeployLater': 'Deploy later',
            'SERVICES_DEPLOY_Date': 'Date',
            'SERVICES_DEPLOY_Time': 'Time',
            'SERVICES_DEPLOY_STATE_Error': 'Critical',
            'SERVICES_DEPLOY_STATE_Healthy': 'Healthy',
            'SERVICES_DEPLOY_STATE_InProgress': 'In Progress',
            'SERVICES_DEPLOY_STATE_Warning': 'Warning',
            'SERVICES_DEPLOY_STATE_Pending': 'Pending',
            'SERVICES_DEPLOY_STATE_Cancelled': 'Cancelled',
            'SERVICES_DEPLOY_TILE_TOOLTIP_UpdateFirmware': 'Update Firmware',
            'SERVICES_DEPLOY_TILE_TOOLTIP_ExportService': 'Export Service',
            'SERVICES_NoMatchSearch': 'There are no services that match this criteria.',
            'SERVICES_All': 'All',
            'SERVICES_DEPLOY_ConfirmWizardClosing': 'Are you sure you wish to close this wizard?',

            'SERVICES_SERVICE_Details_Retry_ConfirmModal_RetryService': 'Retry of VxFlex Manager may reconfigure nodes with proper MDM role when required.' +
                '<br /> <br /> Retrying a service also attempts to deploy the service again. <br /> <br />Firmware is not updated as part of the service retry. You can update firmware by clicking',
            'SERVICES_SERVICE_Details_Retry_ConfirmModal_RetryService_Continue': '<br /> <br /><b>Are you sure you want to continue?</b>',
            'SERVICES_SERVICE_Details_retryalternateaction': 'Cancel Retry and Update Firmware',
            'SERVICES_SERVICE_Details_retryalternateaction_Dialog': 'Retry Cancelled.  Update Firmware?',
            'SERVICES_SERVICE_Details_confirmationmodal_alert': 'Alert',
            'SERVICES_SERVICE_Details_confirmationmodal_confirm': 'Confirm',
            'SERVICES_SERVICE_Details_confirmationmodal_success': 'Success',
            'SERVICES_SERVICE_Details_confirmationmodal_critical': 'Critical',
            'SERVICES_SERVICE_Details_confirmationmodal_info': 'Info',
            'SERVICES_SERVICE_Details_confirmationmodal_ok': 'OK',
            'SERVICES_SERVICE_Details_confirmationmodal_yes': 'Yes',
            'SERVICES_SERVICE_Details_confirmationmodal_no': 'No',
            'SERVICES_SERVICE_Details_Retry_ConfirmModal_Confirm': 'Confirm',

            'SERVICES_RESOURCE_FirmwareReportTitle': 'Release Certification Matrix (RCM) Compliance Report',
            'SERVICES_SERVICE_FirmwareReportTitle': 'Node Release Certification Matrix (RCM) Compliance Report',
            'SERVICES_FirmwareComplianceStatusMsg': ' against ',
            'SERVICES_FirmwareNonCompliantMessage': 'This service is Non-Compliant ',
            'SERVICES_FirmwareStatus': 'Firmware Status',
            'SERVICES_FirmwareCompliance': 'Compliance:',
            'SERVICES_FirmwareCompliance_Critical_Tooltip': 'Firmware/software does not meet the minimum VxFlex Manager requirements.  Unable to deploy resource to a service until it is brought into compliance.',
            'SERVICES_FirmwareCompliance_Warning_Tooltip': 'Firmware/software is non-compliant with specified catalog.',
            'SERVICES_FirmwareCompliant': 'Compliant',
            'SERVICES_FirmwareNonCompliant': 'Non-Compliant',
            'SERVICES_FirmwareNonCompliantWith': 'Non-Compliant with Default Catalog -',
            'SERVICES_FirmwareUpdateRequired': 'Update Required with Default Catalog -',
            'SERVICES_FirmwareCompliantWith': 'Compliant with -',
            'SERVICES_FirmwareStatusUpdateRequired': ' - there are firmware components on this resource that do not meet the minimum required by VxFlex Manager',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_Components': 'Components',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_Component': 'Component',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_CurrentVersion': 'Current Version',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_ExpectedVersion': 'Expected Version',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_LastUpdate': 'Last Update',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_LastUpdated': 'Last Updated',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_Component': 'Component',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_Vendor': 'Vendor',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_CurrentVersion': 'Current Version',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_ExpectedVersion': 'Expected Version',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_LastUpdate': 'Last Update',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_LastUpdated': 'Last Updated',
            'SERVICES_FirmwareCompReport_Update_Resource': 'Update Resource',
            'SERVICES_FirmwareCompReport_Update_Service': 'Update Service',

            'SERVICES_FirmwareCompReport_ServiceTable_IPAddress': 'IP Address',
            'SERVICES_FirmwareCompReport_ServiceTable_AssetServiceTag': 'Asset/Service Tag',
            'SERVICES_FirmwareCompReport_ServiceTable_Components': 'Components',
            'SERVICES_FirmwareCompReport_ServiceTable_CurrentVersion': 'Current Version',
            'SERVICES_FirmwareCompReport_ServiceTable_ExpectedVersion': 'Expected Version',
            'SERVICES_FirmwareCompReport_ServiceTable_LastUpdate': 'Last Update',
            'SERVICES_FirmwareCompReport_ServiceTable_LastUpdated': 'Last Updated',
            'SERVICES_FirmwareCompReport_ServiceTable_UpdateService': 'Update Service',
            'SERVICES_FirmwareCompReport_ServiceTable_UpdateResources': 'Update Resources',

            'SERVICES_SERVICE_UpdateInventoryTitle': 'Update Inventory for ',
            'SERVICES_SERVICE_UpdateInventoryButton': 'Update Inventory',
            'SERVICES_SERVICE_UpdateInventory_Help': 'VxFlex Manager resource inventory was compared to the inventory for the selected cluster.  An asterisk(*) is shown to identify new resources that have been discovered.  Click "Update Inventory" to add new inventory to this service.',
            'SERVICES_SERVICE_UpdateInventory_ClusterInventory': 'VxFlex Manager / Cluster Inventory:',
            'SERVICES_SERVICE_UpdateInventory_SummaryClusters': 'Clusters',
            'SERVICES_SERVICE_UpdateInventory_SummaryPhysicalServers': 'Physical Nodes',
            'SERVICES_SERVICE_UpdateInventory_SummaryStorage': 'Storage',
            'SERVICES_SERVICE_UpdateInventory_SummaryScaleIOGateway': 'VxFlex OS Gateways',
            'SERVICES_SERVICE_UpdateInventory_Applications': 'Applications',
            'SERVICES_SERVICE_UpdateInventory_VMs': 'VMs',
            'SERVICES_SERVICE_UpdateInventory_Clusters': 'Clusters',
            'SERVICES_SERVICE_UpdateInventory_PhysicalServers': 'Physical Nodes',
            'SERVICES_SERVICE_UpdateInventory_Storage': 'Storage',
            'SERVICES_SERVICE_UpdateInventory_TableEmpty': ' There are no items available. ',
            'SERVICES_SERVICE_UpdateInventory_ComponentName': 'Component Name',
            'SERVICES_SERVICE_UpdateInventory_IPAddress': 'IP Address',
            'SERVICES_SERVICE_UpdateInventory_AssetServiceTag': 'Asset/Service Tag',
            'SERVICES_SERVICE_UpdateInventory_AvailableInventory': 'Available Inventory',
            'SERVICES_SERVICE_UpdateInventory_Hostname': 'Hostname',
            'SERVICES_SERVICE_UpdateInventory_ManagementIP': 'Management IP',
            'SERVICES_SERVICE_UpdateInventory_OSIPAddress': 'OS IP Address',
            'SERVICES_SERVICE_UpdateInventory_OSType': 'OS Type',
            'SERVICES_SERVICE_UpdateInventory_CPUs': 'CPUs',
            'SERVICES_SERVICE_UpdateInventory_DiskSize': 'Disk Size',
            'SERVICES_SERVICE_UpdateInventory_Memory': 'Memory',
            'SERVICES_SERVICE_UpdateInventory_Name': 'Name',
            'SERVICES_SERVICE_UpdateInventory_Volume': 'Volume',
            'SERVICES_SERVICE_UpdateInventory_Size': 'Size',
            'SERVICES_SERVICE_UpdateInventory_ConfirmUpdateInventory': 'Are you sure you would like to submit this information?',

            'STOP_MANAGING_APPLICATIONS_Title': 'Stop Managing Applications for {{componentName}}',
            'STOP_MANAGING_APPLICATIONS_Stop_Managing': 'Stop Managing',
            'STOP_MANAGING_APPLICATIONS_Help': 'Select the applications that you no longer want to manage in VxFlex Manager.',
            'STOP_MANAGING_APPLICATIONS_Installed_Applications': 'Installed Applications',

            'STOP_MANAGING_APPLICATIONS_Select': 'Select',
            'STOP_MANAGING_APPLICATIONS_Application_Type': 'Application Type',

            'TEMPLATES_FilterBy': 'Filter By',
            'TEMPLATES_EditTemplateInformation': 'Edit Template Information',
            'TEMPLATES_ClonedTemplates': 'Cloned Templates',
            'TEMPLATES_AllCategories': 'All Categories',
            'TEMEPLATES_State': 'State',
            'TEMPLATES_LastDeployedOn': 'Last Deployed On',
            'TEMPLATES_Draft': 'Draft',
            'TEMPLATES_Published': 'Published',
            'TEMPLATES_DeployService': 'Deploy Service',
            'TEMPLATES_Clone': 'Clone',
            'TEMPLATES_ExportTemplate': 'Export Template',
            'TEMPLATES_AddAttachments': 'Add Attachments',
            'TEMPLATES_AddAttachment': 'Add Attachment',
            'TEMPLATES_DeleteAttachments': 'Are you sure you want to delete this attachment?',
            'TEMPLATES_Invalid': 'Some of your Templates require attention. You must edit the settings before these templates can be published.',
            'TEMPLATES_AttachmentSizeReq': 'The size limit for each attached file is 50MB',
            'TEMPLATES_TemplateInformation': 'Template Information',
            'TEMEPLATES_TemplateType': 'Template Type',
            'TEMPLATES_CloneExisting': 'Clone Existing',
            'TEMPLATES_TemplateName': 'Template Name',
            'TEMPLATES_TemplateUploaded': 'Template Uploaded',
            'TEMPLATES_TemplateCategory': 'Template Category',
            'TEMPLATES_TemplateDescription': 'Template Description',
            'TEMPLATES_ManageServerFirmware': 'Do you want to update firmware / software on nodes when this template is deployed as a service?',
            'TEMPLATES_WillStillBeMaintined': 'Firmware / software on shared devices will still be maintained by the global default repository.',
            'TEMPLATES_UseFirmwareRepo': 'Use Firmware / Software Repository',
            'TEMPLATES_FirmwareRepoNote': 'Note: Changing the firmware repository could update the firmware level on nodes when this template is deployed as a service. Firmware on shared devices will still be maintained by the global default firmware repository.',
            'TEMPLATES_ManageServicePermissions': 'Manage Service Permissions',
            'TEMPLATES_PermissionsGrantAccess': 'In addition to all Admins, grant Standard Users access to this service',
            'TEMPLATES_AdminsOnly': 'Only VxFlex Manager Administrators',
            'TEMPLATES_SpecificStandardUsers': 'VxFlex Manager Administrators and Specific Standard Users',
            'TEMPLATES_AllStandardUsers': 'VxFlex Manager Administrators and All Standard Users',
            'TEMPLATES_AddUsers': 'Add User(s)',
            'TEMPLATES_RemoveUsers': 'Remove User(s)',

            'TEMPLATES_Templates': 'Templates',
            'TEMPLATES_Title': 'Templates',
            'TEMPLATES_MyTemplates': 'My Templates',
            'TEMPLATES_SampleTemplates': 'Sample Templates',
            'TEMPLATES_CreateTemplate': 'Create Template',
            'TEMPLATES_FirmwareRepositoryReq': 'Firmware Repository Required',
            'TEMPLATES_ViewAs': 'View As',
            'TEMPLATES_TemplateOverview': 'Template Overview',
            'TEMPLATES_TemplateOverviewText': 'A template is a collection of configured components that captures the end-to-end infrastructure of a service when deployed.  The collection of components can comprise nodes and clusters.',
            'TEMPLATES_TemplateStates': 'Template States',
            'TEMPLATES_TemplateStatesText': '<b>Draft:</b> A new or cloned template created but not yet published. Draft templates are saved automatically.<br />' +
                                            '<b>Published:</b> A template ready for deployment as a service.<br />' +
                                            '<b>Sample:</b> A template included in VxFlex Manager to help you get started. You must clone these templates in order to edit their settings.',
            'TEMPLATES_NoPublishedTemplates': 'There are currently no published templates available.',
            'TEMPLATES_PublishedTemplates': 'Published Templates',
            'TEMPLATES_DraftTemplates': 'Draft Templates',
            'TEMPLATES_NoPublishedDrafts': 'There are currently no draft templates available.',
            'TEMPLATES_DRAFT': 'DRAFT',
            'TEMPLATES_Attachments': 'Attachments',
            'TEMPLATES_Last': 'Last',
            'TEMPLATES_NewCategoryName': 'New Category Name',
            'TEMPLATES_CreateNewCategory': 'Create New Category',
            'TEMPLATES_SelectorCreateNewCategory': 'Select or Create New Category',
            'TEMPLATES_ErrorExporting': 'Error exporting templates',
            'TEMPLATES_TemplateCategoryStar': 'Template Category *',

            'TEMPLATES_TILE_ViewDetails': 'View Details',
            'TEMPLATES_TILE_Clone': 'Clone',
            'TEMPLATES_TILE_Delete': 'Delete',
            'TEMPLATES_TILE_Edit': 'Edit',

            'TEMPLATES_FilterByComponentType': 'Filter By Component Type',
            'TEMPLATES_ComponentName': 'Component Name',
            'TEMPLATES_TemplateDetails': 'Template Details',
            'TEMPLATES_TemplateBuilder': 'Template Builder',
            'TEMPLATES_TemplateBuilderDraftTitle': 'Information',
            'TEMPLATES_TemplateBuilderDraftMessage': 'The template has been saved in draft mode. You must first publish the template before you can deploy it as a service.',

            'TEMPLATES_ComponentType': 'Component Type',
            'TEMPLATES_AddApplication_SelectResourcesToContinue': 'Select one or more resources to continue.',
            'TEMPLATES_Areyousureyouwanttocancel': 'Are you sure you want to cancel?',
            'TEMPLATES_Nodataneededforthiscomponent': 'No data needed for this component',
            'TEMPLATES_EditApplication': 'Edit Application',
            'TEMPLATES_': '',

            'TEMPLATES_fileTooLarge': 'The file must be less than 50MB in size',

            'TEMPLATEEXPORT_Information': 'Export the selected template to a zip file.  Upload exported templates to other VxFlex Manager appliances to duplicate template settings across appliances.',
            'TEMPLATEEXPORT_File_Name': 'File Name*',
            'TEMPLATEEXPORT_File_Name_Required': 'This field is required',
            'TEMPLATEEXPORT_Use_Encryption_Password': 'Use Encryption Password from Backup Settings',
            'TEMPLATEEXPORT_Set_File_Encryption_Password': 'Set File Encryption Password',
            'TEMPLATEEXPORT_Confirm_Encryption_Password': 'Confirm Encryption Password',
            'TEMPLATEEXPORT_Password_Tooltip': 'Click and hold to show password',
            'TEMPLATEEXPORT_Confirm_Encryption_Password_Match': 'Please enter the same value again.',

            'TEMPLATES_UploadExternalTemplate': 'Upload External Template',
            'TEMPLATES_UploadExternalModal_UploadExternalTemplate': 'Upload External Template',
            'TEMPLATES_UploadExternalModal_FileInformation': 'File Information',
            'TEMPLATES_UploadExternalModal_SelectTemplate': 'Template File',
            'TEMPLATES_UploadExternalModal_UseBackupPassword': 'Use Encryption Password from Backup Settings',
            'TEMPLATES_UploadExternalModal_EncryptionPassword': 'Encryption Password',
            'TEMPLATES_UploadExternalModal_UploadEMCInstructions': 'Upload the pre-built VxFlex Manager template that was included with your Dell EMC Validated System here to finalize any customizations.',
            'TEMPLATES_UploadExternalModal_TemplateInfo': 'Template Information',
            'TEMPLATES_UploadExternalModal_TemplateName': 'Template Name*',
            'TEMPLATES_UploadExternalModal_TemplateDescription': 'Template Description',
            'TEMPLATES_UploadExternalModal_AdditionalSettings': 'Additional Settings',
            'TEMPLATES_UploadExternalModal_AdditionalSettingsDesc': 'Select the resources to be populated in the cloned template in the sections below. Once selected, these resources will be populated in the template and the template will be editable. Use "View Components" links to help identify how the resource is used by displaying the other node, VM, or storage resources that are associated in the template.',
            'TEMPLATES_UploadExternalModal_NetworkSettings': 'Network Settings',
            'TEMPLATES_UploadExternalModal_NetworkDesc': 'Select the network to use for each of the networks in the original template.',
            'TEMPLATES_ViewComponentsModalTitle': 'View components for {{name}}',
            'TEMPLATES_UploadExternalModal_NetworkName': 'Original Network Name',
            'TEMPLATES_UploadExternalModal_NetworkType': 'Network Type',
            'TEMPLATES_UploadExternalModal_SelectNewNetwork': 'Select New Network',
            'TEMPLATES_UploadExternalModal_ViewComponents': '(View Components)',
            'TEMPLATES_UploadExternalModal_OsSettings': 'OS Settings',
            'TEMPLATES_UploadExternalModal_OsSettingsDesc': 'Select the OS credential to be used accross all nodes. Then, select the OS respository to use for each of the repositories in the original template.',
            'TEMPLATES_UploadExternalModal_OSCredential': 'OS Credential',
            'TEMPLATES_UploadExternalModal_svmAdminOSCredential': 'SVM OS Credential',
            'TEMPLATES_UploadExternalModal_Tooltip_SVM': 'Credential used to set username and password on the installed SVM OS',
            'TEMPLATES_UploadExternalModal_Tooltip_NotSVM': 'Credential used to set username and password on the installed OS',
            'TEMPLATES_UploadExternalModal_': '',
            'TEMPLATES_UploadExternalModal_': '',
            'TEMPLATES_UploadExternalModal_OsAdminstratorPassword': 'OS Administrator Password',
            'TEMPLATES_ConfirmPassword': 'Confirim Password',
            'TEMPLATE_NoMatch': 'Password does not match',
            'TEMPLATES_OriginalOsRepo': 'Original OS Repository',
            'TEMPLATES_SelectNewRepo': 'Select New Repository',
            'TEMPLATES_ClusterSettings': 'Cluster Settings',
            'TEMPLATES_ClusterDesc': 'Select the virtual machine manager to use for each of the clusters in the original template.',
            'TEMPLATES_OriginalVmManager': 'Original Virtual Machine Manager',
            'TEMPLATES_ClusterType': 'Cluster Type',
            'TEMPLATES_SelectNewVMManager': 'Select New Virtual Machine Manager',
            'TEMPLATES_ServerPoolSettings': 'Node Pool Settings',
            'TEMPLATES_ServerPoolDesc': 'Select the node pool to use for each of the node pools in the original template.',
            'TEMPLATES_OriginalServerPool': 'Original Node Pool',
            'TEMPLATES_SelectNewServerPool': 'Select New Node Pool',
            'TEMPLATES_UploadExternalModal_StorageSettings': 'Storage Settings',
            'TEMPLATES_UploadExternalModal_StorageDesc': 'Select the array to use for each of the arrays identified in the original template.',
            'TEMPLATES_UploadExternalModal_OriginalStorageArray': 'Original Storage Array',
            'TEMPLATES_UploadExternalModal_StorageType': 'Storage Type',
            'TEMPLATES_UploadExternalModal_SelectNewStorageArray': 'Select New Storage Array',
            'TEMPLATES_UploadExternalModal_VxFlex_OriginalTargetVxFlexOSGateway': 'Original Target VxFlex OS Gateway',
            'TEMPLATES_UploadExternalModal_VxFlex_SelectNewTargetVXFlexOSGateway': 'Select New Target VX Flex OS Gateway',
            'TEMPLATES_UploadExternalModal_VxFlex_VxFlexOSGatewaySettings': 'VxFlex OS Gateway Settings',

            'TEMPLATEBUILDER_Templates': 'Templates',
            'TEMPLATEBUILDER_Draft': '(Draft)',
            'TEMPLATEBUILDER_AddStorage': 'Add Storage',
            'TEMPLATEBUILDER_AddCluster': 'Add Cluster',
            'TEMPLATEBUILDER_AddVM': 'Add VM',
            'TEMPLATEBUILDER_AddApplication': 'Add Application',
            'TEMPLATEBUILDER_AddServer': 'Add Node',
            'TEMPLATEBUILDER_DiscardConfirm': 'Are you sure you want to delete this template?',
            'TEMPLATEBUILDER_Application': 'Application',
            'TEMPLATEBUILDER_VM': 'VM',
            'TEMPLATEBUILDER_Cluster': 'Cluster',
            'TEMPLATEBUILDER_Server': 'Node',
            'TEMPLATEBUILDER_Storage': 'Storage',
            'TEMPLATEBUILDER_EmptyServer': 'Click Add Node above to add your compute and software defined storage node requirements.',
            'TEMPLATEBUILDER_EmptyCluster': 'Click Add Cluster to add your virtualization and software defined storage array requirements.',
            'TEMPLATEBUILDER_Instructions1': 'Add applications to Nodes or VMs by clicking Add Application above.',
            'TEMPLATEBUILDER_Instructions2': 'An application image (icon) is shown next to resources with associated applications.',
            'TEMPLATEBUILDER_Duplicate': 'Duplicate',
            'TEMPLATEBUILDER_NoInterfacesDefined': 'There are no interfaces defined.',
            'TEMPLATEBUILDER_InterfaceNum': 'Interface {{interfaceNum}}',
            'TEMPLATEBUILDER_': '',
            'TEMPLATEBUILDER_Install_Order': 'Name',
            'TEMPLATEBUILDER_instances': 'instances',
            'TEMPLATEBUILDER_Interface': 'Interface',
            'TEMPLATEBUILDER_Partition': 'Partition {{partitionName}}',
            'TEMPLATEBUILDER_AssociatedResources': 'Associated Resources:',
            'TEMPLATEBUILDER_FabricType': 'Fabric Type',
            'TEMPLATEBUILDER_': '',
            'TEMPLATEBUILDER_': '',


            'TEMPLATEBUILDER_Clone_Title': 'Select Reference Node',
            'TEMPLATEBUILDER_Clone_Help': 'The information imported from the selected node could be up to 24 hours old. For the most up-to-date settings, run inventory from the resources page on the target node prior to selection.<br/><br/>Create a node component by importing BIOS, RAID, and Network Partitioning settings from the following reference node :',
            'TEMPLATEBUILDER_Clone_THState': 'State',
            'TEMPLATEBUILDER_Clone_THIP_Address': 'IP Address',
            'TEMPLATEBUILDER_Clone_THDevice_ID': 'Asset/Service Tag',
            'TEMPLATEBUILDER_Clone_THManufacturer': 'Manufacturer',
            'TEMPLATEBUILDER_Clone_THModel': 'Model',
            'TEMPLATEBUILDER_Clone_THSServer_Pool': 'Node Pool',

            'TEMPLATEBUILDER_Upload_Title': 'Upload Node Configuration Profile',
            'TEMPLATEBUILDER_Upload_Help': 'Create a node component by uploading BIOS, RAID, and Network Partitioning settings from a Node Configuration Profile.',
            'TEMPLATEBUILDER_Upload_Select_File': 'Select Node Configuration Profile',

            'TEMPLATEBUILDER_Import_From_Template_Title': 'Select Component',
            'TEMPLATEBUILDER_Import_From_Template_Help': 'Import a node component by cloning all of the settings from an existing component:',
            'TEMPLATEBUILDER_Import_From_Template_No_Components': 'No node components found in draft or published templates with imported configurations from a reference node.',
            'TEMPLATEBUILDER_Import_From_Template_Template': 'Template: ',

            'TEMPLATEBUILDER_AddVirtualDisk': 'Add Virtual Disk',
            'TEMPLATEBUILDER_VirtualDisks': 'Virtual Disk(s) *',
            'TEMPLATEBUILDER_DiskNum': 'Disk #',
            'TEMPLATEBUILDER_SizeGB': 'Size (GB) *',
            'TEMPLATEBUILDER_DisksRequired': 'Must have at least one virtual disk',
            'TEMPLATEBUILDER_VALIDATE_NumServersMatchDescription': '{{numMatchingServers}} of {{numTotalServers}} nodes match node configuration parameters. Broaden or narrow matching nodes by changing parameters.',
            'TEMPLATEBUILDER_VALIDATE_ManufacturerModel': 'Manufacturer/Model',
            'TEMPLATEBUILDER_VALIDATE_AssetServiceTag': 'Asset/Service Tag',
            'TEMPLATEBUILDER_VALIDATE_PoweringOff': 'Powering Off',
            'TEMPLATEBUILDER_VALIDATE_Reserved': 'Reserved',
            'TEMPLATEBUILDER_VALIDATE_Unmanaged': 'Unmanaged',
            'TEMPLATEBUILDER_VALIDATE_': '',

            'TEMPLATEBUILDER_DeleteAllApplications': 'Delete All Applications',
            'TEMPLATEBUILDER_EditApplications': 'Edit Applications',
            'TEMPLATEBUILDER_Areyousureyouwanttoremovethiscomponent': 'Are you sure you want to remove this component?',
            'TEMPLATEBUILDER_Areyousureyouwanttodeletethisattachment': 'Are you sure you want to delete this attachment?',
            'TEMPLATEBUILDER_': '',


            'TEMPLATES_TEMPLATEBUILDER_SIDE_TemplateInvalid': 'This template requires attention. You must edit the settings before this template can be published.',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_TemplateInformation': 'Template Information',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Edit': 'Edit',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Category': 'Category',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_ReferenceFirmwareRepository': 'Reference Firmware Repository',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_NotSpecified': 'Not Specified',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_UserPermissions': 'User Permissions',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Actions': 'Actions',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Deploy': 'Deploy',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_PublishTemplate': 'Publish Template',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_DeleteTemplate': 'Delete Template',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_ViewAllSettings': 'View All Settings',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_ImportTemplate': 'Import Template',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Clone': 'Clone',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Attachments': 'Attachments',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_AddAttachment': 'Add Attachment',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_AddAttachments': 'Add Attachments',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Enabled': 'Enabled',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Disabled': 'Disabled',

            'TEMPLATES_TEMPLATESETTINGS_MODAL_PasswordFields': 'Password Fields',
            'TEMPLATES_TEMPLATESETTINGS_MODAL_NoPassword': 'No Password',
            'TEMPLATES_TEMPLATESETTINGS_MODAL_TemplateSettings': 'Template Settings',
            'TEMPLATES_TEMPLATESETTINGS_MODAL_ServiceSettings': 'Service Deployment Settings',
            'TEMPLATES_TEMPLATESETTINGS_MODAL_ExportTemplate': 'Export Template to ZIP file',

            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Step1Description': 'A template is a collection of end-to-end infrastructure configuration ' +
                'requirements that define a service when deployed. The configuration requirements can include compute, networking, ' +
                'and virtualization.  Once complete, a template can be use to deploy a service that configures your infrastructure.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_UploadEMCTemplateRadio': 'Upload a Dell EMC Ready Bundle for Virtualization template',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_CloneTemplateRadio': 'Clone an existing VxFlex Manager template',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_CloneTemplate_InstructionText': 'Select the existing VxFlex Manager template that you would like to copy from the list below.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_CloneTemplate_EncryptionPassword': 'Encryption Password',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_CloneTemplate_UseencryptionpasswordfromBackupSettings': 'Use encryption password from Backup Settings',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_CloneTemplate_': '',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_CreateNewTemplateRadio': 'Create a new template',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_CreateTemplate': 'Create Template',
            'TEMPLATES_EDIT_TEMPLATE_WIZARD_CreateTemplate': 'Edit Template',
            'TEMPLATES_EDIT_TEMPLATE_WIZARD_CreateTemplate_Directions': 'Select this option to enter the template builder, where you can create and define the individual components of your custom template. ',
            'TEMPLATES_EDIT_TEMPLATE_WIZARD_UploadTemplateInformation_Instructions': 'Now we need some additional information to customize this template for your environment.  ' +
                'Some selections have been made for you based on the template you uploaded.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_UploadEMCDirections': 'Upload the pre-built VxFlex Manager template that was included with your Dell EMC Calidated System here to finalize any customizations.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_EMCUpload_InfoText_1': 'Before you begin, you must complete the following tasks:',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_EMCUpload_InfoText_2a': 'Define Networks (VLANs)',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_EMCUpload_InfoText_2b': 'Discover Nodes, vCenter, VxFlex OS Gateways, and Switches, if applicable.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_EMCUpload_InfoText_3': 'Optionally, Datacenters, Clusters, and Virtual Distributed Switches (VDS) may be predefined and used in the VxFlex Manager template.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Clone_TemplateToBeCloned': 'Template to be Cloned',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Clone_UseEncryption': 'Use encryption password from Backup Settings',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Clone_EncryptionPassword': 'Encryption Password',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Create_1to32Chars': '1-32 characters',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Create_TemplateName': 'Template Name',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_': '',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_': '',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_DefineNewTemplate': 'Define New Template',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_SelectRepo': 'Select Repository...',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_Select': 'Select',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_updateFirmwareonServerswhenDeployed': 'Do you want to update firmware / software on nodes when this template is deployed as a service?',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_PerformRCMUpdates': 'Perform RCM updates on nodes in this service',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_updateFirmwareonServerswhenDeployed_tooltip': 'Firmware / software on shared devices will still be maintained by the global default repository.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_ReleaseCertificationMatrix': 'Release Certification Matrix (RCM)',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_ReleaseCertificationMatrix_tooltip': 'Firmware / software on shared devices will still be maintained by the global default repository.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_PerformFirmwareCompliance': 'Perform compliance check with selected RCM version',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_firmwareOnSharedDevices': 'Firmware / software on shared devices will still be maintained by the global default repository.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_WhoShouldHaveAccess': 'Who should have access to the service deployed from this template?',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2a_ServicePermissions': 'Service Permissions',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_Title': 'Define Ready Bundle Template, Node, and Cluster Details',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_DefineNodes': 'Define vSAN Ready Nodes',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_TemplateInformation': 'Template Information',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_ServerDetails': 'Node Details',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_ClusterDetails': 'Cluster Details',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_NumberofServersHosts': 'Number of Nodes / Hosts',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_WhichESXiversiondoyouwanttodeploy': 'Which ESXi version do you want to deploy? ',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_AdministratorPassword': 'Administrator Password',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_ConfirmAdministratorPassword': 'Confirm Administrator Password',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_WhichServerPoolChoice': 'Which Node Pool should VxFlex Manager use to pull nodes? ',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_Global': 'Global',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_ServerNamesMessage': 'Node names will be auto-generated during deployment by appending a variable to the prefix specified below.  Using the default value of "Node" and "${num}" would result in the following node names; Server1, Server2, Server3, etc.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_ServerNameFormat': 'Node Name Template',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_132characters': '1 - 32 characters',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_ASMrecommends': 'VxFlex Manager recommends {{recommended}}',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_WhichvCenter': 'Which vCenter in your environment do you want to use?',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_SelectaDataCenter': 'Select a Data Center',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_SelectaCluster': 'Select a Cluster',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_SelectVmWareCapabilities': 'Select the VMware capabilities to be used in this cluster',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_ClusterHA': 'Cluster HA',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_ClusterDRS': 'Cluster DRS',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_vSan': 'vSan',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_Standard': 'Standard',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_Distributed': 'Distributed',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_Whattypeofvirtualswitchesareyouusing': 'What type of virtual switches are you using?',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_Fieldisrequired': '*Field is required',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2b_Directions': 'Now we need some additional information to customize this template for your environment.  Some selections have been made for you based on the template you uploaded.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2c_NetworkType': 'Network Type',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2c_WhichASMNetwork': 'Which VxFlex Manager network do you want to use for this network type?',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2c_ViewCreateNetworks': 'View / Create Networks',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2c_Definenewnetwork': 'Define new network...',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2c_DefineNetworkSettings': 'Define Network Settings',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2c_NetworkSettings': 'Network Settings',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_2c_Directions': 'The template you provided calls for these network types.  Tell us which of your networks to use for each of the network types below.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_3a_VirtualDistributedSwitchVDSDetails': 'Virtual Distributed Switch (VDS) Details',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_3a_VirtualDistributedSwitchVDSSettings': 'Virtual Distributed Switch (VDS) Settings',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_3a_Createnew': 'Create new',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_3a_Description': 'The template you provided has the following virtual switch configuration.  Enter VDS and port group names below, or select existing VDS and port groups.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_4a_description': 'The template you provided calls for the storage type shown below.  Identify which of your previously defined arrays to use for the storage type below.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_4a_StorageType': 'Storage Type',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_4a_WhichStorageArraysToUse': 'Which of your storage arrays do you want to use?',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_4a_NumVolumesToCreate': 'Number of storage volumes to created',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_4a_SizeofStorageVolumes': 'Size of Storage Volumes',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_4a_DefineStorageSettings': 'Define Storage Settings',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_4a_StorageSettings': 'Storage Settings',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_4a_midPageInstructionalText': 'Volume names will be auto-generated during deployment by appending a number to the prefix specified below.  Using the default value of "Volume" would result in the following volume names; Volume1, Volume2, Volume3, etc.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_4a_VolumeNamePrefix': 'Volume Name Prefix',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Summary_Title': 'Template Summary',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Summary_CreateNew': 'Create New:',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Summary_NetworkDefinitioninUploadedTemplate': 'Network Definition in Uploaded Template',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Summary_NetworkType': 'Network Type',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Summary_ASMNetworktobeUsedforthisNetworkType': 'VxFlex Manager Network to be Used for this Network Type',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_successMessage': 'You have successfully uploaded your template: {{fileName}}',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Summary_Directions': 'To publish and validate the configuration of this template, <b>click</b> Publish.  You may continue to edit this template after it is published, in the template builder. ',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Summary_': '',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Summary_': '',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Summary_': '',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Summary_': '',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Summary_': '',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_TemplateSuccessfullyPublished': 'Template Successfully Published',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_PublishedTemplateDescription': 'You  have successfully published your template: <VxFlex Manager VSAN Ready Node>' +
                '<br />' +
                '<br />' +
                'You can now use this template to deploy a service that configures your infrastructure on supported hardware in your environment.' +
                '<br />' +
                '<br />' +
                'Click <strong>Yes</strong> if you want to deploy this template as a service now.' +
                '<br />' +
                'Click <strong>No</strong> if you want to edit advanced template settings in the template builder, or if you want to deploy this template as a service at a later time.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_YesDeployTemplate': 'Yes, Deploy Template',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_NoDoNotDeployTemplate': 'No, Do Not Deploy Template',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_CancelConfirmation': 'Are you sure you want to cancel?  All changes will be lost.',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_AddaTemplate': 'Add a Template',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Publish': 'Publish',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_title': 'Clone Template - {{templateName}}',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_cloneTemplate': 'Clone Template',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_StoragePools': 'Storage Pools',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_SaveAsDraftConfirmMessage': 'All content provided in this template to this point will be saved. Find and edit this template from the Templates page to continue.' +
                '<br/>' +
                '<br/>' +
                'Are you sure you want to save this template as a draft?',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_Cancel': 'Canceling will result in the loss of all data entered to this point.  If you would like to save the data entered, select No below, then choose the Save as Draft option.' +
                '<br/>' +
                '<br/>' +
                'Are you sure you want to cancel?',
            'TEMPLATES_CREATE_TEMPLATE_WIZARD_': '',

            'UPDATE_SERVICE_FIRMWARE_TimeEstimate': 'Firmware updates may take up to 45 minutes per node.',
            //'UPDATE_SERVICE_FIRMWARE_UpdateNow': 'Update Now<br />ASM will apply the firmware updates immediately and then reboot to all nodes within this service. For nodes belonging to a VMware vSphere cluster, <br/> ' +
            //                                        'nodes will be updated one at a time by putting it first into maintenance mode, then performing the firmware update and rebooting the node, and finally <br/> ' +
            //                                        'bringing the node out of maintenance mode before moving on to the next node.<br /> <br /> ' +
            //                                        'Firmware will not be applied to nodes that cannot be put in maintenance mode.  This can be the result of clusters that do not have DRS enabled or nodes <br/> ' +
            //                                        'that are not in  a cluster and have running virtual machines.  Power down or migrate the virtual machines prior to initiating a firmware update.',
            //'UPDATE_SERVICE_FIRMWARE_UpdateNow': 'Apply firmware and software updates now <br />ASM will apply the firmware and software updates immediately and then reboot the node(s).',
            'UPDATE_SERVICE_FIRMWARE_UpdateNow_label': ' Allow VxFlex Manager to perform firmware and software updates now',
            'UPDATE_SERVICE_FIRMWARE_UpdateNow_help': 'VxFlex Manager will apply the firmware and software updates on a rolling non-disruptive basis and reboot node(s).',
            'UPDATE_SERVICE_FIRMWARE_UpdateNow_tooltip': 'TBD',
            //'UPDATE_SERVICE_FIRMWARE_NextReboot': 'Apply Updates on Next Reboot<br />ASM will stage the firmware update to each node selected. The update will take effect at the next node reboot.',
            'UPDATE_SERVICE_FIRMWARE_NextReboot': 'Apply updates on next reboot (firmware only)<br />VxFlex Manager will stage firmware updates to node(s) to take effect at the next node reboot.  Software updates will not be applied.',
            //'UPDATE_SERVICE_FIRMWARE_ScheduleUpdate': 'Schedule Update<br />ASM will apply the firmware updates at a selected date and time and then reboot to all nodes within this service. For nodes belonging to a VMware <br/> ' +
            //                                            'vSphere cluster, nodes will be updated one at a time by putting it first into maintenance mode, then performing the firmware update and <br/> ' +
            //                                            'rebooting the node, and finally bringing the node out of maintenance mode before moving on to the next node.',
            //'UPDATE_SERVICE_FIRMWARE_ScheduleUpdate': 'Schedule firmware and software updates<br />ASM will apply firmware and software updates at the selected date and time, then reboot the node(s).',
            'UPDATE_SERVICE_FIRMWARE_ScheduleUpdate_label': ' Schedule firmware and software updates',
            'UPDATE_SERVICE_FIRMWARE_ScheduleUpdate_help': 'VxFlex Manager will apply the firmware and software updates on a rolling non-disruptive basis at the selected date and time and reboot node(s).',
            'UPDATE_SERVICE_FIRMWARE_ScheduleUpdate_tooltip': 'TBD',
            'UPDATE_SERVICE_FIRMWARE_ScheduleDate': 'Schedule Date and Time',
            'UPDATE_SERVICE_FIRMWARE_ScheduleTime': 'Time',
            'UPDATE_SERVICE_FIRMWARE_Confirmation': 'Are you sure you want to make these firmware changes?',
            'UPDATE_SERVICE_FIRMWARE_DateError': 'Schedule Update requires a future date/time selection.  Please change the date/time values or select Update Now.',

            "UPDATE_RESOURCE_FIRMWARE_serverTimeEstimate": "Updates may take up to 45 minutes per node.",
            "UPDATE_RESOURCE_FIRMWARE_chassisTimeEstimate": "Updates may take up to 15 minutes per chassis.",
            "UPDATE_RESOURCE_FIRMWARE_switchTimeEstimate": "Updates may take up to 15 minutes per switch.",
            "UPDATE_RESOURCE_FIRMWARE_updateNowNoSpecificType_label":
                            " Allow VxFlex Manager to perform firmware and software updates now",
            "UPDATE_RESOURCE_FIRMWARE_updateNowNoSpecificType_help":
                            "VxFlex Manager will apply the firmware and software updates on a rolling non-disruptive basis and reboot node(s) within this service." +
                            "  For nodes belonging to a VMware vSphere cluster, nodes will be updated one at a time by putting it first " +
                            "into maintenance mode, then performing the firmware update and rebooting the node, and finally bringing " +
                            "the node out of maintenance mode before moving on to the next node. <br /><br />" +
                            "Firmware will not be applied to nodes that cannot be put in maintenance mode.  " +
                            "This can be the result of clusters that do not have DRS enabled or nodes that are not in a " +
                            "cluster and have running virtual machines.  Power down or migrate the virtual machines prior to initiating a firmware update.",
            "UPDATE_RESOURCE_FIRMWARE_updateNowServer_label": " Allow VxFlex Manager to perform firmware and software updates now",
            "UPDATE_RESOURCE_FIRMWARE_updateNowServer_help": "VxFlex Manager will apply the firmware and software updates on a rolling non-disruptive basis and reboot node(s).",
            "UPDATE_RESOURCE_FIRMWARE_updateNowChassis_label": " Allow VxFlex Manager to perform firmware and software updates now",
            "UPDATE_RESOURCE_FIRMWARE_updateNowChassis_help": "VxFlex Manager will apply the firmware and software updates on a rolling non-disruptive basis and reboot chassis.",
            "UPDATE_RESOURCE_FIRMWARE_updateNowSwitch_label": " Allow VxFlex Manager to perform firmware and software updates now",
            "UPDATE_RESOURCE_FIRMWARE_updateNowSwitch_help": "VxFlex Manager will apply the firmware and software updates on a rolling non-disruptive basis and reboot switches.",
            "UPDATE_RESOURCE_FIRMWARE_updateNowTooltip": "TBD",
            "UPDATE_RESOURCE_FIRMWARE_applyOnRebootDescription": "Apply updates on next reboot (firmware only)<br />VxFlex Manager will stage firmware updates to node(s) to take effect at the next node reboot.  Software updates will not be applied.",
            "UPDATE_RESOURCE_FIRMWARE_ApplyUpdates": "Apply Updates",
            "UPDATE_RESOURCE_FIRMWARE_Schedulefirmwareandsoftwareupdates_label": " Schedule firmware and software updates",
            "UPDATE_RESOURCE_FIRMWARE_Schedulefirmwareandsoftwareupdates_help": "",
            "UPDATE_RESOURCE_FIRMWARE_scheduleServer_label": " Schedule firmware and software updates",
            "UPDATE_RESOURCE_FIRMWARE_scheduleServer_help": "VxFlex Manager will apply the firmware and software updates on a rolling non-disruptive basis at the selected date and time, then reboot node(s).",
            "UPDATE_RESOURCE_FIRMWARE_scheduleChassis_label": " Schedule firmware and software updates",
            "UPDATE_RESOURCE_FIRMWARE_scheduleChassis_help": "VxFlex Manager will apply the firmware and software updates on a rolling non-disruptive basis at the selected date and time, then reboot chassis.",
            "UPDATE_RESOURCE_FIRMWARE_scheduleSwitch_label": " Schedule firmware and software updates",
            "UPDATE_RESOURCE_FIRMWARE_scheduleSwitch_help": "VxFlex Manager will apply the firmware and software updates on a rolling non-disruptive basis at the selected date and time, then reboot switches.",
            "UPDATE_RESOURCE_FIRMWARE_scheduleTooltip": "TBD",
            'UPDATE_RESOURCE_FIRMWARE_ScheduleDate': 'Schedule Date and Time',
            'UPDATE_RESOURCE_FIRMWARE_DateError': 'Schedule Update requires a future date/time selection.  Please change the date/time values or select Update Now.',

            "CREATE_EDIT_DEVICE_USERS_CreateCMCUser": 'Create CMC User',
            "CREATE_EDIT_DEVICE_USERS_EditCMCUser": 'Edit CMC User',
            "CREATE_EDIT_DEVICE_USERS_CreateiDRACUser": 'Create iDRAC User',
            "CREATE_EDIT_DEVICE_USERS_EditiDRACUser": 'Edit iDRAC User',
            "CREATE_EDIT_DEVICE_USERS_UserName": 'User Name',
            "CREATE_EDIT_DEVICE_USERS_ConfirmPassword": 'Confirm Password',
            "CREATE_EDIT_DEVICE_USERS_LANRole": 'LAN Role',
            "CREATE_EDIT_DEVICE_USERS_EnableUser": 'Enable User',
            "CREATE_EDIT_DEVICE_USERS_Administrator": 'Administrator',
            "CREATE_EDIT_DEVICE_USERS_PowerUser": 'Power User',
            "CREATE_EDIT_DEVICE_USERS_GuestUser": 'Guest User',
            "CREATE_EDIT_DEVICE_USERS_None": 'None',
            "CREATE_EDIT_DEVICE_USERS_Operator": 'Operator',
            "CREATE_EDIT_DEVICE_USERS_ReadOnly": 'Read Only',
            "CREATE_EDIT_DEVICE_USERS_User": 'User',
            "CREATE_EDIT_DEVICE_USERS_NoAccess": 'No Access',

            'VIEW_BUNDLES_firmwarebundles': 'Firmware Bundles',
            'VIEW_BUNDLES_softwarebundles': 'Software Bundles',

            'VIEW_BUNDLES_Description': 'Package Bundles',
            'VIEW_BUNDLES_THName': 'Name',
            'VIEW_BUNDLES_THVendor': 'Vendor',
            'VIEW_BUNDLES_THVersion': 'Version',
            'VIEW_BUNDLES_THDate': 'Date',
            'VIEW_BUNDLES_THDateTime': 'Date and Time',
            'VIEW_BUNDLES_Details_Tooltip': 'View Bundle Details',

            'VIEW_BUNDLES_Custom_Description': 'Custom Bundles',
            'VIEW_BUNDLES_Custom_THName': 'Name',
            'VIEW_BUNDLES_Custom_THVersion': 'Version',
            'VIEW_BUNDLES_Custom_THDate': 'Date',
            'VIEW_BUNDLES_Custom_THDateTime': 'Date and Time',
            'VIEW_BUNDLES_Custom_Edit_Tooltip': 'Edit Custom Bundle',
            'VIEW_BUNDLES_Custom_Remove_Tooltip': 'Remove Custom Bundle',
            'VIEW_BUNDLES_Custom_Details_Tooltip': 'View Bundle Details',

            'VIEW_BUNDLE_DETAILS_Description': 'Firmware Bundle',
            'VIEW_BUNDLE_DETAILS_THName': 'Name',
            'VIEW_BUNDLE_DETAILS_THType': 'Type',
            'VIEW_BUNDLE_DETAILS_THVersion': 'Version',

            'VIEW_BUNDLE_DETAILS_THSoftwareName': 'Name',
            'VIEW_BUNDLE_DETAILS_THVendor': 'Vendor',
            'VIEW_BUNDLE_DETAILS_THSoftwareType': 'Type',
            'VIEW_BUNDLE_DETAILS_THSoftwareVersion': 'Version'

        }
    });

angular.module('ASM.constants')
    .constant('URLs',
    {
        help: {
            none: 'help/index.html'
        }
    });

var asm;
(function (asm) {
    "use strict";
    var DeviceBladesController = (function () {
        function DeviceBladesController($http) {
            this.$http = $http;
            var self = this;
            self.refresh();
        }
        DeviceBladesController.prototype.refresh = function () {
            var self = this;
            self.safeSrc = angular.copy(self.device);
            self.deviceType = self.deviceType;
        };
        DeviceBladesController.$inject = ['$http'];
        return DeviceBladesController;
    }());
    angular.module('app')
        .component('deviceBlades', {
        templateUrl: 'views/devicedetails/blades.html',
        controller: DeviceBladesController,
        controllerAs: 'deviceBladesController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=blades.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceChassisController = (function () {
        function DeviceChassisController() {
        }
        DeviceChassisController.prototype.isFX2 = function () {
            //note:  easier to just re-calculate this value than to pass it in
            //https://docs.angularjs.org/guide/interpolation
            return (this.deviceType === 'ChassisFX');
        };
        DeviceChassisController.$inject = [];
        return DeviceChassisController;
    }());
    angular.module('app')
        .component('deviceChassisController', {
        templateUrl: 'views/devicedetails/chassiscontroller.html',
        controller: DeviceChassisController,
        controllerAs: 'deviceChassisController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=chassisController.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceCompellentStorageController = (function () {
        function DeviceCompellentStorageController() {
            var self = this;
            self.refresh();
        }
        DeviceCompellentStorageController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device.volumes);
        };
        DeviceCompellentStorageController.$inject = [];
        return DeviceCompellentStorageController;
    }());
    angular.module('app')
        .component('deviceCompellent', {
        templateUrl: 'views/devicedetails/compellentstoragevolumes.html',
        controller: DeviceCompellentStorageController,
        controllerAs: 'deviceCompellentStorageController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=compellentStorageVolumes.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceCpusController = (function () {
        function DeviceCpusController() {
            var self = this;
            self.refresh();
        }
        Object.defineProperty(DeviceCpusController.prototype, "device", {
            get: function () {
                var self = this;
                return self._device;
            },
            set: function (value) {
                var self = this;
                self._device = value;
                self.refresh();
            },
            enumerable: true,
            configurable: true
        });
        DeviceCpusController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device.cpudata);
        };
        DeviceCpusController.$inject = [];
        return DeviceCpusController;
    }());
    angular.module('app')
        .component('deviceCpus', {
        templateUrl: 'views/devicedetails/cpus.html',
        controller: DeviceCpusController,
        controllerAs: 'deviceCpusController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=cpus.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceEquallogicController = (function () {
        function DeviceEquallogicController() {
            var self = this;
            self.refresh();
        }
        DeviceEquallogicController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device.volumes);
            self.deviceType = self.deviceType;
        };
        DeviceEquallogicController.$inject = [];
        return DeviceEquallogicController;
    }());
    angular.module('app')
        .component('deviceEquallogic', {
        templateUrl: 'views/devicedetails/equallogicvolumes.html',
        controller: DeviceEquallogicController,
        controllerAs: 'deviceEquallogicController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=equallogicVolumes.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceFileSystemsController = (function () {
        function DeviceFileSystemsController() {
            var self = this;
            self.refresh();
        }
        DeviceFileSystemsController.prototype.refresh = function () {
            var self = this;
            self.safeSrc = angular.copy(self.device);
        };
        DeviceFileSystemsController.$inject = [];
        return DeviceFileSystemsController;
    }());
    angular.module('app')
        .component('deviceFileSystems', {
        templateUrl: 'views/devicedetails/filesystems.html',
        controller: DeviceFileSystemsController,
        controllerAs: 'deviceFileSystemsController',
        bindings: {
            device: '<',
            deviceType: '<'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=fileSystems.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceFirmwareController = (function () {
        function DeviceFirmwareController() {
            this.componentSelection = 'fw';
            var self = this;
            self.refresh();
        }
        DeviceFirmwareController.prototype.refresh = function () {
            var self = this;
            self.firmwaressafeSource = angular.copy(self.device.firmwares);
            self.softwaressafeSource = angular.copy(self.device.softwares);
        };
        DeviceFirmwareController.$inject = [];
        return DeviceFirmwareController;
    }());
    angular.module('app')
        .component('deviceFirmware', {
        templateUrl: 'views/devicedetails/firmwarerevisions.html',
        controller: DeviceFirmwareController,
        controllerAs: 'deviceFirmwareController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=firmwareRevisions.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceIkvmController = (function () {
        function DeviceIkvmController() {
            var self = this;
            self.refresh();
        }
        DeviceIkvmController.prototype.refresh = function () {
            var self = this;
            self.device = self.device;
            self.deviceType = self.deviceType;
        };
        DeviceIkvmController.$inject = [];
        return DeviceIkvmController;
    }());
    angular.module('app')
        .component('deviceIkvm', {
        templateUrl: 'views/devicedetails/ikvm.html',
        controller: DeviceIkvmController,
        controllerAs: 'deviceIkvmController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=ikvm.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceIOModuleController = (function () {
        function DeviceIOModuleController() {
            var self = this;
            self.refresh();
        }
        DeviceIOModuleController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device);
            self.deviceType = self.deviceType;
        };
        DeviceIOModuleController.$inject = [];
        return DeviceIOModuleController;
    }());
    angular.module('app')
        .component('deviceIoModule', {
        templateUrl: 'views/devicedetails/iomodule.html',
        controller: DeviceIOModuleController,
        controllerAs: 'deviceIOModuleController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=ioModule.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceLocalStorageController = (function () {
        function DeviceLocalStorageController($translate, Modal) {
            this.$translate = $translate;
            this.Modal = Modal;
            var self = this;
            self.safeSource = angular.copy(self.device.localstoragedata);
            self.filterOptions = [
                { id: "logical", name: self.$translate.instant("DEVICES_DETAILS_LOCAL_STORAGE_LogicalDisks") },
                { id: "physical", name: self.$translate.instant("DEVICES_DETAILS_LOCAL_STORAGE_PhysicalDisks") }
            ];
            self.filter = "logical";
        }
        DeviceLocalStorageController.prototype.viewDisks = function (disk) {
            var self = this;
            var viewLogsModal = self.Modal({
                title: self.$translate.instant("DEVICES_DETAILS_LOCAL_STORAGE_PhysicalDisksForLogicalDiskModalTitle", { diskName: disk.logicalDiskName }),
                modalSize: 'modal-lg',
                templateUrl: 'views/devicedetails/viewphysicaldisksmodal.html',
                controller: 'ViewPhysicalDisksController as viewPhysicalDisksController',
                params: {
                    layout: disk.layout,
                    size: disk.size,
                    disks: disk.physicaldiskdata
                }
            });
            viewLogsModal.modal.show();
        };
        DeviceLocalStorageController.$inject = ["$translate", "Modal"];
        return DeviceLocalStorageController;
    }());
    angular.module('app')
        .component('deviceLocalStorage', {
        templateUrl: 'views/devicedetails/localstorage.html',
        controller: DeviceLocalStorageController,
        controllerAs: 'deviceLocalStorageController',
        bindings: {
            device: '<',
            deviceType: '<'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=LocalStorage.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceLunsController = (function () {
        function DeviceLunsController() {
            var self = this;
            //self.deviceType = self.$routeParams.deviceType;
            self.refresh();
        }
        DeviceLunsController.prototype.refresh = function () {
            var self = this;
            self.safeSrc = angular.copy(self.device);
        };
        DeviceLunsController.$inject = [];
        return DeviceLunsController;
    }());
    angular.module('app')
        .component('deviceLuns', {
        templateUrl: 'views/devicedetails/luns.html',
        controller: DeviceLunsController,
        controllerAs: 'deviceLunsController',
        bindings: {
            device: '<',
            deviceType: '<'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=luns.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceMemoryController = (function () {
        function DeviceMemoryController() {
            var self = this;
            self.refresh();
        }
        DeviceMemoryController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device.memorydata);
            self.deviceType = self.deviceType;
        };
        DeviceMemoryController.$inject = [];
        return DeviceMemoryController;
    }());
    angular.module('app')
        .component('deviceMemory', {
        templateUrl: 'views/devicedetails/memory.html',
        controller: DeviceMemoryController,
        controllerAs: 'deviceMemoryController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=memoryDirective.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceNetAppVolumesController = (function () {
        function DeviceNetAppVolumesController() {
            var self = this;
            self.refresh();
        }
        DeviceNetAppVolumesController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device.volumes);
            self.deviceType = self.deviceType;
        };
        DeviceNetAppVolumesController.$inject = [];
        return DeviceNetAppVolumesController;
    }());
    angular.module('app')
        .component('deviceNetappVolumes', {
        templateUrl: 'views/devicedetails/netappstoragevolumes.html',
        controller: DeviceNetAppVolumesController,
        controllerAs: 'deviceNetAppVolumesController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=netappStorageVolumes.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceNetworkInterfacesController = (function () {
        function DeviceNetworkInterfacesController() {
            var self = this;
            self.safeSource = angular.copy(self.device);
        }
        DeviceNetworkInterfacesController.$inject = [];
        return DeviceNetworkInterfacesController;
    }());
    angular.module('app')
        .component('deviceNetworkInterfaces', {
        templateUrl: 'views/devicedetails/networkinterfaces.html',
        controller: DeviceNetworkInterfacesController,
        controllerAs: 'deviceNetworkInterfacesController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=networkInterfaces.js.map
var asm;
(function (asm) {
    "use strict";
    var DevicePerformanceController = (function () {
        function DevicePerformanceController($http, $interval, $translate, Commands, GlobalServices, Loading) {
            this.$http = $http;
            this.$interval = $interval;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.Loading = Loading;
            this.noData = false;
            this.emptyArray = [];
            var self = this;
            self.timeFrames = [
                { id: "LastHour", name: self.$translate.instant("DEVICES_EMC_SCALEIO_LastHour"), index: 0 },
                { id: "LastDay", name: self.$translate.instant("DEVICES_EMC_SCALEIO_LastDay"), index: 1 },
                { id: "LastWeek", name: self.$translate.instant("DEVICES_EMC_SCALEIO_LastWeek"), index: 2 },
                { id: "LastMonth", name: self.$translate.instant("DEVICES_EMC_SCALEIO_LastMonth"), index: 3 },
                { id: "LastYear", name: self.$translate.instant("DEVICES_EMC_SCALEIO_LastYear"), index: 4 },
            ];
            self.iopSelectedTimeFrame = 0;
            self.bandWidthSelectedTimeFrame = 0;
            //holds line charts
            self.usages = {
                iop: {
                    total: undefined,
                    read: undefined,
                    write: undefined
                },
                bandwidth: {
                    total: undefined,
                    read: undefined,
                    write: undefined
                }
            };
            //empty data sets to init the highcharts with when there is no data
            self.emptyArray = [
                { chartlabel: self.$translate.instant("DEVICES_EMC_SCALEIO_Minutes") },
                { chartlabel: self.$translate.instant("DEVICES_EMC_SCALEIO_Hours") },
                { chartlabel: self.$translate.instant("DEVICES_EMC_SCALEIO_Days") },
                { chartlabel: self.$translate.instant("DEVICES_EMC_SCALEIO_Days") },
                { chartlabel: self.$translate.instant("DEVICES_EMC_SCALEIO_Months") }];
            self.emptyDataSets = {
                total: { historicaldata: self.emptyArray },
                read: { historicaldata: self.emptyArray },
                write: { historicaldata: self.emptyArray },
            };
            self.activate();
        }
        DevicePerformanceController.prototype.activate = function () {
            var self = this;
            self.refreshWorkLoads();
            if (!self.device) {
                self.device = {};
            }
            self.refreshIOP();
            self.refreshBandwidth();
        };
        DevicePerformanceController.prototype.refresh = function () {
            var self = this;
            self.GlobalServices.ClearErrors();
            self.Loading(self.getScaleIOById(self.device.id)
                .then(function (response) {
                self.device = response.data.responseObj;
                self.noData = false;
                self.refreshIOP();
                self.refreshBandwidth();
            })
                .catch(function (data) {
                self.device.ioData = self.emptyDataSets;
                self.device.bandwidthData = self.emptyDataSets;
                self.GlobalServices.DisplayError(data.data);
            }));
        };
        DevicePerformanceController.prototype.$onDestroy = function () {
            var self = this;
            if (self.workloadsInterval)
                self.$interval.cancel(self.workloadsInterval);
        };
        DevicePerformanceController.prototype.refreshWorkLoads = function () {
            var self = this;
            if (self.workloadsInterval) {
                self.$interval.cancel(self.workloadsInterval);
            }
            self.workloadsInterval = self.$interval(function () {
                self.pollWorkloads && self.getScaleIOWorkload(self.device.id)
                    .then(function (response) {
                    self.workload = response.data.responseObj;
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            }, 5000);
        };
        DevicePerformanceController.prototype.refreshIOP = function () {
            var self = this;
            if (!self.device.ioData) {
                self.noData = false;
                self.device.ioData = self.emptyDataSets;
            }
            self.checkForNullHistoricalData(self.device.ioData);
            angular.extend(self.usages.iop, {
                total: self.getLineChartObject(self.device.ioData.total.historicaldata[self.iopSelectedTimeFrame], self.device.ioData.total.category),
                read: self.getLineChartObject(self.device.ioData.read.historicaldata[self.iopSelectedTimeFrame], self.device.ioData.read.category),
                write: self.getLineChartObject(self.device.ioData.write.historicaldata[self.iopSelectedTimeFrame], self.device.ioData.write.category)
            });
        };
        DevicePerformanceController.prototype.refreshBandwidth = function () {
            var self = this;
            if (!self.device.bandwidthData) {
                self.noData = true;
                self.device.bandwidthData = self.emptyDataSets;
            }
            self.checkForNullHistoricalData(self.device.bandwidthData);
            angular.extend(self.usages.bandwidth, {
                total: self.getLineChartObject(self.device.bandwidthData.total.historicaldata[self.bandWidthSelectedTimeFrame], self.device.bandwidthData.total.category),
                read: self.getLineChartObject(self.device.bandwidthData.read.historicaldata[self.bandWidthSelectedTimeFrame], self.device.bandwidthData.read.category),
                write: self.getLineChartObject(self.device.bandwidthData.write.historicaldata[self.bandWidthSelectedTimeFrame], self.device.bandwidthData.write.category)
            });
        };
        DevicePerformanceController.prototype.checkForNullHistoricalData = function (context) {
            //handles the case where ioData/bandwidthData is sent, but comes with null historical data
            var self = this;
            if (!context.total.historicaldata) {
                context.total.historicaldata = self.emptyArray;
            }
            if (!context.read.historicaldata) {
                context.read.historicaldata = self.emptyArray;
            }
            if (!context.write.historicaldata) {
                context.write.historicaldata = self.emptyArray;
            }
        };
        DevicePerformanceController.prototype.getLineChartObject = function (UsageDataSeries, label) {
            var self = this;
            return {
                options: {
                    chart: {
                        type: 'line',
                        animation: true,
                        height: 130,
                        borderWidth: 0,
                        backgroundColor: 'rgba(255, 255, 255, 0)'
                    },
                    title: {
                        text: ''
                    },
                    tooltip: {
                        useHTML: true,
                        shared: true,
                        enabled: true,
                        formatter: function () {
                            return self.formatTooltip(this, UsageDataSeries, label);
                        }
                    },
                },
                xAxis: {
                    labels: { enabled: false },
                    type: 'datetime',
                    categories: angular.forEach(UsageDataSeries.data, function (point) { return point.timestamp; }),
                    //                    tickPositioner: () => {
                    //                        return _.map(UsageDataSeries.data, (point: any) => [
                    //                            moment(point.timestamp).toDate().getTime(),
                    //                            point.value
                    //                        ]
                    //                        );
                    //                    },
                    lineColor: '#ececec',
                    tickColor: '#ececec',
                    title: { margin: 10, style: { color: '#888888' }, text: UsageDataSeries.chartlabel }
                },
                yAxis: {
                    gridLineColor: "#cecece",
                    title: null,
                    tickInterval: 20,
                    plotLines: [{
                            value: 0,
                            width: 1,
                            color: '#808080'
                        }],
                    min: 0,
                    max: UsageDataSeries.maximumvalue || 100
                },
                legend: {
                    enabled: false
                },
                series: [{
                        showInLegend: false,
                        name: 'Usage',
                        color: "#81b8e2",
                        data: UsageDataSeries.data ? UsageDataSeries.data.map(function (dataPoint) { return dataPoint.value; }) : [],
                        marker: {
                            radius: 3,
                            fillColor: '#666666'
                        }
                    }],
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0
            };
        };
        DevicePerformanceController.prototype.formatTooltip = function (context, UsageDataSeries, label) {
            var toReturn = moment(context.x.timestamp).format('LLL') + " <br /> <label>" + label + ": " + parseFloat(context.y.toFixed(2)) + "</label>";
            return toReturn;
        };
        DevicePerformanceController.prototype.getScaleIOWorkload = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.scaleIO.getScaleIOWorkload, { id: id });
        };
        DevicePerformanceController.prototype.getScaleIOById = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.scaleIO.getScaleIObyId, { id: id });
        };
        DevicePerformanceController.$inject = ["$http", "$interval", "$translate", "Commands", "GlobalServices", "Loading"];
        return DevicePerformanceController;
    }());
    angular.module('app')
        .component('devicePerformance', {
        templateUrl: 'views/devicedetails/performance.html',
        controller: DevicePerformanceController,
        controllerAs: 'devicePerformanceController',
        bindings: {
            device: '=',
            deviceType: '=',
            pollWorkloads: '<'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=performance.js.map
var asm;
(function (asm) {
    "use strict";
    var PhysicalDisksController = (function () {
        function PhysicalDisksController() {
            var self = this;
            self.refresh();
        }
        PhysicalDisksController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.disks);
        };
        PhysicalDisksController.$inject = [];
        return PhysicalDisksController;
    }());
    angular.module('app')
        .component('physicalDisks', {
        templateUrl: 'views/devicedetails/physicaldisks.html',
        controller: PhysicalDisksController,
        controllerAs: 'physicalDisksController',
        bindings: {
            disks: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=physicalDisks.js.map
var asm;
(function (asm) {
    "use strict";
    var PortViewController = (function () {
        function PortViewController(Modal, Dialog, $http, $timeout, $q, $translate, $rootScope, GlobalServices, $scope, Loading, Commands, $interval) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$rootScope = $rootScope;
            this.GlobalServices = GlobalServices;
            this.$scope = $scope;
            this.Loading = Loading;
            this.Commands = Commands;
            this.$interval = $interval;
            this.TorSwitchIntervals = 300;
            this.TorPortIntervals = 25;
            this.IOMintervals = 180;
            this.IomPortIntervals = 55;
            this.NicPortIntervals = 110;
            this.Allnics = 0;
            this.counter = 0;
            this.previousUplink = '';
            this.previousUplinkPort = '';
            this.SelectedConnectionType = '';
            this.SelectedConnectionId = '';
            this.visibleVLANS = [];
            this.servicePage = false;
            this.serversDropDown = [];
            this.firstLoad = true;
            this.portList = [];
            var self = this;
            if (!self.$scope.service) {
                //from device details
                self.selectedDevice = self.$scope.scopeSelectedDevice;
                //asmGUID is not populated by the back-end for a device detail device, so id is used here for the requestId
                self.requestId = self.selectedDevice.id;
            }
            else {
                //from service detail
                self.servicePage = true;
                self.serversDropDown = _.filter(self.$scope.service.components, { type: "server" });
                self.selectedServer = self.serversDropDown[0];
                self.selectedDevice = _.find(self.$scope.service.serverlist, { id: self.selectedServer.id });
                //asmGUID is populated by the back-end for a service.serverlist, and it is used here for the requestId
                self.requestId = self.selectedDevice.asmGUID;
            }
            if (self.$scope.server) {
                //from service detail
                self.selectedServer = _.find(self.serversDropDown, ['id', self.$scope.server.id]);
            }
            self.activate();
        }
        PortViewController.prototype.activate = function () {
            var self = this;
            self.promise = self.$interval(function () {
                self.refresh();
                //console.log('refresh!')
            }, 60000);
            self.refresh();
        };
        PortViewController.prototype.changeServer = function () {
            var self = this;
            self.viewSelectedServer = self.selectedServer;
            self.selectedDevice = _.find(self.$scope.service.serverlist, { id: self.viewSelectedServer.id });
            //asmGUID is populated by the back-end for a service.serverlist, and it is used here for the requestId
            self.requestId = self.selectedDevice.asmGUID;
            self.refresh();
        };
        PortViewController.prototype.$onDestroy = function () {
            var self = this;
            self.$interval.cancel(self.promise);
        };
        PortViewController.prototype.refresh = function () {
            var self = this;
            $('.popover').remove();
            $('#PortViewSVGLines').empty();
            $('#PortViewSelectedSVGLines').empty();
            //spinner
            //self.Loading(self.$q.defer().promise);
            var filterObj = [];
            var request;
            //update filter with dropdown on change
            if (self.selectedPorts && self.selectedPorts != '' && self.selectedPorts.nicId != 'all') {
                if (self.selectedPorts.nicId != null) {
                    filterObj.push({ field: 'nicId', op: '=', opTarget: [self.selectedPorts.nicId] });
                    filterObj.push({ field: 'nicPortId', op: '=', opTarget: [self.selectedPorts.nicPortId] });
                }
                if (self.selectedPorts.health != null) {
                    filterObj.push({ field: 'health', op: '=', opTarget: ['red', 'yellow'] });
                }
                request = {
                    requestObj: { id: self.requestId },
                    criteriaObj: { filterObj: filterObj }
                };
            }
            else {
                request = {
                    requestObj: { id: self.requestId }
                };
            }
            this.$http.post(self.Commands.data.servers.getServerPortViewById, request).then(function (data) {
                //data.data.responseObj = { "id": "ff80808165581fe701655854bf690bd1", "hostname": "aer1-host-c1", "ipaddress": "100.68.97.25", "type": "RackServer", "health": "green", "model": "R630 Base", "powerState": "on", "state": "ready", "statusMessage": "OK", "nics": [{ "id": "NIC.Integrated.1", "name": "NIC.Integrated.1", "modelDisplayName": "Intel X520+i350", "model": "Intel(R) Ethernet 10G 4P X520/I350 rNDC", "ipaddresses": [{ "ipaddress": "192.168.254.101", "ipaddressurl": "https://192.168.254.101" }, { "ipaddress": null, "ipaddressurl": "https://null" }, { "ipaddress": "192.168.206.1", "ipaddressurl": "https://192.168.206.1" }, { "ipaddress": "100.68.97.80", "ipaddressurl": "https://100.68.97.80" }], "macaddress": null, "location": "Integrated", "nparEnabled": false, "ports": [{ "id": "1", "number": 1, "name": "Port 1", "health": "green", "partitions": [{ "id": "1", "name": "NIC.Integrated.1-1-1", "displayName": "Partition 1", "health": "green", "ipaddress": "", "ipaddressurl": null, "macaddress": "24:6E:96:17:E9:10", "wwpn": "20:00:24:6E:96:17:E9:11", "iscsiEnabled": false, "fcoeEnabled": false, "pxeEnabled": false, "vlans": [{ "id": null, "name": "vcesys-sio-data2", "description": null, "type": "SCALEIO_DATA", "vlan": "154" }] }], "fabric": null, "zoneInfo": null, "wwpn": null, "fqdd": null }, { "id": "2", "number": 2, "name": "Port 2", "health": "green", "partitions": [{ "id": "1", "name": "NIC.Integrated.1-2-1", "displayName": "Partition 1", "health": "green", "ipaddress": "", "ipaddressurl": null, "macaddress": "24:6E:96:17:E9:12", "wwpn": "20:00:24:6E:96:17:E9:13", "iscsiEnabled": false, "fcoeEnabled": false, "pxeEnabled": true, "vlans": [{ "id": null, "name": "vcesys-sio-mgmt", "description": null, "type": "SCALEIO_MANAGEMENT", "vlan": "504" }, { "id": null, "name": "vcesys-vmotion", "description": null, "type": "HYPERVISOR_MIGRATION", "vlan": "106" }, { "id": null, "name": "vcesys-sio-data2-Arun", "description": null, "type": "PXE", "vlan": "242" }, { "id": null, "name": "vcesys-esx-mgmt", "description": null, "type": "HYPERVISOR_MANAGEMENT", "vlan": "502" }] }], "fabric": null, "zoneInfo": null, "wwpn": null, "fqdd": null }, { "id": "3", "number": 3, "name": "Port 3", "health": "green", "partitions": [{ "id": "1", "name": "NIC.Integrated.1-3-1", "displayName": "Partition 1", "health": "green", "ipaddress": "", "ipaddressurl": null, "macaddress": "24:6E:96:17:E9:14", "wwpn": null, "iscsiEnabled": false, "fcoeEnabled": false, "pxeEnabled": false, "vlans": [] }], "fabric": null, "zoneInfo": null, "wwpn": null, "fqdd": null }, { "id": "4", "number": 4, "name": "Port 4", "health": "green", "partitions": [{ "id": "1", "name": "NIC.Integrated.1-4-1", "displayName": "Partition 1", "health": "green", "ipaddress": "", "ipaddressurl": null, "macaddress": "24:6E:96:17:E9:15", "wwpn": null, "iscsiEnabled": false, "fcoeEnabled": false, "pxeEnabled": false, "vlans": [] }], "fabric": null, "zoneInfo": null, "wwpn": null, "fqdd": null }], "rank": 2 }, { "id": "NIC.Slot.1", "name": "NIC.Slot.1", "modelDisplayName": "Intel X520", "model": "Intel(R) Ethernet 10G 2P X520 Adapter", "ipaddresses": [{ "ipaddress": "192.168.252.101", "ipaddressurl": "https://192.168.252.101" }, { "ipaddress": null, "ipaddressurl": "https://null" }, { "ipaddress": "192.168.206.1", "ipaddressurl": "https://192.168.206.1" }, { "ipaddress": "100.68.97.80", "ipaddressurl": "https://100.68.97.80" }], "macaddress": null, "location": "Slot", "nparEnabled": false, "ports": [{ "id": "1", "number": 1, "name": "Port 1", "health": "green", "partitions": [{ "id": "1", "name": "NIC.Slot.1-1-1", "displayName": "Partition 1", "health": "green", "ipaddress": "", "ipaddressurl": null, "macaddress": "A0:36:9F:8A:EE:38", "wwpn": "20:00:A0:36:9F:8A:EE:39", "iscsiEnabled": false, "fcoeEnabled": false, "pxeEnabled": false, "vlans": [{ "id": null, "name": "vcesys-sio-data1", "description": null, "type": "SCALEIO_DATA", "vlan": "152" }] }], "fabric": null, "zoneInfo": null, "wwpn": null, "fqdd": null }, { "id": "2", "number": 2, "name": "Port 2", "health": "green", "partitions": [{ "id": "1", "name": "NIC.Slot.1-2-1", "displayName": "Partition 1", "health": "green", "ipaddress": "", "ipaddressurl": null, "macaddress": "A0:36:9F:8A:EE:3A", "wwpn": "20:00:A0:36:9F:8A:EE:3B", "iscsiEnabled": false, "fcoeEnabled": false, "pxeEnabled": true, "vlans": [{ "id": null, "name": "vcesys-sio-mgmt", "description": null, "type": "SCALEIO_MANAGEMENT", "vlan": "504" }, { "id": null, "name": "vcesys-vmotion", "description": null, "type": "HYPERVISOR_MIGRATION", "vlan": "106" }, { "id": null, "name": "vcesys-sio-data2-Arun", "description": null, "type": "PXE", "vlan": "242" }, { "id": null, "name": "vcesys-esx-mgmt", "description": null, "type": "HYPERVISOR_MANAGEMENT", "vlan": "502" }] }], "fabric": null, "zoneInfo": null, "wwpn": null, "fqdd": null }], "rank": 4 }], "ioModules": [], "torSwitches": [{ "id": "cisconexus5k-100.68.96.245", "hostname": "PGNET-RR5-RowE-Rack1-N9372_1", "model": "Nexus9000", "assettag": "SAL1945SFH5", "ipaddress": "100.68.96.245", "ipaddressurl": "", "deviceType": "ciscoswitch", "statusMessage": "OK", "health": "green", "downlinkPorts": [{ "id": "9", "port": "9", "type": null, "health": "green" }, { "id": "10", "port": "10", "type": null, "health": "green" }], "rank": 3, "portChannel": null }, { "id": "cisconexus5k-100.68.96.246", "hostname": "PGNET-RR5-RowE-Rack1-N9372_2", "model": "Nexus9000", "assettag": "SAL1934MP09", "ipaddress": "100.68.96.246", "ipaddressurl": "", "deviceType": "ciscoswitch", "statusMessage": "OK", "health": "green", "downlinkPorts": [{ "id": "10", "port": "10", "type": null, "health": "green" }, { "id": "9", "port": "9", "type": null, "health": "green" }], "rank": 4, "portChannel": null }], "portConnections": [{ "id": "1fb3ec4f-fedd-4a90-a791-1a3f1c8ac393", "nicId": "NIC.Integrated.1", "nicPortId": "1", "connectedDevice": { "deviceId": "cisconexus5k-100.68.96.246", "downlinkPort": { "id": "10", "port": "10", "type": null, "health": "green" } }, "iomUplinkConnections": [] }, { "id": "342bb4b9-76fe-4afa-9ca9-f38ad0769da5", "nicId": "NIC.Integrated.1", "nicPortId": "2", "connectedDevice": { "deviceId": "cisconexus5k-100.68.96.245", "downlinkPort": { "id": "9", "port": "9", "type": null, "health": "green" } }, "iomUplinkConnections": [] }, { "id": "850f94cb-63ca-4c1b-bbfb-0e87e2191e77", "nicId": "NIC.Slot.1", "nicPortId": "1", "connectedDevice": { "deviceId": "cisconexus5k-100.68.96.245", "downlinkPort": { "id": "10", "port": "10", "type": null, "health": "green" } }, "iomUplinkConnections": [] }, { "id": "c85eb085-20fd-4335-a484-28c971cc98b6", "nicId": "NIC.Slot.1", "nicPortId": "2", "connectedDevice": { "deviceId": "cisconexus5k-100.68.96.246", "downlinkPort": { "id": "9", "port": "9", "type": null, "health": "green" } }, "iomUplinkConnections": [] }] } ;
                self.portView = data.data.responseObj;
                if (self.portView.nics.length) {
                    if (self.portView.torSwitches.length) {
                        self.updateTorSwitch();
                    }
                    if (self.portList.length == 0) {
                        self.portList.push({ id: 'all', nicId: 'all', nicPortId: 'all', displayName: self.$translate.instant("PORTVIEW_PortViewSVG_ShowAllConnections"), health: 'all' });
                        $.each(self.portView.nics, function (i, nic) {
                            $.each(nic.ports, function (j, port) {
                                self.portList.push({ id: self.GlobalServices.NewGuid(), nicId: nic.id, nicPortId: port.id, displayName: nic.name + ' - ' + port.name, health: null });
                            });
                        });
                        self.portList.push({ id: self.GlobalServices.NewGuid(), nicId: null, nicPortId: null, health: 'red,yellow', displayName: self.$translate.instant("PORTVIEW_PortViewSVG_AllresourcesinWarningorErrorstate") });
                        //console.log(self.portList);
                        self.selectedPorts = self.portList[0];
                    }
                    if (self.portView.ioModules != null && self.portView.ioModules.length > 0) {
                        self.updateIOM();
                    }
                    //Caculate intervals between NIC groups
                    self.Allnics = 0;
                    $.each(self.portView.nics, function (i, nic) {
                        var Xatt = ((self.Allnics * 110));
                        nic.xcoord = Xatt;
                        var niclength = parseInt(nic.ports.length);
                        self.Allnics = self.Allnics + niclength;
                    });
                    //Gather VLans
                    $.each(self.portView.nics, function (i, nic) {
                        $.each(nic.ports, function (i, port) {
                            $.each(port.partitions, function (i, partition) {
                                $.each(partition.vlans, function (i, vlan) {
                                    var x = 0;
                                });
                            });
                        });
                    });
                    //self.$q.resolve();
                    self.cleanIds();
                }
            }).catch(function (data) {
                //self.$q.resolve();
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        PortViewController.prototype.updateTorSwitch = function () {
            //Update TOR switch with nic info to render vlans on top
            var self = this;
            if (self.portView.torSwitches.length) {
                $.each(self.portView.torSwitches, function (i, torSwitch) {
                    //-MH
                    torSwitch.nics = [];
                    torSwitch.vlans = [];
                    $.each(self.portView.portConnections, function (j, connection) {
                        if (connection.iomUplinkConnections.length) {
                            $.each(connection.iomUplinkConnections, function (k, iom) {
                                if (iom.connectedDevice.deviceId == torSwitch.id) {
                                    var nic = _.filter(self.portView.nics, { id: connection.nicId })[0];
                                    torSwitch.nics.push(nic);
                                    torSwitch.selectedPartition = '';
                                    var port = _.filter(nic.ports, { id: connection.nicPortId })[0];
                                    self.addVlansToTOR(port, torSwitch);
                                }
                            });
                        }
                        else {
                            if (connection.connectedDevice.deviceId == torSwitch.id) {
                                var nic = _.filter(self.portView.nics, { id: connection.nicId })[0];
                                torSwitch.nics.push(nic);
                                torSwitch.selectedPartition = '';
                                var port = _.filter(nic.ports, { id: connection.nicPortId })[0];
                                self.addVlansToTOR(port, torSwitch);
                            }
                        }
                    });
                });
            }
        };
        PortViewController.prototype.addVlansToTOR = function (port, torSwitch) {
            if (port.zoneInfo != null) {
                if (!_.find(torSwitch.vlans, { vlan: port.zoneInfo.vlan })) {
                    torSwitch.vlans.push(port.zoneInfo);
                }
            }
            $.each(port.partitions, function (m, partition) {
                $.each(partition.vlans, function (n, vlan) {
                    if (!_.find(torSwitch.vlans, { vlan: vlan.vlan })) {
                        torSwitch.vlans.push(vlan);
                    }
                });
            });
        };
        PortViewController.prototype.updateIOM = function () {
            //Update IOM with nic info to render vlans on top
            var self = this;
            if (self.portView.ioModules != null) {
                $.each(self.portView.portConnections, function (j, connection) {
                    $.each(self.portView.ioModules, function (i, iom) {
                        iom.nics = [];
                        if (connection.connectedDevice.deviceId == iom.id && connection.iomUplinkConnections != null) {
                            var nic = _.filter(self.portView.nics, { id: connection.nicId })[0];
                            iom.nics.push(nic);
                            iom.selectedPartition = '';
                        }
                    });
                });
            }
        };
        PortViewController.prototype.addPartition = function () {
            var self = this;
            $.each(self.portView.portConnections, function (i, connection) {
                connection.partitions = [];
                $.each(self.portView.nics, function (j, nic) {
                    if (connection.nicId == nic.id) {
                        $.each(nic.ports, function (k, port) {
                            if (connection.nicPortId == port.id) {
                                connection.nicPortHealth = port.health;
                                if (port.partitions) {
                                    //connection.partitions = port.partitions.length;
                                    connection.partitions.push(port.partitions);
                                    connection.partitions = connection.partitions[0];
                                }
                            }
                        });
                    }
                });
            });
        };
        PortViewController.prototype.iomData = function (nicId, portId) {
            var self = this;
            var iom = null;
            if (self.portView.ioModules) {
                var connection = _.filter(self.portView.portConnections, { nicId: nicId, nicPortId: portId });
                //var connection = self.portView.portConnections.where({ nicId: nicId, nicPortId: portId });
                if (connection.length) {
                    var deviceId = connection[0].connectedDevice.deviceId;
                    iom = _.filter(self.portView.ioModules, { id: deviceId });
                    //iom = self.portView.ioModules.where({ id: deviceId });
                    iom = iom.length ? iom[0] : null;
                }
            }
            return iom;
        };
        PortViewController.prototype.torData = function () {
            var self = this;
            $.each(self.portView.nics, function (i, nic) {
                $.each(nic.ports, function (j, port) {
                    var connection = _.filter(self.portView.portConnections, { nicId: nic.id, nicPortId: port.id });
                    port.torSwitches = [];
                    if (connection.length) {
                        if (connection[0].iomUplinkConnections) {
                            $.each(connection[0].iomUplinkConnections, function (i, uplink) {
                                var torSwitch = _.filter(self.portView.torSwitches, { id: uplink.connectedDevice.deviceId })[0];
                                if (torSwitch)
                                    port.torSwitches.push(torSwitch);
                            });
                        }
                        else {
                            var torSwitch1 = _.filter(self.portView.torSwitches, { id: connection[0].connectedDevice.deviceId })[0];
                            if (torSwitch1)
                                port.torSwitches.push(torSwitch1);
                        }
                    }
                });
            });
            self.detailData = [];
            //Aggregate data to allow repeated accordions to work
            angular.forEach(self.portView.nics, function (nic) {
                angular.forEach(nic.ports, function (port) {
                    port.nicInfo = nic;
                    self.detailData.push(port);
                });
            });
            if (self.firstLoad) {
                self.accordionData = self.detailData;
                self.firstLoad = false;
            }
            //Possible hack to prevent accordion closure when polled data has no changes.  May replace with 'track by' solution
            if (self.accordionData) {
                angular.forEach(self.detailData, function (detail, detailIndx) {
                    var x = self.accordionData[detailIndx];
                    var y = angular.copy(x);
                    var comparison = _.isEqual(detail, y);
                    if (!comparison) {
                        self.accordionData = self.detailData;
                        return;
                    }
                });
            }
            //Possible hack to prevent accordion closure when polled data has no changes.  May replace with 'track by' solution
            //if (self.accordionData) {
            //    angular.forEach(self.portView.nics, function (nic, nicIndx) {
            //        angular.forEach(nic.ports, function (port, portIndx) {
            //            var x = self.accordionData.nics[nicIndx].ports[portIndx];
            //            var y = angular.copy(x);
            //            var comparison = _.isEqual(port, y);
            //            if (!comparison) {
            //                self.accordionData = self.portView;
            //                return
            //            }
            //        })
            //    })
            //}
        };
        //Removes periods and adds port ids
        PortViewController.prototype.cleanIds = function () {
            var self = this;
            $.each(self.portView.nics, function (i, nic) {
                nic.id = (nic.id).replace(/\./g, '').replace(/\//g, '-');
                $.each(nic.ports, function (x, port) {
                    port.id = 'port' + port.id;
                });
            });
            $.each(self.portView.torSwitches, function (i, tor) {
                tor.originalId = angular.copy(tor.id);
                tor.id = (tor.id).replace(/\./g, '').replace(/\//g, '-');
                $.each(tor.downlinkPorts, function (j, downlink) {
                    downlink.id = 'port' + (downlink.port).replace(/\,/g, '-').replace(/\//g, '-');
                });
            });
            if (self.portView.ioModules != null) {
                $.each(self.portView.ioModules, function (i, iom) {
                    iom.originalId = angular.copy(iom.id);
                    iom.id = (iom.id).replace(/\./g, '').replace(/\//g, '-');
                    $.each(iom.downlinkPorts, function (j, downlink) {
                        downlink.id = 'port' + (downlink.port).replace(/\,/g, '-').replace(/\//g, '-');
                    });
                    $.each(iom.uplinkPorts, function (j, uplink) {
                        uplink.id = 'port' + (uplink.port).replace(/\,/g, '-').replace(/\//g, '-');
                    });
                });
            }
            $.each(self.portView.portConnections, function (i, connection) {
                connection.nicId = (connection.nicId).replace(/\./g, '').replace(/\//g, '-');
                connection.connectedDevice.deviceId = (connection.connectedDevice.deviceId).replace(/\./g, '').replace(/\//g, '-');
                connection.nicPortId = 'port' + (connection.nicPortId).replace(/\,/g, '-').replace(/\//g, '-');
                connection.connectedDevice.downlinkPort.id = 'port' + (connection.connectedDevice.downlinkPort.port).replace(/\,/g, '-').replace(/\//g, '-');
                if (connection.iomUplinkConnections != null) {
                    $.each(connection.iomUplinkConnections, function (j, iom) {
                        iom.connectedDevice.deviceId = (iom.connectedDevice.deviceId).replace(/\./g, '').replace(/\//g, '-');
                        iom.uplinkPort.id = 'port' + (iom.uplinkPort.port).replace(/\,/g, '-').replace(/\//g, '-');
                        iom.connectedDevice.downlinkPort.id = 'port' + (iom.connectedDevice.downlinkPort.port).replace(/\,/g, '-').replace(/\//g, '-');
                    });
                }
            });
            self.addPartition();
            self.torData();
            self.drawLines();
        };
        PortViewController.prototype.drawLines = function () {
            var self = this;
            self.$timeout(function () {
                self.counter = 0;
                $.each(self.portView.portConnections, function (i, connection) {
                    //If NIC - IOM - TOR
                    //IOM to Tor & Tor to VLAN CONNECTION
                    if (connection.iomUplinkConnections.length) {
                        $.each(connection.iomUplinkConnections, function (x, uplink) {
                            //Tor to VLAN
                            var VlanFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var VlanHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var VlanSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var vlan_x1 = (parseInt($('svg#' + uplink.connectedDevice.deviceId).attr('x')) + 350).toString();
                            var vlan_y1 = '100';
                            var vlan_x2 = vlan_x1;
                            var vlan_y2 = '140';
                            VlanFirstVertical.setAttribute('x1', vlan_x1);
                            VlanFirstVertical.setAttribute('y1', vlan_y1);
                            VlanFirstVertical.setAttribute('x2', vlan_x2);
                            VlanFirstVertical.setAttribute('y2', vlan_y2);
                            //Difine line class names
                            VlanFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + uplink.uplinkPort.health;
                            VlanFirstVertical.setAttribute('stroke-dasharray', '4 3'); // dotted line
                            $('#PortViewSVGLines').append(VlanFirstVertical);
                            $('#PortViewSelectedSVGLines').append(angular.copy(VlanFirstVertical));
                            //Partition to Port
                            /*
                            if (connection.partitions.length >= 1) {
                                var PartitionFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                                var PartitionHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                                var PartitionSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');

                                var partition_x1 = (parseInt($('svg#' + connection.nicId).attr('x')) + parseInt($('svg#' + connection.nicId + ' svg#' + connection.nicPortId).attr('x')) + 375).toString();
                                var partition_y1 = '522';
                                var partition_x2 = partition_x1;
                                var partition_y2 = '571';

                                PartitionFirstVertical.setAttribute('x1', partition_x1);
                                PartitionFirstVertical.setAttribute('y1', partition_y1);
                                PartitionFirstVertical.setAttribute('x2', partition_x2);
                                PartitionFirstVertical.setAttribute('y2', partition_y2);
                                //Difine line class names
                                PartitionFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + connection.nicPortHealth;

                                PartitionFirstVertical.setAttribute('stroke-dasharray', '4 3'); // dotted line
                                $('#PortViewSVGLines').append(PartitionFirstVertical);

                                $('#PortViewSelectedSVGLines').append(angular.copy(PartitionFirstVertical));
                            }
                            */
                            //Nic to IOM Downlink
                            var newFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var newHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var newSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            //var NICx = parseInt($('.NICelements #' + connection.nicId).attr('x'));
                            //var Portx = parseInt($('svg#' + connection.nicPortId).attr('x'));
                            var x1 = (parseInt($('svg#' + connection.nicId).attr('x')) + parseInt($('svg#' + connection.nicId + ' svg#' + connection.nicPortId).attr('x')) + 375).toString();
                            //var x1 = (parseInt($('.NICelements #' + connection.nicId).attr('x')) + parseInt($('svg#' + connection.nicPortId).attr('x')) + 375).toString();
                            //var x1 = (parseInt($('g.NICelements svg.NICports svg.' + connection.nicId + connection.nicPortId).attr('x')) + 375).toString();
                            var y1 = '490';
                            var x2 = (parseInt($('.IOMSlotElements #' + connection.connectedDevice.deviceId + ' #' + connection.connectedDevice.downlinkPort.id).attr('x')) + (parseInt($('.IOMSlotElements #' + connection.connectedDevice.deviceId).attr('x'))) + 370).toString();
                            var y2 = '340';
                            var MidTurn = (390 + (6 * i)).toString();
                            newFirstVertical.setAttribute('x1', x1);
                            newFirstVertical.setAttribute('y1', y1);
                            newFirstVertical.setAttribute('x2', x1);
                            newFirstVertical.setAttribute('y2', MidTurn);
                            newHorizontal.setAttribute('x1', x1);
                            newHorizontal.setAttribute('y1', MidTurn);
                            newHorizontal.setAttribute('x2', x2);
                            newHorizontal.setAttribute('y2', MidTurn);
                            newSecondVertical.setAttribute('x1', x2);
                            newSecondVertical.setAttribute('y1', MidTurn);
                            newSecondVertical.setAttribute('x2', x2);
                            newSecondVertical.setAttribute('y2', y2);
                            ($('.NICelements #' + connection.nicId + ' #' + connection.nicPortId)).addClass(connection.nicId + connection.nicPortId);
                            ($('.NICelements #' + connection.nicId + ' #' + connection.nicPortId + ' .BackgroundSelection')).addClass(connection.nicId + connection.nicPortId);
                            ($('.IOMSlotElements #' + connection.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                            ($('.IOMSlotElements #' + connection.connectedDevice.deviceId + ' .BackgroundSelection')).addClass(connection.nicId + connection.nicPortId);
                            ($('.vlanList #vlan-' + uplink.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                            //Define line class names
                            newFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                            newHorizontal.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                            newSecondVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                            $('#PortViewSVGLines').append(newFirstVertical);
                            $('#PortViewSVGLines').append(newHorizontal);
                            $('#PortViewSVGLines').append(newSecondVertical);
                            $('#PortViewSelectedSVGLines').append(angular.copy(newFirstVertical));
                            $('#PortViewSelectedSVGLines').append(angular.copy(newHorizontal));
                            $('#PortViewSelectedSVGLines').append(angular.copy(newSecondVertical));
                            //IOM to Tor
                            //The counter handles situations where a range of port connections are connected to a range of other port connections
                            if (self.previousUplink != connection.connectedDevice.deviceId || (self.previousUplinkPort != uplink.uplinkPort.id && self.previousUplink == connection.connectedDevice.deviceId)) {
                                self.counter++;
                            }
                            var TorFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var TorHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var TorSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var x1 = (parseInt($('.IOMElements #' + connection.connectedDevice.deviceId + ' #' + uplink.uplinkPort.id).attr('x')) + (parseInt($('.IOMElements #' + connection.connectedDevice.deviceId).attr('x'))) + 370).toString();
                            var y1 = '287';
                            var x2 = (parseInt($('#' + uplink.connectedDevice.deviceId + ' #' + uplink.connectedDevice.downlinkPort.id).attr('x')) + (parseInt($('svg#' + uplink.connectedDevice.deviceId).attr('x'))) + 305).toString();
                            var y2 = '195';
                            var MidTurn = (215 + (6 * (self.counter))).toString();
                            TorFirstVertical.setAttribute('x1', x1);
                            TorFirstVertical.setAttribute('y1', y1);
                            TorFirstVertical.setAttribute('x2', x1);
                            TorFirstVertical.setAttribute('y2', MidTurn);
                            TorHorizontal.setAttribute('x1', x1);
                            TorHorizontal.setAttribute('y1', MidTurn);
                            TorHorizontal.setAttribute('x2', x2);
                            TorHorizontal.setAttribute('y2', MidTurn);
                            TorSecondVertical.setAttribute('x1', x2);
                            TorSecondVertical.setAttribute('y1', MidTurn);
                            TorSecondVertical.setAttribute('x2', x2);
                            TorSecondVertical.setAttribute('y2', y2);
                            //Define line class names
                            TorFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + uplink.uplinkPort.health;
                            TorHorizontal.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + uplink.uplinkPort.health;
                            TorSecondVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + uplink.uplinkPort.health;
                            $('#PortViewSVGLines').append(TorFirstVertical);
                            $('#PortViewSVGLines').append(TorHorizontal);
                            $('#PortViewSVGLines').append(TorSecondVertical);
                            $('#PortViewSelectedSVGLines').append(angular.copy(TorFirstVertical));
                            $('#PortViewSelectedSVGLines').append(angular.copy(TorHorizontal));
                            $('#PortViewSelectedSVGLines').append(angular.copy(TorSecondVertical));
                            ($('svg#' + uplink.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                            self.previousUplinkPort = uplink.uplinkPort.id;
                            self.previousUplink = connection.connectedDevice.deviceId;
                            //Hide Selected lines
                            $('#PortViewSelectedSVGLines line').attr('display', 'none');
                        });
                    }
                    else {
                        //Tor to VLAN
                        var VlanFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var VlanHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var VlanSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var vlan_x1 = (parseInt($('svg#' + connection.connectedDevice.deviceId).attr('x')) + 350).toString();
                        var vlan_y1 = '100';
                        var vlan_x2 = vlan_x1;
                        var vlan_y2 = '140';
                        VlanFirstVertical.setAttribute('x1', vlan_x1);
                        VlanFirstVertical.setAttribute('y1', vlan_y1);
                        VlanFirstVertical.setAttribute('x2', vlan_x2);
                        VlanFirstVertical.setAttribute('y2', vlan_y2);
                        //Difine line class names
                        VlanFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + connection.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                        VlanFirstVertical.setAttribute('stroke-dasharray', '4 3'); // dotted line
                        $('#PortViewSVGLines').append(VlanFirstVertical);
                        $('#PortViewSelectedSVGLines').append(angular.copy(VlanFirstVertical));
                        //Partition to Port
                        /*
                        if (connection.partitions.length >= 1) {
                            var PartitionFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var PartitionHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var PartitionSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');

                            var partition_x1 = (parseInt($('svg#' + connection.nicId).attr('x')) + parseInt($('svg#' + connection.nicId + ' svg#' + connection.nicPortId).attr('x')) + 375).toString();
                            var partition_y1 = '522';
                            var partition_x2 = partition_x1;
                            var partition_y2 = '571';

                            PartitionFirstVertical.setAttribute('x1', partition_x1);
                            PartitionFirstVertical.setAttribute('y1', partition_y1);
                            PartitionFirstVertical.setAttribute('x2', partition_x2);
                            PartitionFirstVertical.setAttribute('y2', partition_y2);
                            //Difine line class names
                            PartitionFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + connection.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                            
                            PartitionFirstVertical.setAttribute('stroke-dasharray', '4 3'); // dotted line

                            $('#PortViewSVGLines').append(PartitionFirstVertical);

                            $('#PortViewSelectedSVGLines').append(angular.copy(PartitionFirstVertical));
                        }
                        */
                        //TOR - NIC
                        var newFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var x1 = (parseInt($('svg#' + connection.nicId).attr('x')) + parseInt($('svg#' + connection.nicId + ' svg#' + connection.nicPortId).attr('x')) + 375).toString();
                        var y1 = '490';
                        var x2 = (parseInt($('#' + connection.connectedDevice.deviceId + ' #' + connection.connectedDevice.downlinkPort.id).attr('x')) + (parseInt($('svg#' + connection.connectedDevice.deviceId).attr('x'))) + 305).toString();
                        var y2 = '195';
                        var MidTurn = (390 + (6 * i)).toString();
                        newFirstVertical.setAttribute('x1', x1);
                        newFirstVertical.setAttribute('y1', y1);
                        newFirstVertical.setAttribute('x2', x1);
                        newFirstVertical.setAttribute('y2', MidTurn);
                        newHorizontal.setAttribute('x1', x1);
                        newHorizontal.setAttribute('y1', MidTurn);
                        newHorizontal.setAttribute('x2', x2);
                        newHorizontal.setAttribute('y2', MidTurn);
                        newSecondVertical.setAttribute('x1', x2);
                        newSecondVertical.setAttribute('y1', MidTurn);
                        newSecondVertical.setAttribute('x2', x2);
                        newSecondVertical.setAttribute('y2', y2);
                        ($('.NICelements #' + connection.nicId + ' #' + connection.nicPortId)).addClass(connection.nicId + connection.nicPortId);
                        ($('.NICelements #' + connection.nicId + ' #' + connection.nicPortId + ' .BackgroundSelection')).addClass(connection.nicId + connection.nicPortId);
                        ($('.IOMSlotElements #' + connection.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                        ($('.IOMSlotElements #' + connection.connectedDevice.deviceId + ' .BackgroundSelection')).addClass(connection.nicId + connection.nicPortId);
                        ($('.vlanList #vlan-' + connection.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                        ($('svg#' + connection.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                        //Define line class names
                        newFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + connection.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                        newHorizontal.className.baseVal = connection.nicId + connection.nicPortId + ' ' + connection.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                        newSecondVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + connection.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                        $('#PortViewSVGLines').append(newFirstVertical);
                        $('#PortViewSVGLines').append(newHorizontal);
                        $('#PortViewSVGLines').append(newSecondVertical);
                        $('#PortViewSelectedSVGLines').append(angular.copy(newFirstVertical));
                        $('#PortViewSelectedSVGLines').append(angular.copy(newHorizontal));
                        $('#PortViewSelectedSVGLines').append(angular.copy(newSecondVertical));
                        //Hide selected lines
                        $('#PortViewSelectedSVGLines line').attr('display', 'none');
                    }
                });
            }, 1000);
        };
        PortViewController.prototype.selectConnection = function (source, port, partition, type) {
            var self = this;
            var parentId = source.id;
            //Reset svg drawing
            if (self.SelectedConnectionId !== '') {
                //$('#PortViewSVGLines line.' + connection.nicId + connection.nicPortId).attr("style", "");
                $('.BackgroundSelection').attr("display", "none");
                $('#PortViewSelectedSVGLines line').attr("display", "none");
            }
            //Show all vlan lists and remove selected class from partition
            $('.vlan').attr('style', '');
            $('.selectedPartition').removeClass('selectedPartition');
            $.each(self.portView.portConnections, function (i, connection) {
                //Reset every line
                $('#PortViewSVGLines line.' + connection.nicId + connection.nicPortId).attr("style", "");
                //Clicked a vlan up top
                if (partition && !partition.ipaddress) {
                    self.SelectedConnectionId = connection.id;
                    var selectedvlan = partition;
                    var lineclass = $('ul.vlanList li#vlan-' + parentId).attr("class");
                    $('#PortViewSVGLines line.' + lineclass).attr("style", "");
                    $('ul.vlanList li#vlan-' + parentId + ' li.' + selectedvlan.vlan).attr("style", 'background-color: lightBlue');
                    if (connection.iomUplinkConnections.length > 0) {
                        $.each(connection.iomUplinkConnections, function (x, uplinkconnection) {
                            if (uplinkconnection.connectedDevice.deviceId == parentId) {
                                $.each(connection.partitions, function (y, partitiongroup) {
                                    $.each(partitiongroup.vlans, function (z, vlan) {
                                        if (vlan.vlan == partition.vlan) {
                                            $('svg#' + connection.nicId + ' #' + connection.nicPortId + ' .PartitionElements.' + partitiongroup.id).addClass('selectedPartition');
                                            $('#PortViewSelectedSVGLines line.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                                            $('svg#PortView .BackgroundSelection.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                                            $('svg#PortView #' + connection.connectedDevice.deviceId + ' .BackgroundSelection').attr("display", "inline");
                                        }
                                    });
                                });
                            }
                        });
                    }
                    else {
                        if (connection.connectedDevice.deviceId == parentId) {
                            $.each(connection.partitions, function (y, partitiongroup) {
                                $.each(partitiongroup.vlans, function (z, vlan) {
                                    if (vlan.vlan == partition.vlan) {
                                        $('svg#' + connection.nicId + ' #' + connection.nicPortId + ' .PartitionElements.' + partitiongroup.id).addClass('selectedPartition');
                                        $('#PortViewSelectedSVGLines line.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                                        $('svg#PortView .BackgroundSelection.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                                        $('svg#PortView #' + connection.connectedDevice.deviceId + ' .BackgroundSelection').attr("display", "inline");
                                    }
                                });
                            });
                        }
                    }
                }
                //Clicked a NIC 
                if (type == 'NIC') {
                    var childId = port.id;
                    if (connection.nicId == parentId && connection.nicPortId == childId) {
                        self.SelectedConnectionType = 'NIC';
                        self.SelectedConnectionId = connection.id;
                        $('#PortViewSelectedSVGLines line.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                        $('svg#PortView .BackgroundSelection.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                        $.each(connection.iomUplinkConnections, function (j, uplink) {
                            $('svg#PortView #' + uplink.connectedDevice.deviceId + ' .BackgroundSelection').attr("display", "inline");
                        });
                        $.each(self.portView.torSwitches, function (j, torSwitch) {
                            $.each(torSwitch.nics, function (j, nic) {
                                if (nic.id == parentId) {
                                    $.each(nic.ports, function (k, port) {
                                        if (port.id == childId) {
                                            //Filter vlan list up top
                                            self.visibleVLANS = port.partitions[0].vlans;
                                            $('svg#' + nic.id + ' #' + port.id + ' .PartitionElements.' + port.partitions[0].id).addClass('selectedPartition');
                                            $('ul.vlanList li#vlan-' + torSwitch.id + '.' + parentId + childId + ' .vlan').attr("style", "display: none");
                                            $.each(self.visibleVLANS, function (l, vlan) {
                                                $('#vlan-' + torSwitch.id + '.' + parentId + childId + ' .vlan.' + vlan.vlan).attr('style', '');
                                            });
                                        }
                                    });
                                }
                            });
                        });
                    }
                }
                //Clicked a IOM
                if (type == 'IOM') {
                    if (connection.iomUplinkConnections.length > 0 && connection.connectedDevice.deviceId == parentId) {
                        self.SelectedConnectionType = 'IOM';
                        self.SelectedConnectionId = connection.id;
                        $('#PortViewSelectedSVGLines line.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                        $('svg#PortView .BackgroundSelection.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                        $.each(connection.iomUplinkConnections, function (j, uplink) {
                            $('svg#PortView #' + uplink.connectedDevice.deviceId + ' .BackgroundSelection').attr("display", "inline");
                        });
                    }
                }
                //Clicked a TOR switch
                if (type == 'TOR') {
                    $.each(self.portView.portConnections, function (c, connection) {
                        $.each(source.downlinkPorts, function (s, port) {
                            if (connection.iomUplinkConnections.length > 0) {
                                $.each(connection.iomUplinkConnections, function (u, item) {
                                    if (item.connectedDevice.deviceId == source.id && item.connectedDevice.downlinkPort.port == port.port) {
                                        self.SelectedConnectionType = 'TOR';
                                        self.SelectedConnectionId = connection.id;
                                        $('#PortViewSelectedSVGLines line.' + connection.nicId + connection.nicPortId + '.' + item.connectedDevice.deviceId).attr("display", "inline");
                                        $('svg#PortView .BackgroundSelection.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                                        $('svg#PortView #' + item.connectedDevice.deviceId + ' .BackgroundSelection').attr("display", "inline");
                                    }
                                });
                            }
                            else {
                                if (connection.connectedDevice.deviceId == source.id && connection.connectedDevice.downlinkPort.port == port.port) {
                                    self.SelectedConnectionType = 'TOR';
                                    self.SelectedConnectionId = connection.id;
                                    $('#PortViewSelectedSVGLines line.' + connection.nicId + connection.nicPortId + '.' + connection.connectedDevice.deviceId).attr("display", "inline");
                                    $('svg#PortView .BackgroundSelection.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                                    $('svg#PortView #' + connection.connectedDevice.deviceId + ' .BackgroundSelection').attr("display", "inline");
                                }
                            }
                        });
                    });
                }
            });
        };
        PortViewController.prototype.convertToObj = function (obj) {
            return obj;
        };
        PortViewController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$rootScope', 'GlobalServices', '$scope', 'Loading', 'Commands', '$interval'];
        return PortViewController;
    }());
    function deviceportview() {
        return {
            restrict: 'E',
            templateUrl: 'views/deviceportview.html',
            replace: true,
            transclude: false,
            controller: PortViewController,
            controllerAs: 'deviceportview',
            scope: {
                scopeSelectedDevice: "=device",
                service: "=service",
                server: "=",
                errors: "="
            },
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('deviceportview', deviceportview);
})(asm || (asm = {}));
//# sourceMappingURL=portView.js.map
var asm;
(function (asm) {
    "use strict";
    var DevicePowerSuppliesController = (function () {
        function DevicePowerSuppliesController() {
            var self = this;
            self.refresh();
        }
        DevicePowerSuppliesController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device);
            self.deviceType = self.deviceType;
        };
        DevicePowerSuppliesController.$inject = [];
        return DevicePowerSuppliesController;
    }());
    angular.module('app')
        .component('devicePowerSupplies', {
        templateUrl: 'views/devicedetails/powersupplies.html',
        controller: DevicePowerSuppliesController,
        controllerAs: 'devicePowerSuppliesController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=powerSupplies.js.map
var asm;
(function (asm) {
    "use strict";
    var ScaleServersController = (function () {
        function ScaleServersController() {
            var self = this;
            self.refresh();
        }
        ScaleServersController.prototype.refresh = function () {
            var self = this;
            self.safeSrc = angular.copy(self.device);
        };
        ScaleServersController.$inject = [];
        return ScaleServersController;
    }());
    angular.module('app')
        .component('scaleServers', {
        templateUrl: 'views/devicedetails/scaleservers.html',
        controller: ScaleServersController,
        controllerAs: 'scaleServersController',
        bindings: {
            device: '=',
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=scaleServers.js.map
var asm;
(function (asm) {
    "use strict";
    var ScaleStoragesController = (function () {
        function ScaleStoragesController() {
            var self = this;
            self.refresh();
        }
        ScaleStoragesController.prototype.refresh = function () {
            var self = this;
            self.safeSrc = angular.copy(self.device);
        };
        ScaleStoragesController.$inject = [];
        return ScaleStoragesController;
    }());
    angular.module('app')
        .component('scaleStorages', {
        templateUrl: 'views/devicedetails/scalestorages.html',
        controller: ScaleStoragesController,
        controllerAs: 'scaleStoragesController',
        bindings: {
            device: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=scaleStorages.js.map
//# sourceMappingURL=summary.js.map
var asm;
(function (asm) {
    "use strict";
    var ChassisTableController = (function () {
        function ChassisTableController($http, commands, $q, $translate, loading, globalServices, Modal, constants, $filter, GlobalServices) {
            this.$http = $http;
            this.commands = commands;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.globalServices = globalServices;
            this.Modal = Modal;
            this.constants = constants;
            this.$filter = $filter;
            this.GlobalServices = GlobalServices;
            var self = this;
        }
        Object.defineProperty(ChassisTableController.prototype, "pending", {
            get: function () {
                var self = this;
                return self._pending;
            },
            set: function (value) {
                var self = this;
                self._pending = value;
                if (value === false) {
                    self.selectAll();
                }
            },
            enumerable: true,
            configurable: true
        });
        ChassisTableController.prototype.selectAll = function () {
            var self = this, val = !!_.find(self.chassisList, { configureDevice: false });
            //determine whether should toggle all on or all off ^, then toggle all v
            angular.forEach(self.chassisList, function (rack) { rack.configureDevice = val; });
        };
        ChassisTableController.prototype.getAllChecked = function () {
            var self = this;
            return !_.find(self.chassisList, { configureDevice: false });
        };
        ChassisTableController.$inject = ["$http", "Commands", "$q", "$translate", "Loading", "GlobalServices", "Modal", "constants", "$filter", 'GlobalServices'];
        return ChassisTableController;
    }());
    angular.module("app")
        .component("chassisTable", {
        templateUrl: "views/resources/chassistable.html",
        controller: ChassisTableController,
        controllerAs: "chassisTableController",
        bindings: {
            mode: "@",
            chassisList: "=",
            pending: "=?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=chassisTable.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceConfigurationController = (function () {
        function DeviceConfigurationController($http, commands, $q, $translate, loading, GlobalServices, Modal, constants, $filter) {
            this.$http = $http;
            this.commands = commands;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.GlobalServices = GlobalServices;
            this.Modal = Modal;
            this.constants = constants;
            this.$filter = $filter;
            this.configModel = {
                "id": null,
                "name": null,
                "dataCenter": null,
                "aisle": null,
                "rack": null,
                "rackSlot": null,
                "registerChassisManagementControllerOnDns": false,
                "dnsDomainName": null,
                "enableTelnet": false,
                "enableSsh": false,
                "trapSettings": [],
                "smtpServer": null,
                "smtpAuthentication": false,
                "smtpUsername": null,
                "smtpPassword": null,
                "sourceEmailName": null,
                "destinationEmails": [],
                "users": [],
                "systemInputPowercap": 0.0,
                "powercapMeasurementType": null,
                "redundancyPolicy": null,
                "serverPerformanceOverPowerRedundancy": false,
                "enableDynamicPowerSupplyEngagement": false,
                "chassisaddressingmode": 'existing',
                "chassisnetworkid": null,
                "serveraddressingmode": 'existing',
                "servernetworkid": null,
                "iomaddressingmode": 'existing',
                "iomnetworkid": null,
                "chassisCredentialId": null,
                "iomCredentialId": null,
                "bladeCredentialId": null,
                "idracuserlist": [],
                "syslogDestination": null,
                "timeZone": null,
                "enableNTPServer": false,
                "preferredNTPServer": null,
                "secondaryNTPServer": null,
                "registeriDracOnDns": false,
                "enableipmi": false
            };
            this.view = {};
            var self = this;
            self.config = self.config.configurationmode === "onboarding" ? angular.extend(self.config, self.configModel) : self.config;
            //          var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            //            self.loading(d.promise);
            self.getTimeZones()
                .then(function (response) {
                self.timeZones = response.data.responseObj;
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () {
                //  d.resolve();
            });
            self.view = {
                onboarding: {
                    users: {
                        visible: function () {
                            return self.editMode ||
                                self.config.users.length ||
                                self.config.idracuserlist.length;
                        }
                    },
                    monitoring: {
                        visible: function () {
                            return self.editMode ||
                                self.config.trapSettings.length ||
                                self.config.destinationEmails.length ||
                                self.config.smtpServer ||
                                self.config.syslogDestination;
                        }
                    },
                    ntp: {
                        visible: function () {
                            return self.editMode ||
                                self.config.timeZone;
                        }
                    },
                    power: {
                        visible: function () {
                            return self.editMode ||
                                self.config.redundancyPolicy ||
                                (!self.hasFxChassis() &&
                                    (self.config.serverPerformanceOverPowerRedundancy ||
                                        self.config.enableDynamicPowerSupplyEngagement));
                        }
                    },
                    networking: {
                        visible: function () {
                            return self.editMode ||
                                self.config.registerChassisManagementControllerOnDns ||
                                self.config.registeriDracOnDns ||
                                self.config.enableipmi;
                        }
                    }
                },
                onboardingVisible: function () {
                    return self.config.configurationmode !== "onboarding" &&
                        self.numConfigurableDevices() !== 0 &&
                        (self.editMode || !!_.find(self.view.onboarding, function (obj) { return obj.visible(); }));
                },
                //below makes collapsable row ids between edit mode and non-edit mode unique
                //note:  this does limit the usage of the directive to these 2 times on any given document/page, so if we ever use more than 2, we'll need to update this
                //if truly unique ids are needed, we need to use GlobalServices.NewGuid()
                editMode: function () {
                    return self.editMode ? "edit_" : "view_";
                }
            };
        }
        DeviceConfigurationController.prototype.createUser = function (userType, editType, user) {
            var self = this, title, helptoken, array = userType === "idrac" ? self.config.idracuserlist : self.config.users;
            if (editType === "create") {
                if (userType === "cmc") {
                    title = "CREATE_EDIT_DEVICE_USERS_CreateCMCUser";
                    helptoken = 'ConfigureChassisAddCMCUser';
                }
                else if (userType === "idrac") {
                    title = "CREATE_EDIT_DEVICE_USERS_CreateiDRACUser";
                    helptoken = 'ConfigureChassisiDRACUser';
                }
            }
            else if (editType === "edit") {
                if (userType === "cmc") {
                    title = "CREATE_EDIT_DEVICE_USERS_EditCMCUser";
                    helptoken = 'ConfigureChassisAddCMCUser';
                }
                else if (userType === "idrac") {
                    title = "CREATE_EDIT_DEVICE_USERS_EditiDRACUser";
                    helptoken = 'ConfigureChassisiDRACUser';
                }
            }
            var theModal = self.Modal({
                title: self.$translate.instant(title),
                onHelp: function () {
                    self.GlobalServices.showHelp(helptoken);
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/deviceusermodal.html',
                controller: 'EditDeviceModalController as editDeviceModalController',
                params: {
                    type: userType,
                    mode: editType,
                    user: angular.copy(user)
                },
                onComplete: function (createdUser) {
                    if (editType === "create") {
                        array.push(createdUser);
                    }
                    else if (editType === "edit") {
                        angular.extend(user, createdUser);
                    }
                }
            });
            theModal.modal.show();
        };
        //        selectAllUsers(array: Array<any>) {
        //            var self: DeviceConfigurationController = this,
        //                allSelected = self.numUsersChecked(array) === array.length;
        //            angular.forEach(array, (user: any) => {
        //                user.rowChecked = !allSelected;
        //            });
        //        }
        //        numUsersChecked(array: Array<any>) {
        //            return _.filter(array, { rowChecked: true }).length;
        //        }
        DeviceConfigurationController.prototype.deleteUser = function (array, user) {
            _.pull(array, user);
        };
        DeviceConfigurationController.prototype.numConfigurableDevices = function () {
            var self = this;
            return _.filter(self.devices, function (device) {
                return self.$filter("isTypeChassis")(device) && device.chassisConfiguration.configChassis === true;
            }).length;
        };
        DeviceConfigurationController.prototype.hasFxChassis = function () {
            var self = this;
            return !!_.find(_.filter(self.devices, function (device) {
                return self.$filter("isTypeChassis")(device);
            }), { resourceType: 'ChassisFX' });
        };
        DeviceConfigurationController.prototype.doManageCredentials = function (updateType, credentialName) {
            var self = this, theTitle, theId, theName, canChangeCredentialType, editMode = false;
            ;
            if (updateType.toUpperCase() === "CREATE") {
                theTitle = self.$translate.instant('CREDENTIALS_CreateTitle');
                theId = "";
                canChangeCredentialType = true;
            }
            else {
                theTitle = self.$translate.instant('CREDENTIALS_EditTitle');
                switch (_.upperFirst(_.toLower(credentialName))) {
                    case 'Chassis':
                        theId = self.config.chassisCredentialId;
                        break;
                    case 'Server':
                        theId = self.config.bladeCredentialId;
                        break;
                    case 'Iom':
                        theId = self.config.iomCredentialId;
                        break;
                }
                canChangeCredentialType = false;
                editMode = true;
            }
            var theModal = self.Modal({
                title: theTitle,
                modalSize: 'modal-lg',
                templateUrl: 'views/credentials/editcredentials.html',
                controller: 'EditCredentialsController as editCredentialsController',
                params: {
                    source: 'device-config',
                    credential: editMode ? { id: theId } : undefined,
                    editMode: editMode,
                    canChangeCredentialType: canChangeCredentialType
                },
                onComplete: function (credentialId) {
                    self.GlobalServices.ClearErrors(self.errors);
                    self.loading(self.$q(function (resolve) {
                        self.getCredentials(credentialName)
                            .then(function (response) {
                            self.credentials[credentialName] = response.data.responseObj;
                        })
                            .catch(function (error) { self.GlobalServices.DisplayError(error, self.errors); })
                            .finally(function () { return resolve(); });
                    }));
                }
            });
            theModal.modal.show();
        };
        DeviceConfigurationController.prototype.doIPAddressing = function (updateType) {
            var self = this;
            var editNetworkModal = self.Modal({
                title: self.$translate.instant(updateType.toUpperCase() === "CREATE" ? "NETWORKS_Edit_CreateTitle" : "NETWORKS_Edit_EditTitle"),
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/editnetwork.html',
                controller: 'EditNetworkModalController as editNetwork',
                params: {
                    editMode: updateType
                },
                onComplete: function () {
                    //self.refresh();
                }
            });
            editNetworkModal.modal.show();
        };
        DeviceConfigurationController.prototype.getCredentials = function (type) {
            var self = this;
            return self.$http.post(self.commands.data.credential.getCredentialByType, { id: type });
        };
        DeviceConfigurationController.prototype.getTimeZones = function () {
            var self = this;
            return self.$http.post(self.commands.data.environment.getTimeZones, {});
        };
        DeviceConfigurationController.prototype.getNetworks = function () {
            var self = this;
            return self.$http.post(self.commands.data.networking.networks.getHardwareManagementNetworks, null);
        };
        DeviceConfigurationController.$inject = ["$http", "Commands", "$q", "$translate", "Loading", "GlobalServices", "Modal", "constants", "$filter"];
        return DeviceConfigurationController;
    }());
    angular.module("app")
        .component("deviceConfig", {
        templateUrl: "views/resources/deviceconfiguration.html",
        controller: DeviceConfigurationController,
        controllerAs: "deviceConfig",
        bindings: {
            config: "=",
            devices: "=?",
            editMode: "<?",
            networks: "<?",
            credentials: "<?",
            forms: "=?",
            errors: "=",
            redundancyPolicies: "=?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=deviceConfig.js.map
var asm;
(function (asm) {
    "use strict";
    var RackTableController = (function () {
        function RackTableController($http, commands, $q, $translate, loading, globalServices, Modal, constants, $filter, GlobalServices) {
            this.$http = $http;
            this.commands = commands;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.globalServices = globalServices;
            this.Modal = Modal;
            this.constants = constants;
            this.$filter = $filter;
            this.GlobalServices = GlobalServices;
            var self = this;
        }
        Object.defineProperty(RackTableController.prototype, "pending", {
            get: function () {
                var self = this;
                return self._pending;
            },
            set: function (value) {
                var self = this;
                self._pending = value;
                if (value === false) {
                    self.selectAll();
                }
            },
            enumerable: true,
            configurable: true
        });
        RackTableController.prototype.selectAll = function () {
            var self = this, val = !!_.find(self.rackList, { configureDevice: false });
            //determine whether should toggle all on or all off ^, then toggle all v
            angular.forEach(self.rackList, function (rack) { rack.configureDevice = val; });
        };
        RackTableController.prototype.getAllChecked = function () {
            var self = this;
            return !_.find(self.rackList, { configureDevice: false });
        };
        RackTableController.$inject = ["$http", "Commands", "$q", "$translate", "Loading", "GlobalServices", "Modal", "constants", "$filter", 'GlobalServices'];
        return RackTableController;
    }());
    angular.module("app")
        .component("rackTable", {
        templateUrl: "views/resources/racktable.html",
        controller: RackTableController,
        controllerAs: "rackTableController",
        bindings: {
            mode: "@",
            rackList: "=",
            pending: "<?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=rackTable.js.map
var asm;
(function (asm) {
    "use strict";
    var CredentialsSettings = (function () {
        function CredentialsSettings(Modal, dialog, $http, $timeout, $q, $translate, $window, GlobalServices, Loading, Commands, $scope) {
            this.Modal = Modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$window = $window;
            this.GlobalServices = GlobalServices;
            this.Loading = Loading;
            this.Commands = Commands;
            this.$scope = $scope;
            this.editMode = true;
            this.loadingCredentials = true;
            var self = this;
            self.refresh();
            self.id = "setting_" + self.setting.id + "_" + (self.setting.category ? self.setting.category.id : '') + "_" + (self.component ? self.component.id : '') + "_" + self.GlobalServices.NewGuid();
        }
        CredentialsSettings.prototype.refresh = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.getCredentialSummaryList()
                .then(function (response) {
                self.credentials = response.data.responseObj;
                self.loadingCredentials = false;
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
        };
        CredentialsSettings.prototype.addCredential = function (device) {
            var self = this;
            var theModal = self.Modal({
                title: self.$translate.instant('CREDENTIALS_CreateTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('creatingcredentials');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/credentials/editcredentials.html',
                controller: 'EditCredentialsController as editCredentialsController',
                params: {
                    editMode: false,
                    typeId: "os",
                    canChangeCredentialType: false
                },
                onComplete: function (credentialId) {
                    self.setting.value = credentialId;
                    var d = self.$q.defer();
                    self.Loading(d.promise);
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.getCredentialSummaryList()
                        .then(function (response) {
                        self.credentials = response.data.responseObj;
                        //self.$scope.$emit("CredentialListUpdate", self.credentials);
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
            });
            theModal.modal.show();
        };
        CredentialsSettings.prototype.getCredentialSummaryList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.credential.getCredentialByType, { id: 'os' });
        };
        CredentialsSettings.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', "$window", "GlobalServices", "Loading", "Commands", "$scope"];
        return CredentialsSettings;
    }());
    angular.module('app')
        .component('credentialsSettings', {
        templateUrl: 'views/services/credentialssettings.html',
        controller: CredentialsSettings,
        controllerAs: 'credentialsSettingsController',
        bindings: {
            setting: '=',
            readOnlyMode: '<?',
            component: '=?',
            category: '=?',
            form: '=?',
            errors: '=',
            credentials: '=?'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=credentialsSettings.js.map
var asm;
(function (asm) {
    var DeployServiceWizard = (function () {
        function DeployServiceWizard($scope, Modal, dialog, $http, $q, $timeout, Loading, GlobalServices, $translate, constants, commands, $location, $filter) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.$translate = $translate;
            this.constants = constants;
            this.commands = commands;
            this.$location = $location;
            this.$filter = $filter;
            /**
             Date picker docs:
            http://eonasdan.github.io/bootstrap-datetimepicker/
             */
            this.service = {
                scheduleType: "deploynow"
            };
            this.datePicker = {
                options: {
                    format: "L hh:mm A",
                    minDate: moment()
                },
                selectedDate: moment().add(1, 'hour')
            };
            this.forms = { step3: {} };
            this.invalidArray = [];
            this.errors = new Array();
            var self = this;
            //if deploying an existing template, otherwise we're creating a new template to deploy
            if (self.$scope.modal.params.templateId) {
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.getTemplateBuilder(self.$scope.modal.params.templateId, true)
                    .then(function (response) {
                    self.service.template = response.data.responseObj;
                    angular.extend(self.service, self.service.template);
                })
                    .catch(function (error) { return self.GlobalServices.DisplayError(error.data, self.errors); })
                    .finally(function () { return d.resolve(); });
            }
        }
        DeployServiceWizard.prototype.validateStep1 = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                if (self.forms.step1.$valid) {
                    self.GlobalServices.ClearErrors(self.errors);
                    return resolve();
                }
                self.forms.step1._submitted = true;
                reject();
            });
        };
        DeployServiceWizard.prototype.settingVisible = function (setting, component) {
            var self = this;
            if (!setting || !component)
                return true;
            if (setting.dependencyTarget && setting.dependencyValue) {
                var targetSetting = null;
                $.each(component.categories, function (ix, c) {
                    var matchingSetting = _.find(c.settings, function (s) { return (s.id == setting.dependencyTarget); });
                    if (matchingSetting) {
                        targetSetting = matchingSetting;
                        return;
                    }
                });
                var matchingValue = false;
                if (targetSetting && targetSetting.value != null) {
                    var settingvalues = setting.dependencyValue.split(',');
                    $.each(settingvalues, function (idx, val) {
                        if (val.toString() === targetSetting.value.toString())
                            matchingValue = true;
                    });
                }
                return matchingValue && self.settingVisible(targetSetting, component);
            }
            return true;
        };
        DeployServiceWizard.prototype.categoryVisible = function (category, component) {
            var self = this;
            var deploySettings = self.$filter('deploysettings')(category.settings);
            return _.find(deploySettings, function (setting) { return self.settingVisible(setting, component); });
        };
        DeployServiceWizard.prototype.componentVisible = function (component) {
            var self = this;
            return !!_.find(component.categories, function (category) { return self.categoryVisible(category, component); });
        };
        DeployServiceWizard.prototype.viewDetails = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('TEMPLATES_TEMPLATESETTINGS_MODAL_TemplateSettings'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templatebuilder/viewtemplatedetailsmodal.html',
                controller: 'ViewTemplateDetailsModalController as viewTemplateDetailsModalController',
                params: {
                    template: self.service.template
                }
            });
            modal.modal.show();
        };
        DeployServiceWizard.prototype.validateStep2 = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                if (self.forms.step2.$valid) {
                    self.GlobalServices.ClearErrors(self.errors);
                    resolve();
                }
                else {
                    self.forms.step2._submitted = true;
                    reject();
                }
            });
        };
        DeployServiceWizard.prototype.validateStep3 = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                if (self.forms.step3.$valid && !self.timeInvalid()) {
                    self.GlobalServices.ClearErrors(self.errors);
                    resolve();
                }
                else {
                    self.forms.step3._submitted = true;
                    reject();
                }
            });
        };
        DeployServiceWizard.prototype.timeInvalid = function () {
            var self = this;
            return self.service.scheduleType === 'schedule' && (!self.datePicker.selectedDate || moment().isAfter(self.datePicker.selectedDate.toISOString()));
        };
        DeployServiceWizard.prototype.finishWizard = function () {
            var self = this;
            if (self.timeInvalid()) {
                return;
            }
            ;
            self.service.scheduleDate = self.service.scheduleType === "schedule"
                ? self.datePicker.selectedDate.toISOString()
                : "";
            self.generateService();
        };
        DeployServiceWizard.prototype.generateService = function () {
            var self = this, d = self.$q.defer();
            self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_Areyousureyouwishtodeploythisservice'))
                .then(function () {
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.createService(self.service)
                    .then(function (response) {
                    self.$timeout(function () {
                        self.$location.path("service/" + response.data.responseObj.id + "/details");
                    }, 500);
                    self.close();
                })
                    .catch(function (error) {
                    self.GlobalServices.DisplayError(error.data, self.errors);
                    //if (error.data.fldErrors.length) {
                    //    self.customErrors.push(error.data);
                    self.$timeout(function () {
                        $("#erroripverification_link")
                            .click(function (e) {
                            self.close();
                            self.$location.path("settings/VirtualApplianceManagement");
                        });
                    });
                    //} else {
                    //    self.GlobalServices.DisplayError(error.data, self.errors);
                    //}
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        DeployServiceWizard.prototype.createService = function (service) {
            var self = this;
            return self.$http.post(self.commands.data.services.createService, service);
        };
        DeployServiceWizard.prototype.getTemplateBuilder = function (templateId, deploy) {
            var self = this;
            return self.$http.post(self.commands.data.templates.getTemplateBuilderById, { id: templateId, deploy: deploy });
        };
        DeployServiceWizard.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DeployServiceWizard.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        DeployServiceWizard.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', '$translate', 'constants', 'Commands', '$location', '$filter'];
        return DeployServiceWizard;
    }());
    asm.DeployServiceWizard = DeployServiceWizard;
    angular
        .module("app")
        .controller("DeployServiceWizard", DeployServiceWizard);
})(asm || (asm = {}));
//# sourceMappingURL=deployServiceWizard.js.map
var asm;
(function (asm) {
    "use strict";
    var ResourceTablesController = (function () {
        function ResourceTablesController(modal, dialog, $http, $timeout, $q, $translate, $window, GlobalServices) {
            this.modal = modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$window = $window;
            this.GlobalServices = GlobalServices;
            this.warning = "warning";
        }
        Object.defineProperty(ResourceTablesController.prototype, "resources", {
            get: function () {
                var self = this;
                return self._resources;
            },
            set: function (newValue) {
                var self = this;
                if (!angular.equals(self.resources, newValue)) {
                    self._resources = newValue;
                    self.refresh();
                }
            },
            enumerable: true,
            configurable: true
        });
        ResourceTablesController.prototype.refresh = function () {
            var self = this;
            if (self.mode === "inventory" || self.mode === "detail") {
                self.resources = angular.copy(self.resources);
            }
            self.flattenVolumes();
            angular.extend(self.resources, {
                available: {
                    clusters: _.filter(self.resources.clusterlist, function (cluster) { return self.availableInventory(cluster.state); }).length,
                    servers: _.filter(self.resources.serverlist, function (server) { return self.availableInventory(server.state); }).length,
                    storages: _.filter(self.resources.storagelist, function (storage) { return self.availableInventory(storage.state); }).length,
                    scaleios: _.filter(self.resources.scaleiolist, function (scaleio) { return self.availableInventory(scaleio.state); }).length
                }
            });
            //get values for name and status
            angular.forEach([
                self.resources.applicationlist,
                self.resources.vmlist,
                self.resources.clusterlist,
                self.resources.serverlist,
                self.resources.storagelist,
                self.resources.scaleiolist
            ], function (array) {
                _.forEach(array, function (app) {
                    angular.extend(app, {
                        component: _.find(self.resources.components, { id: app.id }),
                        _status: self.getComponentStatus(app.id),
                        available: self.availableInventory(app.state)
                    });
                });
            });
            //testing code
            //console.log('self.resources:  ');
            //console.log(JSON.stringify(self.resources));
        };
        ResourceTablesController.prototype.flattenVolumes = function () {
            var self = this;
            angular.forEach(self.resources.scaleiolist, function (scaleio) {
                scaleio.volumes = [];
                angular.forEach(scaleio.storagePools, function (storagePool) {
                    angular.forEach(storagePool.scaleIOStorageVolumes, function (volume) { return scaleio.volumes.push(volume); });
                });
            });
        };
        ResourceTablesController.prototype.isNew = function (component) {
            var self = this;
            return component.brownfieldStatus === "new";
        };
        ResourceTablesController.prototype.availableInventory = function (state) {
            return !(state === 'unmanaged' || state === 'updating');
        };
        ResourceTablesController.prototype.getComponentStatus = function (id) {
            var self = this;
            var match = _.find(self.resources.componentstatus, function (cs) { return (cs.componentid === id); });
            switch (match ? match.resourcestate : "") {
                case 'pending':
                    return { icon: "pending", text: 'SETTINGS_Repositories_Pending' };
                case 'inprogress':
                    return { icon: "inprogress", text: 'GENERIC_InProgress' };
                case 'complete':
                    return { icon: "success", text: 'GENERIC_Deployed' };
                case 'error':
                    return { icon: "critical", text: 'GENERIC_Critical' };
                case 'cancelled':
                    return { icon: "cancelled", text: 'GENERIC_Cancelled' };
                case 'servicemode':
                    return { icon: "servicemode", text: 'GENERIC_ServiceMode' };
                case 'warning':
                    return { icon: "warning", text: 'GENERIC_Warning' };
            }
        };
        ;
        ResourceTablesController.prototype.goToIp = function (ip) {
            var self = this;
            self.$window.open(ip, "_blank");
        };
        ResourceTablesController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', "$window", "GlobalServices"];
        return ResourceTablesController;
    }());
    angular.module('app')
        .component('resourceTables', {
        templateUrl: 'views/services/resourcetables.html',
        controller: ResourceTablesController,
        controllerAs: 'resourceTablesController',
        bindings: {
            resources: '<',
            mode: '@'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=resourceTables.js.map
var asm;
(function (asm) {
    "use strict";
    var ServiceComponentPopoverController = (function () {
        function ServiceComponentPopoverController(Modal, dialog, $http, $timeout, $q, $translate, $scope, GlobalServices, loading, Commands, $location, constants) {
            this.Modal = Modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$scope = $scope;
            this.GlobalServices = GlobalServices;
            this.loading = loading;
            this.Commands = Commands;
            this.$location = $location;
            this.constants = constants;
        }
        ServiceComponentPopoverController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q',
            '$translate', '$scope', 'GlobalServices', 'Loading', 'Commands', '$location', 'constants'];
        return ServiceComponentPopoverController;
    }());
    angular.module('app')
        .component('serviceComponentPopover', {
        templateUrl: 'views/services/servicecomponentpopover.html',
        controller: ServiceComponentPopoverController,
        controllerAs: 'serviceComponentPopoverController',
        bindings: {
            selectedComponent: "<",
            viewLogs: "&",
            doMigrate: "&?",
            portviewServer: "&?",
            openFirmwareReport: "&?",
            service: "<"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=ServiceComponentPopover.js.map
var asm;
(function (asm) {
    var ServiceInformationController = (function () {
        function ServiceInformationController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, $translate, constants, commands, $filter) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.$translate = $translate;
            this.constants = constants;
            this.commands = commands;
            this.$filter = $filter;
            this.errors = new Array();
            this.templates = new Array();
            this.categories = new Array();
            this.firmwares = new Array();
            var self = this;
            self.activate();
        }
        ServiceInformationController.prototype.activate = function () {
            var self = this;
            //RCM is now required, so this field must be true (it used to be a checkbox)
            self.service.manageFirmware = true;
            self.uniqueId = self.GlobalServices.NewGuid();
            self.GlobalServices.ClearErrors(self.errors);
            self.getTemplates()
                .then(function (data) {
                self.templates = data.data.responseObj;
                //if service has a template tied to it already set that as default
                if (self.service.template && self.service.template.id) {
                    angular.forEach(self.templates, function (template) {
                        if (template.id === self.service.template.id) {
                            self.selectedDropdownTemplate = template;
                        }
                    });
                }
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
            self.getFirmwares();
            self.service._allStandardUsers = self.get_allStandardusers(self.service);
        };
        //Called on change of templates dropdown
        ServiceInformationController.prototype.getTemplate = function (id) {
            var self = this;
            if (!id) {
                return;
            }
            self.GlobalServices.ClearErrors(self.errors);
            return self.Loading(self.getTemplateById(id)
                .then(function (response) {
                self.service = self.updateTemplateInService(self.service, response.data.responseObj);
                self.service._allStandardUsers = self.get_allStandardusers(self.service);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            }));
        };
        ServiceInformationController.prototype.updateTemplateInService = function (service, template) {
            //move properties from template (updated) into service and redefine service's "template" property to be template (updated)
            return angular.extend(service, template, { template: template });
        };
        ServiceInformationController.prototype.getFirmwares = function () {
            var self = this;
            self.$http.post(self.commands.data.firmwarepackages.getAvailableFirmwarePackages, {})
                .then(function (response) {
                self.firmwares = [
                    {
                        id: 'usedefaultcatalog',
                        name: self.$translate.instant("SERVICE_DETAIL_EditService_UseASMappliancedefaultcatalog"),
                        defaultpackage: false
                    }
                ].concat(response.data.responseObj);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
        };
        ServiceInformationController.prototype.updateAllStandardUsersProp = function (context) {
            switch (context._allStandardUsers) {
                case "admins":
                    context.assignedUsers = [];
                    context.allStandardUsers = false;
                    break;
                case "specific":
                    context.allStandardUsers = false;
                    break;
                case "allStandard":
                    context.assignedUsers = [];
                    context.allStandardUsers = true;
                    break;
            }
        };
        ServiceInformationController.prototype.get_allStandardusers = function (context) {
            return context.allStandardUsers
                ? "allStandard"
                : (context.assignedUsers && context.assignedUsers.length ? "specific" : "admins");
        };
        ServiceInformationController.prototype.getTemplates = function () {
            var self = this;
            return self.$http.post(self.commands.data.templates.getReadyTemplateList, {});
        };
        ServiceInformationController.prototype.getTemplateById = function (id) {
            var self = this; //change whether it deploys to a parameter passed in, pass param in wherever this component is used
            return self.$http.post(self.commands.data.templates.getTemplateBuilderById, { id: id, deploy: self.deploying });
        };
        ServiceInformationController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', '$translate', 'constants', 'Commands', '$filter'];
        return ServiceInformationController;
    }());
    asm.ServiceInformationController = ServiceInformationController;
    angular.module('app')
        .component('serviceInformation', {
        templateUrl: 'views/services/deployservice/serviceinformation.html',
        controller: ServiceInformationController,
        controllerAs: 'serviceInformationController',
        bindings: {
            service: '=',
            form: '=?',
            deploying: "=",
            readOnly: "<?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=serviceInformation.js.map
var asm;
(function (asm) {
    "use strict";
    var ServiceSvgHealthIconController = (function () {
        function ServiceSvgHealthIconController($scope) {
            this.$scope = $scope;
            var self = this;
            self.health = self.$scope.health;
        }
        ServiceSvgHealthIconController.$inject = ["$scope"];
        return ServiceSvgHealthIconController;
    }());
    angular.module('app').
        directive('serviceSvgHealthIcon', [function serviceSvgHealthIcon() {
            return {
                restrict: 'E',
                templateUrl: 'views/services/servicesvghealthicon.html',
                replace: true,
                transclude: false,
                controller: ServiceSvgHealthIconController,
                controllerAs: 'serviceSvgHealthIconController',
                templateNamespace: 'svg',
                scope: {
                    health: '<'
                }
            };
        }]);
})(asm || (asm = {}));
//# sourceMappingURL=serviceSvgHealthIcon.js.map
var asm;
(function (asm) {
    "use strict";
    var ServiceTileController = (function () {
        function ServiceTileController(modal, dialog, $http, $timeout, $q, $translate) {
            this.modal = modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.actions = {};
            var self = this;
            angular.extend(self.actions, { getClasses: function (param) { return self.getClasses(param); } });
        }
        //showTransparency comes as a boolean when coming from the filter by 'All' tiles which require transparency when their count is zero and a boolean comes from the side panel also which is always false
        //other service tiles will only need the translucent layer when their tile matches the side panel
        ServiceTileController.prototype.getClasses = function (tile) {
            var self = this;
            var classes = new Array();
            classes.push('thumbnail-service');
            switch (tile.dropdown) {
                case 'red':
                    classes.push('red');
                    break;
                case 'green':
                    classes.push('green');
                    break;
                case 'pending':
                    classes.push('pending');
                    break;
                case 'unknown':
                    classes.push('blue');
                    break;
                case 'yellow':
                    classes.push('yellow');
                    break;
                case 'cancelled':
                    classes.push('cancelled');
                    break;
            }
            return classes.join(" ");
        };
        ServiceTileController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate'];
        return ServiceTileController;
    }());
    angular.module('app')
        .component('serviceTile', {
        templateUrl: 'views/services/servicetile.html',
        controller: ServiceTileController,
        controllerAs: 'serviceTileController',
        bindings: {
            selectedItem: '=',
            tileInfo: '=',
            disabled: "<?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=serviceTile.js.map
var asm;
(function (asm) {
    "use strict";
    var TemplateComponentPopoverController = (function () {
        function TemplateComponentPopoverController(Modal, dialog, $http, $timeout, $q, $translate, $scope, GlobalServices, loading, Commands, $location) {
            this.Modal = Modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$scope = $scope;
            this.GlobalServices = GlobalServices;
            this.loading = loading;
            this.Commands = Commands;
            this.$location = $location;
        }
        TemplateComponentPopoverController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q',
            '$translate', '$scope', 'GlobalServices', 'Loading', 'Commands', '$location'];
        return TemplateComponentPopoverController;
    }());
    angular.module('app')
        .component('templateComponentPopover', {
        templateUrl: 'views/templatebuilder/templatecomponentpopover.html',
        controller: TemplateComponentPopoverController,
        controllerAs: 'templateComponentPopoverController',
        bindings: {
            component: "=",
            mode: "=",
            editComponent: "&",
            cloneComponent: "&",
            deleteComponent: "&"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=TemplateComponentPopover.js.map
var asm;
(function (asm) {
    'use strict';
    var BasicSettingController = (function () {
        function BasicSettingController($rootScope) {
            this.$rootScope = $rootScope;
            this.editMode = true;
            var self = this;
            if (self.filterOverwrite()) {
                self.filteredoptions = self.filterOverwrite;
            }
            if (self.setting.readOnly || self.readOnlyMode) {
                self.editMode = false;
            }
            //self.setting.value is already set to a default value (sometimes -1, sometimes other values) by the backend so no need to set it again
            //if (self.setting.options.length > 0 && !self.setting.value) {
            //    var options = self.filteredoptions(self.setting, self.component);
            //    var possibleDefault = _.find(options, { id: '-1' });
            //    self.setting.value = possibleDefault ? possibleDefault.id : null;
            //}
            self.id = "setting_" + self.setting.id + "_" + (self.setting.category ? self.setting.category.id : '') + "_" + (self.component ? self.component.id : '') + "_";
            self.id += self.$rootScope.ASM.NewGuid();
            self.updateValueArray();
        }
        BasicSettingController.prototype.updateValueArray = function () {
            var self = this;
            self.setting.valuearray = self.getValueArray(self.setting);
            self.setting.valuearraydisplay = self.getValueArrayDisplay(self.setting);
        };
        BasicSettingController.prototype.filteredoptions = function (setting, component) {
            if (!setting || !component)
                return [];
            var returnVal = [];
            $.each(setting.options, function (optionIndex, option) {
                if (option.dependencyTarget && option.dependencyValue) {
                    var targetSetting = null;
                    $.each(component.categories, function (categoryIndex, c) {
                        var matchingSetting = _.find(c.settings, function (s) {
                            return (s.id === option.dependencyTarget);
                        });
                        if (matchingSetting) {
                            targetSetting = matchingSetting;
                            return;
                        }
                    });
                    var matchingValue = false;
                    if (targetSetting && targetSetting.value != null) {
                        var settingvalues = option.dependencyValue.split(',');
                        $.each(settingvalues, function (idx, val) {
                            if (val.toString() === targetSetting.value.toString())
                                matchingValue = true;
                        });
                    }
                    if (matchingValue) {
                        returnVal.push(option);
                    }
                }
                else {
                    returnVal.push(option);
                }
            });
            if (returnVal.length > 0 && !setting.multiple) {
                var valueExists = _.find(returnVal, function (s) {
                    return (s.id === setting.value);
                });
                if (!valueExists) {
                    setting.value = returnVal[0].id;
                }
            }
            return returnVal;
        };
        BasicSettingController.prototype.checkboxSettingClicked = function (id, evt) {
            var self = this;
            var value = self.setting.value;
            var tmpArray = (value == null || value === '') ? [] : value.split(',');
            if (evt.currentTarget.checked) {
                tmpArray.push(id);
            }
            else {
                tmpArray = _.without(tmpArray, id);
            }
            //    self.$timeout(function() {
            self.setting.value = tmpArray.join(',');
            //    }, 0);
            self.updateValueArray();
        };
        BasicSettingController.prototype.getValueArray = function (setting) {
            //if null return blank, if string split, if object return blank
            return setting.value == null ? '' :
                angular.isString(setting.value) ? setting.value.split(',') : '';
        };
        BasicSettingController.prototype.getValueArrayDisplay = function (setting) {
            var selectedoptions = setting.value == null ? [] :
                angular.isString(setting.value) ? setting.value.split(',') : [], returnval = [];
            if (setting.options.length) {
                angular.forEach(setting.options, function (c) {
                    if (selectedoptions.indexOf(c.id) !== -1)
                        returnval.push(c.name);
                });
            }
            return returnval.join(', ');
        };
        BasicSettingController.$inject = ['$rootScope'];
        return BasicSettingController;
    }());
    angular.module('app')
        .component('basicSetting', {
        templateUrl: 'views/basicsetting.html',
        controller: BasicSettingController,
        controllerAs: 'basicSetting',
        bindings: {
            setting: '=',
            readOnlyMode: '<?',
            component: '=?',
            category: '=?',
            form: '=?',
            filterOverwrite: "&"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=basicsetting.js.map
var asm;
(function (asm) {
    "use strict";
    var GroupedGridController = (function () {
        function GroupedGridController(Modal, Dialog, $http, $timeout, $q, $translate, $scope, GlobalServices) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$scope = $scope;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.refreshCategories();
        }
        GroupedGridController.prototype.refreshCategories = function () {
            var self = this;
            self.categories = [];
            var groupedCategories = _.groupBy(self.list, 'category');
            for (var category in groupedCategories) {
                if (groupedCategories.hasOwnProperty(category)) {
                    self.categories.push({ 'name': category, 'count': groupedCategories[category].length });
                }
            }
        };
        GroupedGridController.prototype.changeCategory = function (categoryName) {
            var self = this;
            self.filterBy = categoryName;
            self.$timeout(function () { return self.updateArrays(); });
        };
        GroupedGridController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$scope', 'GlobalServices'];
        return GroupedGridController;
    }());
    angular.module('app')
        .component('groupedGrid', {
        templateUrl: 'views/templates/groupedgrid.html',
        controller: GroupedGridController,
        controllerAs: 'group',
        bindings: {
            list: '<',
            filterBy: '=',
            updateArrays: '&'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=groupedGrid.js.map
var asm;
(function (asm) {
    'use strict';
    var NIOCController = (function () {
        function NIOCController(GlobalServices, $translate) {
            this.GlobalServices = GlobalServices;
            this.$translate = $translate;
            this.editMode = true;
            this.validityObj = {
                id: this.GlobalServices.NewGuid(),
                invalid: false
            };
            this.propertyNames = ["management", "vmotion", "vsan", "vdp", "faultTolerance", "virtualMachine", "iSCSI", "nfs", "hbr"];
            var self = this;
            self.id = "setting_" + self.setting.id + "_" + (self.setting.category ? self.setting.category.id : '') + "_" + (self.component ? self.component.id : '');
            if (self.setting.readOnly || self.readOnlyMode) {
                self.editMode = false;
            }
            if (!self.invalidArray) {
                self.invalidArray = [];
            }
            if (!self.setting.value) {
                self.setting.value = {};
            }
            else {
                self.setting.value = angular.fromJson(self.setting.value);
            }
            self.refresh();
        }
        NIOCController.prototype.refresh = function () {
            var self = this;
            //push an object into invalidArray for each pool
            angular.forEach(self.propertyNames, function (propName) {
                var value = self.getPoolValue(propName);
                if (!angular.isNumber(value)) {
                    //set default value to its default if there is none
                    self.setPoolValue(propName, propName === "virtualMachine" ? 100 : 50);
                }
                if (self.setting.value.configure) {
                    //initialize invalid array object for this input so that it can be seen by parent
                    self.invalidArray
                        .push({ id: self.getInputName(propName), invalid: self.inputInvalid(propName) });
                }
                else {
                    //remove invalid array object for this input if there is one
                    _.remove(self.invalidArray, { id: self.getInputName(propName) });
                }
            });
        };
        NIOCController.prototype.$onDestroy = function () {
            var self = this;
            //clear all invalid array objects out before destroying (switching from distributed switch type to standard)
            self.setting.value.configure = false;
            self.refresh();
        };
        NIOCController.prototype.getInputName = function (propName) {
            return "value_" + propName + "_" + this.id;
        };
        //everything below this is only used if validation is used
        NIOCController.prototype.invalidKinds = function (poolValue) {
            //returns object with properties relating to whether an pool value is valid or not
            return {
                empty: poolValue == null || angular.isUndefined(poolValue),
                outOfBounds: (poolValue > 100 || poolValue < 1),
                min: poolValue < 1,
                max: poolValue > 100
            };
        };
        NIOCController.prototype.setPoolValue = function (propName, value) {
            var self = this;
            self.setting.value[propName] = value;
        };
        NIOCController.prototype.getPoolValue = function (propName) {
            var self = this;
            return self.setting.value[propName];
        };
        NIOCController.prototype.inputInvalid = function (propName) {
            var self = this;
            var value = self.getPoolValue(propName);
            var invalid = self.invalidKinds(value);
            return invalid.empty || invalid.outOfBounds;
        };
        NIOCController.prototype.getValidationMessage = function (propName) {
            //returns validation message to the view
            var self = this;
            var value = self.getPoolValue(propName);
            var invalid = self.invalidKinds(value);
            if (self.inputInvalid(propName)) {
                if (invalid.empty) {
                    return self.$translate.instant("GENERIC_RequiredField");
                }
                else if (invalid.outOfBounds) {
                    if (invalid.min) {
                        return self.$translate.instant("VALIDATIONMESSAGES_minNumber", { min: 1 });
                    }
                    else if (invalid.max) {
                        return self.$translate.instant("VALIDATIONMESSAGES_maxNumber", { max: 100 });
                    }
                }
            }
        };
        NIOCController.prototype.getInputStyle = function (propName) {
            //if it's invalid, mark it with red border, otherwise gray border
            //this prevents bootstrap from marking all under a .form-group.ng-invalid > .form-control with red border
            var self = this;
            if (self.form && self.form._submitted && self.inputInvalid(propName)) {
                return { "border": "1px solid #ce1126" };
            }
        };
        NIOCController.prototype.inputChanged = function (propName) {
            //if input is reqired, set its coresponding object in invalid array to its validity
            var self = this;
            _.find(self.invalidArray, { id: self.getInputName(propName) }).invalid = self.inputInvalid(propName);
        };
        NIOCController.prototype.checkboxToggled = function () {
            var self = this;
        };
        NIOCController.$inject = ['GlobalServices', "$translate"];
        return NIOCController;
    }());
    angular.module('app')
        .component('niocSetting', {
        templateUrl: 'views/nioc.html',
        controller: NIOCController,
        controllerAs: 'niocController',
        bindings: {
            setting: '=',
            readOnlyMode: '<?',
            component: '=?',
            category: '=?',
            form: '=?',
            invalidArray: "=?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=nioc.js.map
var asm;
(function (asm) {
    "use strict";
    var TemplateTileController = (function () {
        function TemplateTileController(modal, dialog, $http, $timeout, $q, $translate) {
            this.modal = modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            var self = this;
            angular.extend(self.actions, {
                getClasses: function (param) { return self.getClasses(param); }
            });
        }
        TemplateTileController.prototype.getClasses = function (tile) {
            var self = this;
            var classes = new Array();
            classes.push('thumbnail-template');
            //May need to add this back in if visual design direction changes -MH
            //if (tile.isTemplateValid === false) {
            //    classes.push('template-warning');
            //}
            //else if (tile.isLocked === true) {
            //    classes.push('template-example');
            //} else if (tile.draft === true) {
            //    classes.push('draft');
            //}
            if (tile.isLocked === true) {
                classes.push('template-example');
            }
            else if (tile.draft === true) {
                classes.push('draft');
            }
            return classes.join(" ");
        };
        TemplateTileController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate'];
        return TemplateTileController;
    }());
    angular.module('app')
        .component('templateTile', {
        templateUrl: 'views/templates/templatetile.html',
        controller: TemplateTileController,
        controllerAs: 'templateTileController',
        bindings: {
            selectedItem: '=',
            tileInfo: '=',
            actions: '=',
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=templateTile.js.map
var asm;
(function (asm) {
    "use strict";
    var TileController = (function () {
        function TileController(Modal, Dialog, $http, $timeout, $q, $translate, $scope, GlobalServices, $location) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$scope = $scope;
            this.GlobalServices = GlobalServices;
            this.$location = $location;
            var self = this;
            self.isTemplate = self.type === "template";
            self.isService = self.type === "service";
        }
        TileController.prototype.clearToolTips = function () {
            $('.tooltip').remove();
        };
        TileController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$scope', 'GlobalServices', '$location'];
        return TileController;
    }());
    angular.module('app')
        .component('tile', {
        templateUrl: 'views/tiles/tile.html',
        controller: TileController,
        controllerAs: 'tileController',
        bindings: {
            selectedItem: '<',
            tileInfo: '<',
            hideActions: '<',
            actions: '<',
            type: '@',
            disabled: "<?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=tile.js.map
var asm;
(function (asm) {
    "use strict";
    var NetworksController = (function () {
        function NetworksController($http, $timeout, $q, Modal, Dialog, $filter, Loading, $translate, Commands, GlobalServices, constants, $window) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$filter = $filter;
            this.Loading = Loading;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$window = $window;
            this.errors = new Array();
            var self = this;
            self.networkTypes = [];
            self.currentView = "all";
            self.StaticIPAddressDetailsViews = constants.staticIPAddressDetailsViews;
            self.deferred = self.$q.defer();
            self.refresh();
        }
        NetworksController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.loadNetworkTypes()
                    .then(function (data) {
                    self.networkTypes = data.data.responseObj;
                }),
                self.getNetworksList()
                    .then(function (data) {
                    //apply default sort so selecting first will work
                    var sortedData = _.sortBy(data.data.responseObj, function (n) {
                        return n.name.toLowerCase();
                    });
                    self.networkData = sortedData;
                    self.displayedNetworkData = [].concat(self.networkData);
                    //testing code
                    //console.log('self.networkData:');
                    //console.log(JSON.stringify(self.networkData));
                    var selectedNet = null;
                    if (self.selectedNetworkId != null) {
                        selectedNet = _.find(self.networkData, { id: self.selectedNetworkId });
                    }
                    if (selectedNet == null) {
                        selectedNet = self.displayedNetworkData[0];
                        self.click_tableRow(selectedNet);
                    }
                    self.onNetworkSelected(selectedNet);
                })
            ])
                .then(function () {
                self.networkData = self.mapNetworkNames(self.networkData, self.networkTypes);
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                .finally(function () { return d.resolve(); });
        };
        ;
        NetworksController.prototype.mapNetworkNames = function (networkData, networkTypes) {
            return angular.forEach(networkData, function (network) {
                var match = _.find(networkTypes, { id: network.typeid });
                if (match) {
                    network._networkName = match.networkType;
                }
            });
        };
        NetworksController.prototype.onNetworkSelected = function (network, ipRange) {
            var self = this;
            if (network) {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                //this call must be async: false
                self.getNetworkById(network.id)
                    .then(function (data) {
                    self.selectedNetwork = data.data.responseObj;
                    self.selectedNetworkId = self.selectedNetwork.id;
                    if (self.selectedNetwork.staticordhcp == 'Static') {
                        //update static ip address details counts on network selection, based on selectedNetwork
                        self.totalIPAddresses_display = self.selectedNetwork.staticipaddressdetails.length;
                        self.inUseIPAddresses_display = _.filter(self.selectedNetwork.staticipaddressdetails, { state: 'inuse' }).length;
                        self.staticipaddressdetails_copy = self.selectedNetwork.staticipaddressdetails.slice(0, self.selectedNetwork.staticipaddressdetails.length);
                        if (self.selectedElement == 'filterDetails') {
                            self.totalIPAddresses_display = ipRange.totalIPAddresses;
                            self.inUseIPAddresses_display = ipRange.inUseIPAddresses;
                            //if one of the in use links was clicked, reset filter to inuse
                            self.currentView = 'inuse';
                            self.updateClientFilter();
                        }
                        else {
                            //reset the filter to all with each network row change or same-row click that is not on a link
                            //if one of the in use links was not clicked, reset filter to all
                            self.currentView = 'all';
                            self.updateClientFilter();
                        }
                    }
                }).catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                    .finally(function () { return d.resolve(); });
            }
        };
        NetworksController.prototype.updateClientFilter = function () {
            var self = this;
            var ipaddress1;
            var ipaddress2;
            if (self.staticipaddressdetails_copy.length == 0)
                return;
            self.selectedNetwork.staticipaddressdetails = [];
            self.selectedNetwork.staticipaddressdetails = self.staticipaddressdetails_copy.slice(0, self.staticipaddressdetails_copy.length);
            if (self.startingIpAddress != null && self.endingIpAddress != null) {
                ipaddress1 = self.$filter('ip2long')(self.startingIpAddress);
                ipaddress2 = self.$filter('ip2long')(self.endingIpAddress);
            }
            var filteredData = self.selectedNetwork.staticipaddressdetails.filter(function (item) {
                return (((self.currentView == 'all' && (item.state == 'available' || item.state == 'inuse')) || (item.state == self.currentView)) &&
                    ((ipaddress1 == '' && ipaddress2 == '') || (self.$filter('ip2long')(item.ipAddress) >= ipaddress1 && self.$filter('ip2long')(item.ipAddress) <= ipaddress2)));
            });
            self.selectedNetwork.staticipaddressdetails = [];
            self.selectedNetwork.staticipaddressdetails = filteredData.slice(0, filteredData.length);
            //smart table works by starting with data from st-safe-src (treating that one as safe), and then uses data from st-table for the actual display and paging of the data,
            //so another array is needed for this displayed data source
            self.selectedNetwork.staticipaddressdetails_displayed = [].concat(self.selectedNetwork.staticipaddressdetails);
        };
        NetworksController.prototype.click_tableRow = function (clickedItem) {
            //click on TR
            //self.selectedNetwork = network;
            var self = this;
            var network = clickedItem;
            self.selectedElement = 'row';
            self.startingIpAddress = '';
            self.endingIpAddress = '';
            //var currentTarget = evt.target;
            //while (currentTarget.nodeName != 'TR') {
            //    //we are on a child node
            //    currentTarget = currentTarget.parentNode;
            //}
            ////we are now on the TR node so dataFor will now apply to the correct element
            //var network = ko.dataFor(currentTarget);
            self.onNetworkSelected(network);
        };
        NetworksController.prototype.click_IPAddressRange = function (clickedItem1, clickedItem2) {
            //click on class filterDetails
            var self = this;
            var network = clickedItem1;
            var ipRange = clickedItem2;
            self.selectedElement = 'filterDetails';
            self.startingIpAddress = ipRange.startingIpAddress;
            self.endingIpAddress = ipRange.endingIpAddress;
            //self.Loading(self.deferred.promise);
            self.onNetworkSelected(network, ipRange);
            //self.totalIPAddresses_display = ipRange.totalIPAddresses;
            //self.inUseIPAddresses_display = ipRange.inUseIPAddresses;
        };
        NetworksController.prototype.deleteNetwork = function () {
            var self = this;
            //Confirmation Dialog box that fires delete on confirmation
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('NETWORKS_ConfirmDelete'))).then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.deleteNetworkById(self.selectedNetwork.id)
                    .then(function (data) {
                    self.refresh();
                }).catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                    .finally(function () { return d.resolve(); });
            });
        };
        NetworksController.prototype.doDownload = function (type) {
            var self = this;
            var deferred = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(deferred.promise);
            self.processDownloadRequests('initial', '', type, deferred);
        };
        NetworksController.prototype.processDownloadRequests = function (call, id, type, deferred) {
            var self = this;
            var urlToCall;
            var data;
            urlToCall = self.Commands.data.downloads.status;
            data = { 'id': id };
            if (call == 'initial') {
                urlToCall = self.Commands.data.downloads.create;
                if (type == 'networkdetails') {
                    data = { 'type': type, 'id': self.selectedNetworkId };
                }
                else {
                    data = { 'type': type };
                }
            }
            self.$http.post(urlToCall, { requestObj: data })
                .then(function (data) {
                switch (data.data.responseObj.status) {
                    case 'NOT_READY':
                        self.$timeout(function () {
                            self.processDownloadRequests('status', data.data.responseObj.id, type, deferred);
                        }, 5000);
                        break;
                    case 'READY':
                        self.$window.location.assign("downloads/getfile/" + data.data.responseObj.id);
                        deferred.resolve();
                        break;
                    case 'ERROR':
                        deferred.resolve();
                        self.GlobalServices.DisplayError(data.data);
                        break;
                }
            }).catch(function (data) {
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        NetworksController.prototype.doUpdates = function (updateType) {
            var self = this;
            var title;
            var helptoken;
            //add/create or edit
            switch (updateType.toUpperCase()) {
                case 'CREATE':
                    //title = 'Define Network';
                    title = self.$translate.instant('NETWORKS_Edit_CreateTitle');
                    helptoken = 'networksaddingediting';
                    self.selectedNetworkId = '';
                    break;
                case 'EDIT':
                    //title = 'Edit Network';
                    title = self.$translate.instant('NETWORKS_Edit_EditTitle');
                    helptoken = 'networksaddingediting';
                    break;
            }
            var editNetworkModal = this.Modal({
                title: title,
                onHelp: function () {
                    self.GlobalServices.showHelp(helptoken);
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/editnetwork.html',
                controller: 'EditNetworkModalController as editNetwork',
                params: {
                    editMode: updateType,
                    id: self.selectedNetworkId
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            editNetworkModal.modal.show();
        };
        NetworksController.prototype.loadNetworkTypes = function () {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworkTypes, { 'scaleup': false });
        };
        NetworksController.prototype.getNetworksList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworksList, {});
        };
        NetworksController.prototype.getNetworkById = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworkById, { id: id });
        };
        NetworksController.prototype.deleteNetworkById = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.deleteNetwork, { id: id });
        };
        NetworksController.$inject = ['$http', '$timeout', '$q', 'Modal', 'Dialog', '$filter',
            'Loading', '$translate', 'Commands', 'GlobalServices', 'constants', "$window"];
        return NetworksController;
    }());
    function networks() {
        return {
            restrict: 'E',
            templateUrl: 'views/networking/networks/networks.html',
            replace: true,
            transclude: false,
            controller: NetworksController,
            controllerAs: 'networks',
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('networks', networks);
})(asm || (asm = {}));
//# sourceMappingURL=networksdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var AddonmodulesController = (function () {
        function AddonmodulesController(Dialog, $http, $timeout, $q, $translate, Modal, GlobalServices, Commands, Loading, $filter) {
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            this.Loading = Loading;
            this.$filter = $filter;
            this.refresh();
        }
        AddonmodulesController.prototype.activate = function () {
            var self = this;
            self.$timeout(function () {
                self.refresh();
                self.activate();
            }, 60000);
        };
        AddonmodulesController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.addonmodules.getAddOnModules, null).then(function (data) {
                self.results = self.$filter('orderBy')(data.data.responseObj, "name");
                self.displayedresults = [].concat(self.results);
                //when finished getting jobs, reselect the selected and include elapsed time
            }).then(function (response) {
                self.selected = self.selected
                    ? _.find(self.displayedresults, { id: self.selected.id })
                    : self.displayedresults[0];
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        ;
        //delete module
        AddonmodulesController.prototype.deleteModule = function (module) {
            var self = this;
            //Confirmation Dialog box that fire delete on confirmation
            var confirm = self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_DeleteConfirmation')));
            confirm.then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.addonmodules.removeAddOnModule, module)
                    .then(function (data) {
                    self.selected = false;
                    self.refresh();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        AddonmodulesController.prototype.addModule = function () {
            var self = this;
            var testModal = self.Modal({
                title: self.$translate.instant('SETTINGS_AddModule'),
                onHelp: function () {
                    self.GlobalServices.showHelp('AddingAddonModules');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/addonmodules/addmodule.html',
                controller: 'AddModuleModalController as AddModuleModal',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            testModal.modal.show();
        };
        AddonmodulesController.$inject = ['Dialog', '$http', '$timeout', '$q', '$translate', 'Modal', 'GlobalServices', 'Commands', 'Loading', '$filter'];
        return AddonmodulesController;
    }());
    angular.module('app')
        .component('addonModules', {
        templateUrl: 'views/addonmodules.html',
        controller: AddonmodulesController,
        controllerAs: 'addonmodules',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=addonmodulesdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var AddUsersController = (function () {
        function AddUsersController(modal, $translate) {
            this.modal = modal;
            this.$translate = $translate;
        }
        AddUsersController.prototype.removeUsers = function () {
            var self = this;
            _.remove(self.usersList, { enabled: true });
        };
        AddUsersController.prototype.addUsers = function () {
            var self = this;
            var newUsersModal = self.modal({
                title: self.$translate.instant("ADD_USERS_AddUsers"),
                modalSize: "modal-lg",
                templateUrl: "views/addusersmodal.html",
                controller: "AddUsersController as addUsersController",
                params: {
                    users: angular.copy(self.usersList)
                },
                onComplete: function (users) {
                    self.usersList = users;
                },
                onFinish: function () {
                }
            });
            newUsersModal.modal.show();
        };
        AddUsersController.$inject = ["Modal", "$translate"];
        return AddUsersController;
    }());
    angular.module('app')
        .component('addUsers', {
        templateUrl: 'views/adduserscomponent.html',
        controller: AddUsersController,
        controllerAs: 'addUsersController',
        bindings: {
            usersList: "=?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=addUsers.js.map
var asm;
(function (asm) {
    "use strict";
    var AlertHandlerController = (function () {
        function AlertHandlerController($http, $timeout, $q, $translate, modal, loading, dialog, commands, globalServices, $rootScope, $interval, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.loading = loading;
            this.dialog = dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.constants = constants;
            var self = this;
            self.initialize();
        }
        AlertHandlerController.prototype.initialize = function () {
            var self = this;
        };
        AlertHandlerController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope', '$interval', "constants"];
        return AlertHandlerController;
    }());
    angular.module("app")
        .component("alertHandler", {
        templateUrl: "views/alerthandler.html",
        controller: AlertHandlerController,
        controllerAs: "alertHandlerController",
        bindings: {
            errorObj: "<",
            popoverView: "<",
            viewDetails: "&?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=alert-handler.js.map
angular.module('ASM.directives', ['ASM.dataservices']);

var asm;
(function (asm) {
    "use strict";
    var LogsController = (function () {
        //public availableLogCategories: Array<any> = [
        //    //{ name: 'All' },
        //    { name: 'Security' },
        //    { name: 'Appliance Configuration' },
        //    { name: 'Template Configuration' },
        //    { name: 'Network Configuration' },
        //    { name: 'Hardware Configuration' },
        //    { name: 'Monitoring' },
        //    { name: 'Deployment' },
        //    { name: 'Licensing' },
        //    { name: 'Miscellaneous' }
        //];
        function LogsController($http, $timeout, $q, $translate, Modal, Loading, Commands, GlobalServices, constants, $window) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$window = $window;
            this.selectorConfig = {};
            this.viewModel = {};
            this.currentView = '';
            this.displayedData = [];
            var self = this;
            self.refresh();
        }
        LogsController.prototype.activate = function () {
            var self = this;
            this.$timeout(function () {
                self.refresh();
            }, 10000);
        };
        LogsController.prototype.refresh = function () {
            var self = this;
            var request = self.$http.post(self.Commands.data.logs.getLogs, null)
                .then(function (response) {
                self.viewModel = response.data.responseObj;
                self.displayedData = [].concat(self.viewModel);
                //self.availableLogCategories = _.sortBy(_.uniqBy(response.data.responseObj, 'category'), 'category');
                self.availableLogCategories = _.map(_.sortBy(_.uniqBy(response.data.responseObj, 'category'), 'category'), function (item) {
                    return {
                        name: item.category
                    };
                });
                //self.availableLogCategories = {};
            })
                .catch(function (error) {
                self.GlobalServices.DisplayError(error.data);
            });
            self.Loading(request);
        };
        LogsController.prototype.doDownload = function () {
            var self = this;
            var deferred = self.$q.defer();
            self.GlobalServices.ClearErrors();
            self.Loading(deferred.promise);
            self.processDownloadRequests('initial', '', deferred);
        };
        LogsController.prototype.processDownloadRequests = function (type, id, deferred) {
            var self = this;
            var urlToCall = '';
            var data;
            urlToCall = self.Commands.data.downloads.status;
            data = { 'id': id };
            if (type == 'initial') {
                urlToCall = self.Commands.data.downloads.create;
                //urlToCall = 'bogus';
                data = { 'type': 'logs' };
            }
            self.$http.post(urlToCall, { requestObj: data }).then(function (data) {
                switch (data.data.responseObj.status) {
                    case 'NOT_READY':
                        self.$timeout(function () {
                            self.processDownloadRequests('status', data.data.responseObj.id, deferred);
                        }, 5000);
                        break;
                    case 'READY':
                        self.$window.location.assign("downloads/getfile/" + data.data.responseObj.id);
                        deferred.resolve();
                        break;
                    case 'ERROR':
                        //handle error
                        var x = 0;
                        deferred.resolve();
                        self.GlobalServices.DisplayError(data.data);
                        break;
                }
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        LogsController.prototype.doPurge = function () {
            var self = this;
            var purgeModal = self.Modal({
                title: self.$translate.instant('PURGELOGS_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/logs/purgelogs.html',
                controller: 'PurgeLogsController as PurgeLogsController',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            purgeModal.modal.show();
        };
        LogsController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Commands', 'GlobalServices', 'constants', "$window"];
        return LogsController;
    }());
    angular.module('app')
        .component('asmlogs', {
        templateUrl: 'views/logs.html',
        controller: LogsController,
        controllerAs: 'logs',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=asmlogsdirective.js.map
/// <reference path="asmlogsdirective.ts" />
var asm;
(function (asm) {
    "use strict";
    var BackupAndRestoreController = (function () {
        function BackupAndRestoreController(Modal, Dialog, $http, $timeout, $q, $translate, Commands, Loading, GlobalServices) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Commands = Commands;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.errors = new Array();
            this.editScheduledBackupInfo = function () {
                var self = this;
                var editScheduledBackupModal = self.Modal({
                    title: self.$translate.instant('BACKUPANDRESTORE_scheduledbackup_title'),
                    onHelp: function () {
                        self.GlobalServices.showHelp('EditingAutomaticallyScheduledBackups');
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/settings/backupandrestore/editscheduledbackup.html',
                    controller: 'EditScheduledBackupModalController as editScheduledBackup',
                    params: {},
                    onComplete: function () {
                        self.refresh();
                    }
                });
                editScheduledBackupModal.modal.show();
            };
            this.activate();
            this.refresh();
        }
        BackupAndRestoreController.prototype.activate = function () {
            var self = this;
            self.pollRefresh = self.$timeout(function () {
                self.refresh();
                self.activate();
            }, 30000);
        };
        BackupAndRestoreController.prototype.$onDestroy = function () {
            var self = this;
            if (self.pollRefresh)
                self.$timeout.cancel(self.pollRefresh);
        };
        BackupAndRestoreController.prototype.refresh = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            //removed loader here so that it does not continually show up due to the timeout running this in the background
            self.$q.all([
                self.$http.post(self.Commands.data.backupAndRestore.getBackupScheduleInfo, null)
                    .then(function (response) {
                    self.backupScheduleInfo = response.data.responseObj;
                }),
                self.$http.post(self.Commands.data.backupAndRestore.getBackupSettings, null)
                    .then(function (response) {
                    self.backupSettings = response.data.responseObj;
                })
            ]).catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { });
        };
        ;
        BackupAndRestoreController.prototype.backupNow = function () {
            var self = this;
            var backupNowModal = self.Modal({
                title: self.$translate.instant('BACKUPANDRESTORE_btnbackupnow'),
                onHelp: function () {
                    self.GlobalServices.showHelp('BackupNow');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/backupandrestore/backupnow.html',
                controller: 'BackupNowModalController as backupNow',
                params: {}, onComplete: function () {
                    self.refresh();
                }
            });
            backupNowModal.modal.show();
        };
        BackupAndRestoreController.prototype.restoreNow = function () {
            var self = this;
            var restoreNowModal = self.Modal({
                title: self.$translate.instant('BACKUPANDRESTORE_btnrestorenow'),
                onHelp: function () {
                    self.GlobalServices.showHelp('RestoreNow');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/backupandrestore/restorenow.html',
                controller: 'RestoreNowModalController as restoreNow',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            restoreNowModal.modal.show();
        };
        ;
        BackupAndRestoreController.prototype.editBackupSettingsAndDetails = function () {
            var self = this;
            var editBackupSettingsModal = self.Modal({
                title: self.$translate.instant('BACKUPSETTINGSANDDETAILS_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('EditingBackupSettingsAndDetails');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/backupandrestore/editsettingsanddetails.html',
                controller: 'BackupSettingsAndDetailsModalController as editBackupSettings',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            editBackupSettingsModal.modal.show();
        };
        ;
        BackupAndRestoreController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', 'Commands', 'Loading', 'GlobalServices'];
        return BackupAndRestoreController;
    }());
    angular.module('app')
        .component('backupAndRestore', {
        templateUrl: 'views/settings/backupandrestore/backupandrestore.html',
        controller: BackupAndRestoreController,
        controllerAs: 'backupAndRestore',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=backupandrestore.js.map
var asm;
(function (asm) {
    "use strict";
    var BiosConfigurationController = (function () {
        function BiosConfigurationController(GlobalServices) {
            this.GlobalServices = GlobalServices;
            this.radioGuid = this.GlobalServices.NewGuid();
            this.editMode = true;
            var self = this;
            if (self.setting.readOnly || self.readOnlyMode) {
                self.editMode = false;
            }
        }
        BiosConfigurationController.$inject = ['GlobalServices'];
        return BiosConfigurationController;
    }());
    angular.module('app')
        .component('biosConfiguration', {
        templateUrl: 'views/biosconfiguration.html',
        controller: BiosConfigurationController,
        controllerAs: 'biosConfigurationController',
        bindings: {
            setting: '=',
            readOnlyMode: '<?'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=biosconfiguration.js.map
var asm;
(function (asm) {
    "use strict";
    var BlueBoxInfoController = (function () {
        function BlueBoxInfoController() {
        }
        BlueBoxInfoController.$inject = [];
        return BlueBoxInfoController;
    }());
    angular.module('app')
        .component('blueBoxInfo', {
        transclude: true,
        templateUrl: 'views/blueboxinfo.html',
        controller: BlueBoxInfoController,
        controllerAs: 'blueBoxInfoController',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=blueBoxInfo.js.map
var asm;
(function (asm) {
    "use strict";
    var ChevronController = (function () {
        function ChevronController() {
        }
        ChevronController.$inject = [];
        return ChevronController;
    }());
    angular.module('app')
        .component('chevron', {
        transclude: true,
        templateUrl: 'views/chevron.html',
        controller: ChevronController,
        controllerAs: 'chevronController',
        bindings: {
            item: '=',
            initValue: '=?',
            hideChevron: '=?'
        }
    });
})(asm || (asm = {}));
/*
Used for accordion style collapsable rows. Note this is only the header portion.
Parameters:
item - This is a boolean property that will be toggled on click of the chevron symbol or the title itself passed in
initValue - You can pass in an initial value of true for item, otherwise it will default to false
hideChevron - Hide a chevron when it has nothing to list below it

Transcluded items - The text for the heading
Example:
<chevron item="showContent"
         init-value="true"
         hide-chevron="!item.children.length">
Title of collapseable row
</chevron>
<div ng-if="showContent">
    Content to show
</div>

*/ 
//# sourceMappingURL=chevron.js.map
var asm;
(function (asm) {
    "use strict";
    var ClarityColumnSelectorController = (function () {
        //public config: any = {};
        function ClarityColumnSelectorController(Modal, Dialog, $http, $timeout, $q, $translate, $scope, $parse) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$scope = $scope;
            this.$parse = $parse;
        }
        ClarityColumnSelectorController.prototype.activate = function () {
        };
        ClarityColumnSelectorController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$scope', '$parse'];
        return ClarityColumnSelectorController;
    }());
    function clarityColumnSelector() {
        return {
            restrict: 'A',
            replace: false,
            transclude: false,
            controller: ClarityColumnSelectorController,
            //controllerAs: 'ctrl',
            scope: {
                config: '=clarityColumnSelector'
            },
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    function clarityColumnPicker() {
        return {
            restrict: 'A',
            replace: true,
            transclude: false,
            //controller: ClarityColumnSelectorController,
            //controllerAs: 'ctrl',
            scope: {
                config: '=clarityColumnPicker'
            },
            link: function (scope, element, attributes, controller) {
            },
            template: function () {
                var html = '';
                html += '                <div class="dropdown dropdown-filter btn-group">' +
                    '                    <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">' +
                    '                        Column Picker &nbsp;<span class="caret"></span>' +
                    '                    </button>' +
                    '                            <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">' +
                    '                                <li ng-repeat="column in config">' +
                    '                                    <input type="checkbox" ng-model="column.visible" style="margin-left: 3px; margin-right: 3px;"><span style="color: initial;">{{column.label}}</span>' +
                    '                               </li>' +
                    '                           </ul>' +
                    '                  </div>';
                return html;
            }
        };
    }
    function clarityColumnSelectorColumn() {
        return {
            require: '^clarityColumnSelector',
            restrict: 'A',
            replace: false,
            transclude: false,
            scope: {
                clarityColumnSelectorColumn: '='
            },
            link: function (scope, element, attributes, controller) {
                if (!scope.clarityColumnSelectorColumn)
                    return;
                var column = {
                    label: scope.clarityColumnSelectorColumn.label || scope.clarityColumnSelectorColumn.column || scope.clarityColumnSelectorColumn,
                    column: scope.clarityColumnSelectorColumn.column || scope.clarityColumnSelectorColumn.column || scope.clarityColumnSelectorColumn,
                    visible: true
                };
                if (!controller.$scope.config[column.column])
                    controller.$scope.config[column.column] = column;
                controller.$scope.$watch('config', function () {
                    if (controller.$scope.config[column.column].visible === false) {
                        element.hide();
                    }
                    else {
                        element.show();
                    }
                }, true);
            }
        };
    }
    angular.module('app').
        directive('clarityColumnSelector', clarityColumnSelector);
    angular.module('app').
        directive('clarityColumnSelectorColumn', clarityColumnSelectorColumn);
    angular.module('app').
        directive('clarityColumnPicker', clarityColumnPicker);
})(asm || (asm = {}));
//# sourceMappingURL=claritycolumnselector.js.map
var asm;
(function (asm) {
    "use strict";
    var ClusterSettingsController = (function () {
        function ClusterSettingsController($http, $timeout, $q, $translate, modal, loading, dialog, commands, globalServices, $rootScope, $interval) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.loading = loading;
            this.dialog = dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            var self = this;
            self.readOnly || self.activate();
        }
        ClusterSettingsController.prototype.activate = function () {
            var self = this;
            self.clusterSettings._dataCenters = self.addNewOption(self.clusterSettings.dataCenters);
            self.initDataCenter();
            self.clusterSettings._clusters = self.addNewOption(self.clusterSettings.clusters);
            self.initCluster();
            self.clusterSettings.switchType = self.clusterSettings.switchType || "standard";
        };
        ClusterSettingsController.prototype.dataCenterChanged = function () {
            var self = this;
            self.clusterSettings.dataCenter = self.dataCenterSelection === "new" ? undefined : self.dataCenterSelection;
        };
        ClusterSettingsController.prototype.initDataCenter = function () {
            var self = this;
            if (self.clusterSettings.dataCenter) {
                self.dataCenterSelection = _.find(self.clusterSettings._dataCenters, { id: self.clusterSettings.dataCenter })
                    ? self.clusterSettings.dataCenter
                    : "new";
            }
        };
        ClusterSettingsController.prototype.clusterChanged = function () {
            var self = this;
            self.clusterSettings.cluster = self.clusterSelection === "new" ? undefined : self.clusterSelection;
        };
        ClusterSettingsController.prototype.initCluster = function () {
            var self = this;
            if (self.clusterSettings.cluster) {
                self.clusterSelection = _.find(self.clusterSettings._clusters, { id: self.clusterSettings.cluster })
                    ? self.clusterSettings.cluster
                    : "new";
            }
        };
        ClusterSettingsController.prototype.addNewOption = function (array) {
            var self = this;
            return _.concat(array, [
                { name: "____________________", id: 123, disabled: true },
                { name: self.$translate.instant("TEMPLATES_CreateNewCategory"), id: "new" }
            ]);
        };
        ClusterSettingsController.prototype.isNew = function (array, value) {
            return !_.find(array, { id: value });
        };
        ClusterSettingsController.prototype.joinCapabilities = function () {
            var capabilities = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                capabilities[_i - 0] = arguments[_i];
            }
            return _.join(_.filter(capabilities, function (c) { return c; }), capabilities.length ? "; " : undefined);
        };
        ClusterSettingsController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope', '$interval'];
        return ClusterSettingsController;
    }());
    angular.module("app")
        .component("clusterSettings", {
        templateUrl: "views/clustersettings.html",
        controller: ClusterSettingsController,
        controllerAs: "clusterSettingsController",
        bindings: {
            clusterSettings: "=",
            form: "=?",
            errors: "=",
            readOnly: "<?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=clusterSettings.js.map
var asm;
(function (asm) {
    "use strict";
    var ComponentEditorController = (function () {
        function ComponentEditorController($rootScope, $q, Loading, $http, GlobalServices, $translate, Modal, constants, commands, $location, dialog, $anchorScroll, $timeout, $filter) {
            this.$rootScope = $rootScope;
            this.$q = $q;
            this.Loading = Loading;
            this.$http = $http;
            this.GlobalServices = GlobalServices;
            this.$translate = $translate;
            this.Modal = Modal;
            this.constants = constants;
            this.commands = commands;
            this.$location = $location;
            this.dialog = dialog;
            this.$anchorScroll = $anchorScroll;
            this.$timeout = $timeout;
            this.$filter = $filter;
            this.formProcessing = false;
            this.newComponent = null;
            this.scaleIOComponent = null;
            this.instances = 1;
            this.editMode = true;
            this.associateAllResources = "selected";
            this.continueClicked = false;
            this.saving = false;
            this.action = 'add';
            this.backButton = false;
            var self = this;
            self.action = self.config.action;
            if (self.config.mode !== "edit") {
                self.editMode = false;
            }
            if (self.action == 'edit' || self.action == 'view') {
                self.newComponent = _.find(self.config.template.components, { id: self.config.componentId });
                self.originalSelectedComponents = angular.copy(self.newComponent.relatedcomponents);
                self.originalInstances = angular.copy(self.newComponent.instances);
                self.instances = self.newComponent.instances;
            }
            if (self.action == "add") {
                //give each available component a unique id before linking
                angular.forEach(self.config.availableComponents, function (component) {
                    component.componentid = component.id;
                    //set new unique ID for component
                    component.id = self.$rootScope.ASM.NewGuid();
                });
                if (self.config.type === "server") {
                    self.newComponent = self.config.availableComponents[0];
                    self.newComponent.name = GlobalServices.namePicker(self.config.template.components, [self.newComponent], self.GlobalServices.getBaseName(self.newComponent.name))[0].name;
                }
                if (self.type === "service") {
                    //Associate all resources
                    self.checkAllComponents();
                }
            }
            self.isService = (self.config.serviceId && self.config.serviceId !== null);
        }
        ComponentEditorController.prototype.isRelated = function (relatedId) {
            var self = this;
            return _.find(self.newComponent.relatedcomponents, { id: relatedId });
        };
        ComponentEditorController.prototype.linkComponents = function (component1, component2, oneWay) {
            component1.relatedcomponents = angular.isUndefined(component1.relatedcomponents) ? [] : component1.relatedcomponents;
            component2.relatedcomponents = angular.isUndefined(component2.relatedcomponents) ? [] : component2.relatedcomponents;
            component1.relatedcomponents.push({ id: component2.id, name: component2.name, instances: component2.instances });
            oneWay || component2.relatedcomponents.push({ id: component1.id, name: component1.name, instances: component1.instances });
            var comp1 = _.map(component1.relatedcomponents);
            component1.relatedcomponents = _.uniq(comp1);
            var comp2 = _.map(component2.relatedcomponents);
            component2.relatedcomponents = _.uniq(comp2);
        };
        ComponentEditorController.prototype.unlinkComponents = function (component1, component2) {
            var self = this;
            //component2 is null in cases where we haven't made it far enough to add the actual component and link it to anything
            if (!component2)
                return;
            //var relatedc = component1.relatedcomponents.get(component2.id);
            $.each(component1.relatedcomponents, function (index, modelx) {
                if (modelx.id == component2.id) {
                    component1.relatedcomponents.splice(index, 1);
                    index--;
                    return false;
                }
            });
            $.each(component2.relatedcomponents, function (indx, model) {
                if (model.id == component1.id) {
                    component2.relatedcomponents.splice(indx, 1);
                    indx--;
                    return false;
                }
            });
        };
        ComponentEditorController.prototype.checkClicked = function (c) {
            var self = this;
            var found = false;
            if (!c.isChecked) {
                self.unlinkComponents(c, self.newComponent);
                return;
            }
            ;
            if (!(self.newComponent.type == 'cluster' || self.newComponent.type == 'scaleio')) {
                //if (self.action == 'edit') {
                //    self.newComponent.instances = self.originalInstances;
                //}
                //else {
                self.newComponent.instances = self.instances;
            }
            $.each(self.newComponent.relatedcomponents, function (index, rc) {
                if (rc.id == c.id) {
                    found = true;
                    return;
                }
            });
            if (!found) {
                self.linkComponents(c, self.newComponent);
            }
        };
        ComponentEditorController.prototype.checkAllComponents = function () {
            var self = this;
            // self.newComponent.relatedcomponents = [];
            //    var self: ComponentEditorController = this;
            var components = _.filter(self.config.template.components, function (component) {
                return (component.id != self.newComponent.id && self.validType(component.type));
            });
            $.each(components, function (ix, component) {
                component.isChecked = true;
                self.checkClicked(component);
            });
        };
        ComponentEditorController.prototype.advance = function () {
            var self = this;
            var d = self.$q.defer();
            if (self.chooseForm && self.chooseForm.$invalid) {
                self.chooseForm._submitted = false;
                self.chooseForm._showValidation = true;
                return;
            }
            if (!self.formInvalid(self.preliminaryForm, false)) {
                if (self.newComponent) {
                    self.Loading(d.promise);
                    if (!self.backButton) {
                        self.originalComponent = self.newComponent;
                        self.originalId = self.config.templateId;
                    }
                    self.GlobalServices.ClearErrors(self.errors);
                    if (self.type === 'service') {
                        var sdata = {
                            serviceId: self.config.serviceId,
                            instances: self.instances,
                            componentType: self.newComponent.type,
                            component: self.newComponent
                        };
                        if (self.backButton && self.newComponent) {
                            tdata.component = self.originalComponent;
                            self.backButton = false;
                        }
                        self.getAdjustServiceComponents(sdata)
                            .then(function (response) {
                            self.$anchorScroll("#parentComponentEditor");
                            var tmp = self.newComponent.relatedcomponents;
                            var tmpid = self.newComponent.id;
                            var result = [];
                            result = response.data.responseObj;
                            //filter out scale io
                            self.newComponent = _.filter(result, function (item) {
                                return item.type != 'scaleio';
                            })[0];
                            //filter scaleio only
                            var scaleIOComponent = _.filter(result, function (item) {
                                return item.type == 'scaleio';
                            });
                            if (scaleIOComponent.length > 0) {
                                self.scaleIOComponent = scaleIOComponent[0];
                            }
                            self.newComponent.relatedcomponents = tmp;
                            self.newComponent.id = tmpid;
                            self.continueClicked = true;
                            d.resolve();
                        })
                            .catch(function (response) {
                            self.newComponent = response.data.responseObj;
                            self.GlobalServices.DisplayError(response.data, self.errors);
                        })
                            .finally(function () { return d.resolve(); });
                    }
                    else if (self.type === 'template') {
                        var tdata = {
                            templateId: self.config.templateId,
                            component: self.newComponent,
                            instances: self.instances
                        };
                        if (self.backButton && self.newComponent) {
                            tdata.component = self.originalComponent;
                            tdata.templateId = self.originalId;
                            self.backButton = false;
                        }
                        self.getUpdatedTemplateBuilder(tdata)
                            .then(function (data) {
                            self.$anchorScroll("#parentComponentEditor");
                            var tmp = self.newComponent.relatedcomponents;
                            var tmpid = self.newComponent.id;
                            self.newComponent = data.data.responseObj;
                            self.newComponent.relatedcomponents = tmp;
                            self.newComponent.id = tmpid;
                            self.continueClicked = true;
                            d.resolve();
                        })
                            .catch(function (response) {
                            self.newComponent = response.data.responseObj;
                            self.GlobalServices.DisplayError(response.data, self.errors);
                        })
                            .finally(function () { return d.resolve(); });
                    }
                }
            }
        };
        ComponentEditorController.prototype.categoryVisible = function (category, component) {
            var self = this;
            var filteredSettings = self.$filter("settingsVisibleComponentEditorFilter")(category.settings, component);
            var settingsShown = self.$filter("templatesettings")(filteredSettings, self.isService);
            return settingsShown.length;
        };
        ComponentEditorController.prototype.componentVisible = function (component) {
            var self = this;
            return _.find(component.categories, function (category) { return self.categoryVisible(category, component); });
        };
        ComponentEditorController.prototype.filteredoptions = function (setting, component) {
            var self = this;
            if (!setting || !component)
                return [];
            var returnVal = [];
            var radioGroup = self.GlobalServices.NewGuid();
            $.each(setting.options, function (optionIndex, option) {
                if (option.dependencyTarget && option.dependencyValue) {
                    var targetSetting = null;
                    $.each(component.categories, function (categoryIndex, c) {
                        var matchingSetting = _.find(c.settings, function (s) {
                            return (s.id == option.dependencyTarget);
                        });
                        if (matchingSetting) {
                            targetSetting = matchingSetting;
                            return;
                        }
                    });
                    var matchingValue = false;
                    if (targetSetting && targetSetting.value != null) {
                        var settingvalues = option.dependencyValue.split(',');
                        $.each(settingvalues, function (idx, val) {
                            if (val.toString() == targetSetting.value.toString())
                                matchingValue = true;
                        });
                    }
                    if (matchingValue) {
                        returnVal.push(option);
                    }
                }
                else {
                    returnVal.push(option);
                }
            });
            return returnVal;
        };
        ComponentEditorController.prototype.requiredFieldsRemaining = function () {
            var self = this;
            var component = self.newComponent;
            if (component == null || component.isDisposed)
                return;
            if (!component || !component.categories)
                return 0;
            //counts custom form elements
            var count = _.filter(self.invalidFormElements, { invalid: true }).length;
            $.each(component.categories, function (ix, category) {
                var filteredSettings = self.$filter("settingsVisibleComponentEditorFilter")(category.settings, self.newComponent);
                var settingsShown = self.$filter("templatesettings")(filteredSettings, self.isService);
                $.each(settingsShown, function (iy, s) {
                    if (s.required && !s.value) {
                        count++;
                    }
                });
            });
            return count;
        };
        ComponentEditorController.prototype.validType = function (type) {
            var self = this;
            switch (self.newComponent.type) {
                case 'application':
                    return false;
                case 'vm':
                    return type == 'cluster' || type == 'scaleio';
                case 'cluster':
                case 'scaleio':
                    return type == 'server' || type == 'vm';
                case 'server':
                    return type == 'storage' || type == 'cluster' || type == 'scaleio';
                case 'storage':
                    return type == 'server';
            }
        };
        ComponentEditorController.prototype.add = function () {
            var self = this;
            if (self.newComponent) {
                //clone object and set unique ID
                var clone = angular.copy(self.newComponent);
                clone.name = self.GlobalServices.namePicker(_.filter(self.config.template.components, { type: clone.type }), [clone], self.GlobalServices.getBaseName(clone.name))[0].name;
                if (self.action == 'add') {
                    self.newComponent = clone;
                    self.newComponent.relatedcomponents = [];
                }
                self.newComponent = clone;
            }
        };
        ComponentEditorController.prototype.formInvalid = function (form, checkRemainingFields) {
            var self = this, remFields = checkRemainingFields ? !!self.requiredFieldsRemaining() : false;
            form._submitted = true;
            if (form.$invalid) {
                form._showValidation = true;
            }
            self.GlobalServices.scrollToInvalidElement("templateBuilderDetails");
            return !form.$valid || remFields;
        };
        ComponentEditorController.prototype.addComponent = function () {
            var self = this;
            if (self.formInvalid(self.form, true) || self.saving)
                return;
            if (self.action != 'add') {
                self.updateComponent();
                return false;
            }
            self.saving = true;
            self.newComponent.newItem = true;
            var newComponent = angular.copy(self.newComponent);
            /*Below link components routine is adding duplicate related components, so commented out*/
            //link components
            ////angular.forEach(_.filter(
            ////    self.config.template.components,
            ////    (component: any) => self.validType(component.type) &&
            ////        _.find(self.newComponent.relatedcomponents, { id: component.id })),
            ////    (component) => {
            ////        self.linkComponents(component, newComponent, true);
            ////    });
            if (self.newComponent.type == 'cluster' || self.newComponent.type == 'scaleio') {
                newComponent.instances = 1;
            }
            else {
                newComponent.instances = self.instances;
            }
            self.config.template.components.push(newComponent);
            //save
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.updateRelatedName();
            self.save({ data: self })
                .then(function (data) {
                self.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () {
                d.resolve();
                self.saving = false;
            });
        };
        ComponentEditorController.prototype.deleteComponent = function () {
            var self = this;
            $('.popover').remove();
            self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('TEMPLATEBUILDER_Areyousureyouwanttoremovethiscomponent'))
                .then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.commands.data.templates.getTemplateBuilderById, { id: self.templateId, name: "" })
                    .then(function (data) {
                    var d2 = self.$q.defer(), template = data.data.responseObj;
                    self.Loading(d2.promise);
                    angular.forEach(template.components, function (component) {
                        _.remove(component.relatedcomponents, { id: self.newComponent.id });
                    });
                    _.remove(template.components, { id: self.newComponent.id });
                    angular.forEach(template.components, function (component) { return self.stringifyCategories(component.categories); });
                    self.$http.post(self.commands.data.templates.saveTemplate, template)
                        .then(function (data) {
                        d2.resolve();
                        self.close();
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data, self.errors);
                    })
                        .finally(function () { return d2.resolve(); });
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        ComponentEditorController.prototype.previewSettingUnequal = function (settings, index) {
            var self = this;
            var group = settings[index].group;
            var isUnequal = true;
            for (var i = index - 1; i > -1; i--) {
                if (settings[i].hidefromtemplate) {
                    if (settings[i].group == group) {
                        isUnequal = false;
                    }
                    i = -1;
                }
            }
            return isUnequal;
        };
        ComponentEditorController.prototype.updateRelatedName = function () {
            var self = this;
            //updates the name of this component for other related components
            angular.forEach(self.config.template.components, function (component) {
                angular.forEach(component.relatedcomponents, function (related) {
                    if (related.id == self.newComponent.id) {
                        related.name = self.newComponent.name;
                        related.instances = self.instances;
                    }
                });
            });
        };
        ComponentEditorController.prototype.updateComponent = function () {
            var self = this;
            if (self.action != 'edit' || self.formInvalid(self.form, true) || self.saving)
                return;
            self.saving = true;
            var d = self.$q.defer();
            self.newComponent.instances = self.instances;
            self.updateRelatedName();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            //replace component in template components with changed version
            self.config.template.components[self.config.template.components
                .indexOf(_.find(self.config.template
                .components, { id: self.config.componentId }))] = self.newComponent;
            //set template draft to true
            self.config.template.draft = true;
            self.save({ data: self })
                .then(function (data) {
                self.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () {
                d.resolve();
                self.saving = false;
            });
        };
        ComponentEditorController.prototype.stringifyCategories = function (categories) {
            return angular.forEach(categories, function (category) {
                angular.forEach(category.settings, function (setting) {
                    if (angular.isString(setting.value)) {
                        return;
                    }
                    else if (setting.value === null || angular.isUndefined(setting.value)) {
                        return;
                    }
                    else if (!angular.isString(setting.value)) {
                        return setting.value = JSON.stringify(setting.value);
                    }
                    else if (setting.value === true) {
                        return setting.value = "true";
                    }
                    else if (setting.value === false) {
                        return setting.value = "false";
                    }
                });
            });
        };
        ComponentEditorController.prototype.importConfigurationFromReferenceServer = function () {
            var self = this;
            var cloneModal = self.Modal({
                title: self.$translate.instant('TEMPLATEBUILDER_Clone_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templatebuilder/clone.html',
                controller: 'CloneController as cloneController',
                params: {
                    newComponentId: self.newComponent.componentid
                },
                onComplete: function (component) {
                    var componentCopy = angular.copy(self.newComponent);
                    self.newComponent = component;
                    angular.extend(self.newComponent, {
                        name: componentCopy.name,
                        relatedcomponents: componentCopy.relatedcomponents
                    });
                }
            });
            cloneModal.modal.show();
        };
        ComponentEditorController.prototype.importFromExistingTemplate = function () {
            var self = this;
            var importModal = self.Modal({
                title: self.$translate.instant('TEMPLATEBUILDER_Import_From_Template_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templatebuilder/importfromtemplate.html',
                controller: 'ImportFromTemplateController as importFromTemplateController',
                params: {
                    newComponentId: self.newComponent.componentid
                },
                onComplete: function (component) {
                    var componentCopy = angular.copy(self.newComponent);
                    self.newComponent = component;
                    angular.extend(self.newComponent, {
                        name: componentCopy.name,
                        relatedcomponents: componentCopy.relatedcomponents
                    });
                }
            });
            importModal.modal.show();
        };
        ComponentEditorController.prototype.uploadServerConfigurationProfile = function () {
            var self = this;
            var uploadModal = self.Modal({
                title: self.$translate.instant('TEMPLATEBUILDER_Upload_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templatebuilder/uploadconfig.html',
                controller: 'UploadConfigController as uploadConfigController',
                params: {
                    componentid: self.newComponent.componentid
                },
                onComplete: function (component) {
                    self.newComponent = component;
                }
            });
            uploadModal.modal.show();
        };
        ComponentEditorController.prototype.validateSettings = function () {
            var self = this;
            if (!self.formInvalid(self.form, true)) {
                var validateModal = self.Modal({
                    title: self.$translate.instant('COMPONENTEDITOR_ValidateSettings'),
                    modalSize: 'modal-lg',
                    templateUrl: 'views/templates/validatesettings.html',
                    controller: 'ValidateSettingsController as validateSettingsController',
                    params: {
                        component: angular.copy(self.newComponent)
                    },
                });
                validateModal.modal.show();
            }
        };
        ComponentEditorController.prototype.nameRequired = function () {
            var self = this;
            return self.newComponent.type === "cluster" || self.newComponent.type === "scaleio";
        };
        ComponentEditorController.prototype.scrollTo = function (id) {
            var self = this;
            //wait for collapsing row to close, then only scroll to it if it's opening and not closing
            self.$timeout(function () {
                $("#" + id).find(".collapsed")[0] || self.$anchorScroll("" + id);
            }, 500);
        };
        ComponentEditorController.prototype.getUpdatedTemplateBuilder = function (data) {
            var self = this;
            return self.$http.post(self.commands.data.templates.getUpdatedTemplateBuilderComponent, data);
        };
        ComponentEditorController.prototype.getAdjustServiceComponents = function (data) {
            var self = this;
            return self.$http.post(self.commands.data.services.getAdjustServiceComponents, { source: 'new', componentType: data.componentType, instances: data.instances, serviceId: data.serviceId });
        };
        ComponentEditorController.prototype.close = function () {
            var self = this;
            self.closeModal();
        };
        ComponentEditorController.prototype.cancel = function () {
            var self = this;
            //self.newComponent = self.originalSelectedComponents;
            angular.forEach(self.config.template.components, function (component) {
                component.isChecked = false;
                self.checkClicked(component);
            });
            self.cancelModal();
        };
        ComponentEditorController.$inject = ['$rootScope', '$q', 'Loading', '$http', 'GlobalServices', '$translate',
            'Modal', 'constants', 'Commands', '$location', 'Dialog', '$anchorScroll', "$timeout", "$filter"];
        return ComponentEditorController;
    }());
    angular.module('app')
        .component('componentEditor', {
        templateUrl: 'views/componenteditor.html',
        controller: ComponentEditorController,
        controllerAs: 'ComponentEditor',
        bindings: {
            config: '=',
            closeModal: '&',
            cancelModal: '&',
            save: '&',
            multipleInstancesNotAllowed: '=?',
            templateId: '@',
            form: '=?',
            errors: "=",
            type: "@",
            invalidFormElements: "=",
            chooseForm: "=?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=componentEditor.js.map
var asm;
(function (asm) {
    "use strict";
    var CredentialsController = (function () {
        function CredentialsController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = new Array();
            var self = this;
            //note:  this is necessary due to the manual refresh found in the html
            self.refresh(false);
        }
        CredentialsController.prototype.activate = function () {
            var self = this;
            this.$timeout(function () {
                self.refresh(false);
            }, 10000);
        };
        CredentialsController.prototype.refresh = function (calledFromUI) {
            var self = this;
            if (calledFromUI) {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
            }
            self.GlobalServices.ClearErrors(self.errors);
            self.$http.post(self.Commands.data.credential.getCredentialSummaryList, null)
                .then(function (data) {
                self.credentials = _.sortBy(data.data.responseObj, function (credential) {
                    return credential.credentialsName.toLowerCase();
                });
                self.credentialsSafe = angular.copy(self.credentials);
                self.selectedCredential = self.selectedCredential ? _.find(self.credentials, { id: self.selectedCredential.id }) ? self.selectedCredential : self.credentials[0] : self.credentials[0];
                self.onSelectedCredential(self.selectedCredential);
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () {
                if (calledFromUI) {
                    deferred.resolve();
                }
            });
        };
        ;
        CredentialsController.prototype.onSelectedCredential = function (selectedItem) {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.$http.post(self.Commands.data.credential.getCredentialById, { id: selectedItem.id })
                .then(function (response) {
                self.selectedCredential = response.data.responseObj;
            })
                .catch(function (error) {
                self.GlobalServices.DisplayError(error.data, self.errors);
            });
        };
        CredentialsController.prototype.doUpdates = function (updateType) {
            var self = this, title, helptoken, editMode = false, canChangeCredentialType, credential;
            if (updateType.toUpperCase() === 'CREATE') {
                title = self.$translate.instant('CREDENTIALS_CreateTitle');
                helptoken = 'creatingcredentials';
                canChangeCredentialType = true;
            }
            else {
                title = self.$translate.instant('CREDENTIALS_EditTitle');
                helptoken = 'editingcredentials';
                editMode = true;
                canChangeCredentialType = false;
                credential = angular.copy(self.selectedCredential);
            }
            var theModal = self.Modal({
                title: title,
                onHelp: function () {
                    self.GlobalServices.showHelp(helptoken);
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/credentials/editcredentials.html',
                controller: 'EditCredentialsController as editCredentialsController',
                params: {
                    source: 'credentials-management',
                    editMode: editMode,
                    credential: credential,
                    canChangeCredentialType: canChangeCredentialType
                },
                onComplete: function (credentialId) {
                    self.refresh(true);
                    if (self.credentials.length > 0) {
                        self.onSelectedCredential(_.filter(self.credentials, { id: self.selectedCredential.id })[0]);
                    }
                }
            });
            theModal.modal.show();
        };
        CredentialsController.prototype.doDelete = function () {
            var self = this;
            if (!self.selectedCredential.candelete) {
                return;
            }
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('CREDENTIALS_DeleteConfirmation'))
                .then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.credential.deleteCredential, { id: self.selectedCredential.id })
                    .then(function (data) {
                    self.refresh(false);
                })
                    .catch(function (error) {
                    self.GlobalServices.DisplayError(error.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        CredentialsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return CredentialsController;
    }());
    angular.module('app')
        .component('credentialsManagement', {
        templateUrl: "views/listcredentials.html",
        controller: CredentialsController,
        controllerAs: 'creds',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=credentialsmanagementdirective.js.map
var asm;
(function (asm) {
    'use strict';
    var DirectoryservicesController = (function () {
        function DirectoryservicesController(Modal, Dialog, $http, $timeout, $q, $compile, $scope, $translate, GlobalServices, Commands) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$compile = $compile;
            this.$scope = $scope;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            //this.jobs = [
            //    { isSelected: false, "id": 0, "name": 'Scheduled Job 30', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' },
            //    { isSelected: false, "id": 1, "name": 'Scheduled Job 26', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' },
            //    { isSelected: false, "id": 2, "name": 'Scheduled Job 27', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' }
            //];
            this.checkAllBox = false;
            this.selectedStates = [];
            this.selectedUserObjects = [];
            this.activeTab = 'userinfo';
            this.refresh();
        }
        DirectoryservicesController.prototype.refresh = function () {
            var self = this;
            //Get All directories
            this.$http.post(self.Commands.data.users.getDirectoryList, null).then(function (data) {
                self.results = data.data.responseObj;
                self.displayedresults = [].concat(self.results);
                //console.log(self.displayedresults);
                self.selectedDetail = self.results[0];
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
        };
        DirectoryservicesController.prototype.selectedDirectories = function () {
            return _.filter(this.results, { 'isSelected': true });
        };
        //check all checkbox
        DirectoryservicesController.prototype.checkAll = function () {
            var _this = this;
            var self = this;
            this.displayedresults.forEach(function (job) {
                if (_this.checkAllBox) {
                    job.isSelected = true;
                }
                else {
                    job.isSelected = false;
                }
            });
        };
        DirectoryservicesController.prototype.deleteDirectory = function () {
            var self = this;
            var directoryIds = _.map(this.selectedDirectories(), 'id');
            var directoryNames = _.map(this.selectedDirectories(), function (u) {
                return '<li>' + u.hostName + '</li>';
            });
            var Directories = (directoryNames.toString()).replace(/[, ]+/g, " ").trim();
            //Confirmation Dialog box that fires delete on confirmation
            var confirm = this.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_DeleteDirectory') + '<br> <ul class="">' + Directories + '</ul>'));
            confirm.then(function () {
                self.$http.post(self.Commands.data.users.deleteADUser, directoryIds)
                    .then(function (data) {
                    self.refresh();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                });
            });
        };
        DirectoryservicesController.prototype.createdirectory = function () {
            var self = this;
            var setupWizard = self.Modal({
                title: self.$translate.instant('SETTINGS_DirectoryServicesCreateDir'),
                onHelp: function () {
                    self.GlobalServices.showHelp();
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/directorywizard.html',
                controller: 'DirectoryWizardController as DirectoryWizard',
                params: {},
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDPOOL_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        setupWizard.modal.dismiss();
                        self.refresh();
                    });
                },
                onComplete: function (modalScope) {
                    self.refresh(); //When the modal is closed, update the data.
                }
            });
            setupWizard.modal.show();
        };
        DirectoryservicesController.prototype.editdirectory = function () {
            var self = this;
            var modaldirectory = this.selectedDirectories();
            var setupWizard = self.Modal({
                title: this.$translate.instant('SETTINGS_DirectoryServicesEditDir'),
                onHelp: function () {
                    self.GlobalServices.showHelp();
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/directorywizard.html',
                controller: 'DirectoryWizardController as DirectoryWizard',
                params: {
                    editmode: true,
                    directory: modaldirectory
                },
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDPOOL_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        setupWizard.modal.dismiss();
                        self.refresh();
                    });
                },
                onComplete: function () {
                    self.refresh(); //When the modal is closed, update the data.
                }
            });
            setupWizard.modal.show();
        };
        DirectoryservicesController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$compile', '$scope', '$translate', 'GlobalServices', 'Commands'];
        return DirectoryservicesController;
    }());
    angular.module("app")
        .component("directoryList", {
        templateUrl: "views/directoryserviceslist.html",
        controller: DirectoryservicesController,
        controllerAs: "directoryList",
        bindings: {
            errors: "="
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=directoryservicesdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var EditFirmwareController = (function () {
        function EditFirmwareController($http, $timeout, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, $rootScope) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            var self = this;
            self.refresh();
            self.activate();
        }
        EditFirmwareController.prototype.activate = function () {
            var self = this;
            var fwtimer = self.$timeout(function () {
                self.refresh();
                self.activate();
            }, 120000);
            self.$rootScope.$on('$locationChangeSuccess', function () {
                self.$timeout.cancel(fwtimer);
            });
        };
        EditFirmwareController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.silenceLoading || self.Loading(d.promise);
            self.$http.post(self.Commands.data.firmwarepackages.getFirmwarePackages, {})
                .then(function (data) {
                self.safeSource = data.data.responseObj;
                self.firmwarePackages = angular.copy(self.safeSource);
                self.firmwareDropdownList = self.getRepositoryDropdownList(self.firmwarePackages);
                var match = _.find(self.firmwareDropdownList, { defaultpackage: true });
                self.selectedDropdownItem = match ? match.id : match;
                self.selectedRow = self.getCurrentPackageListItem(self.firmwareDropdownList, self.selectedDropdownItem, self.firmwarePackages, self.selectedRow);
                angular.forEach(self.safeSource, function (repo) { return angular.extend(repo, { options: self.repoActions(repo) }); });
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        EditFirmwareController.prototype.repoActions = function (repo) {
            var self = this;
            var actions = [
                {
                    id: undefined,
                    name: self.$translate.instant('SETTINGS_Repositories_SelectAction')
                }];
            /*
            for this directive, parm mode is 'standard' for listrepositories.html (and View Bundles is not an action in the dropdown since it is in the aside),
            and parm mode is 'minimal' for configurechassiswizard.html (and View Bundles is an action in the dropdown)
            possible actions:  Delete (delete), Resynchronize (sync), View Bundles (view)
            if packageSource is not equal to embedded, and not the default package, it can be deleted
            if not in use by a service, it can be deleted
            if state is copying or pending, its source is embedded, or it's a default package, it cannot be deleted
             */
            if (repo.services == null || repo.services.length == 'undefined' || repo.services.length == 0) {
                if (repo.state !== "copying"
                    && repo.state !== "pending"
                    && repo.packageSource !== "embedded"
                    && !repo.defaultpackage) {
                    actions.push({
                        id: "delete",
                        name: self.$translate.instant("SETTINGS_Repositories_Delete"),
                        action: function (firmware) {
                            self.doDelete(firmware);
                        }
                    });
                }
            }
            /* can only have resynchronize is in state error */
            if (repo.state === "errors") {
                actions.push({
                    id: "sync",
                    name: self.$translate.instant("SETTINGS_Repositories_Resynchronize"),
                    action: function (firmware) {
                        self.resync(firmware);
                    }
                });
            }
            if ((self.mode === "minimal") && (repo.firmwarebundles != null && repo.firmwarebundles.length || (repo.softwarebundles != null && repo.softwarebundles.length))) {
                actions.push({
                    id: "view",
                    name: self.$translate.instant("SETTINGS_Repositories_ViewBundles"),
                    action: function () {
                        self.doViewBundles();
                    }
                });
            }
            ;
            repo.selectedOption = actions[0];
            return actions;
        };
        EditFirmwareController.prototype.resync = function (firmware) {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.saveFirmware(firmware)
                .then(function () {
                self.refresh();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { d.resolve(); });
        };
        EditFirmwareController.prototype.getRepositoryDropdownList = function (fullRepoList) {
            // used to populate default firmware/software repository drop down
            return angular.copy(_.filter(fullRepoList, function (fp) {
                return (fp.packageSource !== 'embedded' &&
                    fp.state &&
                    (fp.state === "available"));
            }));
        };
        EditFirmwareController.prototype.getCurrentPackageListItem = function (firmwarePackageList, defaultRepoId, tableList, selectedFirmware) {
            return selectedFirmware
                || _.find(firmwarePackageList, { id: defaultRepoId })
                || tableList[0];
        };
        EditFirmwareController.prototype.doDelete = function (firmware) {
            var self = this;
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('EDIT_FIRMWARE_Delete_Confirmation'))
                .then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.firmwarepackages.remove, [firmware.id])
                    .then(function () {
                    self.refresh();
                })
                    .catch(function (error) {
                    self.GlobalServices.DisplayError(error.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        EditFirmwareController.prototype.newCustomBundle = function (repo) {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_AddCustomBundle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('addCustomBundle');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/addeditviewbundle.html',
                controller: 'AddEditViewBundleModalController as c',
                params: {
                    repo: angular.copy(repo),
                    type: 'add'
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        EditFirmwareController.prototype.doViewBundles = function () {
            var self = this;
            if (self.selectedRow) {
                var theModal = self.Modal({
                    title: self.selectedRow.name,
                    onHelp: function () {
                        self.GlobalServices.showHelp('viewbundles');
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/settings/repositories/viewbundles.html',
                    controller: 'ViewBundlesController as vb',
                    params: {
                        id: self.selectedRow.id
                    },
                    onComplete: function () {
                        self.refresh();
                    }
                });
                theModal.modal.show();
            }
        };
        EditFirmwareController.prototype.onDefaultFirmwareChanged = function () {
            var self = this;
            if (self.selectedDropdownItem) {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.setDefaultFirmwarePackage(self.selectedDropdownItem)
                    .then(function (data) {
                    self.refresh();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            }
        };
        EditFirmwareController.prototype.setDefaultFirmwarePackage = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.setDefaultFirmwarePackage, { id: self.selectedDropdownItem });
        };
        EditFirmwareController.prototype.addFirmwareRepo = function () {
            var self = this;
            var theModal = self.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_AddFirmwareRepository'),
                onHelp: function () {
                    self.GlobalServices.showHelp('Addingfirmwarerepositories');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/addfirmwarebundlemodal.html',
                controller: 'AddFirmwareBundleModalController as addFirmwareBundleModalController',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            theModal.modal.show();
        };
        EditFirmwareController.prototype.saveFirmware = function (firmware) {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.saveFirmwarePackage, firmware);
        };
        EditFirmwareController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope'];
        return EditFirmwareController;
    }());
    angular.module('app')
        .component("editfirmware", {
        templateUrl: "views/editfirmware.html",
        controller: EditFirmwareController,
        controllerAs: 'editFirmwareController',
        bindings: {
            mode: "@",
            silenceLoading: "@?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=editfirmware.js.map
var asm;
(function (asm) {
    "use strict";
    var EditRepositoryController = (function () {
        function EditRepositoryController($http, $timeout, $q, $translate, modal, loading, dialog, commands, globalServices, $rootScope, $interval, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.loading = loading;
            this.dialog = dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.constants = constants;
            var self = this;
            self.initialize();
        }
        EditRepositoryController.prototype.poll = function () {
            var self = this;
            self.$interval(function () { self.refresh(true); }, 120000);
        };
        EditRepositoryController.prototype.initialize = function () {
            var self = this;
            self.refresh();
            self.poll();
        };
        EditRepositoryController.prototype.refresh = function (hideLoading) {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            hideLoading || self.loading(d.promise);
            self.getRepos()
                .then(function (response) {
                angular.forEach(response.data.responseObj, function (repo) {
                    repo.options = self.repoActions(repo);
                    var imageMatch = _.find(self.constants.repositoryImageTypes, { id: repo.imagetype });
                    if (imageMatch) {
                        repo._imagetype = imageMatch.name;
                    }
                });
                self.repos = response.data.responseObj;
                self.backup = angular.copy(response.data.responseObj);
            })
                .catch(function (response) {
                self.globalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { d.resolve(); });
        };
        EditRepositoryController.prototype.repoActions = function (repo) {
            var self = this;
            var actions = [{ id: undefined, name: self.$translate.instant('SETTINGS_Repositories_SelectAction') }];
            /*possible actions:  Delete (delete), Edit (edit), Resynchronize (sync)
            if not in use, it can be deleted
            if state is copying or pending, it cannot be deleted */
            if (!repo.isInUse) {
                if ((repo.state !== 'copying') && (repo.state !== 'pending')) {
                    actions.push({ id: "delete", name: self.$translate.instant('SETTINGS_Repositories_Delete') });
                }
            }
            /* can only have edit and resynchronize if in state error
               if isRCM is true, don't have Resync as an option as per JIRA 844
               if isRCM is true, hide Edit as per JIRA 1264 */
            if (repo.state === 'errors') {
                if (!repo.isRCM) {
                    actions.push({ id: "sync", name: self.$translate.instant('SETTINGS_Repositories_Resynchronize') });
                    actions.push({ id: "edit", name: self.$translate.instant('SETTINGS_Repositories_Edit') });
                }
            }
            return angular.copy(actions);
        };
        EditRepositoryController.prototype.actionTaken = function (repo) {
            var self = this;
            switch (repo.selectedOption) {
                case 'delete':
                    self.deleteRepo(repo);
                    break;
                case 'edit':
                    self.editRepoModal(repo);
                    break;
                case 'sync':
                    self.resyncRepo(repo);
                    break;
            }
        };
        EditRepositoryController.prototype.editRepoModal = function (repo) {
            var self = this;
            var modal = self.modal({
                title: self.$translate.instant('SETTINGS_Repositories_EditOSImageRepo'),
                onHelp: function () {
                    self.globalServices.showHelp('EditOSImageRepository');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/editrepomodal.html',
                controller: 'EditRepoModalController as editRepoModalController',
                params: {
                    repo: angular.copy(repo),
                    type: repo.selectedOption
                },
                onComplete: function () {
                    self.refresh();
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        EditRepositoryController.prototype.deleteRepo = function (repo) {
            var self = this;
            var modal = self.modal({
                title: self.$translate.instant('SETTINGS_Repositories_Confirm'),
                modalSize: 'modal-md',
                templateUrl: 'views/settings/repositories/confirmdeleterepo.html',
                controller: 'GenericModalController as c',
                params: {},
                onComplete: function () {
                    var d = self.$q.defer();
                    self.globalServices.ClearErrors(self.errors);
                    self.loading(d.promise);
                    self.$http.post(self.commands.data.repository.deleteRepository, { id: repo.id })
                        .then(function (response) {
                        d.resolve();
                        self.refresh();
                    })
                        .catch(function (response) {
                        self.globalServices.DisplayError(response.data, self.errors);
                    })
                        .finally(function () { d.resolve(); });
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        EditRepositoryController.prototype.resyncRepo = function (repo) {
            var self = this;
            var modal = self.modal({
                title: self.$translate.instant('SETTINGS_Repositories_ResyncOSRepo'),
                onHelp: function () {
                    self.globalServices.showHelp('SyncOSImageRepository');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/editrepomodal.html',
                controller: 'EditRepoModalController as editRepoModalController',
                params: {
                    repo: angular.copy(repo),
                    type: repo.selectedOption
                },
                onComplete: function () {
                    self.refresh();
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        EditRepositoryController.prototype.addRepo = function () {
            var self = this;
            var modal = self.modal({
                title: self.$translate.instant('SETTINGS_Repositories_AddOSRepo'),
                onHelp: function () {
                    self.globalServices.showHelp('AddOSImageRepository');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/editrepomodal.html',
                controller: 'EditRepoModalController as editRepoModalController',
                params: {
                    repo: {},
                    type: 'add'
                },
                onComplete: function () {
                    self.refresh();
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        EditRepositoryController.prototype.getRepos = function () {
            var self = this;
            return self.$http.post(self.commands.data.repository.getRepositoryList, { requestObj: [], criteriaObj: {} });
        };
        EditRepositoryController.prototype.getRepoById = function (id) {
            var self = this;
            return self.$http.post(self.commands.data.repository.getRepositoryById, { id: id });
        };
        EditRepositoryController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope', '$interval', "constants"];
        return EditRepositoryController;
    }());
    angular.module("app")
        .component("editrepository", {
        templateUrl: "views/editrepository.html",
        controller: EditRepositoryController,
        controllerAs: "editRepositoryController",
        bindings: {
            errors: "="
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=editrepository.js.map
var asm;
(function (asm) {
    "use strict";
    function formValidation() {
        return {
            restrict: "A",
            require: "form",
            replace: true,
            transclude: false,
            scope: {
                submitted: "<formValidation"
            },
            link: function ($scope, element, attributes, form) {
                $scope.$watch(function () {
                    return $scope.submitted && form.$error;
                }, function () {
                    return setTimeout(function () {
                        element.find(".form-group").each(function (index, e) {
                            var $formGroup = $(this);
                            if ($formGroup.find(".skip-form-group").length) {
                                return;
                            }
                            ;
                            var $inputs = $formGroup.find("input[ng-model],textarea[ng-model],select[ng-model]"), markFormGroup = false;
                            if ($inputs.length) {
                                var isInvalid = false;
                                angular.forEach($inputs, function (input) {
                                    var $input = $(input);
                                    var isSelect = $input.is("select");
                                    //put class of "skip-input" on an input to not have it marked
                                    var skipInput = input.classList.contains("skip-input");
                                    isInvalid = $scope.submitted && (isInvalid || input.classList.contains("ng-invalid"));
                                    markFormGroup = markFormGroup || !isSelect;
                                    var $next = $input.next();
                                    var hasRedXAlready = $next.hasClass("glyphicon glyphicon-remove form-control-feedback");
                                    if (isInvalid && !isSelect && !skipInput) {
                                        hasRedXAlready || $input.after("<i class=\"glyphicon glyphicon-remove form-control-feedback\" aria-hidden=\"true\"></i>");
                                    }
                                    else {
                                        hasRedXAlready && $next.remove();
                                    }
                                });
                                $formGroup.toggleClass("has-error " + (markFormGroup ? "has-feedback" : ""), !!isInvalid);
                            }
                        });
                    }, 200);
                }, true);
            }
        };
    }
    angular
        .module('app')
        .directive('formValidation', formValidation);
})(asm || (asm = {}));
/*
Notes:
bind the form-validation attr to a property that when toggled to true will highlight
Example:
<form name="controllerName.myForm"
      form-validation="controllerName.formSubmitted"
      class="form-horizontal">
    <div class="form-group">
        <div class="col-sm-6">
            <label class="control-label" for="name">
                Label
            </label>
        </div>
        <input type="text"
               id="name"
               name="name"
               ng-model="controllerName.form.name"
               class="form-control" />
    </div>
</form>
*/
//# sourceMappingURL=FormValidation.js.map
/// <reference path="asmlogsdirective.ts" />
var asm;
(function (asm) {
    "use strict";
    var GettingStartedComponentController = (function () {
        function GettingStartedComponentController(Modal, $rootScope, $http, $timeout, Commands, $location, $translate, Dialog, GlobalServices, $interval, $q, Loading) {
            this.Modal = Modal;
            this.$rootScope = $rootScope;
            this.$http = $http;
            this.$timeout = $timeout;
            this.Commands = Commands;
            this.$location = $location;
            this.$translate = $translate;
            this.Dialog = Dialog;
            this.GlobalServices = GlobalServices;
            this.$interval = $interval;
            this.$q = $q;
            this.Loading = Loading;
            this.oobe = {};
            this.serviceExists = false;
            this.refreshTimer = null;
            this.firmwareInterval = null;
            this.urlList = {
                publishTemplates: "/templates",
                asm: "http://support.vce.com/",
                asmCommunity: "http://en.community.dell.com/techcenter/converged-infrastructure/w/wiki/4318.dell-active-system-manager"
            };
            this.firmwareCopying = false;
            this.watchFirmwareStatus = true;
            this.stopPresentingSetupWizard = false;
            var self = this;
            self.activate();
        }
        GettingStartedComponentController.prototype.activate = function () {
            var self = this;
            self.refresh();
            self.beginPolling();
            self.watchHeights();
        };
        GettingStartedComponentController.prototype.$onDestroy = function () {
            var self = this;
            self.stopPolling();
            if (angular.isDefined(self.heightCalculator))
                self.$interval.cancel(self.heightCalculator);
        };
        GettingStartedComponentController.prototype.refresh = function () {
            var self = this;
            //var d = self.$q.defer();
            self.GlobalServices.ClearErrors();
            //self.Loading(d.promise);
            self.$q.all([
                self.getGettingStarted()
                    .then(function (data) {
                    self.oobe = data.data.responseObj;
                    self.GlobalServices.showInitialSetup = !self.oobe.initialSetupCompleted;
                    if (!self.oobe.initialSetupCompleted && !self.stopPresentingSetupWizard) {
                        self.setupWizard();
                        self.stopPresentingSetupWizard = true;
                    }
                }),
                self.getServiceList()
                    .then(function (data) {
                    self.serviceExists = _.some(data.data.responseObj, { 'brownField': true });
                }),
                self.watchFirmwareStatus && self.getFirmwareStatus()
            ])
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }); //.finally(() => d.resolve());
        };
        GettingStartedComponentController.prototype.beginPolling = function () {
            var self = this;
            self.stopPolling();
            self.refreshTimer = self.$interval(function () { return self.refresh(); }, 30000);
        };
        GettingStartedComponentController.prototype.stopPolling = function () {
            var self = this;
            if (angular.isDefined(self.refreshTimer))
                self.$interval.cancel(self.refreshTimer);
        };
        GettingStartedComponentController.prototype.getFirmwareStatus = function () {
            var self = this;
            self.GlobalServices.ClearErrors();
            return self.getFirmwarePackages()
                .then(function (response) {
                self.firmwareCopying = _.find(response.data.responseObj, { state: "copying" });
                if (!self.firmwareCopying) {
                    self.watchFirmwareStatus = false;
                }
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        GettingStartedComponentController.prototype.watchHeights = function () {
            //sets where buttons like, "Define Networks" and, "Discover Resources" are placed vertically
            var self = this;
            return self.heightCalculator = self.$interval(function () {
                var allElementsToMeasure = $("#step-row")
                    .find(".height-to-measure");
                //add heights of 2 children found in each element
                var heights = _.map(allElementsToMeasure, function (element) { return element.children[0].clientHeight + element.children[1].clientHeight; });
                var max = _.max(heights);
                //set max height found to be height of all elements
                angular.forEach(allElementsToMeasure, function (element) { $(element).height(max); });
            }, 500);
        };
        GettingStartedComponentController.prototype.update = function () {
            var self = this;
            self.$http.post(self.Commands.data.initialSetup.updateGettingStarted, self.oobe)
                .then(function (data) {
                //console.log('updateGettingStarted responseObj:');
                //console.log(JSON.stringify(data.data.responseObj));
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        GettingStartedComponentController.prototype.launchDiscoverWizard = function () {
            var self = this;
            var discoveryWizard = self.Modal({
                title: self.$translate.instant('DISCOVERY_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp();
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/discoverywizard.html',
                controller: 'DiscoveryWizardController as DiscoveryWizard',
                params: {
                    mode: 'gettingstarted'
                },
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DISCOVERY_Cancel_Confirmation'));
                    confirm.then(function () {
                        discoveryWizard.modal.dismiss();
                    });
                }
            });
            discoveryWizard.modal.show();
        };
        GettingStartedComponentController.prototype.createTemplate = function () {
            var self = this;
            var createTemplateWizard = self.Modal({
                title: self.$translate.instant('TEMPLATES_CREATE_TEMPLATE_WIZARD_AddaTemplate'),
                onHelp: function () {
                    self.GlobalServices.showHelp('addtemplate');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/templatewizard.html',
                controller: 'TemplateWizardController as templateWizardController',
                params: {},
                onComplete: function () {
                    self.refresh();
                },
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('TEMPLATES_CREATE_TEMPLATE_WIZARD_CancelConfirmation'))
                        .then(function () {
                        createTemplateWizard.modal.close();
                    });
                }
            });
            createTemplateWizard.modal.show();
        };
        GettingStartedComponentController.prototype.setupWizard = function () {
            var self = this;
            var setupWizard = self.Modal({
                title: self.$translate.instant('SETUPWIZARD_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp();
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/setupwizard.html',
                controller: 'SetupWizardController as SetupWizard',
                params: {},
                onComplete: function () {
                    self.refresh();
                },
                onCancel: function () {
                    self.refresh();
                    setupWizard.modal.dismiss();
                }
            });
            setupWizard.modal.show();
        };
        GettingStartedComponentController.prototype.addNetworks = function () {
            var self = this;
            var addNetworks = self.Modal({
                title: self.$translate.instant('GENERIC_Networks'),
                onHelp: function () {
                    self.GlobalServices.showHelp('networksaddingediting');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/definenetworksmodal.html',
                controller: 'DefineNetworksController as defineNetworksController',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            addNetworks.modal.show();
        };
        GettingStartedComponentController.prototype.addExistingService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('AddingExistingService');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/addexistingservice.html',
                controller: 'AddExistingServiceController as addExistingServiceController',
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        addServiceWizard.modal.dismiss();
                        self.refresh();
                    });
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            addServiceWizard.modal.show();
        };
        GettingStartedComponentController.prototype.configureRcm = function () {
            var self = this;
            var configureRcmModal = self.Modal({
                title: self.$translate.instant('GETTINGSTARTED_ConfigureReleaseCertificationMartix'),
                onHelp: function () {
                    self.GlobalServices.showHelp('configureRcm');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/configurereleasecert.html',
                controller: 'ConfigureReleaseCertController as configureReleaseCertController',
                params: {},
                onComplete: function () {
                    self.getFirmwareStatus();
                },
                onCancel: function () {
                    self.getFirmwareStatus();
                    configureRcmModal.modal.dismiss();
                }
            });
            configureRcmModal.modal.show();
        };
        GettingStartedComponentController.prototype.restoreFromBackup = function () {
            var self = this;
            var backupAndRestore = self.Modal({
                title: self.$translate.instant('BACKUPANDRESTORE_btnrestorenow'),
                onHelp: function () {
                    self.GlobalServices.showHelp('RestoreNow');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/backupandrestore/restorenow.html',
                controller: 'RestoreNowModalController as restoreNow',
                params: {},
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DEVICES_Apply_Firmware_Updates_Cancel_Confirmation')).then(function () {
                        backupAndRestore.modal.dismiss();
                    });
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            backupAndRestore.modal.show();
        };
        GettingStartedComponentController.prototype.goTo = function (url) {
            var self = this;
            self.$location.path(url);
        };
        GettingStartedComponentController.prototype.getFirmwarePackages = function () {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.getFirmwarePackages, null);
        };
        GettingStartedComponentController.prototype.getGettingStarted = function () {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.gettingStarted, null);
        };
        GettingStartedComponentController.prototype.getServiceList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.services.getServiceList, {});
        };
        GettingStartedComponentController.$inject = ['Modal', '$rootScope', '$http',
            '$timeout', 'Commands', '$location', '$translate', 'Dialog', 'GlobalServices', '$interval',
            '$q', 'Loading'
        ];
        return GettingStartedComponentController;
    }());
    angular.module('app')
        .component('gettingStartedComponent', {
        templateUrl: 'views/gettingstartedcomponent.html',
        controller: GettingStartedComponentController,
        controllerAs: 'gettingStartedComponentController',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=gettingStartedComponent.js.map
var asm;
(function (asm) {
    "use strict";
    var JobsController = (function () {
        function JobsController(Modal, Dialog, $http, $timeout, $q, $translate, $rootScope, GlobalServices, commands, loading) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$rootScope = $rootScope;
            this.GlobalServices = GlobalServices;
            this.commands = commands;
            this.loading = loading;
            var self = this;
            self.buttonActive = false;
            self.checkAllBox = false;
            self.refresh();
            self.activate();
        }
        JobsController.prototype.activate = function () {
            var self = this;
            self.selectedjobs = self.checkselected();
            var jobstimer = self.$timeout(function () {
                self.refresh();
                self.activate();
            }, 60000);
            self.$rootScope.$on('$locationChangeSuccess', function () {
                self.$timeout.cancel(jobstimer);
            });
        };
        JobsController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors();
            self.loading(d.promise);
            //Get All Jobs
            self.$http.post(self.commands.data.jobs.getJobList, {}).then(function (data) {
                self.results = data.data.responseObj;
                self.displayedresults = [].concat(self.results);
                if (self.checkselected().length == 0) {
                    self.buttonActive = false;
                }
                //when finished getting jobs, reselect the selected and include elapsed time
                angular.forEach(self.results, function (job) {
                    var now;
                    var then = job.startDate;
                    if (job.status !== 'running') {
                        now = job.endDate;
                        var duration = moment(now).diff(moment(then));
                    }
                    if (job.status == 'running') {
                        now = moment();
                        var duration = moment(now).diff(moment(then));
                    }
                    if (duration) {
                        var d = moment.duration(duration).humanize();
                        job.elapsedTime = d;
                    }
                    job.isSelected = self.selectedjobs.length >= 1 && !!_.find(self.selectedjobs, { id: job.id });
                });
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () {
                d.resolve();
            });
        };
        ;
        JobsController.prototype.checkselected = function () {
            var self = this;
            return _.filter(self.results, { 'isSelected': true });
        };
        JobsController.prototype.cancelButtonActive = function () {
            //verify that all selected jobs are 'scheduled' and that at least one selected value is checked
            var self = this, returnVal = true;
            if (self.results) {
                self.results.forEach(function (x) {
                    if (x.isSelected && x.status !== 'scheduled') {
                        returnVal = false;
                    }
                });
            }
            return returnVal;
        };
        //check all checkbox
        JobsController.prototype.checkAll = function () {
            var self = this;
            self.results.forEach(function (job) {
                if (self.checkAllBox) {
                    job.isSelected = true;
                }
                else {
                    job.isSelected = false;
                }
            });
        };
        ;
        JobsController.prototype.cancelJob = function () {
            var self = this, selectedusers = _.map(self.checkselected(), 'id'), d = self.$q.defer();
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_ConfirmJobCancel')))
                .then(function () {
                self.GlobalServices.ClearErrors();
                self.loading(d.promise);
                self.$http.post(self.commands.data.jobs.deleteJob, selectedusers)
                    .then(function (data) {
                    self.refresh();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                }).finally(function () { return d.resolve(); });
                //self.checkselected() = [];
            });
        };
        JobsController.prototype.modalTest = function () {
            var self = this;
            var modalJobs = [];
            //angular loop
            //Move Selected jobs into an array
            self.displayedresults.forEach(function (job) {
                if (job.isSelected) {
                    modalJobs.push(job.id);
                }
            });
            var testModal = self.Modal({
                title: 'Jobs Test Modal Title',
                modalSize: 'modal-lg',
                templateUrl: 'views/testmodal.html',
                controller: 'TestModalController as TestModal',
                params: {
                    jobs: modalJobs
                },
                close: function (modalScope) {
                    self.refresh();
                }
            });
            testModal.modal.show();
        };
        JobsController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$rootScope', 'GlobalServices', "Commands", "Loading"];
        return JobsController;
    }());
    angular.module('app')
        .component('jobs', {
        templateUrl: 'views/jobs.html',
        controller: JobsController,
        controllerAs: 'jobs',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=jobsdirective.js.map
//module asm {
//    "use strict";
//    export interface ILookupDirectiveScope
//    {
//        list: [any];
//        key: any;
//        propertyName: any;
//        val: any;
//    }
//    function listLookup(): ng.IDirective {
//        return {
//            restrict: 'E',
//            template: '<span>{{value}}</span>',
//            replace: true,
//            transclude: false,
//            link: (scope: ILookupDirectiveScope): void => {
//                var lookuppropertyname = scope.propertyName || 'name';
//                var match = _.find(scope.list, ['id', scope.key]);
//                scope.val = match[lookuppropertyname];
//            }
//        };
//    }
//    angular
//        .module('app')
//        .directive('listLookup', listLookup);
//}
var asm;
(function (asm) {
    "use strict";
    var ListLookupController = (function () {
        function ListLookupController() {
        }
        Object.defineProperty(ListLookupController.prototype, "list", {
            get: function () {
                return this._list;
            },
            set: function (theList) {
                this._list = theList;
                if (this._list && this._list.length > 0)
                    this.update();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListLookupController.prototype, "key", {
            get: function () {
                return this._key;
            },
            set: function (theKey) {
                this._key = theKey;
                if (this._key && this._key.length > 0)
                    this.update();
            },
            enumerable: true,
            configurable: true
        });
        ListLookupController.prototype.update = function () {
            var self = this;
            if (self.key && self.list && self.list.length > 0) {
                var lookuppropertyname = self.propertyName || 'name';
                var match = _.find(self.list, { 'id': self.key });
                if (match) {
                    self.val = match[lookuppropertyname];
                }
                else {
                    self.val = "";
                }
            }
        };
        return ListLookupController;
    }());
    asm.ListLookupController = ListLookupController;
    angular
        .module('app')
        .component('listLookup', {
        template: '<span>{{vm.val}}</span>',
        controller: ListLookupController,
        controllerAs: 'vm',
        bindings: {
            propertyName: '=',
            list: '=',
            key: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=lookupdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var Fabric = (function () {
        function Fabric() {
            this.id = '';
            this.name = '';
            this.enabled = true;
            this.redundancy = false;
            this.fabrictype = 'ethernet';
            this.nictype = '2x10Gb';
            this.partitioned = false;
            this.interfaces = [];
            this.deleteState = false;
        }
        Fabric.prototype.Fabric = function (data) {
            if (data === void 0) { data = {}; }
            var self = this;
            self.id = data.id || '';
            self.name = data.name || '';
            self.enabled = data.enabled || true;
            self.redundancy = data.redundancy || false;
            self.fabrictype = data.fabrictype || 'ethernet';
            self.nictype = data.nictype || '2x10Gb';
            self.partitioned = data.partitioned || false;
            self.interfaces = data.interfaces || [];
            self.deleteState = data.deleteState || false;
        };
        return Fabric;
    }());
    asm.Fabric = Fabric;
    var Interface = (function () {
        function Interface() {
            this.id = '';
            this.name = '';
            this.partitions = [];
        }
        Interface.prototype.Interface = function (data) {
            if (data === void 0) { data = {}; }
            var self = this;
            self.id = data.id || '';
            self.name = data.name || '';
            self.partitions = data.partitions || [];
        };
        return Interface;
    }());
    asm.Interface = Interface;
    var Partition = (function () {
        function Partition() {
            this.id = '';
            this.name = '';
            this.networks = [];
            this.minimum = 0;
            this.maximum = 100;
        }
        Partition.prototype.Partition = function (data) {
            if (data === void 0) { data = {}; }
            var self = this;
            self.id = data.id || '';
            self.name = data.name || '';
            self.networks = data.networks || [];
            self.minimum = data.minimum || 0;
            self.maximum = data.maximum || 100;
        };
        return Partition;
    }());
    asm.Partition = Partition;
    var NetworkConfigurationController = (function () {
        function NetworkConfigurationController(GlobalServices, constants, $filter, $http, commands) {
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$filter = $filter;
            this.$http = $http;
            this.commands = commands;
            this.editMode = true;
            this.availableNicTypes = [];
            var self = this;
            if (typeof self.setting.value === 'string' && self.setting.value) {
                self.setting.value = angular.fromJson(self.setting.value);
            }
            if (self.setting.readOnly || self.readOnlyMode) {
                self.editMode = false;
            }
            self.availableNicTypes = constants.availableNicTypes;
            if (self.setting.value == "")
                self.updateSetting();
            self.getNetworksList()
                .then(function (response) {
                self.serviceNetworks = response.data.responseObj;
                self.wireUpNetworks();
            });
            self.id = "setting_" + self.setting.id + "_" + (self.setting.category ? self.setting.category.id : '') + "_";
            self.id += self.GlobalServices.NewGuid();
        }
        NetworkConfigurationController.prototype.DisplayNetworks = function (networks) {
            var self = this;
            var returnVal = '';
            angular.forEach(networks, function (network) {
                if (network.checked) {
                    if (returnVal.length > 0)
                        returnVal += ', ';
                    returnVal += network.name;
                }
            });
            returnVal = self.$filter('ellipsis')(returnVal, 50);
            return returnVal;
        };
        NetworkConfigurationController.prototype.addInterface = function (networkconfig) {
            var self = this;
            var fabric = new Fabric();
            fabric.id = self.GlobalServices.NewGuid();
            fabric.name = 'Interface';
            for (var j = 0; j < 4; j++) {
                var _interface = new Interface();
                _interface.id = self.GlobalServices.NewGuid();
                _interface.name = 'Port ' + (j + 1);
                for (var i = 0; i < 4; i++) {
                    var partition = new Partition();
                    partition.id = self.GlobalServices.NewGuid();
                    partition.name = (i + 1).toString();
                    _interface.partitions.push(partition);
                }
                fabric.interfaces.push(_interface);
            }
            self.setting.value.interfaces.push(fabric);
            self.wireUpNetworks();
        };
        NetworkConfigurationController.prototype.updateSetting = function () {
            var defaultnetwork = {
                id: this.GlobalServices.NewGuid(),
                servertype: 'rack',
                interfaces: [],
                teams: [],
                vswitches: [],
                fabrics: [
                    {
                        id: this.GlobalServices.NewGuid(), name: 'Fabric A / onboard NIC', redundancy: true, enabled: true, fabrictype: 'ethernet', nictype: '2x10Gb', partitioned: true, usedforfc: false,
                        interfaces: [
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 1',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 2',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 3',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 4',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            }
                        ]
                    }, {
                        id: this.GlobalServices.NewGuid(), name: 'Fabric B / PCIe slot 1', redundancy: false, enabled: false, fabrictype: 'ethernet', nictype: '2x10Gb', usedforfc: false, partitioned: true,
                        interfaces: [
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 1',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 2',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 3',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 4',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            }
                        ]
                    }, {
                        id: this.GlobalServices.NewGuid(), name: 'Fabric C / PCIe slot 2', redundancy: false, enabled: false, fabrictype: 'ethernet', nictype: '2x10Gb', usedforfc: false, partitioned: true,
                        interfaces: [
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 1',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 2',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 3',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 4',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            }
                        ]
                    }
                ]
            };
            this.setting.value = defaultnetwork;
        };
        NetworkConfigurationController.prototype.wireUpNetworks = function () {
            var self = this;
            //interface is a reserved word
            angular.forEach(self.setting.value.interfaces, function (fabric) {
                angular.forEach(fabric.interfaces, function (interface1) {
                    angular.forEach(interface1.partitions, function (partition) {
                        //networks to display in dropdown
                        partition._networks = angular.copy(self.serviceNetworks);
                        //mark any that are already included
                        var match;
                        angular.forEach(partition.networks, function (network) {
                            match = _.find(partition._networks, { id: network });
                            if (match) {
                                match.checked = true;
                            }
                        });
                    });
                });
            });
        };
        NetworkConfigurationController.prototype.toggleNetwork = function (partition, _network) {
            _network.checked = !_network.checked;
            if (_network.checked) {
                partition.networks.push(_network.id);
            }
            else {
                partition.networks.splice(_.indexOf(partition.networks, _.find(partition.networks, function (network) { return network === _network.id; })), 1);
            }
        };
        NetworkConfigurationController.prototype.getNetworksList = function () {
            var self = this;
            return self.$http.post(self.commands.data.networking.networks.getUplinkNetworksList, {});
        };
        NetworkConfigurationController.$inject = ['GlobalServices', 'constants', "$filter", "$http", "Commands"];
        return NetworkConfigurationController;
    }());
    angular.module('app')
        .component('networkConfiguration', {
        templateUrl: 'views/networkconfiguration.html',
        controller: NetworkConfigurationController,
        controllerAs: 'networkConfigurationController',
        bindings: {
            setting: '=',
            readOnlyMode: '<?',
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=networkconfiguration.js.map
var asm;
(function (asm) {
    "use strict";
    var OSCredentialsController = (function () {
        function OSCredentialsController($http, $translate, Commands, GlobalServices, $q, $timeout, $interval, $location, Loading, $filter, Modal, $scope) {
            this.$http = $http;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$q = $q;
            this.$timeout = $timeout;
            this.$interval = $interval;
            this.$location = $location;
            this.Loading = Loading;
            this.$filter = $filter;
            this.Modal = Modal;
            this.$scope = $scope;
            this.credentials = [];
            //OS credentials, credential types, and the selectable credentials are fetched by this directive and passed back
            var self = this;
            self.$scope.$watch(function () { return self.refreshService; }, function (newValue, oldValue) {
                if (oldValue !== newValue) {
                    self.refresh(true);
                }
            });
            self.credentialTypes = [
                { type: "server", name: self.$translate.instant("GENERIC_Servers"), credentialId: "" },
                { type: "vm", name: self.$translate.instant("SERVICE_ADD_EXISTING_Service_SVMs"), credentialId: "" }
            ];
            self.refresh();
        }
        OSCredentialsController.prototype.refresh = function (force) {
            var self = this;
            if (self.credentials.length > 0 && !force)
                return false;
            var d = self.$q.defer();
            if (!self.hideSpinner)
                self.Loading(d.promise);
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.getCredentialSummaryList()
                    .then(function (response) {
                    self.credentials = response.data.responseObj;
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                }),
                self.getExistingServiceOSCredentials()
                    .then(function (response) {
                    self.osCredentials = response.data.responseObj;
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                })
            ])
                .finally(function () { return d.resolve(); });
        };
        OSCredentialsController.prototype.masterCredentialChange = function (selectedCredentialId, list) {
            angular.forEach(list, function (listItem) {
                listItem.credentialId = selectedCredentialId;
                listItem._editMode = false;
            });
        };
        OSCredentialsController.prototype.getFilteredCredentialArray = function (array, type) {
            var self = this;
            return self.$filter("filter", { type: type })(array);
        };
        OSCredentialsController.prototype.addCredential = function (device, masterList) {
            var self = this;
            var theModal = self.Modal({
                title: self.$translate.instant('CREDENTIALS_CreateTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('creatingcredentials');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/credentials/editcredentials.html',
                controller: 'EditCredentialsController as editCredentialsController',
                params: {
                    canChangeCredentialType: false,
                    typeId: "os",
                    editMode: false
                },
                onComplete: function (credentialId) {
                    var d = self.$q.defer();
                    self.Loading(d.promise);
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.getCredentialSummaryList()
                        .then(function (response) {
                        self.credentials = response.data.responseObj;
                        device.credentialId = credentialId;
                        if (masterList) {
                            self.masterCredentialChange(credentialId, masterList);
                        }
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
            });
            theModal.modal.show();
        };
        //pass service service.template for storageonly
        OSCredentialsController.prototype.getExistingServiceOSCredentials = function () {
            var self = this;
            if (self.storageOnly()) {
                return self.$http.post(self.Commands.data.services.getExistingSOServiceOSCredentials, self.credentialsRequestObj);
            }
            else {
                return self.$http.post(self.Commands.data.services.getExistingServiceOSCredentials, self.credentialsRequestObj);
            }
        };
        OSCredentialsController.prototype.getCredentialSummaryList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.credential.getCredentialByType, { id: 'os' });
        };
        OSCredentialsController.$inject = ["$http", "$translate", "Commands", "GlobalServices", "$q", "$timeout", "$interval", "$location", "Loading", "$filter", "Modal", "$scope"];
        return OSCredentialsController;
    }());
    angular.module('app')
        .component("osCredentials", {
        templateUrl: "views/oscredentials.html",
        controller: OSCredentialsController,
        controllerAs: 'osCredentialsController',
        bindings: {
            osCredentials: "=",
            credentialsRequestObj: "=",
            form: "=",
            errors: "=",
            credentials: "=",
            credentialTypes: "=",
            hideSpinner: "=",
            storageOnly: "&",
            refreshService: "<"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=OsCredentialsDirective.js.map
var asm;
(function (asm) {
    "use strict";
    var PasswordController = (function () {
        function PasswordController($compile, $timeout) {
            this.$compile = $compile;
            this.$timeout = $timeout;
            this.showIcon = false;
            this.blankInput = true;
            this.showPassword = false;
            this.touched = false;
            var self = this;
            self.blankInput = true;
        }
        PasswordController.prototype.toggle = function (show, evt) {
            var self = this;
            self.showPassword = show;
            if (show)
                self.showIcon = true;
            evt.stopImmediatePropagation();
        };
        PasswordController.$inject = ['$compile', '$timeout'];
        return PasswordController;
    }());
    function passwordViewer() {
        return {
            restrict: 'A',
            controller: PasswordController,
            controllerAs: 'password',
            scope: {},
            link: function (scope, element, attributes, controller) {
                if (attributes['passwordViewer'] === "false" || attributes['passwordViewer'] === false) {
                    return;
                }
                controller.blankInput = element.val().length === 0;
                element.off('input').on('input', function () {
                    controller.blankInput = element.val().length === 0;
                    controller.showIcon = !controller.blankInput;
                    scope.$apply();
                });
                element.off('focusin').on('focusin', function () {
                    if (controller.touched === false) {
                        controller.touched = true;
                        controller.originalValue = element.val();
                        element.val("");
                    }
                    controller.showIcon = true;
                    scope.$apply();
                });
                element.off('focusout').on('focusout', function () {
                    if (element.val() == "") {
                        element.val(controller.originalValue);
                        controller.touched = false;
                    }
                    controller.showIcon = false;
                    scope.$apply();
                });
                var addonHtml = '<span class="input-group-addon"><i style="top: 0;" class="glyphicon glyphicon-eye-open" ng-show="!password.blankInput && (password.showIcon || password.showPassword)" ng-mousedown="password.toggle(true, $event)" ng-mouseleave="password.toggle(false, $event)" ng-mouseup="password.toggle(false, $event)" data-toggle="tooltip" title="{{\'GENERIC_PWToolTip\'|translate}}"></i></span>';
                var addon = angular.element(addonHtml);
                controller.$timeout(function () {
                    addon.insertAfter(element);
                });
                controller.$timeout(function () {
                    controller.$compile(addon)(scope);
                });
                controller.$timeout(function () {
                    element.parent().addClass('input-group');
                });
                scope.$watch('password.showPassword', function (newVal, oldVal) {
                    controller.$timeout(function () {
                        if (newVal) {
                            element.prop('type', 'text');
                        }
                        else {
                            element.prop('type', 'password');
                        }
                    });
                    if (oldVal === true && newVal === false) {
                        controller.$timeout(function () {
                            element.focus();
                        });
                    }
                });
                scope.$watch('password.showIcon', function (newVal) {
                    if (newVal === false) {
                        addon.find('i').tooltip('hide');
                    }
                });
            }
        };
    }
    angular.module('app').
        directive('passwordViewer', passwordViewer);
})(asm || (asm = {}));
//# sourceMappingURL=password.js.map
var asm;
(function (asm) {
    "use strict";
    var PasswordMatcherDirective = (function () {
        function PasswordMatcherDirective($window) {
            // Directive parameters.
            this.restrict = 'A';
            this.require = 'ngModel';
            this.scope = { pwdString: '=passwordMatcher' };
        }
        // Link function
        // 3.21.2016 jek - this decalration requires extending angular.INgModelController which I could never get to work;
        // see asm.custom.d.ts for most recent attempt.  Changing to ngModel: any allows this to work.
        //public link(scope: myScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes, ngModel: angular.INgModelController) {
        PasswordMatcherDirective.prototype.link = function (scope, element, attrs, ngModel) {
            ngModel.$validators.passwordMatch = function (repeatValue) {
                if ($(element).is(':disabled'))
                    repeatValue = scope.pwdString;
                return repeatValue == scope.pwdString;
            };
            scope.$watch("pwdString", function () {
                ngModel.$validate();
            });
        };
        // Creates an instance of the PasswordMatcherDirective class.
        PasswordMatcherDirective.factory = function () {
            var directive = function ($window) { return new PasswordMatcherDirective($window); };
            directive.$inject = ['$window'];
            return directive;
        };
        // Constructor 
        PasswordMatcherDirective.$inject = ['$window'];
        return PasswordMatcherDirective;
    }());
    asm.PasswordMatcherDirective = PasswordMatcherDirective;
    angular.module('app').
        directive('passwordMatcher', PasswordMatcherDirective.factory());
})(asm || (asm = {}));
//# sourceMappingURL=passwordMatcher.js.map
var asm;
(function (asm) {
    "use strict";
    var PersistController = (function () {
        function PersistController(localStorageService) {
            this.localStorageService = localStorageService;
        }
        PersistController.prototype.save = function (key, value) {
            var self = this;
            self.localStorageService.set(key, value);
        };
        PersistController.prototype.load = function (key) {
            var self = this;
            return self.localStorageService.get(key);
        };
        PersistController.$inject = ['localStorageService'];
        return PersistController;
    }());
    function persist() {
        return {
            restrict: 'A',
            controller: PersistController,
            // controllerAs: 'vm',
            // scope: {},
            link: function (scope, element, attributes, controller) {
                var model = attributes['ngModel'], key = "__scopePersist_" + model, value = controller.load(key), type = attributes['persist'] || 'string', castValue;
                if (value) {
                    switch (type) {
                        case 'bool':
                        case 'boolean':
                            castValue = 'true' === value;
                            break;
                        case 'int':
                        case 'integer':
                            castValue = parseInt(value, 10);
                            break;
                        case 'object':
                        case 'json':
                            castValue = JSON.parse(value);
                            break;
                        default:
                            castValue = value;
                    }
                    setTimeout(function () { scope[model] = castValue; }, 500);
                }
                scope.$watch(model, function (newValue, oldValue) {
                    if (newValue !== oldValue)
                        controller.save(key, newValue);
                });
            }
        };
    }
    angular.module('app').
        directive('persist', persist);
})(asm || (asm = {}));
//# sourceMappingURL=persistDirective.js.map
var asm;
(function (asm) {
    "use strict";
    var RaidConfigurationController = (function () {
        function RaidConfigurationController(GlobalServices, constants) {
            var _this = this;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.editMode = true;
            this.radioGuid = "";
            this.validityObj = {
                id: this.GlobalServices.NewGuid(),
                invalid: false
            };
            this.defaultDisk = function () {
                return {
                    id: _this.GlobalServices.NewGuid(),
                    raidlevel: 'raid0',
                    comparator: 'minimum',
                    numberofdisks: 1,
                    disktype: 'any'
                };
            };
            this.hiddenDisks = {
                internal: [], external: []
            };
            var self = this;
            if (self.setting.readOnly || self.readOnlyMode) {
                self.editMode = false;
            }
            else {
                if (self.invalidArray) {
                    self.invalidArray.push(self.validityObj);
                }
                else {
                    self.invalidArray = [];
                    self.invalidArray.push(self.validityObj);
                }
            }
            self.radioGuid = self.GlobalServices.NewGuid();
            if (self.setting.value) {
                self.setting.value = typeof self.setting.value === 'string' ? angular.fromJson(self.setting.value) : self.setting.value;
            }
            else {
                self.updateSetting();
            }
            self.id = "setting_" + self.setting.id + "_" + (self.setting.category ? self.setting.category.id : '') + "_";
            self.id += self.GlobalServices.NewGuid();
            self.validateForm();
        }
        RaidConfigurationController.prototype.raidTypeChange = function () {
            var self = this;
            //cache disks when raidtype turns to basic
            //retrieve them when it turns advanced if they aren't there already
            if (self.setting.value.raidtype === "basic") {
                angular.extend(self.hiddenDisks, {
                    internal: self.setting.value.virtualdisks,
                    external: self.setting.value.externalvirtualdisks
                });
                angular.extend(self.setting.value, {
                    virtualdisks: [],
                    externalvirtualdisks: []
                });
            }
            else {
                if (self.hasNoDisks()) {
                    angular.extend(self.setting.value, {
                        virtualdisks: self.hiddenDisks.internal,
                        externalvirtualdisks: self.hiddenDisks.external
                    });
                }
            }
            self.validateForm();
        };
        RaidConfigurationController.prototype.addVirtualDisk = function () {
            var self = this;
            self.setting.value.virtualdisks.push(self.defaultDisk());
            self.validateExternalDisks();
        };
        RaidConfigurationController.prototype.deleteVirtualDisk = function (raidconfig, virtualdisk) {
            var self = this;
            _.remove(raidconfig.virtualdisks, { id: virtualdisk.id });
            self.validateDisks();
        };
        RaidConfigurationController.prototype.deleteExternalVirtualDisk = function (raidconfig, virtualdisk) {
            var self = this;
            _.remove(raidconfig.externalvirtualdisks, { id: virtualdisk.id });
            self.validateExternalDisks();
        };
        RaidConfigurationController.prototype.addExternalVirtualDisk = function () {
            var self = this;
            self.setting.value.externalvirtualdisks.push(self.defaultDisk());
            self.validateForm();
        };
        RaidConfigurationController.prototype.validVirtualDisk = function (virtualdisk, type, index, skip) {
            var self = this;
            var raidconfig = self.setting.value;
            //if (virtualdisk == null) return true;
            //return true if we're not in basic mode
            if (raidconfig && raidconfig.raidtype != 'advanced')
                return true;
            var valid = true;
            if (!virtualdisk.disktype || !virtualdisk.disktype || !virtualdisk.numberofdisks || !virtualdisk.raidlevel || !virtualdisk.comparator)
                valid = false;
            else if (virtualdisk.numberofdisks <= 0)
                valid = false;
            else if (virtualdisk.raidlevel == 'raid0' && virtualdisk.numberofdisks < 1)
                valid = false;
            else if (virtualdisk.raidlevel == 'raid1' && (virtualdisk.numberofdisks != 2 || virtualdisk.comparator != 'exact'))
                valid = false;
            else if (virtualdisk.raidlevel == 'raid5' && virtualdisk.numberofdisks < 3)
                valid = false;
            else if (virtualdisk.raidlevel == 'raid6' && virtualdisk.numberofdisks < 4)
                valid = false;
            else if (virtualdisk.raidlevel == 'raid10' && (virtualdisk.numberofdisks < 4 || virtualdisk.numberofdisks % 2 != 0))
                valid = false;
            else if (virtualdisk.raidlevel == 'raid50' && (virtualdisk.numberofdisks < 6 || virtualdisk.numberofdisks % 3 != 0))
                valid = false;
            else if (virtualdisk.raidlevel == 'raid60' && virtualdisk.numberofdisks < 8)
                valid = false;
            else if ((virtualdisk.disktype == 'first' || virtualdisk.disktype == 'last') && ((index == 0 && virtualdisk.comparator != 'exact') || index > 0))
                valid = false; //can only be set on 1
            if (!skip) {
                self.validateForm();
            }
            return valid;
        };
        RaidConfigurationController.prototype.validateDisks = function () {
            var self = this, raidconfig = self.setting.value, valid = true;
            //mark form false
            if (raidconfig && raidconfig.raidtype == 'advanced' && (raidconfig.virtualdisks.length == 0 && raidconfig.externalvirtualdisks.length == 0))
                valid = false;
            if (valid && raidconfig && raidconfig.raidtype == 'basic' && raidconfig.basicraidlevel == null)
                valid = false;
            //only check virtual disks if we're in advanced mode
            if (raidconfig && raidconfig.raidtype == 'advanced' && valid) {
                valid = !_.find(raidconfig.virtualdisks, function (disk) {
                    return !self.validVirtualDisk(disk, 'internal', _.indexOf(raidconfig.virtualdisks, disk), true);
                });
            }
            return !valid;
        };
        RaidConfigurationController.prototype.validateExternalDisks = function () {
            var self = this, raidconfig = self.setting.value, valid = true;
            //mark form false
            if (raidconfig && raidconfig.raidtype == 'advanced' && (raidconfig.externalvirtualdisks.length == 0 && raidconfig.virtualdisks.length == 0))
                valid = false;
            if (raidconfig && raidconfig.raidtype == 'basic' && raidconfig.basicraidlevel == null)
                valid = false;
            //only check virtual disks if we're in advanced mode
            if (raidconfig && raidconfig.raidtype == 'advanced' && valid) {
                valid = !_.find(raidconfig.externalvirtualdisks, function (disk) {
                    return !self.validVirtualDisk(disk, 'external', _.indexOf(raidconfig.virtualdisks, disk), true);
                });
            }
            return !valid;
        };
        RaidConfigurationController.prototype.hasNoDisks = function () {
            var self = this;
            return self.setting.value.raidtype === "advanced" &&
                (!(self.setting.value.virtualdisks && self.setting.value.virtualdisks.length) &&
                    !(self.setting.value.externalvirtualdisks && self.setting.value.externalvirtualdisks.length));
        };
        RaidConfigurationController.prototype.validateForm = function () {
            var self = this;
            return !self.editMode || (self.validityObj.invalid = self.validateExternalDisks() || self.validateDisks() || self.hasNoDisks());
        };
        RaidConfigurationController.prototype.updateSetting = function () {
            var self = this;
            self.setting.value = {
                raidtype: 'basic',
                basicraidlevel: 'raid1',
                enableglobalhotspares: false,
                globalhotspares: 0,
                minimumssd: 0,
                enableglobalhotsparesexternal: false,
                globalhotsparesexternal: 0,
                minimumssdexternal: 0,
                virtualdisks: [],
                externalvirtualdisks: []
            };
            //self.addVirtualDisk();
            //self.addExternalVirtualDisk();
        };
        RaidConfigurationController.$inject = ['GlobalServices', 'constants'];
        return RaidConfigurationController;
    }());
    angular.module('app')
        .component('raidConfiguration', {
        templateUrl: 'views/raidconfiguration.html',
        controller: RaidConfigurationController,
        controllerAs: 'raidConfigurationController',
        bindings: {
            setting: '=',
            readOnlyMode: '<?',
            invalidArray: '=',
            form: "="
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=raidconfiguration.js.map
var asm;
(function (asm) {
    "use strict";
    var RcmBannerController = (function () {
        function RcmBannerController($http, $translate, Commands, GlobalServices, $q, $timeout, $interval, $location) {
            this.$http = $http;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$q = $q;
            this.$timeout = $timeout;
            this.$interval = $interval;
            this.$location = $location;
            var self = this;
            //if not set, set it
            if (self.getAlertHidden() === "") {
                self.setAlertHidden("false");
            }
            //if userPreferences exist, parse them from string to JSON
            self.userPreference = self.parseUserPreferences(self.userPreference);
            //if userPreferences haven't been created yet, create them
            if (!self.userPreference) {
                self.userPreference = {};
            }
            //if rcm hasn't been created yet, create it
            if (!self.userPreference.rcm) {
                self.resetRcmPreferences();
            }
            self.isDismissExpired = self.dismissExpired(self.userPreference.rcm.dismissedDate);
            //if rcmVersionAlert is false, user may have recently updated, so reset the dismiss setting
            if (self.isDismissExpired && self.rcmVersionAlert) {
                self.resetRcmPreferences();
            }
        }
        RcmBannerController.prototype.getShowBanner = function () {
            var self = this;
            return (self.isDismissExpired && self.getAlertHidden() !== "true") && self.rcmVersionAlert;
        };
        RcmBannerController.prototype.viewDetails = function () {
            var self = this;
            self.$location.path("settings/Repositories/false/ManageRCMVersions");
        };
        RcmBannerController.prototype.hide = function () {
            var self = this;
            self.setAlertHidden("true");
        };
        RcmBannerController.prototype.dismiss = function () {
            var self = this;
            self.hide();
            self.userPreference.rcm.dismissedDate = moment().toISOString();
            self.save();
        };
        RcmBannerController.prototype.dismissExpired = function (dismissedDate) {
            if (!dismissedDate)
                return true;
            var expirationDate = moment(dismissedDate).add(30, 'days');
            return moment().isAfter(expirationDate);
        };
        RcmBannerController.prototype.resetRcmPreferences = function () {
            var self = this;
            self.userPreference.rcm = { dismissedDate: null };
            self.save();
        };
        RcmBannerController.prototype.getAlertHidden = function () {
            return sessionStorage.getItem("rcmAlertHidden");
        };
        RcmBannerController.prototype.setAlertHidden = function (value) {
            sessionStorage.setItem("rcmAlertHidden", value);
        };
        RcmBannerController.prototype.parseUserPreferences = function (userPreference) {
            if (typeof userPreference === "string") {
                userPreference = angular.fromJson(userPreference);
            }
            return userPreference;
        };
        RcmBannerController.prototype.save = function () {
            var self = this;
            self.$http.post(self.Commands.data.users.updateUserPreferences, angular.toJson(self.userPreference))
                .then(function (data) {
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        RcmBannerController.$inject = ["$http", "$translate", "Commands", "GlobalServices", "$q", "$timeout", "$interval", "$location"];
        return RcmBannerController;
    }());
    angular.module('app')
        .component("rcmBanner", {
        templateUrl: "views/rcmbanner.html",
        controller: RcmBannerController,
        controllerAs: 'rcmBannerController',
        bindings: {
            userPreference: "=",
            rcmVersionAlert: "<"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=RcmBanner.js.map
var asm;
(function (asm) {
    "use strict";
    var ListRepositoriesController = (function () {
        function ListRepositoriesController($http, $timeout, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, $rootScope) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.errors = new Array();
            var self = this;
            self.viewData = {
                activeTab: 'firmware'
            };
            if (self.modalOrTab === "ManageRCMVersions") {
                self.viewData.activeTab = "firmware";
            }
        }
        ListRepositoriesController.prototype.clickTab = function (tab) {
            var self = this;
            if (tab == 'iso') {
                self.viewData.activeTab = tab;
                self.$rootScope.helpToken = 'repositorieshomepage';
            }
            else if (tab == 'firmware') {
                self.viewData.activeTab = tab;
                self.$rootScope.helpToken = 'UnderstandingFirmwareRepositories';
            }
        };
        ListRepositoriesController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope'];
        return ListRepositoriesController;
    }());
    angular.module("app")
        .component("listrepositories", {
        templateUrl: "views/listrepositories.html",
        controller: ListRepositoriesController,
        controllerAs: "rep",
        bindings: {
            modalOrTab: "<"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=repositoriesdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var ServerSettingsController = (function () {
        function ServerSettingsController($http, $timeout, $q, $translate, modal, loading, dialog, commands, globalServices, $rootScope, $interval) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.loading = loading;
            this.dialog = dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            var self = this;
        }
        ServerSettingsController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope', '$interval'];
        return ServerSettingsController;
    }());
    angular.module("app")
        .component("serverSettings", {
        templateUrl: "views/serversettings.html",
        controller: ServerSettingsController,
        controllerAs: "serverSettingsController",
        bindings: {
            serverSettings: "=",
            form: "=?",
            errors: "=",
            readOnly: "<?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=serverSettings.js.map
var asm;
(function (asm) {
    'use strict';
    var ServicesvgController = (function () {
        //get intervalX(): number {
        //    var self: ServicesvgController = this;
        //    return self._intervalX;
        //}
        //set intervalX(theIntervalX: number) {
        //    var self: ServicesvgController = this;
        //    var oldIntervalX = self._intervalX;
        //    self._intervalX = theIntervalX;
        //    if (self.intervalX !== oldIntervalX) {
        //        if (self.service !== "") {
        //            self.refresh();
        //        }
        //    }
        //}
        function ServicesvgController(Modal, Dialog, $http, $timeout, $q, GlobalServices, $route, localStorageService, $routeParams, $translate, $location, $window, Loading, Commands, constants, $scope, $rootScope) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.GlobalServices = GlobalServices;
            this.$route = $route;
            this.localStorageService = localStorageService;
            this.$routeParams = $routeParams;
            this.$translate = $translate;
            this.$location = $location;
            this.$window = $window;
            this.Loading = Loading;
            this.Commands = Commands;
            this.constants = constants;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.svgheight = 300;
            this.mode = "edit"; //
            this.serviceServers = [];
            this.popoverServers = [];
            this.serviceStorages = [];
            this.popoverStorages = [];
            this.serviceClusters = [];
            this.popoverClusters = [];
            this.serviceVMs = [];
            this.popoverVMs = [];
            this.mostItems = 0;
            this.render = false;
            //public serviceId: any;
            this.timerIntervals = 300;
            this.addResource = null;
            this.enableSvgLogging = false;
            this.overallServiceHealthText = '';
            this.overallServiceResourceHealthText = '';
            this.intervalX = 0;
            this.serviceTimeoutTime = 60000;
            var self = this;
            self.const_firmwareStatus = constants.firmwareStatus;
            self.serviceId = self.$scope.serviceId;
            self.firmwarereport = self.$scope.firmwarereport;
            self.activeTab = self.$scope.activeTab;
            //self.serviceName = self.$scope.serviceName;
            self.$scope.$watch(function () { return self.intervalX; }, function (newValue, oldValue) {
                if (oldValue !== newValue) {
                    if (self.service !== '') {
                        self.refresh();
                    }
                }
            });
            self.$scope.$watch(function () { return self.$scope.refreshService; }, function (newValue, oldValue) {
                if (oldValue !== newValue) {
                    self.getserviceData();
                }
            });
            self.refresh();
            self.windowResize();
            //$(window).resize(function () {
            //    if (self.pollwindowtimer) self.$timeout.cancel(self.pollwindowtimer);
            //    //self.pollwindowtimer = self.$timeout(function() {
            //    //    self.calculatewindowheight();
            //    //}, 1);
            //    self.pollwindowtimer = self.calculatewindowheight();
            //});
            //self.upgradeServiceComponents();
        }
        ServicesvgController.prototype.removePopovers = function () {
            $('.popover').remove();
        };
        ServicesvgController.prototype.portviewServer = function (server) {
            var self = this;
            self.removePopovers();
            self.$scope.onServerPortViewClick({ tab: 'portView', server: server });
        };
        ServicesvgController.prototype.viewLogs = function (component) {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var viewLogsModal = self.Modal({
                title: self.$translate.instant("LOGS_RESOURCE_SEVERITIES_ComponentLogsModalTitle", { componentName: component.name }),
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/resourcelogs.html',
                controller: 'ResourceLogsController as resourceLogsController',
                params: {
                    componentid: component.id,
                    deploymentid: self.$scope.serviceId,
                    componentname: component.name
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    viewLogsModal.modal.dismiss();
                }
            });
            viewLogsModal.modal.show();
        };
        ServicesvgController.prototype.hasApplication = function (component) {
            if (component.type == 'storage' || component.type == 'cluster' || component.type === 'scaleio')
                return false;
            return _.find(component.relatedcomponents, function (relatedComponent) { return relatedComponent.installOrder > 0; });
        };
        ServicesvgController.prototype.clearTooltips = function () {
            $('[data-toggle="tooltip"]').tooltip('hide');
        };
        ServicesvgController.prototype.windowResize = function () {
            var self = this;
            $(window).resize(function () {
                //console.log('inside resize event');
                if (self.pollwindowtimer)
                    self.$timeout.cancel(self.pollwindowtimer);
                //if (self.windowtimer) self.$timeout.cancel(self.windowtimer);
                self.pollwindowtimer = self.$timeout(function () {
                    self.calculatewindowheight();
                }, 1);
                //self.pollwindowtimer = self.calculatewindowheight();
            });
        };
        ServicesvgController.prototype.$onDestroy = function () {
            var self = this;
            $(window).off("resize");
            if (self.windowtimer)
                self.$timeout.cancel(self.windowtimer);
            if (self.pollwindowtimer)
                self.$timeout.cancel(self.pollwindowtimer);
            if (self.serviceTimeout)
                self.$timeout.cancel(self.serviceTimeout);
        };
        ServicesvgController.prototype.centerValue = function (components) {
            var self = this;
            if (components <= (self.mostItems - 1)) {
                var x = ((self.mostItems - components) / 2) * self.intervalX;
                return x;
            }
        };
        /* Original service stuff start */
        ServicesvgController.prototype.doAddExistingService = function () {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var addServiceWizard = self.Modal({
                title: 'Add Existing Service',
                onHelp: function () {
                    self.GlobalServices.showHelp('AddingExistingService');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/pools/addpoolwizard.html',
                controller: 'AddPoolWizardController as AddPoolWizard',
                params: {},
                onComplete: function () {
                    self.pauseRefresh = false;
                },
                onCancel: function () {
                    addServiceWizard.modal.dismiss();
                    self.pauseRefresh = false;
                }
            });
            addServiceWizard.modal.show();
        };
        ServicesvgController.prototype.doMigrate = function () {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var migrateModal = self.Modal({
                title: self.$translate.instant('MIGRATE_SERVER_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('migrateserver');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/migrate.html',
                controller: 'MigrateController as migrateController',
                params: {
                    serviceId: self.serviceId
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                    self.getserviceData();
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    migrateModal.modal.dismiss();
                }
            });
            migrateModal.modal.show();
        };
        ServicesvgController.prototype.viewSettings = function () {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var modal = self.Modal({
                title: self.$translate.instant('TEMPLATES_TEMPLATESETTINGS_MODAL_ServiceSettings'),
                onHelp: function () {
                    self.GlobalServices.showHelp('ViewDeploymentSettings');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/templatebuilder/viewtemplatedetailsmodal.html',
                controller: 'ViewTemplateDetailsModalController as viewTemplateDetailsModalController',
                params: {
                    service: angular.copy(self.service)
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        ServicesvgController.prototype.doDeleteResources = function () {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var deleteModal = self.Modal({
                title: self.$translate.instant('SERVICE_DELETE_RESOURCES_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('DeleteResources');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/deleteresources.html',
                controller: 'DeleteResourcesController as deleteResources',
                params: {
                    serviceId: self.serviceId
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                    self.getserviceData();
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    deleteModal.modal.dismiss();
                }
            });
            deleteModal.modal.show();
        };
        ServicesvgController.prototype.deleteService = function () {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var deleteserviceModal = self.Modal({
                title: self.$translate.instant('SERVICE_DETAIL_RemoveService'),
                onHelp: function () {
                    self.GlobalServices.showHelp('deleteservice');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/deleteservice.html',
                controller: 'DeleteServiceModalController as DeleteServiceModal',
                params: {
                    service: angular.copy(self.service)
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                    //self.getserviceData();
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    deleteserviceModal.modal.dismiss();
                }
            });
            deleteserviceModal.modal.show();
        };
        ServicesvgController.prototype.doUpdateFirmware = function () {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var updateFirmware = self.Modal({
                title: self.$translate.instant('SERVICE_APPLY_FIRMWARE_UPDATES_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('resourcesupdatingfirmware');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/updateservicefirmware.html',
                controller: 'UpdateServiceFirmwareController as UpdateServiceFirmware',
                params: {
                    id: self.serviceId,
                    mode: 'service'
                },
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICE_APPLY_FIRMWARE_UPDATES_Cancel_Confirmation'));
                    confirm
                        .then(function () {
                        updateFirmware.modal.dismiss();
                    })
                        .finally(function () { self.pauseRefresh = false; });
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                    self.getserviceData();
                }
            });
            updateFirmware.modal.show();
        };
        ServicesvgController.prototype.editService = function (revertRouteOnFinish) {
            var self = this;
            self.pauseRefresh = true;
            var editServiceModal = self.Modal({
                title: self.$translate.instant('SERVICE_DETAIL_EditServiceInformation'),
                onHelp: function () {
                    self.GlobalServices.showHelp('EditServiceInformation');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/editservice.html',
                controller: 'EditServiceModalController as editService',
                params: {
                    id: self.serviceId
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                    if (revertRouteOnFinish) {
                        self.$location.path("/service/" + self.$scope.serviceId + "/details");
                    }
                    self.getserviceData();
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    editServiceModal.modal.dismiss();
                }
            });
            editServiceModal.modal.show();
        };
        ServicesvgController.prototype.openFirmwareReport = function () {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var firmwareReportModal = self.Modal({
                title: self.$translate.instant('SERVICES_SERVICE_FirmwareReportTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('viewfirmwarecomplianceservice');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/servicecompliancereport.html',
                controller: 'ServiceComplianceReportController as serviceComplianceReportController',
                params: {
                    type: "service",
                    id: self.serviceId
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    firmwareReportModal.modal.dismiss();
                }
            });
            firmwareReportModal.modal.show();
        };
        ServicesvgController.prototype.exportService = function () {
            var self = this;
            self.$window.location.href = self.Commands.data.services.exportService + '/' + (self.serviceId ? self.serviceId : '');
        };
        ServicesvgController.prototype.generateTroubleshootingBundle = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.applianceManagement.exportTroubleshootingBundle, null)
                .then(function (data) {
                $("body").append("<iframe src='" + data.data.responseObj + "' style='display: none;' ></iframe>");
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ServicesvgController.prototype.generateTroubleBundle_modal = function () {
            var self = this;
            var theModal = self.Modal({
                title: self.$translate.instant('SETTINGS_GenerateTroubleshootingBundle'),
                /*onHelp() {
                    self.GlobalServices.showHelp('Addingfirmwarerepositories');
                },*/
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/generatetroubleshootingbundlemodal.html',
                controller: 'GenerateTroubleshootingBundleModalController as generateTroubleshootingBundleModalController',
                params: {
                    callingPage: 'Service',
                    serviceId: self.serviceId
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            theModal.modal.show();
        };
        ServicesvgController.prototype.retryService_Modal = function () {
            var self = this;
            var showAAParm = false;
            self.removePopovers();
            self.pauseRefresh = true;
            //console.log('retryService_Modal, self.service:');
            //console.log(self.service);
            //console.log('self.service.firmwarePackageId:  ' + self.service.firmwarePackageId);
            if (self.service.firmwarePackageId != null && self.service.firmwarePackageId != '' && self.service.firmwarePackageId != 'undefined') {
                showAAParm = true;
            }
            else {
                showAAParm = false;
            }
            var modal = self.Modal({
                title: self.$translate.instant('GENERIC_Warning'),
                //onHelp() {
                //    //TODO: get new help topic guid
                //    self.GlobalServices.showHelp('');
                //},
                modalSize: 'modal-md',
                titleIcon: 'warning ci-health-warning-tri-bang',
                templateUrl: 'views/services/retryServiceModal.html',
                controller: 'RetryServiceController as RetryServiceController',
                params: {
                    //serviceId: angular.copy(self.serviceId),
                    service: angular.copy(self.service),
                    showAlternateAction: showAAParm
                },
                onComplete: function (alternateAction) {
                    if (alternateAction == true) {
                        self.doUpdateFirmware();
                    }
                    self.pauseRefresh = false;
                    self.getserviceData();
                }
            });
            modal.modal.show();
        };
        ServicesvgController.prototype.updateInventory = function () {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var modalTitle = self.$translate.instant('SERVICES_UPDATE_RESOURCES_UpdateResources');
            var modal = self.Modal({
                title: modalTitle,
                onHelp: function () {
                    //TODO: get new help topic guid
                    self.GlobalServices.showHelp('UpdateInventory');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/updateinventorymodal.html',
                controller: 'UpdateInventoryModalController as updateInventoryModalController',
                params: {
                    service: angular.copy(self.service)
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                    self.getserviceData();
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        /* Original service stuff end */
        //The window size is constantly being calculated
        ServicesvgController.prototype.calculatewindowheight = function () {
            var self = this;
            //self.enableSvgLogging && console.log('redrawing window');
            self.windowtimer = self.$timeout(function () {
                self.svgcanvaswidth = $('#serviceBuilderSVG').width();
                self.windowheight = $(window).height() - 300;
                //if (self.windowheight >= 300) {
                //    self.svgheight = self.windowheight - 50;
                //}
                //min height
                if (self.windowheight <= 600) {
                    self.svgheight = self.windowheight - 50;
                    if (self.svgheight <= 500) {
                        self.svgheight = 500;
                    }
                }
                //max height
                if (self.windowheight >= 600) {
                    self.svgheight = self.windowheight - 50;
                    if (self.svgheight >= 600) {
                        self.svgheight = 600;
                    }
                }
                self.componentscale = self.svgheight * .002;
                self.Xlines = self.svgheight * .065;
                self.intervalX = 15;
                if (self.svgcanvaswidth >= 800 && self.svgheight <= 600) {
                    self.intervalX = 10;
                }
                if (self.svgcanvaswidth <= 800 && self.svgheight >= 600) {
                    self.intervalX = 18;
                }
                //The x interval needs to change depending on the size of the window and canvas
                //short windows
                //if (self.windowheight <= 601 && self.svgcanvaswidth <= 400) {
                //    self.intervalX = 25;
                //}
                //if (self.windowheight <= 601 && self.svgcanvaswidth >= 400) {
                //    self.intervalX = 14;
                //}
                ////tall windows
                //if (self.windowheight >= 601 && self.svgcanvaswidth >= 800) {
                //    self.intervalX = 15;
                //}
                //if (self.windowheight >= 601 && self.svgcanvaswidth <= 800) {
                //    self.intervalX = 20;
                //    self.componentscale = self.svgheight * .0015;
                //    self.Xlines = self.svgheight * .052;
                //}
                self.changewidths();
            }, self.timerIntervals);
        };
        //This gets called after calculating window height and after drawing the lines
        ServicesvgController.prototype.changewidths = function () {
            var self = this;
            $('#drawingContainer').css('height', (self.svgheight - 50 + 'px'));
            if (self.render && self.mostItems >= 1 && self.furthestComponentId !== '') {
                //Chrome needs this: It adjusts heights and widths of various DOM containers to allow horizontal scrolling on the SVG
                if (self.render) {
                    //if (self.windowheight >= 300) {
                    //    $('#drawingContainer').css('height', (self.windowheight * .8 + 'px'));
                    //}
                    //$('#drawingContainer').css('width', '400px');
                    var BScontainerWidth = $('#servicearticle').width();
                    $('#drawingContainer').css('width', BScontainerWidth);
                    $('#drawingContainer').css('width', (BScontainerWidth).toString() + 'px');
                    $('#serviceBuilderSVG').css('width', (BScontainerWidth - 45).toString() + 'px');
                    var widestRowStart = $('#' + self.mostComponents).offset().left;
                    var widestRowEnd = $('#' + self.furthestComponentId + ' #topright').offset().left;
                    var wideDivwidth = widestRowEnd - widestRowStart;
                    $('#wideDiv').css('width', (wideDivwidth + 250).toString() + 'px');
                    $('#deselectionBG').attr('width', (wideDivwidth + 250).toString() + 'px');
                    //Adjust background lines
                    self.furthestSVGPoint = $('#' + self.furthestComponentId).attr('x');
                    self.furthestSVGPoint = parseInt(self.furthestSVGPoint.replace(/[^\w\s]/gi, '')) + 50;
                    self.furthestSVGPoint = self.furthestSVGPoint.toString() + '%';
                    if (self.furthestSVGPoint.replace(/[^\w\s]/gi, '') <= 100) {
                        self.furthestSVGPoint = '100%';
                    }
                }
            }
            else {
                //if (self.windowheight >= 300) {
                //    $('#drawingContainer').css('height', (self.windowheight * .8 + 'px'));
                //}
                //$('#drawingContainer').css('width', '400px');
                var BScontainerWidth = $('#servicearticle').width();
                $('#drawingContainer').css('width', BScontainerWidth);
                $('#drawingContainer').css('width', (BScontainerWidth).toString() + 'px !important');
                $('#serviceBuilderSVG').css('width', (BScontainerWidth - 45).toString() + 'px');
                self.furthestSVGPoint = '100%';
            }
        };
        ServicesvgController.prototype.addComponent = function (resourceType) {
            var self = this, component = {
                controller: "ServiceComponentModalController as serviceComponentModalController",
                templateUrl: "views/services/servicecomponentwrapper.html"
            }, network = {
                controller: "AddNetworkModalController as addNetworkModalController",
                templateUrl: "views/networking/networks/addnetworktoservice.html"
            }, application = {
                controller: "AddApplicationWizardController as Application",
                templateUrl: "views/addapplicationwizard.html"
            }, defaultParams = {
                mode: "edit",
                action: "add",
                type: resourceType,
                templateId: self.service.templateId,
                serviceId: self.service.id,
                template: angular.copy(self.service),
                service: angular.copy(self.service)
            }, modalProps = {};
            self.pauseRefresh = true;
            self.removePopovers();
            switch (resourceType) {
                case "application":
                    modalProps = angular.extend(application, {
                        title: self.$translate.instant("ADDAPPLICATION_Title"),
                        onHelp: function () {
                            self.GlobalServices.showHelp('addapplicationservice');
                        },
                        params: {
                            template: null,
                            service: self.service,
                            action: "add"
                        }
                    });
                    break;
                case "network":
                    modalProps = angular.extend(network, {
                        title: self.$translate.instant("SERVICES_AddNetwork"),
                        onHelp: function () {
                            self.GlobalServices.showHelp('DeployServiceAddNetwork');
                        },
                        params: defaultParams
                    });
                    break;
                case "storage":
                    modalProps = angular.extend(component, {
                        title: self.$translate.instant("COMPONENTEDITOR_AddVolume"),
                        onHelp: function () {
                            self.GlobalServices.showHelp('servicesaddstorage');
                        },
                        params: defaultParams
                    });
                    break;
                case "server":
                    modalProps = angular.extend(component, {
                        title: self.$translate.instant("COMPONENTEDITOR_AddServerComponent"),
                        onHelp: function () {
                            self.GlobalServices.showHelp('servicesaddserver');
                        },
                        params: defaultParams
                    });
                    break;
                case "cluster":
                    modalProps = angular.extend(component, {
                        title: self.$translate.instant("COMPONENTEDITOR_ClusterComponent"),
                        onHelp: function () {
                            self.GlobalServices.showHelp('adjustresources');
                        },
                        params: defaultParams
                    });
                    break;
                case "vm":
                    modalProps = angular.extend(component, {
                        title: self.$translate.instant("COMPONENTEDITOR_AddVirtualMachinesVMs"),
                        onHelp: function () {
                            self.GlobalServices.showHelp('servicesaddvm');
                        },
                        params: defaultParams
                    });
                    break;
                default:
                    //if title option is selected, do nothing
                    return;
            }
            //build and launch the modal
            var componentEditModal = self.Modal(angular.extend({
                modalSize: "modal-lg",
                onComplete: function () {
                    self.pauseRefresh = false;
                    self.getserviceData();
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    componentEditModal.modal.dismiss();
                }
            }, modalProps));
            componentEditModal.modal.show();
            //reset the dropdown
            self.addResource = null;
        };
        ServicesvgController.prototype.updateServiceComponents = function () {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var modal = self.Modal({
                title: self.$translate.instant('SERVICE_DETAIL_UpgradeServiceComponents'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/updatecomponents.html',
                controller: 'UpdateComponentsController as updateComponentsController',
                params: {
                    serviceId: self.serviceId
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                    self.getserviceData();
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        ServicesvgController.prototype.deleteApplications = function (selectedComponent) {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var stopManagingApplicationsModal = self.Modal({
                title: self.$translate.instant('STOP_MANAGING_APPLICATIONS_Title', { componentName: selectedComponent.name }),
                modalSize: 'modal-lg',
                templateUrl: 'views/stopmanagingapplications.html',
                controller: 'StopManagingApplicationsModalController as Stop',
                params: {
                    serviceId: self.serviceId,
                    selectedComponent: selectedComponent
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                    self.getserviceData();
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    stopManagingApplicationsModal.modal.dismiss();
                }
            });
            stopManagingApplicationsModal.modal.show();
        };
        ServicesvgController.prototype.editApplications = function (selectedComponent) {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var addApplicationWizard = self.Modal({
                title: self.$translate.instant('EDITAPPLICATION_Title', { componentName: selectedComponent.name }),
                modalSize: 'modal-lg',
                templateUrl: 'views/addapplicationwizard.html',
                controller: 'AddApplicationWizardController as Application',
                params: {
                    service: self.service,
                    action: 'edit',
                    id: selectedComponent.id
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                    self.getserviceData();
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    addApplicationWizard.modal.dismiss();
                }
            });
            addApplicationWizard.modal.show();
        };
        //Get the service data
        ServicesvgController.prototype.getserviceData = function () {
            var _this = this;
            var self = this;
            self.removePopovers();
            if (self.pauseRefresh) {
                //skip call and wait for next refresh cycle
                self.$timeout.cancel(self.serviceTimeout);
                self.serviceTimeout = self.$timeout(function () {
                    self.getserviceData();
                }, self.serviceTimeoutTime); //1 minute
                return;
            }
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            //Shut everything down and start over
            self.selectedComponent = {};
            self.render = false;
            self.service = '';
            $('#TemplateBuilderSVGLines').empty();
            $('#TemplateBuilderSVGHoverLines').empty();
            $('#TemplateBuilderSVGSelectedLines').empty();
            $(window).off("resize");
            if (self.windowtimer)
                self.$timeout.cancel(self.windowtimer);
            if (self.pollwindowtimer)
                self.$timeout.cancel(self.pollwindowtimer);
            self.mostItems = 0;
            self.intervalX = 0;
            //New call for data
            self.$http.post(self.Commands.data.services.getServiceById, { id: self.serviceId })
                .then(function (data) {
                self.service = data.data.responseObj;
                //self.service = { "id": "ff80808166e9f49e0166ea52b8140f5a", "name": "4nodeHCI", "template": "4nodeHCI", "health": "yellow", "deployedBy": "admin", "deployedOn": "2018-11-06T19:34:20.188Z", "description": null, "errors": null, "firmwareCompliant": "noncompliant", "firmwarePackageName": "RCM 3.3.4 (VxFlex OS 2.6.1) (2)", "brownField": false, "count_application": 0, "count_cluster": 2, "count_server": 4, "count_storage": 2, "count_switch": 0, "count_vm": 4, "count_scaleio": 1, "components": [{ "id": "cedc09e6-2db8-4d85-a2a6-c438171e5835", "name": "avgw140-261-123", "type": "scaleio", "subtype": "HYPERCONVERGED", "componentid": "component-scaleio-gateway-1", "identifier": null, "helptext": null, "relatedcomponents": [{ "id": "f7cb158f-8db4-4bd0-a94f-d23203539937", "name": "Hyperconverged-3", "installOrder": null, "subtype": null }, { "id": "9c4f0752-b899-4308-a9f6-35ad60be6c43", "name": "Hyperconverged", "installOrder": null, "subtype": null }, { "id": "c3e8e319-9599-4ec0-9508-3807b113c52c", "name": "Hyperconverged-4", "installOrder": null, "subtype": null }, { "id": "b3234398-576f-413c-bb6c-b59ff11bd85a", "name": "Hyperconverged-2", "installOrder": null, "subtype": null }], "categories": [], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": null, "network": null, "newComponent": null, "cloned": false, "continueClicked": null, "AsmGUID": "scaleio-100.68.85.140", "puppetCertName": "scaleio-avgw140-261-123", "clonedFromId": null, "allowClone": false, "isComponentValid": true, "raid": null, "configfilename": null, "instances": 1, "errorObj": null }, { "id": "a8a25147-5e58-43a3-85c1-465ce9f6a8bf", "name": "14G-ESXv65CustomerVCSA.asm.delllabs.net", "type": "cluster", "subtype": "HYPERCONVERGED", "componentid": "component-cluster-vcenter-1", "identifier": null, "helptext": null, "relatedcomponents": [{ "id": "f7cb158f-8db4-4bd0-a94f-d23203539937", "name": "Hyperconverged-3", "installOrder": null, "subtype": null }, { "id": "9c4f0752-b899-4308-a9f6-35ad60be6c43", "name": "Hyperconverged", "installOrder": null, "subtype": null }, { "id": "c3e8e319-9599-4ec0-9508-3807b113c52c", "name": "Hyperconverged-4", "installOrder": null, "subtype": null }, { "id": "b3234398-576f-413c-bb6c-b59ff11bd85a", "name": "Hyperconverged-2", "installOrder": null, "subtype": null }], "categories": [], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": null, "network": null, "newComponent": null, "cloned": false, "continueClicked": null, "AsmGUID": "vcenter-100.68.77.55", "puppetCertName": "vcenter-14g-esxv65customervcsa.asm.delllabs.net", "clonedFromId": null, "allowClone": false, "isComponentValid": true, "raid": null, "configfilename": null, "instances": 1, "errorObj": null }, { "id": "9c4f0752-b899-4308-a9f6-35ad60be6c43", "name": "server1", "type": "server", "subtype": "HYPERVISOR", "componentid": "component-server-1", "identifier": "host-5934", "helptext": null, "relatedcomponents": [{ "id": "cedc09e6-2db8-4d85-a2a6-c438171e5835", "name": "avgw140-261-123", "installOrder": null, "subtype": null }, { "id": "1a07d408-8f43-4e84-be75-58f84f562492", "name": "pk-scl-vol-bf", "installOrder": null, "subtype": null }, { "id": "a8a25147-5e58-43a3-85c1-465ce9f6a8bf", "name": "VMWare Cluster", "installOrder": null, "subtype": null }, { "id": "061394da-2514-4575-bb2e-e69f3adb1367", "name": "pk-scl-vol-gf", "installOrder": null, "subtype": null }], "categories": [], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": true, "network": null, "newComponent": null, "cloned": false, "continueClicked": null, "AsmGUID": "ff808081655d48c801655d86300302e9", "puppetCertName": "rackserver-jgkp7m2", "clonedFromId": null, "allowClone": true, "isComponentValid": true, "raid": null, "configfilename": null, "instances": 1, "errorObj": null }, { "id": "b3234398-576f-413c-bb6c-b59ff11bd85a", "name": "server2", "type": "server", "subtype": "HYPERVISOR", "componentid": "component-server-1", "identifier": "host-5683", "helptext": null, "relatedcomponents": [{ "id": "cedc09e6-2db8-4d85-a2a6-c438171e5835", "name": "avgw140-261-123", "installOrder": null, "subtype": null }, { "id": "1a07d408-8f43-4e84-be75-58f84f562492", "name": "pk-scl-vol-bf", "installOrder": null, "subtype": null }, { "id": "a8a25147-5e58-43a3-85c1-465ce9f6a8bf", "name": "VMWare Cluster", "installOrder": null, "subtype": null }, { "id": "061394da-2514-4575-bb2e-e69f3adb1367", "name": "pk-scl-vol-gf", "installOrder": null, "subtype": null }], "categories": [], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": true, "network": null, "newComponent": null, "cloned": true, "continueClicked": null, "AsmGUID": "ff808081655d48c801655d862fc702e8", "puppetCertName": "rackserver-jgks7m2", "clonedFromId": "9c4f0752-b899-4308-a9f6-35ad60be6c43", "allowClone": true, "isComponentValid": true, "raid": null, "configfilename": null, "instances": 1, "errorObj": null }, { "id": "f7cb158f-8db4-4bd0-a94f-d23203539937", "name": "server3", "type": "server", "subtype": "HYPERVISOR", "componentid": "component-server-1", "identifier": "host-5685", "helptext": null, "relatedcomponents": [{ "id": "cedc09e6-2db8-4d85-a2a6-c438171e5835", "name": "avgw140-261-123", "installOrder": null, "subtype": null }, { "id": "1a07d408-8f43-4e84-be75-58f84f562492", "name": "pk-scl-vol-bf", "installOrder": null, "subtype": null }, { "id": "a8a25147-5e58-43a3-85c1-465ce9f6a8bf", "name": "VMWare Cluster", "installOrder": null, "subtype": null }, { "id": "061394da-2514-4575-bb2e-e69f3adb1367", "name": "pk-scl-vol-gf", "installOrder": null, "subtype": null }], "categories": [], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": true, "network": null, "newComponent": null, "cloned": true, "continueClicked": null, "AsmGUID": "ff808081655d48c801655d862f8f02e7", "puppetCertName": "rackserver-jgkr7m2", "clonedFromId": "9c4f0752-b899-4308-a9f6-35ad60be6c43", "allowClone": true, "isComponentValid": true, "raid": null, "configfilename": null, "instances": 1, "errorObj": null }, { "id": "c3e8e319-9599-4ec0-9508-3807b113c52c", "name": "server4", "type": "server", "subtype": "HYPERVISOR", "componentid": "component-server-1", "identifier": "host-5687", "helptext": null, "relatedcomponents": [{ "id": "cedc09e6-2db8-4d85-a2a6-c438171e5835", "name": "avgw140-261-123", "installOrder": null, "subtype": null }, { "id": "1a07d408-8f43-4e84-be75-58f84f562492", "name": "pk-scl-vol-bf", "installOrder": null, "subtype": null }, { "id": "a8a25147-5e58-43a3-85c1-465ce9f6a8bf", "name": "VMWare Cluster", "installOrder": null, "subtype": null }, { "id": "061394da-2514-4575-bb2e-e69f3adb1367", "name": "pk-scl-vol-gf", "installOrder": null, "subtype": null }], "categories": [], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": true, "network": null, "newComponent": null, "cloned": true, "continueClicked": null, "AsmGUID": "ff808081655da6b601655deb48fb01a5", "puppetCertName": "rackserver-9jlp9n2", "clonedFromId": "9c4f0752-b899-4308-a9f6-35ad60be6c43", "allowClone": true, "isComponentValid": true, "raid": null, "configfilename": null, "instances": 1, "errorObj": null }, { "id": "061394da-2514-4575-bb2e-e69f3adb1367", "name": "pk-scl-vol-gf", "type": "storage", "subtype": null, "componentid": "component-flexos-storage-1", "identifier": "b8e8d51700000000", "helptext": null, "relatedcomponents": [{ "id": "f7cb158f-8db4-4bd0-a94f-d23203539937", "name": "server3", "installOrder": null, "subtype": null }, { "id": "9c4f0752-b899-4308-a9f6-35ad60be6c43", "name": "server1", "installOrder": null, "subtype": null }, { "id": "c3e8e319-9599-4ec0-9508-3807b113c52c", "name": "server4", "installOrder": null, "subtype": null }, { "id": "b3234398-576f-413c-bb6c-b59ff11bd85a", "name": "server2", "installOrder": null, "subtype": null }], "categories": [], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": null, "network": null, "newComponent": null, "cloned": false, "continueClicked": null, "AsmGUID": "scaleio-100.68.85.140", "puppetCertName": "scaleio-avgw140-261-123", "clonedFromId": "component-flexos-storage-1", "allowClone": false, "isComponentValid": true, "raid": null, "configfilename": null, "instances": 1, "errorObj": null }, { "id": "1a07d408-8f43-4e84-be75-58f84f562492", "name": "pk-scl-vol-bf", "type": "storage", "subtype": null, "componentid": "component-flexos-storage-1", "identifier": "b8e8d51800000001", "helptext": null, "relatedcomponents": [{ "id": "f7cb158f-8db4-4bd0-a94f-d23203539937", "name": "server3", "installOrder": null, "subtype": null }, { "id": "9c4f0752-b899-4308-a9f6-35ad60be6c43", "name": "server1", "installOrder": null, "subtype": null }, { "id": "c3e8e319-9599-4ec0-9508-3807b113c52c", "name": "server4", "installOrder": null, "subtype": null }, { "id": "b3234398-576f-413c-bb6c-b59ff11bd85a", "name": "server2", "installOrder": null, "subtype": null }], "categories": [], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": null, "network": null, "newComponent": null, "cloned": false, "continueClicked": null, "AsmGUID": "scaleio-100.68.85.140", "puppetCertName": "scaleio-avgw140-261-123", "clonedFromId": null, "allowClone": false, "isComponentValid": true, "raid": null, "configfilename": null, "instances": 1, "errorObj": null }], "expires": null, "servers": 0, "ram": 0, "processors": 0, "arrays": 0, "volumes": 0, "vlans": 0, "networktype": null, "vms": 0, "clusters": 0, "type": null, "state": "Deployed", "createddate": "2018-11-06T18:39:41.588Z", "createdBy": null, "priority": null, "compute": 0, "storage": 0, "network": 0, "serverlist": [{ "id": "9c4f0752-b899-4308-a9f6-35ad60be6c43", "health": "green", "healthmessage": "OK", "ipAddress": "100.68.64.154", "serviceTag": "JGKP7M2", "deviceType": "RackServer", "compliant": "noncompliant", "state": null, "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.64.154", "deviceid": "JGKP7M2", "hostname": "server1", "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": "Abels14GPool", "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [], "serverpool": "Abels14GPool", "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [{ "ipaddress": "100.68.77.134", "ipaddressurl": "https://100.68.77.134" }], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": null, "clustername": null, "asmGUID": "ff808081655d48c801655d86300302e9", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": "Hyper-converged", "mdmRole": "Secondary", "vxflexosmanagementipaddress": "100.68.85.133", "primarymdmipaddress": null }, { "id": "b3234398-576f-413c-bb6c-b59ff11bd85a", "health": "green", "healthmessage": "OK", "ipAddress": "100.68.64.155", "serviceTag": "JGKS7M2", "deviceType": "RackServer", "compliant": "noncompliant", "state": null, "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.64.155", "deviceid": "JGKS7M2", "hostname": "server2", "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": "Abels14GPool", "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [], "serverpool": "Abels14GPool", "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [{ "ipaddress": "100.68.77.135", "ipaddressurl": "https://100.68.77.135" }], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": null, "clustername": null, "asmGUID": "ff808081655d48c801655d862fc702e8", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": "Hyper-converged", "mdmRole": "Standby MDM", "vxflexosmanagementipaddress": "100.68.85.134", "primarymdmipaddress": null }, { "id": "f7cb158f-8db4-4bd0-a94f-d23203539937", "health": "green", "healthmessage": "OK", "ipAddress": "100.68.64.156", "serviceTag": "JGKR7M2", "deviceType": "RackServer", "compliant": "noncompliant", "state": null, "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.64.156", "deviceid": "JGKR7M2", "hostname": "server3", "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": "Abels14GPool", "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [], "serverpool": "Abels14GPool", "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [{ "ipaddress": "100.68.77.136", "ipaddressurl": "https://100.68.77.136" }], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": null, "clustername": null, "asmGUID": "ff808081655d48c801655d862f8f02e7", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": "Hyper-converged", "mdmRole": "Tie Breaker", "vxflexosmanagementipaddress": "100.68.85.135", "primarymdmipaddress": null }, { "id": "c3e8e319-9599-4ec0-9508-3807b113c52c", "health": "green", "healthmessage": "OK", "ipAddress": "100.68.65.170", "serviceTag": "9JLP9N2", "deviceType": "RackServer", "compliant": "noncompliant", "state": null, "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.65.170", "deviceid": "9JLP9N2", "hostname": "server4", "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": "Abels14GPool", "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [], "serverpool": "Abels14GPool", "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [{ "ipaddress": "100.68.77.137", "ipaddressurl": "https://100.68.77.137" }], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": null, "clustername": null, "asmGUID": "ff808081655da6b601655deb48fb01a5", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": "Hyper-converged", "mdmRole": "Primary", "vxflexosmanagementipaddress": "100.68.85.136", "primarymdmipaddress": null }], "storagelist": [{ "id": "061394da-2514-4575-bb2e-e69f3adb1367", "health": "unknown", "healthmessage": "", "ipAddress": "100.68.85.140", "serviceTag": "avgw140-261-123", "deviceType": "scaleio", "compliant": "compliant", "state": null, "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.85.140", "deviceid": "avgw140-261-123", "hostname": null, "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": null, "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [{ "id": "b8e8d51700000000", "name": "pk-scl-vol-gf", "size": "24.0 GB" }], "serverpool": null, "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": null, "clustername": null, "asmGUID": "scaleio-100.68.85.140", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": null, "mdmRole": null, "vxflexosmanagementipaddress": null, "primarymdmipaddress": null }, { "id": "1a07d408-8f43-4e84-be75-58f84f562492", "health": "unknown", "healthmessage": "", "ipAddress": "100.68.85.140", "serviceTag": "avgw140-261-123", "deviceType": "scaleio", "compliant": "compliant", "state": null, "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.85.140", "deviceid": "avgw140-261-123", "hostname": null, "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": null, "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [{ "id": "b8e8d51800000001", "name": "pk-scl-vol-bf", "size": "56.0 GB" }], "serverpool": null, "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": null, "clustername": null, "asmGUID": "scaleio-100.68.85.140", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": null, "mdmRole": null, "vxflexosmanagementipaddress": null, "primarymdmipaddress": null }], "networklist": [], "clusterlist": [{ "id": "a8a25147-5e58-43a3-85c1-465ce9f6a8bf", "health": "unknown", "healthmessage": "", "ipAddress": "100.68.77.55", "serviceTag": "14G-ESXv65CustomerVCSA.asm.delllabs.net", "deviceType": "vcenter", "compliant": "compliant", "state": null, "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.77.55", "deviceid": "14G-ESXv65CustomerVCSA.asm.delllabs.net", "hostname": null, "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": null, "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [], "serverpool": null, "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": "AVDC1", "clustername": "AVCL1", "asmGUID": "vcenter-100.68.77.55", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": null, "mdmRole": null, "vxflexosmanagementipaddress": null, "primarymdmipaddress": null }], "applicationlist": [], "vmlist": [], "activityLogs": [{ "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The 4nodeHCI deployment is started.", "logTimeStamp": "2018-11-12 08:42:07 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKP7M2 100.68.64.154 networking on Nexus9000 100.68.69.164 is configuring.", "logTimeStamp": "2018-11-12 08:43:56 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKS7M2 100.68.64.155 networking on Nexus9000 100.68.69.164 is configuring.", "logTimeStamp": "2018-11-12 08:43:56 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKR7M2 100.68.64.156 networking on Nexus9000 100.68.69.164 is configuring.", "logTimeStamp": "2018-11-12 08:43:56 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node 9JLP9N2 100.68.65.170 networking on Nexus9000 100.68.69.164 is configuring.", "logTimeStamp": "2018-11-12 08:43:56 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKP7M2 100.68.64.154 networking on Nexus9000 100.68.69.165 is configuring.", "logTimeStamp": "2018-11-12 08:44:31 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKS7M2 100.68.64.155 networking on Nexus9000 100.68.69.165 is configuring.", "logTimeStamp": "2018-11-12 08:44:31 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKR7M2 100.68.64.156 networking on Nexus9000 100.68.69.165 is configuring.", "logTimeStamp": "2018-11-12 08:44:31 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node 9JLP9N2 100.68.65.170 networking on Nexus9000 100.68.69.165 is configuring.", "logTimeStamp": "2018-11-12 08:44:31 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The initial configuration for node components is processing.", "logTimeStamp": "2018-11-12 08:47:17 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The initial configuration for component server2 is complete.", "logTimeStamp": "2018-11-12 08:47:17 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The initial configuration for component server4 is complete.", "logTimeStamp": "2018-11-12 08:47:17 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The initial configuration for component server3 is complete.", "logTimeStamp": "2018-11-12 08:47:17 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The initial configuration for component server1 is complete.", "logTimeStamp": "2018-11-12 08:47:18 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The initial processing of node components is complete.", "logTimeStamp": "2018-11-12 08:47:18 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of storage components started.", "logTimeStamp": "2018-11-12 08:47:18 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The VxFlex OS volume pk-scl-vol-bf is being mapped.", "logTimeStamp": "2018-11-12 08:47:18 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The VxFlex OS datastores are being mapped.", "logTimeStamp": "2018-11-12 08:47:21 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The pk-scl-vol-bf deployment is complete.", "logTimeStamp": "2018-11-12 08:47:53 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The VxFlex OS volume pk-scl-vol-gf is being mapped.", "logTimeStamp": "2018-11-12 08:47:53 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The VxFlex OS datastores are being mapped.", "logTimeStamp": "2018-11-12 08:47:56 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The pk-scl-vol-gf deployment is complete.", "logTimeStamp": "2018-11-12 08:48:16 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of storage components is complete.", "logTimeStamp": "2018-11-12 08:48:16 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of node components started.", "logTimeStamp": "2018-11-12 08:48:16 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The server1 deployment is complete.", "logTimeStamp": "2018-11-12 08:48:16 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The server3 deployment is complete.", "logTimeStamp": "2018-11-12 08:48:16 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The server4 deployment is complete.", "logTimeStamp": "2018-11-12 08:48:16 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The server2 deployment is complete.", "logTimeStamp": "2018-11-12 08:48:16 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of node components is complete.", "logTimeStamp": "2018-11-12 08:48:16 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of cluster components started.", "logTimeStamp": "2018-11-12 08:48:16 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The 14G-ESXv65CustomerVCSA.asm.delllabs.net deployment is complete.", "logTimeStamp": "2018-11-12 09:06:27 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of cluster components is complete.", "logTimeStamp": "2018-11-12 09:06:27 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKP7M2 100.68.64.154 networking on Nexus9000 100.68.69.164 is configuring.", "logTimeStamp": "2018-11-12 09:07:03 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKS7M2 100.68.64.155 networking on Nexus9000 100.68.69.164 is configuring.", "logTimeStamp": "2018-11-12 09:07:03 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKR7M2 100.68.64.156 networking on Nexus9000 100.68.69.164 is configuring.", "logTimeStamp": "2018-11-12 09:07:03 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node 9JLP9N2 100.68.65.170 networking on Nexus9000 100.68.69.164 is configuring.", "logTimeStamp": "2018-11-12 09:07:04 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKP7M2 100.68.64.154 networking on Nexus9000 100.68.69.165 is configuring.", "logTimeStamp": "2018-11-12 09:07:39 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKS7M2 100.68.64.155 networking on Nexus9000 100.68.69.165 is configuring.", "logTimeStamp": "2018-11-12 09:07:39 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node JGKR7M2 100.68.64.156 networking on Nexus9000 100.68.69.165 is configuring.", "logTimeStamp": "2018-11-12 09:07:40 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The node 9JLP9N2 100.68.65.170 networking on Nexus9000 100.68.69.165 is configuring.", "logTimeStamp": "2018-11-12 09:07:40 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of virtualmachine components started.", "logTimeStamp": "2018-11-12 09:10:09 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The svm-server1 deployment is complete.", "logTimeStamp": "2018-11-12 09:10:10 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The svm-server2 deployment is complete.", "logTimeStamp": "2018-11-12 09:10:10 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The svm-server4 deployment is complete.", "logTimeStamp": "2018-11-12 09:10:10 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The svm-server3 deployment is complete.", "logTimeStamp": "2018-11-12 09:10:10 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of virtualmachine components is complete.", "logTimeStamp": "2018-11-12 09:10:10 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of VxFlex OS components started.", "logTimeStamp": "2018-11-12 09:10:10 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The VxFlex OS Gateway is being configured.", "logTimeStamp": "2018-11-12 09:10:13 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The VxFlex OS Gateway script is being uploaded to 100.68.85.140.", "logTimeStamp": "2018-11-12 09:10:44 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "Completed execution of VxFlex OS gateway script on 100.68.85.140", "logTimeStamp": "2018-11-12 09:10:49 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The disks are being added to the VxFlex OS storage pools.", "logTimeStamp": "2018-11-12 09:11:30 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The VxFlex OS deployment is complete.", "logTimeStamp": "2018-11-12 09:11:52 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "VxFlex OS deployment complete", "logTimeStamp": "2018-11-12 09:11:52 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of VxFlex OS components is complete.", "logTimeStamp": "2018-11-12 09:11:52 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of storage components started.", "logTimeStamp": "2018-11-12 09:11:52 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The VxFlex OS volume pk-scl-vol-gf is being mapped.", "logTimeStamp": "2018-11-12 09:11:53 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The VxFlex OS volume pk-scl-vol-bf is being mapped.", "logTimeStamp": "2018-11-12 09:11:55 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The VxFlex OS datastores are being mapped.", "logTimeStamp": "2018-11-12 09:11:58 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The pk-scl-vol-bf deployment is complete.", "logTimeStamp": "2018-11-12 09:12:19 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The VxFlex OS datastores are being mapped.", "logTimeStamp": "2018-11-12 09:12:19 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The pk-scl-vol-gf deployment is complete.", "logTimeStamp": "2018-11-12 09:12:42 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The processing of storage components is complete.", "logTimeStamp": "2018-11-12 09:12:42 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "The 4nodeHCI deployment is complete.", "logTimeStamp": "2018-11-12 09:12:42 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "Updating Resource Inventories", "logTimeStamp": "2018-11-12 09:12:48 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "Updated Resource Inventory for Device 14G-ESXv65CustomerVCSA.asm.delllabs.net", "logTimeStamp": "2018-11-12 09:17:37 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "Updated Resource Inventory for Device avgw140-261-123", "logTimeStamp": "2018-11-12 09:17:45 -0Z", "logUser": null, "progress": 0 }, { "id": null, "severity": null, "category": null, "description": null, "date": null, "user": null, "logDetailMessage": null, "logMessage": "Finished Updating Resource Inventories", "logTimeStamp": "2018-11-12 09:17:48 -0Z", "logUser": null, "progress": 0 }], "profile": null, "componentstatus": [{ "componentid": "cedc09e6-2db8-4d85-a2a6-c438171e5835", "deviceid": "cedc09e6-2db8-4d85-a2a6-c438171e5835", "devicetype": "scaleio", "status": "complete", "statustime": "2018-11-12 09:11:52 -0600", "statusmessage": null, "resourcestate": "complete" }, { "componentid": "a8a25147-5e58-43a3-85c1-465ce9f6a8bf", "deviceid": "a8a25147-5e58-43a3-85c1-465ce9f6a8bf", "devicetype": "cluster", "status": "complete", "statustime": "2018-11-12 09:06:27 -0600", "statusmessage": null, "resourcestate": "complete" }, { "componentid": "9c4f0752-b899-4308-a9f6-35ad60be6c43", "deviceid": "9c4f0752-b899-4308-a9f6-35ad60be6c43", "devicetype": "server", "status": "complete", "statustime": "2018-11-12 08:48:16 -0600", "statusmessage": "Firmware does not meet the default firmware repository requirements and is non-compliant.", "resourcestate": "warning" }, { "componentid": "b3234398-576f-413c-bb6c-b59ff11bd85a", "deviceid": "b3234398-576f-413c-bb6c-b59ff11bd85a", "devicetype": "server", "status": "complete", "statustime": "2018-11-12 08:48:16 -0600", "statusmessage": "Firmware does not meet the default firmware repository requirements and is non-compliant.", "resourcestate": "warning" }, { "componentid": "f7cb158f-8db4-4bd0-a94f-d23203539937", "deviceid": "f7cb158f-8db4-4bd0-a94f-d23203539937", "devicetype": "server", "status": "complete", "statustime": "2018-11-12 08:48:16 -0600", "statusmessage": "Firmware does not meet the default firmware repository requirements and is non-compliant.", "resourcestate": "warning" }, { "componentid": "c3e8e319-9599-4ec0-9508-3807b113c52c", "deviceid": "c3e8e319-9599-4ec0-9508-3807b113c52c", "devicetype": "server", "status": "complete", "statustime": "2018-11-12 08:48:16 -0600", "statusmessage": "Firmware does not meet the default firmware repository requirements and is non-compliant.", "resourcestate": "warning" }, { "componentid": "061394da-2514-4575-bb2e-e69f3adb1367", "deviceid": "061394da-2514-4575-bb2e-e69f3adb1367", "devicetype": "storage", "status": "complete", "statustime": "2018-11-12 09:12:42 -0600", "statusmessage": null, "resourcestate": "complete" }, { "componentid": "1a07d408-8f43-4e84-be75-58f84f562492", "deviceid": "1a07d408-8f43-4e84-be75-58f84f562492", "devicetype": "storage", "status": "complete", "statustime": "2018-11-12 09:12:20 -0600", "statusmessage": null, "resourcestate": "complete" }], "canMigrate": false, "canScaleupStorage": true, "canScaleupServer": true, "canScaleupVM": false, "canScaleupCluster": false, "canScaleupApplication": false, "forceRetry": false, "allStandardUsers": false, "assignedUsers": [], "owner": "admin", "canEdit": true, "canDelete": true, "canCancel": false, "canRetry": true, "canDeleteResources": true, "manageFirmware": true, "firmwarePackageId": "ff80808166e9f49e0166eb49a9c615fb", "updateServerFirmware": false, "updateNetworkFirmware": false, "updateStorageFirmware": false, "componentUpdateRequired": false, "canScaleupNetwork": true, "templateId": "ff80808166e9f49e0166ea0f277a0ae5", "resourceHealth": "green", "isHyperV": false, "hasVDS": true, "cancelInprogress": false, "scaleiolist": [{ "id": "cedc09e6-2db8-4d85-a2a6-c438171e5835", "health": "unknown", "healthmessage": "", "ipAddress": "100.68.85.140", "serviceTag": "avgw140-261-123", "deviceType": "scaleio", "compliant": "compliant", "state": null, "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.85.140", "deviceid": "avgw140-261-123", "hostname": "avgw140-261-123", "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": null, "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [], "serverpool": null, "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": null, "clustername": null, "asmGUID": "scaleio-100.68.85.140", "deviceDetails": null, "protectionDomain": "PD-1", "storagePools": [{ "id": "SP-SSD-1", "name": "SP-SSD-1", "scaleIOStorageVolumes": [{ "id": "pk-scl-vol-gf", "name": "pk-scl-vol-gf", "size": null, "type": null, "mappedSDCs": null }, { "id": "pk-scl-vol-bf", "name": "pk-scl-vol-bf", "size": null, "type": null, "mappedSDCs": null }] }], "osMode": null, "mdmRole": null, "vxflexosmanagementipaddress": null, "primarymdmipaddress": "100.68.85.136" }], "enableServiceMode": true, "canUpdateInventory": true };
                //console.log('getserviceData, self.service:');
                //console.log(JSON.stringify(self.service));
                self.service.canDelete = (self.service.health == 'unknown' || self.service.health == 'pending');
                //this testing code is forcing brownField to true
                //self.service.brownField = true;
                self.refresh();
                var deviceTypeList = _.concat(angular.copy(self.service.clusterlist), angular.copy(self.service.serverlist), angular.copy(self.service.storagelist), angular.copy(self.service.vmlist), angular.copy(self.service.scaleiolist));
                angular.forEach(self.service.components, function (device) {
                    var match = _.find(self.service.components, { id: device.id });
                    if (match) {
                        var status = _.find(self.service.componentstatus, { componentid: device.id }) || {};
                        switch (status.resourcestate) {
                            case "complete":
                                status.health = "green";
                                break;
                            case "warning":
                                status.health = "yellow";
                                break;
                            case "unknown":
                            case "inprogress":
                            case "inProgress":
                                status.health = "blue";
                                break;
                            case "pending":
                                status.health = "pending";
                                break;
                            case "error":
                                status.health = "red";
                                break;
                            case "cancelled":
                                status.health = "cancelled";
                                break;
                            case "servicemode":
                                status.health = "servicemode";
                        }
                        angular.extend(match, {
                            componentStatus: angular.copy(status),
                            device: angular.copy(device),
                            deviceTypeListData: _.find(deviceTypeList, { id: match.id })
                        });
                        $(document).off('click', '#edit_' + device.id);
                        $(document).on('click', '#edit_' + device.id, function (evt) {
                            $('body').find('.popover').popover('hide');
                            self.editApplications($(evt.currentTarget).attr('id').split('_')[1]);
                        });
                        $(document).off('click', '#delete_' + device.id);
                        $(document).on('click', '#delete_' + device.id, function (evt) {
                            $('body').find('.popover').popover('hide');
                            self.deleteApplications($(evt.currentTarget).attr('id').split('_')[1]);
                        });
                    }
                });
                //console.log('getserviceData, self.service:');
                //console.log(JSON.stringify(self.service));
                //console.log(self.service);
                self.$scope.service = self.service;
                self.addableComponents = [
                    //{
                    //    id: "application",
                    //    name: this.$translate.instant("SERVICE_DETAIL_Add_Application"),
                    //    disabled() {
                    //        return !self.service.canScaleupApplication
                    //    }
                    //},
                    //{
                    //    id: "vm",
                    //    name: this.$translate.instant("SERVICE_DETAIL_Add_VM"),
                    //    disabled() {
                    //        return !self.service.canScaleupVM
                    //    }
                    //},
                    {
                        id: "cluster",
                        name: _this.$translate.instant("SERVICE_DETAIL_Add_Cluster"),
                        disabled: function () {
                            return !self.service.canScaleupCluster;
                        }
                    },
                    {
                        id: "server",
                        name: _this.$translate.instant("SERVICE_DETAIL_Add_Server"),
                        disabled: function () {
                            return !self.service.canScaleupServer;
                        }
                    },
                    {
                        id: "storage",
                        name: _this.$translate.instant("SERVICE_DETAIL_Add_Volume"),
                        disabled: function () {
                            return !self.service.canScaleupStorage;
                        }
                    },
                    {
                        id: "network",
                        name: _this.$translate.instant("SERVICE_DETAIL_Add_Network"),
                        disabled: function () {
                            return !self.service.canScaleupNetwork;
                        }
                    }
                ];
                self.checkForCancelling();
                self.calculatewindowheight();
            })
                .catch(function (data) {
                if (data.status == 404) {
                    self.$location.path('/services/');
                }
                else {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                }
            })
                .finally(function () {
                d.resolve();
                self.$timeout.cancel(self.serviceTimeout);
                self.serviceTimeout = self.$timeout(function () {
                    self.getserviceData();
                }, self.serviceTimeoutTime); //1 minute
            });
        };
        ServicesvgController.prototype.refresh = function () {
            var self = this;
            $('.tooltip').remove();
            $('#TemplateBuilderSVGLines').empty();
            $('#TemplateBuilderSVGHoverLines').empty();
            $('#TemplateBuilderSVGSelectedLines').empty();
            if (self.service) {
                var longestResource = self.getLongestResourceType(self.service.components);
                self.mostComponents = longestResource.type + "Width";
                self.mostItems = longestResource.length;
                self.furthestComponentId = self.getfurthestComponentId(longestResource.type, self.service.components);
                self.drawlines(self.service.components);
                self.dealWithActionableRouteParams();
                setTimeout(self.updateScroll, 500);
            }
            else {
                self.getserviceData();
            }
        };
        ServicesvgController.prototype.dealWithActionableRouteParams = function () {
            var self = this;
            if (self.firmwarereport === 'firmwarereport') {
                self.openFirmwareReport();
            }
            else if (self.firmwarereport === 'edit') {
                self.editService(true);
            }
        };
        ServicesvgController.prototype.getLongestResourceType = function (array) {
            array = _.filter(array, function (component) {
                //exclude networks and applications from count
                return !_.find(["network", "application"], function (type) { return component.type === type; });
            });
            return _.maxBy(_.map(_.groupBy(array, "type"), function (value, key) {
                return { type: key, length: value.length };
            }), "length");
        };
        ServicesvgController.prototype.getfurthestComponentId = function (mostComponentsType, componentsArray) {
            return _.findLast(componentsArray, { type: mostComponentsType }).id;
        };
        ServicesvgController.prototype.drawlines = function (x) {
            var self = this;
            self.$timeout(function () {
                x.forEach(function (component) {
                    component.relatedcomponents.forEach(function (related) {
                        var newFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var x1 = $('#serviceBuilderSVG #' + component.id).attr('x');
                        var y1 = $('#serviceBuilderSVG #' + component.id).attr('y');
                        var x2 = $('#serviceBuilderSVG #' + related.id).attr('x');
                        var y2 = $('#serviceBuilderSVG #' + related.id).attr('y');
                        var lanechange = '';
                        var y1Number = 0;
                        var y2Number = 0;
                        if (y1 && y2) {
                            //Helps figure out if we're going up or down
                            y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                            y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                        }
                        if (component.type === 'cluster' || component.type === 'scaleio') {
                            lanechange = '38%';
                        }
                        if (component.type === 'server') {
                            lanechange = '58%';
                        }
                        if (component.type === 'storage') {
                            lanechange = '58%';
                        }
                        if (component.type === 'vm') {
                            lanechange = '18%';
                        }
                        //Are we drawing up?
                        if (y1Number > y2Number) {
                            if (component.type === 'cluster' || component.type === 'scaleio') {
                                lanechange = '10%';
                            }
                            if (component.type === 'server') {
                                lanechange = '38%';
                            }
                            if (component.type === 'vm' || component.type === 'cluster' || component.type === 'scaleio') {
                                lanechange = '18%';
                            }
                        }
                        if (x1 && y1 && x2 && y2) {
                            newFirstVertical.setAttribute('x1', x1);
                            newFirstVertical.setAttribute('y1', y1);
                            newFirstVertical.setAttribute('x2', x1);
                            newFirstVertical.setAttribute('y2', lanechange);
                            newHorizontal.setAttribute('x1', x1);
                            newHorizontal.setAttribute('y1', lanechange);
                            newHorizontal.setAttribute('x2', x2);
                            newHorizontal.setAttribute('y2', lanechange);
                            newSecondVertical.setAttribute('x1', x2);
                            newSecondVertical.setAttribute('y1', lanechange);
                            newSecondVertical.setAttribute('x2', x2);
                            newSecondVertical.setAttribute('y2', y2);
                        }
                        if (x2 && y2 && y1) {
                            newFirstVertical.className.baseVal = 'templateline ' + component.name;
                            newHorizontal.className.baseVal = 'templateline ' + component.name;
                            newSecondVertical.className.baseVal = 'templateline ' + component.name;
                            $('#TemplateBuilderSVGLines').append(newFirstVertical);
                            $('#TemplateBuilderSVGLines').append(newHorizontal);
                            $('#TemplateBuilderSVGLines').append(newSecondVertical);
                        }
                    });
                });
                self.changewidths();
                self.render = true;
            }, self.timerIntervals);
        };
        ServicesvgController.prototype.hoverLine = function (x) {
            var self = this;
            self.componentHover = x;
            x.relatedcomponents.forEach(function (related) {
                var HoverFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var HoverHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var HoverSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var x1 = $('#serviceBuilderSVG #' + x.id).attr('x');
                var y1 = $('#serviceBuilderSVG #' + x.id).attr('y');
                var x2 = $('#serviceBuilderSVG #' + related.id).attr('x');
                var y2 = $('#serviceBuilderSVG #' + related.id).attr('y');
                var lanechange = '';
                var y1Number = 0;
                var y2Number = 0;
                if (y1 && y2) {
                    //Helps figure out if we're going up or down
                    y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                    y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                }
                if (x.type === 'cluster' || x.type === 'scaleio') {
                    lanechange = '38%';
                }
                if (x.type === 'server') {
                    lanechange = '58%';
                }
                if (x.type === 'storage') {
                    lanechange = '58%';
                }
                if (x.type === 'vm') {
                    lanechange = '18%';
                }
                //Are we drawing up?
                if (y1Number > y2Number) {
                    if (x.type === 'cluster' || x.type === 'scaleio') {
                        lanechange = '10%';
                    }
                    if (x.type === 'server') {
                        lanechange = '38%';
                    }
                    if (x.type === 'vm' || x.type === 'cluster' || x.type === 'scaleio') {
                        lanechange = '18%';
                    }
                }
                if (x1 && y1 && x2 && y2) {
                    HoverFirstVertical.setAttribute('x1', x1);
                    HoverFirstVertical.setAttribute('y1', y1);
                    HoverFirstVertical.setAttribute('x2', x1);
                    HoverFirstVertical.setAttribute('y2', lanechange);
                    HoverHorizontal.setAttribute('x1', x1);
                    HoverHorizontal.setAttribute('y1', lanechange);
                    HoverHorizontal.setAttribute('x2', x2);
                    HoverHorizontal.setAttribute('y2', lanechange);
                    HoverSecondVertical.setAttribute('x1', x2);
                    HoverSecondVertical.setAttribute('y1', lanechange);
                    HoverSecondVertical.setAttribute('x2', x2);
                    HoverSecondVertical.setAttribute('y2', y2);
                }
                HoverFirstVertical.className.baseVal = 'hoverline ' + x.id;
                HoverHorizontal.className.baseVal = 'hoverline ' + x.id;
                HoverSecondVertical.className.baseVal = 'hoverline ' + x.id;
                if (x2 && y2 && y1) {
                    $('#TemplateBuilderSVGHoverLines').append(HoverFirstVertical);
                    $('#TemplateBuilderSVGHoverLines').append(HoverHorizontal);
                    $('#TemplateBuilderSVGHoverLines').append(HoverSecondVertical);
                }
            });
        };
        ServicesvgController.prototype.removeHovers = function () {
            var self = this;
            $('#TemplateBuilderSVGHoverLines').empty();
            self.componentHover = '';
        };
        ServicesvgController.prototype.removeSelection = function () {
            var self = this;
            $('#TemplateBuilderSVGSelectedLines').empty();
            self.selectedComponent = '';
        };
        ServicesvgController.prototype.selectLine = function (x) {
            var self = this;
            $('#TemplateBuilderSVGSelectedLines').empty();
            self.selectedComponent = x;
            x.relatedcomponents.forEach(function (related) {
                var SelectedFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var SelectedHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var SelectedSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var x1 = $('#serviceBuilderSVG #' + x.id).attr('x');
                var y1 = $('#serviceBuilderSVG #' + x.id).attr('y');
                var x2 = $('#serviceBuilderSVG #' + related.id).attr('x');
                var y2 = $('#serviceBuilderSVG #' + related.id).attr('y');
                var lanechange = '';
                var y1Number = 0;
                var y2Number = 0;
                if (y1 && y2) {
                    //Helps figure out if we're going up or down
                    y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                    y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                }
                if (x.type === 'cluster' || x.type === 'scaleio') {
                    lanechange = '38%';
                }
                if (x.type === 'server') {
                    lanechange = '58%';
                }
                if (x.type === 'storage') {
                    lanechange = '58%';
                }
                if (x.type === 'vm') {
                    lanechange = '18%';
                }
                //Are we drawing up?
                if (y1Number > y2Number) {
                    if (x.type === 'cluster' || x.type === 'scaleio') {
                        lanechange = '10%';
                    }
                    if (x.type === 'server') {
                        lanechange = '38%';
                    }
                    if (x.type === 'vm' || x.type === 'cluster' || x.type === 'scaleio') {
                        lanechange = '18%';
                    }
                }
                if (x1 && y1 && x2 && y2) {
                    SelectedFirstVertical.setAttribute('x1', x1);
                    SelectedFirstVertical.setAttribute('y1', y1);
                    SelectedFirstVertical.setAttribute('x2', x1);
                    SelectedFirstVertical.setAttribute('y2', lanechange);
                    SelectedHorizontal.setAttribute('x1', x1);
                    SelectedHorizontal.setAttribute('y1', lanechange);
                    SelectedHorizontal.setAttribute('x2', x2);
                    SelectedHorizontal.setAttribute('y2', lanechange);
                    SelectedSecondVertical.setAttribute('x1', x2);
                    SelectedSecondVertical.setAttribute('y1', lanechange);
                    SelectedSecondVertical.setAttribute('x2', x2);
                    SelectedSecondVertical.setAttribute('y2', y2);
                }
                SelectedFirstVertical.className.baseVal = 'selectedline ' + x.id;
                SelectedHorizontal.className.baseVal = 'selectedline ' + x.id;
                SelectedSecondVertical.className.baseVal = 'selectedline ' + x.id;
                if (x2 && y2 && y1) {
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedFirstVertical);
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedHorizontal);
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedSecondVertical);
                }
            });
        };
        ServicesvgController.prototype.checkForCancelling = function () {
            var self = this;
            if (self.service.cancelInprogress) {
                var msg = self.$translate.instant("SERVICE_CANCEL_processofbeingcancelledbanner");
                var match = !!_.find(self.$scope.warnings, { dismissable: false, message: msg });
                //only add the warning if it is not already present
                if (!match) {
                    self.$scope.warnings.push({
                        dismissable: false,
                        message: msg
                    });
                }
            }
        };
        ServicesvgController.prototype.toggleServiceMode = function (server, entering) {
            var self = this;
            //set server health or status to service mode
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            var match = _.find(self.service.serverlist, { id: server.id });
            self.$http.post(self.Commands.data.devices.setServiceMode, { deviceId: match.asmGUID, mode: entering ? "enter" : "exit" })
                .then(function () { self.getserviceData(); })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ServicesvgController.prototype.cancelService = function () {
            var self = this;
            self.removePopovers();
            self.pauseRefresh = true;
            var addApplicationWizard = self.Modal({
                title: self.$translate.instant("SERVICE_CANCEL_ModalTitle"),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/deployservice/canceldeploymentmodal.html',
                controller: 'CancelDeploymentModalController as cancelDeploymentModalController',
                params: {
                    serviceId: self.serviceId
                },
                onComplete: function () {
                    self.pauseRefresh = false;
                    self.getserviceData();
                },
                onCancel: function () {
                    self.pauseRefresh = false;
                    addApplicationWizard.modal.dismiss();
                }
            });
            addApplicationWizard.modal.show();
        };
        ServicesvgController.prototype.updateScroll = function () {
            $('#activityLogItems').scrollTop($('#activityLogItems')[0].scrollHeight);
        };
        ServicesvgController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', 'GlobalServices', '$route', 'localStorageService', '$routeParams', '$translate', '$location', '$window', 'Loading', 'Commands', 'constants', '$scope', '$rootScope'];
        return ServicesvgController;
    }());
    function servicesvg() {
        return {
            restrict: 'E',
            templateUrl: 'views/servicesvg.html',
            replace: true,
            transclude: false,
            controller: ServicesvgController,
            controllerAs: 'servicesvg',
            scope: {
                serviceId: '=serviceId',
                firmwarereport: '=firmwarereport',
                mode: '=mode',
                onServerPortViewClick: '&',
                refreshService: "<",
                errors: "=",
                warnings: "=",
                service: "="
            },
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('servicesvg', servicesvg);
})(asm || (asm = {}));
//# sourceMappingURL=serviceSVGdirective.js.map
var asm;
(function (asm) {
    'use strict';
    var StatusController = (function () {
        function StatusController(Modal, Dialog, $http, $timeout, $q, $compile, $scope, $translate, GlobalServices, Commands, $rootScope) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$compile = $compile;
            this.$scope = $scope;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            this.$rootScope = $rootScope;
            this.showStatuses = false;
            this.oobe = {};
            var self = this;
            self.testMessage = 'Statuses go here';
            //self.refresh();
            self.$rootScope.ASM.jobsInterval = window.setInterval(function () { self.refresh(); }, 30000);
            self.$rootScope.$on('$locationChangeSuccess', function () { self.showStatuses = false; });
        }
        StatusController.prototype.$onDestroy = function () {
            var self = this;
            if (self.$rootScope.ASM.jobsInterval)
                window.clearInterval(self.$rootScope.ASM.jobsInterval);
        };
        StatusController.prototype.refresh = function () {
            var self = this;
            self.$http.post(self.Commands.data.initialSetup.gettingStarted, null)
                .then(function (data) {
                self.oobe = data.data.responseObj;
                self.GlobalServices.gettingStarted = data.data.responseObj;
                self.GlobalServices.showInitialSetup = !self.GlobalServices.gettingStarted.initialSetupCompleted;
                self.$http.post(self.Commands.data.jobs.getJobList, null)
                    .then(function (data) {
                    var jobs = data.data.responseObj;
                    var x = _.filter(jobs, { 'endDate': null, 'status': 'running' });
                    self.jobsinprogress = x.length;
                })
                    .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        StatusController.prototype.getJobsInProgressTranslation = function (jobsInProgress) {
            var self = this;
            return self.$translate.instant("GETTINGSTARTED_jobsinprogress", { jobsInProgress: jobsInProgress });
        };
        StatusController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$compile', '$scope', '$translate', 'GlobalServices', 'Commands', '$rootScope'];
        return StatusController;
    }());
    function status() {
        return {
            restrict: 'E',
            templateUrl: 'views/statusmasthead.html',
            replace: true,
            transclude: false,
            controller: StatusController,
            controllerAs: 'status',
            link: function (scope, element, attributes) {
            }
        };
    }
    angular.module('app').
        directive('status', status);
})(asm || (asm = {}));
//# sourceMappingURL=statusdirective .js.map
var asm;
(function (asm) {
    "use strict";
    var StorageAlertBannerController = (function () {
        function StorageAlertBannerController($http, $translate, Commands, GlobalServices, $q, $timeout, $interval) {
            this.$http = $http;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$q = $q;
            this.$timeout = $timeout;
            this.$interval = $interval;
            this.sessionStorageKey = "storageAlertHidden";
            var self = this;
            //if not set, set it 
            //or
            //if storageUtilization is normal, reset the session alert setting
            var alertHidden = self.getAlertHidden();
            var criticality = self.getCriticality(self.storageUtilization.percentageUsed);
            if (!self.getAlertHidden() || !self.getCriticality(self.storageUtilization.percentageUsed)) {
                self.setAlertHidden("false");
            }
            //if userPreferences exist, parse them from string to JSON
            self.userPreference = self.parseUserPreferences(self.userPreference);
            //if userPreferences haven't been created yet, create them
            if (!self.userPreference) {
                self.userPreference = {};
            }
            //if isStorageAlertDismissed hasn't been created yet, create it
            if (typeof (self.userPreference.isStorageAlertDismissed) !== "boolean") {
                self.userPreference.isStorageAlertDismissed = false;
                self.save();
            }
        }
        StorageAlertBannerController.prototype.getCriticality = function (percentUsed) {
            if (percentUsed >= .95) {
                return "critical";
            }
            else if (percentUsed >= .75) {
                return "warning";
            }
        };
        StorageAlertBannerController.prototype.getShowBanner = function () {
            var self = this;
            //return that it's neither been hidden nor dismissed, and that it's at least at warning levels
            return (!self.userPreference.isStorageAlertDismissed && self.getAlertHidden() !== "true") && !!self.getCriticality(self.storageUtilization.percentageUsed);
        };
        StorageAlertBannerController.prototype.getBannerTitleText = function () {
            var self = this;
            return self.$translate.instant("INDEX_STORAGE_BANNER_Title", { percentage: self.storageUtilization.percentageUsed * 100, partitionName: self.storageUtilization.partitionName });
        };
        StorageAlertBannerController.prototype.learnMore = function () {
            var self = this;
            self.GlobalServices.showHelp("storageAlertLearnMore");
        };
        StorageAlertBannerController.prototype.hide = function () {
            var self = this;
            self.setAlertHidden("true");
        };
        StorageAlertBannerController.prototype.dismiss = function () {
            var self = this;
            self.userPreference.isStorageAlertDismissed = true;
            self.save();
        };
        StorageAlertBannerController.prototype.getAlertHidden = function () {
            var self = this;
            return sessionStorage.getItem(self.sessionStorageKey);
        };
        StorageAlertBannerController.prototype.setAlertHidden = function (value) {
            var self = this;
            sessionStorage.setItem(self.sessionStorageKey, value);
        };
        StorageAlertBannerController.prototype.parseUserPreferences = function (userPreference) {
            if (typeof userPreference === "string") {
                userPreference = angular.fromJson(userPreference);
            }
            return userPreference;
        };
        StorageAlertBannerController.prototype.save = function () {
            var self = this;
            self.$http.post(self.Commands.data.users.updateUserPreferences, angular.toJson(self.userPreference))
                .then(function (data) {
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        StorageAlertBannerController.$inject = ["$http", "$translate", "Commands", "GlobalServices", "$q", "$timeout", "$interval"];
        return StorageAlertBannerController;
    }());
    angular.module('app')
        .component("storageAlertBanner", {
        templateUrl: "views/storagealertbanner.html",
        controller: StorageAlertBannerController,
        controllerAs: 'storageAlertBannerController',
        bindings: {
            userPreference: "=",
            storageUtilization: "<",
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=StorageAlertBanner.js.map
var asm;
(function (asm) {
    "use strict";
    var StorageSettingsController = (function () {
        function StorageSettingsController($http, $timeout, $q, $translate, modal, loading, dialog, commands, globalServices, $rootScope, $interval) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.loading = loading;
            this.dialog = dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            var self = this;
            self.activate();
        }
        StorageSettingsController.prototype.activate = function () {
            var self = this;
            self.uniqueId = self.globalServices.NewGuid();
        };
        StorageSettingsController.prototype.filteredOptions = function (storage, options) {
            var self = this;
            var settingsArray = storage;
            var returnVal = [];
            $.each(options, function (optionIndex, option) {
                if (option.dependencyTarget && option.dependencyValue) {
                    var targetSetting = null;
                    //sort through object key value pairs to find matching key, then check value
                    var matchingSetting = _.find(storage, function (value, key) {
                        return (key == option.dependencyTarget);
                    });
                    if (matchingSetting) {
                        targetSetting = matchingSetting;
                    }
                    var matchingValue = false;
                    if (targetSetting) {
                        var settingvalues = option.dependencyValue.split(',');
                        $.each(settingvalues, function (idx, val) {
                            if (val.toString() == targetSetting.toString())
                                matchingValue = true;
                        });
                    }
                    if (matchingValue) {
                        returnVal.push(option);
                    }
                }
                else {
                    returnVal.push(option);
                }
            });
            return returnVal;
        };
        StorageSettingsController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope', '$interval'];
        return StorageSettingsController;
    }());
    angular.module("app")
        .component("storageSettings", {
        templateUrl: "views/storagesettings.html",
        controller: StorageSettingsController,
        controllerAs: "storageSettingsController",
        bindings: {
            storageSettings: "=",
            form: "=?",
            errors: "=",
            readOnly: "<?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=storageSettings.js.map
var asm;
(function (asm) {
    "use strict";
    function stringToNumber() {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, element, attrs, ngModel) {
                ngModel.$parsers.push(function (value) {
                    return '' + value;
                });
                ngModel.$formatters.push(function (value) {
                    return parseFloat(value);
                });
            }
        };
    }
    angular
        .module('app')
        .directive('stringToNumber', stringToNumber);
})(asm || (asm = {}));
//# sourceMappingURL=stringtonumberdirective.js.map
var asm;
(function (asm) {
    'use strict';
    var TemplatebuildersvgController = (function () {
        //efforts to remove $watch
        //private _intervalX: any;
        //get intervalX(): any {
        //    var self = this;
        //    return self._intervalX;
        //}
        //set intervalX(theIntervalX: any) {
        //    var self = this;
        //    var oldIntervalX = self._intervalX;
        //    self._intervalX = theIntervalX;
        //    if (self.intervalX != oldIntervalX) {
        //        if (self.template != '') {
        //            self.refresh();
        //        }
        //    }
        //}
        function TemplatebuildersvgController(Modal, Dialog, $http, $timeout, $q, GlobalServices, $route, localStorageService, $routeParams, $compile, $scope, $translate, $location, $window, Loading, $rootScope, Commands) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.GlobalServices = GlobalServices;
            this.$route = $route;
            this.localStorageService = localStorageService;
            this.$routeParams = $routeParams;
            this.$compile = $compile;
            this.$scope = $scope;
            this.$translate = $translate;
            this.$location = $location;
            this.$window = $window;
            this.Loading = Loading;
            this.$rootScope = $rootScope;
            this.Commands = Commands;
            this.svgheight = 300;
            this.templateServers = [];
            this.templateStorages = [];
            this.templateClusters = [];
            this.templateVMs = [];
            this.networks = [];
            this.timerIntervals = 300;
            var self = this;
            self.selectedTemplateId = '';
            self.pollwindowtimer = '';
            self.windowtimer = '';
            self.mode = self.$scope.mode;
            self.errors = self.$scope.errors;
            self.template = '';
            self.jobRequest = { requestObj: { id: '', name: '' } };
            self.intervalX = 0;
            self.mostItems = 0;
            self.render = false;
            self.selectedTemplateId = self.$scope.selectedTemplateId;
            self.mode = self.$scope.mode;
            self.$scope.$watch(function () { return self.intervalX; }, function (newValue, oldValue) {
                if (oldValue !== newValue) {
                    if (self.template !== '') {
                        self.refresh();
                    }
                }
            });
            self.root = this.$rootScope;
            self.refresh();
            self.windowResize();
        }
        TemplatebuildersvgController.prototype.windowResize = function () {
            var self = this;
            $(window).resize(function () {
                //console.log('inside resize event');
                if (self.pollwindowtimer)
                    self.$timeout.cancel(self.pollwindowtimer);
                //if (self.windowtimer) self.$timeout.cancel(self.windowtimer);
                self.pollwindowtimer = self.$timeout(function () {
                    self.calculatewindowheight();
                }, 1);
                //self.pollwindowtimer = self.calculatewindowheight();
            });
        };
        TemplatebuildersvgController.prototype.$onDestroy = function () {
            var self = this;
            $(window).off("resize");
            if (self.windowtimer)
                self.$timeout.cancel(self.windowtimer);
            if (self.pollwindowtimer)
                self.$timeout.cancel(self.pollwindowtimer);
            if (self.template.draft == true && self.mode === 'edit' && (self.template.draft == self.templateCopy.draft)) {
                self.$timeout(function () {
                    self.Dialog(self.$translate.instant('TEMPLATES_TemplateBuilderDraftTitle'), self.$translate.instant('TEMPLATES_TemplateBuilderDraftMessage'), true).then(function () {
                    });
                }, 1000);
            }
        };
        TemplatebuildersvgController.prototype.centerValue = function (components) {
            var self = this;
            if (components <= (self.mostItems - 1)) {
                var x = ((self.mostItems - components) / 2) * self.intervalX;
                return x;
            }
        };
        //Called on window resize
        TemplatebuildersvgController.prototype.calculatewindowheight = function () {
            var self = this;
            //console.log('redrawing window');
            self.windowtimer = self.$timeout(function () {
                self.svgcanvaswidth = $('#TemplateBuilderSVG').width();
                self.windowheight = $(window).height() - 300;
                //if (self.windowheight >= 400) {
                //    self.svgheight = self.windowheight - 50;
                //}
                //min height
                if (self.windowheight <= 600) {
                    self.svgheight = self.windowheight - 50;
                    if (self.svgheight <= 500) {
                        self.svgheight = 500;
                    }
                }
                //max height
                if (self.windowheight >= 600) {
                    self.svgheight = self.windowheight - 50;
                    if (self.svgheight >= 600) {
                        self.svgheight = 600;
                    }
                }
                self.componentscale = self.svgheight * .002;
                self.Xlines = self.svgheight * .065;
                self.intervalX = 15;
                if (self.svgcanvaswidth >= 800 && self.svgheight <= 600) {
                    self.intervalX = 10;
                }
                if (self.svgcanvaswidth <= 800 && self.svgheight >= 600) {
                    self.intervalX = 18;
                }
                //The x interval needs to change depending on the size of the window and canvas
                //short windows
                //if (self.windowheight <= 601 && self.svgcanvaswidth <= 400) {
                //    self.intervalX = 25;
                //}
                //if (self.windowheight <= 601 && self.svgcanvaswidth >= 400) {
                //    self.intervalX = 14;
                //}
                ////tall windows
                //if (self.windowheight >= 601 && self.svgcanvaswidth >= 800) {
                //    self.intervalX = 15;
                //}
                //if (self.windowheight >= 601 && self.svgcanvaswidth <= 800) {
                //    self.intervalX = 20;
                //    //self.componentscale = self.svgheight * .0015;
                //    //self.Xlines = self.svgheight * .052;
                //}
                self.changewidths();
            }, self.timerIntervals);
        };
        //This gets called after calculating window height and after drawing the lines
        TemplatebuildersvgController.prototype.changewidths = function () {
            var self = this;
            $('#drawingContainer').css('height', (self.svgheight - 50 + 'px'));
            if (self.render && self.mostItems >= 1 && self.furthestComponentId !== '') {
                //Chrome needs this: It adjusts heights and widths of various DOM containers to allow horizontal scrolling on the SVG
                if (self.render) {
                    //if (self.windowheight >= 400) {
                    //    $('#drawingContainer').css('height', (self.windowheight * .8 + 'px'));
                    //}
                    //$('#drawingContainer').css('width', '400px');
                    var BScontainerWidth = $('#templatearticle').width();
                    $('#drawingContainer').css('width', BScontainerWidth);
                    $('#drawingContainer').css('width', (BScontainerWidth).toString() + 'px');
                    $('#TemplateBuilderSVG').css('width', (BScontainerWidth - 45).toString() + 'px');
                    var widestRowStart = $('#' + self.mostComponents).offset().left;
                    var widestRowEnd = $('#' + self.furthestComponentId + ' #topright').offset().left;
                    var wideDivwidth = widestRowEnd - widestRowStart;
                    $('#wideDiv').css('width', (wideDivwidth + 250).toString() + 'px');
                    $('#deselectionBG').attr('width', (wideDivwidth + 250).toString() + 'px');
                    //Adjust background lines
                    self.furthestSVGPoint = $('#' + self.furthestComponentId).attr('x');
                    self.furthestSVGPoint = parseInt(self.furthestSVGPoint.replace(/[^\w\s]/gi, '')) + 50;
                    self.furthestSVGPoint = self.furthestSVGPoint.toString() + '%';
                    if (self.furthestSVGPoint.replace(/[^\w\s]/gi, '') <= 100) {
                        self.furthestSVGPoint = '100%';
                    }
                }
            }
            else {
                //if (self.windowheight >= 400) {
                //    $('#drawingContainer').css('height', (self.windowheight  * .8 + 'px'));
                //}
                //$('#drawingContainer').css('width', '400px');
                var BScontainerWidth = $('#templatearticle').width();
                $('#drawingContainer').css('width', BScontainerWidth);
                $('#drawingContainer').css('width', (BScontainerWidth).toString() + 'px !important');
                $('#TemplateBuilderSVG').css('width', (BScontainerWidth - 45).toString() + 'px');
                self.furthestSVGPoint = '100%';
            }
        };
        TemplatebuildersvgController.prototype.cloneComponent = function (id) {
            var self = this, d = self.$q.defer();
            var component = _.find(self.template.components, { id: id });
            var copy = angular.copy(component), newId = self.GlobalServices.NewGuid();
            angular.extend(copy, {
                clonedFromId: component.id,
                componentid: newId,
                name: self.GlobalServices.namePicker(_.filter(self.template.components, { type: copy.type }), [copy], self.GlobalServices.getBaseName(copy.name))[0].name
            }, { id: newId });
            //for components without applications
            if (component.type !== 'cluster') {
                angular.forEach(_.reject(self.template.components, { type: 'application' }), function (cmp) {
                    //relate clone to seed's original associated components
                    if (_.find(cmp.relatedcomponents, { id: component.id })) {
                        angular.forEach(copy.relatedcomponents, function (relatedComponent) {
                            cmp.relatedcomponents.push({
                                installOrder: relatedComponent.installOrder,
                                name: copy.name,
                                id: copy.id,
                                instances: copy.instances,
                                subtype: copy.subtype
                            });
                        });
                    }
                });
                //Note: Do not copy related application components for clusters
                if (component.type === 'server' || component.type === 'vm') {
                    //_.remove returns array of applications
                    angular.forEach(_.remove(copy.relatedcomponents, { type: 'application' }), function (rc) {
                        var cmp = _.find(self.template.components, { id: rc.id });
                        var copyOfCurrentComponent = angular.copy(cmp);
                        self.template.components.push(angular.extend(copyOfCurrentComponent, {
                            id: self.GlobalServices.NewGuid(),
                            relatedcomponents: [],
                        }));
                        copy.relatedcomponents.push({
                            installOrder: rc.installOrder,
                            name: copyOfCurrentComponent.name,
                            id: copyOfCurrentComponent.id
                        });
                    });
                }
            }
            else {
                copy.relatedcomponents = [];
            }
            self.template.components.push(copy);
            self.$http.post(self.Commands.data.templates.saveTemplate, self.template)
                .then(function (data) {
                self.getTemplateData();
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        //Get the template data
        TemplatebuildersvgController.prototype.getTemplateData = function () {
            var self = this;
            $('.popover').remove();
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            //Shut everything down and start over
            self.selectedComponent = {};
            self.render = false;
            $('#TemplateBuilderSVGLines').empty();
            $('#TemplateBuilderSVGHoverLines').empty();
            $('#TemplateBuilderSVGSelectedLines').empty();
            $(window).off("resize");
            if (self.windowtimer)
                self.$timeout.cancel(self.windowtimer);
            if (self.pollwindowtimer)
                self.$timeout.cancel(self.pollwindowtimer);
            self.mostItems = 0;
            self.intervalX = 0;
            //New call for data
            self.jobRequest.requestObj.id = self.selectedTemplateId;
            self.$http.post(self.Commands.data.templates.getTemplateBuilderById, self.jobRequest.requestObj)
                .then(function (data) {
                //test for popover alerts
                //data.data = { "criteriaObj": null, "responseCode": 0, "errorObj": null, "requestObj": null, "responseObj": { "id": "ff8080816698f53b016698f7e5110000", "name": "Test", "description": "", "createdBy": "admin", "createdDate": "2018-10-21T23:31:14.833Z", "updatedBy": "admin", "updatedDate": "2018-10-21T23:33:52.627Z", "draft": true, "components": [{ "id": "bae611b8-8a6d-45a3-ab4c-8d7f9ae020b5", "name": "VMWare Cluster", "type": "cluster", "subtype": null, "componentid": "component-cluster-vcenter-1", "identifier": null, "helptext": null, "relatedcomponents": [{ "id": "4393e740-5524-4260-ac51-cfd939aae9d0", "name": "Server", "installOrder": null, "subtype": null }], "categories": [{ "id": "asm::cluster", "name": "Cluster Settings", "settings": [{ "id": "asm_guid", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Target Virtual Machine Manager", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "vcenter-100.68.106.72", "name": "aer10-cvcsa65.asm.delllabs.net", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "datacenter", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Data Center Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create New Datacenter...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aFlexDCHCI", "name": "aFlexDCHCI", "dependencyTarget": "asm_guid", "dependencyValue": "vcenter-100.68.106.72" }], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$datacenter", "value": "TestDC", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New datacenter name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "datacenter", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "cluster", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Cluster Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create New Cluster...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aFlexCLHCI", "name": "aFlexCLHCI", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$cluster", "value": "TestCluster", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New cluster name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "cluster", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_enabled", "value": "distributed", "datatype": "radio", "componentid": "component-cluster-vcenter-1", "name": "Switch Type", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "distributed", "name": "Distributed", "dependencyTarget": null, "dependencyValue": null }, { "id": "standard", "name": "Standard", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ha_config", "value": "true", "datatype": "boolean", "componentid": "component-cluster-vcenter-1", "name": "Cluster HA Enabled", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "cluster", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "drs_config", "value": "true", "datatype": "boolean", "componentid": "component-cluster-vcenter-1", "name": "Cluster DRS Enabled", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "cluster", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }, { "id": "asm::cluster::vds", "name": "vSphere VDS Settings", "settings": [{ "id": "vds_name", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create VDS Name ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aflexD1", "name": "aflexD1", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }, { "id": "aflexD2", "name": "aflexD2", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }, { "id": "aflexmgmt", "name": "aflexmgmt", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_name", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_name", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aflexCust", "name": "aflexCust", "dependencyTarget": "vds_name", "dependencyValue": "aflexmgmt" }, { "id": "aflexD1-uplink-pg", "name": "aflexD1-uplink-pg", "dependencyTarget": "vds_name", "dependencyValue": "aflexD1" }, { "id": "aflexD1pg", "name": "aflexD1pg", "dependencyTarget": "vds_name", "dependencyValue": "aflexD1" }, { "id": "aflexD2-uplink-pg", "name": "aflexD2-uplink-pg", "dependencyTarget": "vds_name", "dependencyValue": "aflexD2" }, { "id": "aflexD2pg", "name": "aflexD2pg", "dependencyTarget": "vds_name", "dependencyValue": "aflexD2" }, { "id": "aflexFM", "name": "aflexFM", "dependencyTarget": "vds_name", "dependencyValue": "aflexmgmt" }, { "id": "aflexHM", "name": "aflexHM", "dependencyTarget": "vds_name", "dependencyValue": "aflexmgmt" }, { "id": "aflexmgmt-uplink-pg", "name": "aflexmgmt-uplink-pg", "dependencyTarget": "vds_name", "dependencyValue": "aflexmgmt" }, { "id": "aflexPXE", "name": "aflexPXE", "dependencyTarget": "vds_name", "dependencyValue": "aflexmgmt" }, { "id": "cust2", "name": "cust2", "dependencyTarget": "vds_name", "dependencyValue": "aflexmgmt" }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "VDS Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create VDS Name ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aflexD1", "name": "aflexD1", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }, { "id": "aflexD2", "name": "aflexD2", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }, { "id": "aflexmgmt", "name": "aflexmgmt", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New VDS Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a76e1010025::1", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-sio-mgmt Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": null }, { "id": "aflexCust", "name": "aflexCust", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexD1-uplink-pg", "name": "aflexD1-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD1" }, { "id": "aflexD1pg", "name": "aflexD1pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD1" }, { "id": "aflexD2-uplink-pg", "name": "aflexD2-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD2" }, { "id": "aflexD2pg", "name": "aflexD2pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD2" }, { "id": "aflexFM", "name": "aflexFM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexHM", "name": "aflexHM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexmgmt-uplink-pg", "name": "aflexmgmt-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexPXE", "name": "aflexPXE", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "cust2", "name": "cust2", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a76e1010025::1", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a76e1010025::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a78d2530063::1", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-esx-mgmt Port Group", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": null }, { "id": "aflexCust", "name": "aflexCust", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexD1-uplink-pg", "name": "aflexD1-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD1" }, { "id": "aflexD1pg", "name": "aflexD1pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD1" }, { "id": "aflexD2-uplink-pg", "name": "aflexD2-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD2" }, { "id": "aflexD2pg", "name": "aflexD2pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD2" }, { "id": "aflexFM", "name": "aflexFM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexHM", "name": "aflexHM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexmgmt-uplink-pg", "name": "aflexmgmt-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexPXE", "name": "aflexPXE", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "cust2", "name": "cust2", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a78d2530063::1", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a78d2530063::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a7913aa0086::1", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-os-install Port Group", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": null }, { "id": "aflexCust", "name": "aflexCust", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexD1-uplink-pg", "name": "aflexD1-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD1" }, { "id": "aflexD1pg", "name": "aflexD1pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD1" }, { "id": "aflexD2-uplink-pg", "name": "aflexD2-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD2" }, { "id": "aflexD2pg", "name": "aflexD2pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD2" }, { "id": "aflexFM", "name": "aflexFM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexHM", "name": "aflexHM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexmgmt-uplink-pg", "name": "aflexmgmt-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexPXE", "name": "aflexPXE", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "cust2", "name": "cust2", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a7913aa0086::1", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a7913aa0086::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a7969be0087::1", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-customer Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": null }, { "id": "aflexCust", "name": "aflexCust", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexD1-uplink-pg", "name": "aflexD1-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD1" }, { "id": "aflexD1pg", "name": "aflexD1pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD1" }, { "id": "aflexD2-uplink-pg", "name": "aflexD2-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD2" }, { "id": "aflexD2pg", "name": "aflexD2pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexD2" }, { "id": "aflexFM", "name": "aflexFM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexHM", "name": "aflexHM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexmgmt-uplink-pg", "name": "aflexmgmt-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "aflexPXE", "name": "aflexPXE", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }, { "id": "cust2", "name": "cust2", "dependencyTarget": "vds_name::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087", "dependencyValue": "aflexmgmt" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a7969be0087::1", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff808081665a6dcd01665a76e1010025:ff808081665a6dcd01665a78d2530063:ff808081665a6dcd01665a7913aa0086:ff808081665a6dcd01665a7969be0087::ff808081665a6dcd01665a7969be0087::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_name::ff808081665a6dcd01665a750f7f0001", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create VDS Name ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aflexD1", "name": "aflexD1", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }, { "id": "aflexD2", "name": "aflexD2", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }, { "id": "aflexmgmt", "name": "aflexmgmt", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_name::ff808081665a6dcd01665a750f7f0001", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff808081665a6dcd01665a750f7f0001::ff808081665a6dcd01665a750f7f0001::1", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-sio-data1 Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": null }, { "id": "aflexCust", "name": "aflexCust", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": "aflexmgmt" }, { "id": "aflexD1-uplink-pg", "name": "aflexD1-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": "aflexD1" }, { "id": "aflexD1pg", "name": "aflexD1pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": "aflexD1" }, { "id": "aflexD2-uplink-pg", "name": "aflexD2-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": "aflexD2" }, { "id": "aflexD2pg", "name": "aflexD2pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": "aflexD2" }, { "id": "aflexFM", "name": "aflexFM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": "aflexmgmt" }, { "id": "aflexHM", "name": "aflexHM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": "aflexmgmt" }, { "id": "aflexmgmt-uplink-pg", "name": "aflexmgmt-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": "aflexmgmt" }, { "id": "aflexPXE", "name": "aflexPXE", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": "aflexmgmt" }, { "id": "cust2", "name": "cust2", "dependencyTarget": "vds_name::ff808081665a6dcd01665a750f7f0001", "dependencyValue": "aflexmgmt" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff808081665a6dcd01665a750f7f0001::ff808081665a6dcd01665a750f7f0001::1", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff808081665a6dcd01665a750f7f0001::ff808081665a6dcd01665a750f7f0001::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_name::ff808081665a6dcd01665a75a9a30013", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create VDS Name ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aflexD1", "name": "aflexD1", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }, { "id": "aflexD2", "name": "aflexD2", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }, { "id": "aflexmgmt", "name": "aflexmgmt", "dependencyTarget": "datacenter", "dependencyValue": "aFlexDCHCI" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 3", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_name::ff808081665a6dcd01665a75a9a30013", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 3", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff808081665a6dcd01665a75a9a30013::ff808081665a6dcd01665a75a9a30013::1", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-sio-data2 Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": null }, { "id": "aflexCust", "name": "aflexCust", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": "aflexmgmt" }, { "id": "aflexD1-uplink-pg", "name": "aflexD1-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": "aflexD1" }, { "id": "aflexD1pg", "name": "aflexD1pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": "aflexD1" }, { "id": "aflexD2-uplink-pg", "name": "aflexD2-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": "aflexD2" }, { "id": "aflexD2pg", "name": "aflexD2pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": "aflexD2" }, { "id": "aflexFM", "name": "aflexFM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": "aflexmgmt" }, { "id": "aflexHM", "name": "aflexHM", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": "aflexmgmt" }, { "id": "aflexmgmt-uplink-pg", "name": "aflexmgmt-uplink-pg", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": "aflexmgmt" }, { "id": "aflexPXE", "name": "aflexPXE", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": "aflexmgmt" }, { "id": "cust2", "name": "cust2", "dependencyTarget": "vds_name::ff808081665a6dcd01665a75a9a30013", "dependencyValue": "aflexmgmt" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 3", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff808081665a6dcd01665a75a9a30013::ff808081665a6dcd01665a75a9a30013::1", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff808081665a6dcd01665a75a9a30013::ff808081665a6dcd01665a75a9a30013::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 3", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": null, "network": null, "newComponent": null, "cloned": false, "continueClicked": null, "AsmGUID": null, "clonedFromId": null, "allowClone": false, "isComponentValid": false, "raid": null, "configfilename": null, "instances": 1, "errorObj": { "errorMessage": "---consolidated message/header...", "fldErrors": [{ "field": null, "errorMessage": "Component VMWare Cluster is missing data for required field: Target Virtual Machine Manager.", "errorDetails": "The template cannot be published with missing required fields.", "errorAction": "Please enter a valid value for the required field.", "errorCode": "VXFM00215" }, { "field": null, "errorMessage": "Component VMWare Cluster is missing data for required field: VDS Name.", "errorDetails": "The template cannot be published with missing required fields.", "errorAction": "Please enter a valid value for the required field.", "errorCode": "VXFM00215" }, { "field": null, "errorMessage": "Component VMWare Cluster is missing data for required field: vcesys-esx-mgmt Port Group.", "errorDetails": "The template cannot be published with missing required fields.", "errorAction": "Please enter a valid value for the required field.", "errorCode": "VXFM00215" }, { "field": null, "errorMessage": "Component VMWare Cluster is missing data for required field: vcesys-os-install Port Group.", "errorDetails": "The template cannot be published with missing required fields.", "errorAction": "Please enter a valid value for the required field.", "errorCode": "VXFM00215" }, { "field": null, "errorMessage": "Duplicate Port Group Names or VDS Names are not allowed for a cluster.", "errorDetails": "Each Port Group name and VDS name for a cluster in a template must be unique.", "errorAction": "Please check your template and try again.", "errorCode": "VXFM00384" }] } }, { "id": "4393e740-5524-4260-ac51-cfd939aae9d0", "name": "Server", "type": "server", "subtype": "HYPERVISOR", "componentid": "component-server-1", "identifier": null, "helptext": null, "relatedcomponents": [{ "id": "bae611b8-8a6d-45a3-ab4c-8d7f9ae020b5", "name": "VMWare Cluster", "installOrder": null, "subtype": null }], "categories": [{ "id": "asm::server", "name": "OS Settings", "settings": [{ "id": "assign_host_name", "value": "define_host_name", "datatype": "enum", "componentid": "component-server-1", "name": "Host Name Selection", "tooltip": "Define how the Host Name will be selected at deployment time.<br/>Auto Generate - Use the Host Name Template field to auto-generate host names at deployment time.<br/>Specify At Deployment Time - A unique host name will be requested at deployment time.<br/>Reverse DNS Lookup - Host name will be assigned based on reverse DNS lookup of the host IP Address at deployment time.", "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "define_host_name", "name": "Specify At Deployment Time", "dependencyTarget": null, "dependencyValue": null }, { "id": "generate_host_name", "name": "Auto Generate", "dependencyTarget": null, "dependencyValue": null }, { "id": "lookup_host_name", "name": "Reverse DNS Lookup", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "target_boot_device", "dependencyValue": "LOCAL_FLASH_STORAGE,HD,SD,SD_WITH_RAID_VSAN,SD_WITH_RAID,AHCI_VSAN,LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "os_host_name_template", "value": "server${num}", "datatype": "string", "componentid": "component-server-1", "name": "Host Name Template", "tooltip": "Template used to generate host names at deployment time. Must contain variables that will produce a unique host name.<br/>Allowed variables are ${num} (an auto-generated unique number), ${num_2d or ${num_3d) (an auto-generated number forced to be 2 or 3 digits), ${service_tag}, ${model}, or ${vendor}.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "assign_host_name", "dependencyValue": "generate_host_name", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "os_host_name", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Host Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "assign_host_name", "dependencyValue": "define_host_name", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "os_image_type", "value": "vmware_esxi", "datatype": "string", "componentid": "component-server-1", "name": "OS Image Type", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "target_boot_device", "dependencyValue": "LOCAL_FLASH_STORAGE,SD,SD_WITH_RAID,SD_WITH_RAID_VSAN,HD,AHCI_VSAN,LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "razor_image", "value": "ESXi6.57967591-6.5.X_Dell_14G", "datatype": "enum", "componentid": "component-server-1", "name": "OS Image", "tooltip": "Location of OS image installation files", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "esxi-6.0", "name": "esxi-6.0", "dependencyTarget": null, "dependencyValue": null }, { "id": "esxi-6.5", "name": "esxi-6.5", "dependencyTarget": null, "dependencyValue": null }, { "id": "ESXi6.57967591-6.5.X_Dell_14G", "name": "ESXi 6.5 7967591-6.5.X_Dell_14G", "dependencyTarget": null, "dependencyValue": null }, { "id": "rcm_esx", "name": "Use RCM ESXi image", "dependencyTarget": null, "dependencyValue": null }, { "id": "rcm_rhel", "name": "Use RCM RHEL image", "dependencyTarget": null, "dependencyValue": null }, { "id": "RHEL7.520180322.0-Server", "name": "RHEL 7.5 20180322.0-Server", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "target_boot_device", "dependencyValue": "LOCAL_FLASH_STORAGE,SD,SD_WITH_RAID,SD_WITH_RAID_VSAN,HD,AHCI_VSAN,LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "hyperv_install", "value": "false", "datatype": "boolean", "componentid": "component-server-1", "name": "Install HyperV", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "os_image_version", "value": "", "datatype": "enum", "componentid": "component-server-1", "name": "OS Image Version", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "os_credential", "value": "ff808081665a6dcd01665a8072a2052a", "datatype": "oscredential", "componentid": "component-server-1", "name": "OS Credential", "tooltip": "Credential used to set username and password on the installed OS", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "target_boot_device", "dependencyValue": "LOCAL_FLASH_STORAGE,SD,SD_WITH_RAID,SD_WITH_RAID_VSAN,HD,AHCI_VSAN,LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "product_key", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Product Key", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "timezone", "value": "Central Standard Time", "datatype": "enum", "componentid": "component-server-1", "name": "Timezone", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "A.U.S. Central Standard Time", "name": "(GMT+09:30) Darwin", "dependencyTarget": null, "dependencyValue": null }, { "id": "A.U.S. Eastern Standard Time", "name": "(GMT+10:00) Canberra, Melbourne, Sydney", "dependencyTarget": null, "dependencyValue": null }, { "id": "Alaskan Standard Time", "name": "(GMT-09:00) Alaska", "dependencyTarget": null, "dependencyValue": null }, { "id": "Arab Standard Time", "name": "(GMT+03:00) Kuwait, Riyadh", "dependencyTarget": null, "dependencyValue": null }, { "id": "Arabian Standard Time", "name": "(GMT+04:00) Abu Dhabi, Muscat", "dependencyTarget": null, "dependencyValue": null }, { "id": "Arabic Standard Time", "name": "(GMT+03:00) Baghdad", "dependencyTarget": null, "dependencyValue": null }, { "id": "Atlantic Standard Time", "name": "(GMT-04:00) Atlantic Time (Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "Azores Standard Time", "name": "(GMT-01:00) Azores", "dependencyTarget": null, "dependencyValue": null }, { "id": "Canada Central Standard Time", "name": "(GMT-06:00) Saskatchewan", "dependencyTarget": null, "dependencyValue": null }, { "id": "Cape Verde Standard Time", "name": "(GMT-01:00) Cape Verde Islands", "dependencyTarget": null, "dependencyValue": null }, { "id": "Caucasus Standard Time", "name": "(GMT+04:00) Baku, Tbilisi, Yerevan", "dependencyTarget": null, "dependencyValue": null }, { "id": "Cen. Australia Standard Time", "name": "(GMT+09:30) Adelaide", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central America Standard Time", "name": "(GMT-06:00) Central America", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central Asia Standard Time", "name": "(GMT+06:00) Astana, Dhaka", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central Europe Standard Time", "name": "(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central European Standard Time", "name": "(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central Pacific Standard Time", "name": "(GMT+11:00) Magadan, Solomon Islands, New Caledonia", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central Standard Time", "name": "(GMT-06:00) Central Time (US and Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "China Standard Time", "name": "(GMT+08:00) Beijing, Chongqing, Hong Kong SAR, Urumqi", "dependencyTarget": null, "dependencyValue": null }, { "id": "Dateline Standard Time", "name": "(GMT-12:00) International Date Line West", "dependencyTarget": null, "dependencyValue": null }, { "id": "E. Africa Standard Time", "name": "(GMT+03:00) Nairobi", "dependencyTarget": null, "dependencyValue": null }, { "id": "E. Australia Standard Time", "name": "(GMT+10:00) Brisbane", "dependencyTarget": null, "dependencyValue": null }, { "id": "E. Europe Standard Time", "name": "(GMT+02:00) Bucharest", "dependencyTarget": null, "dependencyValue": null }, { "id": "E. South America Standard Time", "name": "(GMT-03:00) Brasilia", "dependencyTarget": null, "dependencyValue": null }, { "id": "Eastern Standard Time", "name": "(GMT-05:00) Eastern Time (US and Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "Egypt Standard Time", "name": "(GMT+02:00) Cairo", "dependencyTarget": null, "dependencyValue": null }, { "id": "Ekaterinburg Standard Time", "name": "(GMT+05:00) Ekaterinburg", "dependencyTarget": null, "dependencyValue": null }, { "id": "Fiji Islands Standard Time", "name": "(GMT+12:00) Fiji Islands, Kamchatka, Marshall Islands", "dependencyTarget": null, "dependencyValue": null }, { "id": "FLE Standard Time", "name": "(GMT+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius", "dependencyTarget": null, "dependencyValue": null }, { "id": "GMT Standard Time", "name": "(GMT) Greenwich Mean Time: Dublin, Edinburgh, Lisbon, London", "dependencyTarget": null, "dependencyValue": null }, { "id": "Greenland Standard Time", "name": "(GMT-03:00) Greenland", "dependencyTarget": null, "dependencyValue": null }, { "id": "Greenwich Standard Time", "name": "(GMT) Casablanca, Monrovia", "dependencyTarget": null, "dependencyValue": null }, { "id": "GTB Standard Time", "name": "(GMT+02:00) Athens, Istanbul, Minsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "Hawaiian Standard Time", "name": "(GMT-10:00) Hawaii", "dependencyTarget": null, "dependencyValue": null }, { "id": "India Standard Time", "name": "(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi", "dependencyTarget": null, "dependencyValue": null }, { "id": "Iran Standard Time", "name": "(GMT+03:30) Tehran", "dependencyTarget": null, "dependencyValue": null }, { "id": "Israel Standard Time", "name": "(GMT+02:00) Jerusalem", "dependencyTarget": null, "dependencyValue": null }, { "id": "Korea Standard Time", "name": "(GMT+09:00) Seoul", "dependencyTarget": null, "dependencyValue": null }, { "id": "Mexico Standard Time", "name": "(GMT-06:00) Guadalajara, Mexico City, Monterrey", "dependencyTarget": null, "dependencyValue": null }, { "id": "Mexico Standard Time 2", "name": "(GMT-07:00) Chihuahua, La Paz, Mazatlan", "dependencyTarget": null, "dependencyValue": null }, { "id": "Mid-Atlantic Standard Time", "name": "(GMT-02:00) Mid-Atlantic", "dependencyTarget": null, "dependencyValue": null }, { "id": "Mountain Standard Time", "name": "(GMT-07:00) Mountain Time (US and Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "Myanmar Standard Time", "name": "(GMT+06:30) Yangon Rangoon", "dependencyTarget": null, "dependencyValue": null }, { "id": "N. Central Asia Standard Time", "name": "(GMT+06:00) Almaty, Novosibirsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "Nepal Standard Time", "name": "(GMT+05:45) Kathmandu", "dependencyTarget": null, "dependencyValue": null }, { "id": "New Zealand Standard Time", "name": "(GMT+12:00) Auckland, Wellington", "dependencyTarget": null, "dependencyValue": null }, { "id": "Newfoundland and Labrador Standard Time", "name": "(GMT-03:30) Newfoundland and Labrador", "dependencyTarget": null, "dependencyValue": null }, { "id": "North Asia East Standard Time", "name": "(GMT+08:00) Irkutsk, Ulaanbaatar", "dependencyTarget": null, "dependencyValue": null }, { "id": "North Asia Standard Time", "name": "(GMT+07:00) Krasnoyarsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "Pacific S.A. Standard Time", "name": "(GMT-04:00) Santiago", "dependencyTarget": null, "dependencyValue": null }, { "id": "Pacific Standard Time", "name": "(GMT-08:00) Pacific Time (US and Canada); Tijuana", "dependencyTarget": null, "dependencyValue": null }, { "id": "Romance Standard Time", "name": "(GMT+01:00) Brussels, Copenhagen, Madrid, Paris", "dependencyTarget": null, "dependencyValue": null }, { "id": "Russian Standard Time", "name": "(GMT+03:00) Moscow, St. Petersburg, Volgograd", "dependencyTarget": null, "dependencyValue": null }, { "id": "S.A. Eastern Standard Time", "name": "(GMT-03:00) Buenos Aires, Georgetown", "dependencyTarget": null, "dependencyValue": null }, { "id": "S.A. Pacific Standard Time", "name": "(GMT-05:00) Bogota, Lima, Quito", "dependencyTarget": null, "dependencyValue": null }, { "id": "S.A. Western Standard Time", "name": "(GMT-04:00) Caracas, La Paz", "dependencyTarget": null, "dependencyValue": null }, { "id": "S.E. Asia Standard Time", "name": "(GMT+07:00) Bangkok, Hanoi, Jakarta", "dependencyTarget": null, "dependencyValue": null }, { "id": "Samoa Standard Time", "name": "(GMT-11:00) Midway Island, Samoa", "dependencyTarget": null, "dependencyValue": null }, { "id": "Singapore Standard Time", "name": "(GMT+08:00) Kuala Lumpur, Singapore", "dependencyTarget": null, "dependencyValue": null }, { "id": "South Africa Standard Time", "name": "(GMT+02:00) Harare, Pretoria", "dependencyTarget": null, "dependencyValue": null }, { "id": "Sri Lanka Standard Time", "name": "(GMT+06:00) Sri Jayawardenepura", "dependencyTarget": null, "dependencyValue": null }, { "id": "Taipei Standard Time", "name": "(GMT+08:00) Taipei", "dependencyTarget": null, "dependencyValue": null }, { "id": "Tasmania Standard Time", "name": "(GMT+10:00) Hobart", "dependencyTarget": null, "dependencyValue": null }, { "id": "Tokyo Standard Time", "name": "(GMT+09:00) Osaka, Sapporo, Tokyo", "dependencyTarget": null, "dependencyValue": null }, { "id": "Tonga Standard Time", "name": "(GMT+13:00) Nuku'alofa", "dependencyTarget": null, "dependencyValue": null }, { "id": "Transitional Islamic State of Afghanistan Standard Time", "name": "(GMT+04:30) Kabul", "dependencyTarget": null, "dependencyValue": null }, { "id": "U.S. Eastern Standard Time", "name": "(GMT-05:00) Indiana (East)", "dependencyTarget": null, "dependencyValue": null }, { "id": "U.S. Mountain Standard Time", "name": "(GMT-07:00) Arizona", "dependencyTarget": null, "dependencyValue": null }, { "id": "Vladivostok Standard Time", "name": "(GMT+10:00) Vladivostok", "dependencyTarget": null, "dependencyValue": null }, { "id": "W. Australia Standard Time", "name": "(GMT+08:00) Perth", "dependencyTarget": null, "dependencyValue": null }, { "id": "W. Central Africa Standard Time", "name": "(GMT+01:00) West Central Africa", "dependencyTarget": null, "dependencyValue": null }, { "id": "W. Europe Standard Time", "name": "(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", "dependencyTarget": null, "dependencyValue": null }, { "id": "West Asia Standard Time", "name": "(GMT+05:00) Islamabad, Karachi, Tashkent", "dependencyTarget": null, "dependencyValue": null }, { "id": "West Pacific Standard Time", "name": "(GMT+10:00) Guam, Port Moresby", "dependencyTarget": null, "dependencyValue": null }, { "id": "Yakutsk Standard Time", "name": "(GMT+09:00) Yakutsk", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "hyperv_install", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "time_zone", "value": "11", "datatype": "enum", "componentid": "component-server-1", "name": "Timezone", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "1", "name": "(UTC-12:00) International Date Line West", "dependencyTarget": null, "dependencyValue": null }, { "id": "10", "name": "(UTC-06:00) Central America", "dependencyTarget": null, "dependencyValue": null }, { "id": "100", "name": "(UTC+13:00) Samoa", "dependencyTarget": null, "dependencyValue": null }, { "id": "11", "name": "(UTC-06:00) Central Time (US & Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "12", "name": "(UTC-06:00) Guadalajara, Mexico City, Monterrey", "dependencyTarget": null, "dependencyValue": null }, { "id": "13", "name": "(UTC-06:00) Saskatchewan", "dependencyTarget": null, "dependencyValue": null }, { "id": "14", "name": "(UTC-05:00) Bogota, Lima, Quito", "dependencyTarget": null, "dependencyValue": null }, { "id": "15", "name": "(UTC-05:00) Eastern Time (US & Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "16", "name": "(UTC-05:00) Indiana (East)", "dependencyTarget": null, "dependencyValue": null }, { "id": "17", "name": "(UTC-04:30) Caracas", "dependencyTarget": null, "dependencyValue": null }, { "id": "18", "name": "(UTC-04:00) Asuncion", "dependencyTarget": null, "dependencyValue": null }, { "id": "19", "name": "(UTC-04:00) Atlantic Time (Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "2", "name": "(UTC-11:00) Coordinated Universal Time-11", "dependencyTarget": null, "dependencyValue": null }, { "id": "20", "name": "(UTC-04:00) Cuiaba", "dependencyTarget": null, "dependencyValue": null }, { "id": "21", "name": "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan", "dependencyTarget": null, "dependencyValue": null }, { "id": "22", "name": "(UTC-04:00) Santiago", "dependencyTarget": null, "dependencyValue": null }, { "id": "23", "name": "(UTC-03:30) Newfoundland", "dependencyTarget": null, "dependencyValue": null }, { "id": "24", "name": "(UTC-03:00) Brasilia", "dependencyTarget": null, "dependencyValue": null }, { "id": "25", "name": "(UTC-03:00) Buenos Aires", "dependencyTarget": null, "dependencyValue": null }, { "id": "26", "name": "(UTC-03:00) Cayenne, Fortaleza", "dependencyTarget": null, "dependencyValue": null }, { "id": "27", "name": "(UTC-03:00) Greenland", "dependencyTarget": null, "dependencyValue": null }, { "id": "28", "name": "(UTC-03:00) Montevideo", "dependencyTarget": null, "dependencyValue": null }, { "id": "29", "name": "(UTC-03:00) Salvador", "dependencyTarget": null, "dependencyValue": null }, { "id": "3", "name": "(UTC-10:00) Hawaii", "dependencyTarget": null, "dependencyValue": null }, { "id": "30", "name": "(UTC-02:00) Coordinated Universal Time-02", "dependencyTarget": null, "dependencyValue": null }, { "id": "32", "name": "(UTC-01:00) Azores", "dependencyTarget": null, "dependencyValue": null }, { "id": "33", "name": "(UTC-01:00) Cape Verde Is.", "dependencyTarget": null, "dependencyValue": null }, { "id": "34", "name": "(UTC) Casablanca", "dependencyTarget": null, "dependencyValue": null }, { "id": "35", "name": "(UTC) Coordinated Universal Time", "dependencyTarget": null, "dependencyValue": null }, { "id": "36", "name": "(UTC) Dublin, Edinburgh, Lisbon, London", "dependencyTarget": null, "dependencyValue": null }, { "id": "37", "name": "(UTC) Monrovia, Reykjavik", "dependencyTarget": null, "dependencyValue": null }, { "id": "38", "name": "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", "dependencyTarget": null, "dependencyValue": null }, { "id": "39", "name": "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", "dependencyTarget": null, "dependencyValue": null }, { "id": "4", "name": "(UTC-09:00) Alaska", "dependencyTarget": null, "dependencyValue": null }, { "id": "40", "name": "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris", "dependencyTarget": null, "dependencyValue": null }, { "id": "41", "name": "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb", "dependencyTarget": null, "dependencyValue": null }, { "id": "42", "name": "(UTC+01:00) West Central Africa", "dependencyTarget": null, "dependencyValue": null }, { "id": "43", "name": "(UTC+01:00) Windhoek", "dependencyTarget": null, "dependencyValue": null }, { "id": "44", "name": "(UTC+02:00) Amman", "dependencyTarget": null, "dependencyValue": null }, { "id": "45", "name": "(UTC+02:00) Athens, Bucharest", "dependencyTarget": null, "dependencyValue": null }, { "id": "46", "name": "(UTC+02:00) Beirut", "dependencyTarget": null, "dependencyValue": null }, { "id": "47", "name": "(UTC+02:00) Cairo", "dependencyTarget": null, "dependencyValue": null }, { "id": "48", "name": "(UTC+02:00) Damascus", "dependencyTarget": null, "dependencyValue": null }, { "id": "49", "name": "(UTC+02:00) Harare, Pretoria", "dependencyTarget": null, "dependencyValue": null }, { "id": "5", "name": "(UTC-08:00) Baja California", "dependencyTarget": null, "dependencyValue": null }, { "id": "50", "name": "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius", "dependencyTarget": null, "dependencyValue": null }, { "id": "51", "name": "(UTC+02:00) Istanbul", "dependencyTarget": null, "dependencyValue": null }, { "id": "52", "name": "(UTC+02:00) Jerusalem", "dependencyTarget": null, "dependencyValue": null }, { "id": "53", "name": "(UTC+02:00) Nicosia", "dependencyTarget": null, "dependencyValue": null }, { "id": "54", "name": "(UTC+03:00) Baghdad", "dependencyTarget": null, "dependencyValue": null }, { "id": "55", "name": "(UTC+03:00) Kaliningrad, Minsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "56", "name": "(UTC+03:00) Kuwait, Riyadh", "dependencyTarget": null, "dependencyValue": null }, { "id": "57", "name": "(UTC+03:00) Nairobi", "dependencyTarget": null, "dependencyValue": null }, { "id": "58", "name": "(UTC+03:30) Tehran", "dependencyTarget": null, "dependencyValue": null }, { "id": "59", "name": "(UTC+04:00) Abu Dhabi, Muscat", "dependencyTarget": null, "dependencyValue": null }, { "id": "6", "name": "(UTC-08:00) Pacific Time (US & Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "60", "name": "(UTC+04:00) Baku", "dependencyTarget": null, "dependencyValue": null }, { "id": "61", "name": "(UTC+04:00) Moscow, St. Petersburg, Volgograd", "dependencyTarget": null, "dependencyValue": null }, { "id": "62", "name": "(UTC+04:00) Port Louis", "dependencyTarget": null, "dependencyValue": null }, { "id": "63", "name": "(UTC+04:00) Tbilisi", "dependencyTarget": null, "dependencyValue": null }, { "id": "64", "name": "(UTC+04:00) Yerevan", "dependencyTarget": null, "dependencyValue": null }, { "id": "65", "name": "(UTC+04:30) Kabul", "dependencyTarget": null, "dependencyValue": null }, { "id": "66", "name": "(UTC+05:00) Islamabad, Karachi", "dependencyTarget": null, "dependencyValue": null }, { "id": "67", "name": "(UTC+05:00) Tashkent", "dependencyTarget": null, "dependencyValue": null }, { "id": "68", "name": "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi", "dependencyTarget": null, "dependencyValue": null }, { "id": "69", "name": "(UTC+05:30) Sri Jayawardenepura", "dependencyTarget": null, "dependencyValue": null }, { "id": "7", "name": "(UTC-07:00) Arizona", "dependencyTarget": null, "dependencyValue": null }, { "id": "70", "name": "(UTC+05:45) Kathmandu", "dependencyTarget": null, "dependencyValue": null }, { "id": "71", "name": "(UTC+06:00) Astana", "dependencyTarget": null, "dependencyValue": null }, { "id": "72", "name": "(UTC+06:00) Dhaka", "dependencyTarget": null, "dependencyValue": null }, { "id": "73", "name": "(UTC+06:00) Ekaterinburg", "dependencyTarget": null, "dependencyValue": null }, { "id": "74", "name": "(UTC+06:30) Yangon (Rangoon)", "dependencyTarget": null, "dependencyValue": null }, { "id": "75", "name": "(UTC+07:00) Bangkok, Hanoi, Jakarta", "dependencyTarget": null, "dependencyValue": null }, { "id": "76", "name": "(UTC+07:00) Novosibirsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "77", "name": "(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi", "dependencyTarget": null, "dependencyValue": null }, { "id": "78", "name": "(UTC+08:00) Krasnoyarsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "79", "name": "(UTC+08:00) Kuala Lumpur, Singapore", "dependencyTarget": null, "dependencyValue": null }, { "id": "8", "name": "(UTC-07:00) Chihuahua, La Paz, Mazatlan", "dependencyTarget": null, "dependencyValue": null }, { "id": "80", "name": "(UTC+08:00) Perth", "dependencyTarget": null, "dependencyValue": null }, { "id": "81", "name": "(UTC+08:00) Taipei", "dependencyTarget": null, "dependencyValue": null }, { "id": "82", "name": "(UTC+08:00) Ulaanbaatar", "dependencyTarget": null, "dependencyValue": null }, { "id": "83", "name": "(UTC+09:00) Irkutsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "84", "name": "(UTC+09:00) Osaka, Sapporo, Tokyo", "dependencyTarget": null, "dependencyValue": null }, { "id": "85", "name": "(UTC+09:00) Seoul", "dependencyTarget": null, "dependencyValue": null }, { "id": "86", "name": "(UTC+09:30) Adelaide", "dependencyTarget": null, "dependencyValue": null }, { "id": "87", "name": "(UTC+09:30) Darwin", "dependencyTarget": null, "dependencyValue": null }, { "id": "88", "name": "(UTC+10:00) Brisbane", "dependencyTarget": null, "dependencyValue": null }, { "id": "89", "name": "(UTC+10:00) Canberra, Melbourne, Sydney", "dependencyTarget": null, "dependencyValue": null }, { "id": "9", "name": "(UTC-07:00) Mountain Time (US & Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "90", "name": "(UTC+10:00) Guam, Port Moresby", "dependencyTarget": null, "dependencyValue": null }, { "id": "91", "name": "(UTC+10:00) Hobart", "dependencyTarget": null, "dependencyValue": null }, { "id": "92", "name": "(UTC+10:00) Yakutsk ", "dependencyTarget": null, "dependencyValue": null }, { "id": "93", "name": "(UTC+11:00) Solomon Is., New Caledonia", "dependencyTarget": null, "dependencyValue": null }, { "id": "94", "name": "(UTC+11:00) Vladivostok", "dependencyTarget": null, "dependencyValue": null }, { "id": "95", "name": "(UTC+12:00) Auckland, Wellington", "dependencyTarget": null, "dependencyValue": null }, { "id": "96", "name": "(UTC+12:00) Coordinated Universal Time+12", "dependencyTarget": null, "dependencyValue": null }, { "id": "97", "name": "(UTC+12:00) Fiji", "dependencyTarget": null, "dependencyValue": null }, { "id": "98", "name": "(UTC+12:00) Magadan", "dependencyTarget": null, "dependencyValue": null }, { "id": "99", "name": "(UTC+13:00) Nuku'alofa", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": "RHEL7.520180322.0-Server,rcm_rhel", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ntp_server", "value": "3.centos.pool.ntp.org", "datatype": "string", "componentid": "component-server-1", "name": "NTP Server", "tooltip": "Multiple NTP servers may be entered as a comma-separated list.", "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": "RHEL7.520180322.0-Server,rcm_rhel,ESXi6.57967591-6.5.X_Dell_14G,esxi-6.0,esxi-6.5,rcm_esx", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "language", "value": "en-US", "datatype": "enum", "componentid": "component-server-1", "name": "Language", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "de-DE", "name": "German (Germany) ", "dependencyTarget": null, "dependencyValue": null }, { "id": "en-US", "name": "English (United States)", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "hyperv_install", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "keyboard", "value": "00000409", "datatype": "enum", "componentid": "component-server-1", "name": "Keyboard", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "00000409", "name": "U.S. English", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "hyperv_install", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "domain_name", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Domain Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "fqdn", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "FQ Domain Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "hyperv_install", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "domain_admin_user", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Domain Admin Username", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "domain_admin_password", "value": "", "datatype": "password", "componentid": "component-server-1", "name": "Domain Admin Password", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "domain_admin_password_confirm", "value": "", "datatype": "password", "componentid": "component-server-1", "name": "Domain Admin Password Confirm", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "scaleio_enabled", "value": "true", "datatype": "boolean", "componentid": "component-server-1", "name": "Use Server for Dell EMC VxFlex OS", "tooltip": "Dell EMC VxFlex OS is based on VxFlex OS software. VxFlex OS values may be entered/shown in this field.", "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "scaleio_role", "value": "hyperconverged", "datatype": "radio", "componentid": "component-server-1", "name": "VxFlex OS Role", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "compute_only", "name": "Compute Only", "dependencyTarget": "razor_image", "dependencyValue": "ESXi6.57967591-6.5.X_Dell_14G,esxi-6.0,esxi-6.5,rcm_esx" }, { "id": "hyperconverged", "name": "Hyperconverged", "dependencyTarget": "razor_image", "dependencyValue": "ESXi6.57967591-6.5.X_Dell_14G,esxi-6.0,esxi-6.5,rcm_esx" }, { "id": "storage_only", "name": "Storage Only", "dependencyTarget": "razor_image", "dependencyValue": "RHEL7.520180322.0-Server,rcm_rhel,rcm_rhel" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "port_channel_protocol", "value": "standard", "datatype": "enum", "componentid": "component-server-1", "name": "Port Channel Protocol", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "lacp", "name": "Lacp Protocol", "dependencyTarget": null, "dependencyValue": null }, { "id": "none", "name": "No Protocol", "dependencyTarget": null, "dependencyValue": null }, { "id": "standard", "name": "Standard Protocol", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_role", "dependencyValue": "hyperconverged", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "scaleio_sdc_guid", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "VxFlex OS SDC Guid", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "scaleio_sds_guid", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "VxFlex OS SDS Guid", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "scaleio_mdm_role", "value": "none", "datatype": "enum", "componentid": "component-server-1", "name": "VxFlex OS MDM Role", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "none", "name": "None", "dependencyTarget": null, "dependencyValue": null }, { "id": "primary_mdm", "name": "Primary MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "secondary_mdm", "name": "Secondary MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "standby_mdm", "name": "Standby MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "standby_tie_breaker", "name": "Standby Tie Breaker", "dependencyTarget": null, "dependencyValue": null }, { "id": "tie_breaker", "name": "Tie Breaker", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "mdm_data_ips", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "VxFlex OS Configure MDM Data IP Addresses", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "scaleio_disk_configuration", "value": null, "datatype": "storagepooldisksconfiguration", "componentid": "component-server-1", "name": "VxFlex OS Storage Pool Disks Configuration", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "scaleio_inventory_mdm_role", "value": "none", "datatype": "enum", "componentid": "component-server-1", "name": "VxFlex OS Inventory MDM Role", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "none", "name": "None", "dependencyTarget": null, "dependencyValue": null }, { "id": "primary_mdm", "name": "Primary MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "secondary_mdm", "name": "Secondary MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "standby_mdm", "name": "Standby MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "standby_tie_breaker", "name": "Standby Tie Breaker", "dependencyTarget": null, "dependencyValue": null }, { "id": "tie_breaker", "name": "Tie Breaker", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "scaleio_inventory_mdm_management_ips", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "VxFlex OS Inventory MDM Management IP Addresses", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "scaleio_inventory_mdm_data_ips", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "VxFlex OS Inventory MDM Data IP Addresses", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "vib_repo", "value": "VxFlexOS2.6.1SDC", "datatype": "string", "componentid": "component-server-1", "name": "VIB location", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_role", "dependencyValue": "hyperconverged,compute_only", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "yum_repo", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "YUM Base URI", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_role", "dependencyValue": "storage_only", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "razor_image_name", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Razor image", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-server-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }, { "id": "asm::svm", "name": "SVM OS Settings", "settings": [{ "id": "svm_assign_host_name", "value": "generate_host_name", "datatype": "enum", "componentid": "component-server-1", "name": "Host Name Selection", "tooltip": "Define how the Host Name will be selected at deployment time.<br/>Auto Generate - Use the Host Name Template field to auto-generate host names at deployment time.<br/>Specify At Deployment Time - A unique host name will be requested at deployment time.", "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "define_host_name", "name": "Specify At Deployment Time", "dependencyTarget": null, "dependencyValue": null }, { "id": "generate_host_name", "name": "Auto Generate", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "scaleio_role", "dependencyValue": "hyperconverged", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "svm_os_host_name_template", "value": "svm-${server_hostname}", "datatype": "string", "componentid": "component-server-1", "name": "Host Name Template", "tooltip": "Template used to generate host names at deployment time. Must contain variables that will produce a unique host name.<br/>Allowed variables  are ${num} (an auto-generated unique number) and ${server_hostname} (uses server hostname).", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "svm_assign_host_name", "dependencyValue": "generate_host_name", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "svm_os_host_name", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Host Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "svm_assign_host_name", "dependencyValue": "define_host_name", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "svm_os_credential", "value": "ff808081665a6dcd01665a8072a2052a", "datatype": "oscredential", "componentid": "component-server-1", "name": "OS Credential", "tooltip": "Credential used to set username and password on the installed OS", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "scaleio_role", "dependencyValue": "hyperconverged", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "svm_ntp_server", "value": "3.centos.pool.ntp.org", "datatype": "string", "componentid": "component-server-1", "name": "NTP Server", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "scaleio_role", "dependencyValue": "hyperconverged", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-server-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }, { "id": "asm::idrac", "name": "Hardware Settings", "settings": [{ "id": "target_boot_device", "value": "LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "datatype": "enum", "componentid": "component-server-1", "name": "Target Boot Device", "tooltip": "Local Flash Storage - Installs OS to either the SATADOM or BOSS flash storage device present in the server<br/><br/>Local Flash Storage for Dell EMC ScaleIO - Installs OS to either the SATADOM or BOSS flash storage device present in the server and configures the server to support ScaleIO", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "LOCAL_FLASH_STORAGE", "name": "Local Flash Storage", "dependencyTarget": "scaleio_enabled", "dependencyValue": "false" }, { "id": "LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "name": "Local Flash Storage for DellEMC VxFlex OS", "dependencyTarget": "scaleio_enabled", "dependencyValue": "true" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": false, "isPreservedForDeployment": false }, { "id": "raid_configuration", "value": "", "datatype": "raidconfiguration", "componentid": "component-server-1", "name": "RAID", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "target_boot_device", "dependencyValue": "HD", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "server_source", "value": "pool", "datatype": "enum", "componentid": "component-server-1", "name": "Server Source", "tooltip": "Method for server selection", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "manual", "name": "Manual Entry", "dependencyTarget": null, "dependencyValue": null }, { "id": "pool", "name": "Server Pool", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "server_pool", "value": "-1", "datatype": "enum", "componentid": "component-server-1", "name": "Server Pool", "tooltip": "Pool from which servers are selected during deployment", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "-1", "name": "Global", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "server_source", "dependencyValue": "pool", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "server_select", "value": "", "datatype": "enum", "componentid": "component-server-1", "name": "Choose Server", "tooltip": "Select specific server from a drop-down list", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081665a6dcd01665a7a083c0093", "name": "4PMVHL2", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081665a6dcd01665a7a08480094", "name": "7LD5KH2", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081665a6dcd01665a7a08650095", "name": "4PNQHL2", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081665a6dcd01665a7a08e60096", "name": "4PNSHL2", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081665a6dcd01665a7a8424009a", "name": "7LD4KH2", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081665a6dcd01665a7a850a009b", "name": "4PNPHL2", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081665a6dcd01665a7a852e009c", "name": "7LD3KH2", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "server_source", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "attempted_servers", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Attempted Servers", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-server-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }, { "id": "asm::bios", "name": "BIOS Settings", "settings": [{ "id": "bios_configuration", "value": "basic", "datatype": "biosconfiguration", "componentid": "component-server-1", "name": "BIOS Settings", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "SysProfile", "value": "PerfOptimized", "datatype": "enum", "componentid": "component-server-1", "name": "System Profile", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "Custom", "name": "Custom", "dependencyTarget": null, "dependencyValue": null }, { "id": "DenseCfgOptimized", "name": "Dense Configuration", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }, { "id": "PerfOptimized", "name": "Performance", "dependencyTarget": null, "dependencyValue": null }, { "id": "PerfPerWattOptimizedDapc", "name": "Performance Per Watt (DAPC)", "dependencyTarget": null, "dependencyValue": null }, { "id": "PerfPerWattOptimizedOs", "name": "Performance Per Watt (OS)", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "UsbPorts", "value": "AllOn", "datatype": "enum", "componentid": "component-server-1", "name": "User Accessible USB Ports", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "AllOff", "name": "All Ports Off", "dependencyTarget": null, "dependencyValue": null }, { "id": "AllOn", "name": "All Ports On", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }, { "id": "OnlyBackPortsOn", "name": "Only Back Ports On", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ProcCores", "value": "All", "datatype": "enum", "componentid": "component-server-1", "name": "Number of Cores per Processor", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "1", "name": "1", "dependencyTarget": null, "dependencyValue": null }, { "id": "2", "name": "2", "dependencyTarget": null, "dependencyValue": null }, { "id": "4", "name": "4", "dependencyTarget": null, "dependencyValue": null }, { "id": "6", "name": "6", "dependencyTarget": null, "dependencyValue": null }, { "id": "All", "name": "All", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ProcVirtualization", "value": "Enabled", "datatype": "enum", "componentid": "component-server-1", "name": "Virtualization Technology", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "Disabled", "name": "Disabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "Enabled", "name": "Enabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "LogicalProc", "value": "Enabled", "datatype": "enum", "componentid": "component-server-1", "name": "Logical Processor", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "Disabled", "name": "Disabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "Enabled", "name": "Enabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ProcExecuteDisable", "value": "Enabled", "datatype": "enum", "componentid": "component-server-1", "name": "Execute Disable", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "Disabled", "name": "Disabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "Enabled", "name": "Enabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "NodeInterleave", "value": "Enabled", "datatype": "enum", "componentid": "component-server-1", "name": "Node Interleaving", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "Disabled", "name": "Disabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "Enabled", "name": "Enabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-server-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }, { "id": "asm::esxiscsiconfig", "name": "Network Settings", "settings": [{ "id": "network_configuration", "value": "{\"id\":\"85e89ecc-281f-4158-a09e-2797bfa3a72f\",\"interfaces\":[{\"id\":\"be58b8a6-1823-4be3-b994-ed7f8974cb84\",\"name\":\"Interface\",\"interfaces\":[{\"id\":\"f1795dd6-5024-4d18-9c00-f39dbe04135d\",\"name\":\"Port 1\",\"partitions\":[{\"id\":\"cae34ca1-83a8-4a39-b98e-fe8127ef6332\",\"name\":\"1\",\"networks\":[\"ff808081665a6dcd01665a75a9a30013\"],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"eef7bf82-5db9-4f2c-80a8-5fb9b7b44966\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"c0963a5c-c128-4759-b4bd-257bf4745130\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"676b43c3-ad94-48b4-ae5d-05bdb145f3e6\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"e384f118-1dbd-44d7-b07d-f912bc1ae974\",\"name\":\"Port 2\",\"partitions\":[{\"id\":\"c697d1ed-aab0-4d54-bbe9-3dd5f9e26788\",\"name\":\"1\",\"networks\":[\"ff808081665a6dcd01665a76e1010025\",\"ff808081665a6dcd01665a7913aa0086\",\"ff808081665a6dcd01665a7969be0087\",\"ff808081665a6dcd01665a78d2530063\"],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"e52ddb95-c5c7-4fae-887b-e6fd433bfae7\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"a637df8c-3c53-4416-b794-1cbcb79652ff\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"97502234-cc0a-46f5-af41-dd820bb0be43\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"44627f51-db99-4e01-af72-10420e0b6978\",\"name\":\"Port 3\",\"partitions\":[{\"id\":\"15c6bce3-367c-44c6-ad1e-23d1dd27660e\",\"name\":\"1\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"9093a008-c04b-49c3-bc1f-73f493648015\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"d2bd99f8-709b-4248-bc2d-a889fbbc9429\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"d04d6f99-3184-4995-8c0c-26d3d8f81273\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"75ab47ad-14cf-4179-8d92-c69dba0631dd\",\"name\":\"Port 4\",\"partitions\":[{\"id\":\"ea05ed76-14b3-43d8-8148-06e9c4f76395\",\"name\":\"1\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"9348742f-5e23-433b-a346-f8e39f617370\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"ccee639f-8b7a-4d71-aee7-bb3472d5d486\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"2caa44c8-39e1-468b-912c-cf4e1c58a1b7\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]}],\"enabled\":true,\"redundancy\":false,\"nictype\":\"2x10Gb\",\"partitioned\":false,\"fabrictype\":\"ethernet\"},{\"id\":\"b9899e08-8c72-4534-817b-08e862b821b6\",\"name\":\"Interface\",\"interfaces\":[{\"id\":\"ba22e0ca-cafe-46e2-8e35-772ff5caf71f\",\"name\":\"Port 1\",\"partitions\":[{\"id\":\"ca730272-b75e-46d0-9daf-b408213a21b4\",\"name\":\"1\",\"networks\":[\"ff808081665a6dcd01665a750f7f0001\"],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"94238946-f086-4196-9960-ac41b5cb36e9\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"a97b03e8-9c25-4cd5-b102-7b94317e9a09\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"12ead1d5-fc0e-4b5c-ba7f-b2b68d015f8e\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"0cf2c17b-5f33-4889-b681-1f2874f6be2d\",\"name\":\"Port 2\",\"partitions\":[{\"id\":\"d8d2b037-8bc5-449c-88a5-d4f9cfa38b76\",\"name\":\"1\",\"networks\":[\"ff808081665a6dcd01665a76e1010025\",\"ff808081665a6dcd01665a7913aa0086\",\"ff808081665a6dcd01665a7969be0087\",\"ff808081665a6dcd01665a78d2530063\"],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"d463d97d-6569-4844-829e-a8fb38f80be8\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"973309ac-2b3d-4df8-b611-9cc35039e3ff\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"f2e5082d-897d-4194-8731-6393a8301118\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"54e80a81-33f0-470f-942e-8d4c4ae1f022\",\"name\":\"Port 3\",\"partitions\":[{\"id\":\"df7d4b28-13cd-4c48-810f-206584c60ca0\",\"name\":\"1\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"6eef4cef-5f05-422f-82b5-26add036045b\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"d5d71ba2-1722-406a-963f-91e95c231c97\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"b42f00cf-dfbf-43c4-9301-78e745e6d3fa\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"e0328696-40e6-4881-a0dc-59522cb5a69c\",\"name\":\"Port 4\",\"partitions\":[{\"id\":\"691abe64-22cd-4550-98ab-a71be6b5597a\",\"name\":\"1\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"efc75862-a10f-461c-9ac2-537f3cb2063f\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"8bd36924-d3b6-44d1-99a1-f2ebe88bedc5\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"78a4a188-94d8-489e-b9f1-6e41dbf5d8e4\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]}],\"enabled\":true,\"redundancy\":false,\"nictype\":\"2x10Gb\",\"partitioned\":false,\"fabrictype\":\"ethernet\"}]}", "datatype": "networkconfiguration", "componentid": "component-server-1", "name": "Network Config", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "default_gateway", "value": "", "datatype": "string", "componentid": "component-server-1", "name": "Static Network Default Gateway", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "dhcp_workload", "name": "DHCP / No Gateway", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081665a6dcd01665a750f7f0001", "name": "vcesys-sio-data1", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081665a6dcd01665a75a9a30013", "name": "vcesys-sio-data2", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081665a6dcd01665a76e1010025", "name": "vcesys-sio-mgmt", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "mtu", "value": "1500", "datatype": "enum", "componentid": "component-server-1", "name": "MTU size for bonded interfaces:", "tooltip": "Allows the Maximum Transfer Unit (MTU) to be set in the server Operating System. This will only take effect on bonded interfaces.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "1500", "name": "1500", "dependencyTarget": null, "dependencyValue": null }, { "id": "9000", "name": "9000", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-server-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": true, "network": { "id": "85e89ecc-281f-4158-a09e-2797bfa3a72f", "interfaces": [{ "id": "be58b8a6-1823-4be3-b994-ed7f8974cb84", "name": "Interface", "interfaces": [{ "id": "f1795dd6-5024-4d18-9c00-f39dbe04135d", "name": "Port 1", "partitions": [{ "id": "cae34ca1-83a8-4a39-b98e-fe8127ef6332", "name": "1", "networks": ["ff808081665a6dcd01665a75a9a30013"], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "eef7bf82-5db9-4f2c-80a8-5fb9b7b44966", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "c0963a5c-c128-4759-b4bd-257bf4745130", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "676b43c3-ad94-48b4-ae5d-05bdb145f3e6", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "e384f118-1dbd-44d7-b07d-f912bc1ae974", "name": "Port 2", "partitions": [{ "id": "c697d1ed-aab0-4d54-bbe9-3dd5f9e26788", "name": "1", "networks": ["ff808081665a6dcd01665a76e1010025", "ff808081665a6dcd01665a7913aa0086", "ff808081665a6dcd01665a7969be0087", "ff808081665a6dcd01665a78d2530063"], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "e52ddb95-c5c7-4fae-887b-e6fd433bfae7", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "a637df8c-3c53-4416-b794-1cbcb79652ff", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "97502234-cc0a-46f5-af41-dd820bb0be43", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "44627f51-db99-4e01-af72-10420e0b6978", "name": "Port 3", "partitions": [{ "id": "15c6bce3-367c-44c6-ad1e-23d1dd27660e", "name": "1", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "9093a008-c04b-49c3-bc1f-73f493648015", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "d2bd99f8-709b-4248-bc2d-a889fbbc9429", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "d04d6f99-3184-4995-8c0c-26d3d8f81273", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "75ab47ad-14cf-4179-8d92-c69dba0631dd", "name": "Port 4", "partitions": [{ "id": "ea05ed76-14b3-43d8-8148-06e9c4f76395", "name": "1", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "9348742f-5e23-433b-a346-f8e39f617370", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "ccee639f-8b7a-4d71-aee7-bb3472d5d486", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "2caa44c8-39e1-468b-912c-cf4e1c58a1b7", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }], "enabled": true, "redundancy": false, "nictype": "2x10Gb", "partitioned": false, "fabrictype": "ethernet" }, { "id": "b9899e08-8c72-4534-817b-08e862b821b6", "name": "Interface", "interfaces": [{ "id": "ba22e0ca-cafe-46e2-8e35-772ff5caf71f", "name": "Port 1", "partitions": [{ "id": "ca730272-b75e-46d0-9daf-b408213a21b4", "name": "1", "networks": ["ff808081665a6dcd01665a750f7f0001"], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "94238946-f086-4196-9960-ac41b5cb36e9", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "a97b03e8-9c25-4cd5-b102-7b94317e9a09", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "12ead1d5-fc0e-4b5c-ba7f-b2b68d015f8e", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "0cf2c17b-5f33-4889-b681-1f2874f6be2d", "name": "Port 2", "partitions": [{ "id": "d8d2b037-8bc5-449c-88a5-d4f9cfa38b76", "name": "1", "networks": ["ff808081665a6dcd01665a76e1010025", "ff808081665a6dcd01665a7913aa0086", "ff808081665a6dcd01665a7969be0087", "ff808081665a6dcd01665a78d2530063"], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "d463d97d-6569-4844-829e-a8fb38f80be8", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "973309ac-2b3d-4df8-b611-9cc35039e3ff", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "f2e5082d-897d-4194-8731-6393a8301118", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "54e80a81-33f0-470f-942e-8d4c4ae1f022", "name": "Port 3", "partitions": [{ "id": "df7d4b28-13cd-4c48-810f-206584c60ca0", "name": "1", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "6eef4cef-5f05-422f-82b5-26add036045b", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "d5d71ba2-1722-406a-963f-91e95c231c97", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "b42f00cf-dfbf-43c4-9301-78e745e6d3fa", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "e0328696-40e6-4881-a0dc-59522cb5a69c", "name": "Port 4", "partitions": [{ "id": "691abe64-22cd-4550-98ab-a71be6b5597a", "name": "1", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "efc75862-a10f-461c-9ac2-537f3cb2063f", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "8bd36924-d3b6-44d1-99a1-f2ebe88bedc5", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "78a4a188-94d8-489e-b9f1-6e41dbf5d8e4", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }], "enabled": true, "redundancy": false, "nictype": "2x10Gb", "partitioned": false, "fabrictype": "ethernet" }] }, "newComponent": null, "cloned": false, "continueClicked": null, "AsmGUID": null, "puppetCertName": null, "clonedFromId": null, "allowClone": true, "isComponentValid": false, "raid": null, "configfilename": null, "instances": 3, "errorObj": { "errorMessage": "---consolidated message/header...", "fldErrors": [{ "field": null, "errorMessage": "Component VMWare Cluster is missing data for required field: Target Virtual Machine Manager.", "errorDetails": "The template cannot be published with missing required fields.", "errorAction": "Please enter a valid value for the required field.", "errorCode": "VXFM00215" }] } }], "attachments": [], "category": "Test", "enableApps": false, "enableVMs": false, "enableCluster": false, "enableServer": false, "enableStorage": false, "allStandardUsers": false, "assignedUsers": [], "isValid": false, "manageFirmware": true, "firmwarePackageId": "usedefaultcatalog", "firmwarePackageName": "Use VxFM appliance default catalog", "updateServerFirmware": false, "updateNetworkFirmware": false, "updateStorageFirmware": false, "isLocked": false, "configureTemplateConfiguration": null, "source": "VxRack FLEX", "inConfiguration": false, "originalId": null } };
                self.template = data.data.responseObj;
                self.templateCopy = angular.copy(self.template);
                if (self.mode === 'edit') {
                    self.template.draft = true;
                }
                self.refresh();
                self.windowResize();
                //self.calculatewindowheight();
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            })
                .finally(function () { return d.resolve(); });
        };
        TemplatebuildersvgController.prototype.editApplications = function (id) {
            var self = this;
            $('.popover').remove();
            var addApplicationWizard = self.Modal({
                title: self.$translate.instant('TEMPLATES_EditApplication'),
                onHelp: function () {
                    self.GlobalServices.showHelp('addapplication');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/addapplicationwizard.html',
                controller: 'AddApplicationWizardController as Application',
                onComplete: function () {
                    self.mode === 'edit';
                    self.refresh();
                },
                params: {
                    template: self.template,
                    action: 'edit',
                    id: id
                }
            });
            addApplicationWizard.modal.show();
        };
        TemplatebuildersvgController.prototype.deleteApplications = function (id) {
            var self = this, parentComponent = _.find(self.template.components, { id: id });
            var applicationIds = _.map(_.filter(parentComponent.relatedcomponents, function (component) { return component.installOrder > 0; }), function (application) { return { id: application.id }; });
            angular.forEach([parentComponent.relatedcomponents, self.template.components], function (array) { return _.pullAllBy(array, applicationIds, "id"); });
            self.$http.post(self.Commands.data.templates.saveTemplate, self.template)
                .then(function () {
                self.mode === 'edit';
                self.getTemplateData();
            })
                .catch(function (data) { return self.GlobalServices.DisplayError(data.data); });
        };
        TemplatebuildersvgController.prototype.refresh = function () {
            var self = this;
            $('#TemplateBuilderSVGLines').empty();
            $('#TemplateBuilderSVGHoverLines').empty();
            $('#TemplateBuilderSVGSelectedLines').empty();
            if (self.template === '') {
                self.getTemplateData();
                self.getNetworkData();
            }
            else {
                self.getTemplateServers();
                self.getTemplateCluster();
                self.getTemplateStorage();
                self.getTemplateVMs();
            }
        };
        //Filters data and figures out which device type has the most components
        TemplatebuildersvgController.prototype.getTemplateServers = function () {
            var self = this;
            self.templateServers = _.filter(self.template.components, { 'type': 'server' });
            if (self.templateServers.length && self.templateServers.length >= self.mostItems) {
                self.mostItems = self.templateServers.length;
                self.mostComponents = 'serverWidth';
                var arrayitem = self.templateServers.length - 1;
                self.furthestComponentId = self.templateServers[arrayitem].id;
            }
            self.drawlines(self.templateServers);
        };
        TemplatebuildersvgController.prototype.getTemplateStorage = function () {
            var self = this;
            self.templateStorages = _.filter(self.template.components, { 'type': 'storage' });
            if (self.templateStorages.length && self.templateStorages.length >= self.mostItems) {
                self.mostItems = self.templateStorages.length;
                self.mostComponents = 'storageWidth';
                var arrayitem = self.templateStorages.length - 1;
                self.furthestComponentId = self.templateStorages[arrayitem].id;
            }
            self.drawlines(self.templateStorages);
        };
        TemplatebuildersvgController.prototype.getTemplateCluster = function () {
            var self = this;
            //self.templateClusters = _.filter(self.template.components, { 'type': 'cluster' });
            self.templateClusters = _.filter(self.template.components, function (component) { return component.type == 'cluster' || component.type == 'scaleio'; });
            if (self.templateClusters.length && self.templateClusters.length >= self.mostItems) {
                self.mostItems = self.templateClusters.length;
                self.mostComponents = 'clusterWidth';
                var arrayitem = self.templateClusters.length - 1;
                self.furthestComponentId = self.templateClusters[arrayitem].id;
            }
            self.drawlines(self.templateClusters);
        };
        TemplatebuildersvgController.prototype.getTemplateVMs = function () {
            var self = this;
            self.templateVMs = _.filter(self.template.components, { 'type': 'vm' });
            if (self.templateVMs.length && self.templateVMs.length >= self.mostItems) {
                self.mostItems = self.templateVMs.length;
                self.mostComponents = 'vmWidth';
                var arrayitem = self.templateVMs.length - 1;
                self.furthestComponentId = self.templateVMs[arrayitem].id;
            }
            self.drawlines(self.templateVMs);
        };
        TemplatebuildersvgController.prototype.drawlines = function (x) {
            var self = this;
            self.$timeout(function () {
                x.forEach(function (component) {
                    component.relatedcomponents.forEach(function (related) {
                        var newFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var x1 = $('#TemplateBuilderSVG #' + component.id).attr('x');
                        var y1 = $('#TemplateBuilderSVG #' + component.id).attr('y');
                        var x2 = $('#TemplateBuilderSVG #' + related.id).attr('x');
                        var y2 = $('#TemplateBuilderSVG #' + related.id).attr('y');
                        var lanechange = '';
                        var y1Number = 0;
                        var y2Number = 0;
                        if (y1 && y2) {
                            //Helps figure out if we're going up or down
                            y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                            y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                        }
                        if (component.type === 'cluster' || component.type === 'scaleio') {
                            lanechange = '38%';
                        }
                        if (component.type === 'server') {
                            lanechange = '58%';
                        }
                        if (component.type === 'storage') {
                            lanechange = '58%';
                        }
                        if (component.type === 'vm') {
                            lanechange = '18%';
                        }
                        //Are we drawing up?
                        if (y1Number > y2Number) {
                            if (component.type === 'cluster' || component.type === 'scaleio') {
                                lanechange = '10%';
                            }
                            if (component.type === 'server') {
                                lanechange = '38%';
                            }
                            if (component.type === 'vm' || component.type === 'cluster' || component.type === 'scaleio') {
                                lanechange = '18%';
                            }
                        }
                        if (x1 && y1 && x2 && y2) {
                            newFirstVertical.setAttribute('x1', x1);
                            newFirstVertical.setAttribute('y1', y1);
                            newFirstVertical.setAttribute('x2', x1);
                            newFirstVertical.setAttribute('y2', lanechange);
                            newHorizontal.setAttribute('x1', x1);
                            newHorizontal.setAttribute('y1', lanechange);
                            newHorizontal.setAttribute('x2', x2);
                            newHorizontal.setAttribute('y2', lanechange);
                            newSecondVertical.setAttribute('x1', x2);
                            newSecondVertical.setAttribute('y1', lanechange);
                            newSecondVertical.setAttribute('x2', x2);
                            newSecondVertical.setAttribute('y2', y2);
                        }
                        if (x2 && y2 && y1) {
                            newFirstVertical.className.baseVal = 'templateline ' + component.name;
                            newHorizontal.className.baseVal = 'templateline ' + component.name;
                            newSecondVertical.className.baseVal = 'templateline ' + component.name;
                            $('#TemplateBuilderSVGLines').append(newFirstVertical);
                            $('#TemplateBuilderSVGLines').append(newHorizontal);
                            $('#TemplateBuilderSVGLines').append(newSecondVertical);
                        }
                    });
                });
                self.changewidths();
                self.render = true;
            }, self.timerIntervals);
        };
        TemplatebuildersvgController.prototype.hoverLine = function (x) {
            var self = this;
            self.componentHover = x;
            x.relatedcomponents.forEach(function (related) {
                var HoverFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var HoverHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var HoverSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var x1 = $('#TemplateBuilderSVG #' + x.id).attr('x');
                var y1 = $('#TemplateBuilderSVG #' + x.id).attr('y');
                var x2 = $('#TemplateBuilderSVG #' + related.id).attr('x');
                var y2 = $('#TemplateBuilderSVG #' + related.id).attr('y');
                var lanechange = '';
                var y1Number = 0;
                var y2Number = 0;
                if (y1 && y2) {
                    //Helps figure out if we're going up or down
                    y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                    y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                }
                if (x.type === 'cluster' || x.type === 'scaleio') {
                    lanechange = '38%';
                }
                if (x.type === 'server') {
                    lanechange = '58%';
                }
                if (x.type === 'storage') {
                    lanechange = '58%';
                }
                if (x.type === 'vm') {
                    lanechange = '18%';
                }
                //Are we drawing up?
                if (y1Number > y2Number) {
                    if (x.type === 'cluster' || x.type === 'scaleio') {
                        lanechange = '10%';
                    }
                    if (x.type === 'server') {
                        lanechange = '38%';
                    }
                    if (x.type === 'vm' || x.type === 'cluster' || x.type === 'scaleio') {
                        lanechange = '18%';
                    }
                }
                if (x1 && y1 && x2 && y2) {
                    HoverFirstVertical.setAttribute('x1', x1);
                    HoverFirstVertical.setAttribute('y1', y1);
                    HoverFirstVertical.setAttribute('x2', x1);
                    HoverFirstVertical.setAttribute('y2', lanechange);
                    HoverHorizontal.setAttribute('x1', x1);
                    HoverHorizontal.setAttribute('y1', lanechange);
                    HoverHorizontal.setAttribute('x2', x2);
                    HoverHorizontal.setAttribute('y2', lanechange);
                    HoverSecondVertical.setAttribute('x1', x2);
                    HoverSecondVertical.setAttribute('y1', lanechange);
                    HoverSecondVertical.setAttribute('x2', x2);
                    HoverSecondVertical.setAttribute('y2', y2);
                }
                HoverFirstVertical.className.baseVal = 'hoverline ' + x.id;
                HoverHorizontal.className.baseVal = 'hoverline ' + x.id;
                HoverSecondVertical.className.baseVal = 'hoverline ' + x.id;
                if (x2 && y2 && y1) {
                    $('#TemplateBuilderSVGHoverLines').append(HoverFirstVertical);
                    $('#TemplateBuilderSVGHoverLines').append(HoverHorizontal);
                    $('#TemplateBuilderSVGHoverLines').append(HoverSecondVertical);
                }
            });
        };
        TemplatebuildersvgController.prototype.removeHovers = function () {
            var self = this;
            $('#TemplateBuilderSVGHoverLines').empty();
            self.componentHover = '';
        };
        TemplatebuildersvgController.prototype.removeSelection = function () {
            var self = this;
            $('#TemplateBuilderSVGSelectedLines').empty();
            self.selectedComponent = '';
        };
        TemplatebuildersvgController.prototype.selectLine = function (x) {
            var self = this;
            $('#TemplateBuilderSVGSelectedLines').empty();
            self.selectedComponent = x;
            $.each(x.relatedcomponents, function (index, related) {
                //x.relatedcomponents.forEach((related: any) => {
                var SelectedFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var SelectedHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var SelectedSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var x1 = $('#TemplateBuilderSVG #' + x.id).attr('x');
                var y1 = $('#TemplateBuilderSVG #' + x.id).attr('y');
                var x2 = $('#TemplateBuilderSVG #' + related.id).attr('x');
                var y2 = $('#TemplateBuilderSVG #' + related.id).attr('y');
                var lanechange = '';
                var y1Number = 0;
                var y2Number = 0;
                if (y1 && y2) {
                    //Helps figure out if we're going up or down
                    y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                    y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                }
                if (x.type === 'cluster' || x.type === 'scaleio') {
                    lanechange = '38%';
                }
                if (x.type === 'server') {
                    lanechange = '58%';
                }
                if (x.type === 'storage') {
                    lanechange = '58%';
                }
                if (x.type === 'vm') {
                    lanechange = '18%';
                }
                //Are we drawing up?
                if (y1Number > y2Number) {
                    if (x.type === 'cluster' || x.type === 'scaleio') {
                        lanechange = '10%';
                    }
                    if (x.type === 'server') {
                        lanechange = '38%';
                    }
                    if (x.type === 'vm' || x.type === 'cluster' || x.type === 'scaleio') {
                        lanechange = '18%';
                    }
                }
                if (x1 && y1 && x2 && y2) {
                    SelectedFirstVertical.setAttribute('x1', x1);
                    SelectedFirstVertical.setAttribute('y1', y1);
                    SelectedFirstVertical.setAttribute('x2', x1);
                    SelectedFirstVertical.setAttribute('y2', lanechange);
                    SelectedHorizontal.setAttribute('x1', x1);
                    SelectedHorizontal.setAttribute('y1', lanechange);
                    SelectedHorizontal.setAttribute('x2', x2);
                    SelectedHorizontal.setAttribute('y2', lanechange);
                    SelectedSecondVertical.setAttribute('x1', x2);
                    SelectedSecondVertical.setAttribute('y1', lanechange);
                    SelectedSecondVertical.setAttribute('x2', x2);
                    SelectedSecondVertical.setAttribute('y2', y2);
                }
                SelectedFirstVertical.className.baseVal = 'selectedline ' + x.id;
                SelectedHorizontal.className.baseVal = 'selectedline ' + x.id;
                SelectedSecondVertical.className.baseVal = 'selectedline ' + x.id;
                if (x2 && y2 && y1) {
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedFirstVertical);
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedHorizontal);
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedSecondVertical);
                }
            });
        };
        TemplatebuildersvgController.prototype.hasApplication = function (component) {
            if (component.type == 'storage' || component.type == 'cluster' || component.type === 'scaleio')
                return false;
            var hasApplication = false;
            $.each(component.relatedcomponents, function (index, model) {
                if (model.installOrder > 0) {
                    hasApplication = true;
                    return;
                }
            });
            return hasApplication;
        };
        TemplatebuildersvgController.prototype.addComponent = function (resourceType) {
            var self = this;
            if (resourceType == 'application') {
                var addApplicationWizard = self.Modal({
                    title: self.$translate.instant('ADDAPPLICATION_Title'),
                    onHelp: function () {
                        self.GlobalServices.showHelp('addapplication');
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/addapplicationwizard.html',
                    controller: 'AddApplicationWizardController as Application',
                    onComplete: function () {
                        self.refresh();
                    },
                    params: {
                        template: self.template,
                        action: 'add'
                    },
                    onCancel: function () {
                        addApplicationWizard.modal.dismiss();
                        self.getTemplateData();
                    },
                });
                addApplicationWizard.modal.show();
            }
            else {
                var title = '';
                var helptoken;
                switch (resourceType) {
                    case 'storage':
                        title = self.$translate.instant('COMPONENTEDITOR_StorageComponent');
                        helptoken = 'addstorage';
                        break;
                    case 'server':
                        title = self.$translate.instant('COMPONENTEDITOR_ServerComponent');
                        helptoken = 'addserver';
                        break;
                    case 'cluster':
                        title = self.$translate.instant('COMPONENTEDITOR_ClusterComponent');
                        helptoken = 'addcluster';
                        break;
                    case 'vm':
                        title = self.$translate.instant('COMPONENTEDITOR_VMComponent');
                        helptoken = 'addappliance';
                        break;
                }
                var adduserModal = self.Modal({
                    title: title,
                    onHelp: function () {
                        self.GlobalServices.showHelp(helptoken);
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/addcomponentmodal.html',
                    controller: 'AddComponentController as AddComponent',
                    params: {
                        mode: 'edit',
                        action: 'add',
                        type: resourceType,
                        templateId: self.selectedTemplateId,
                        serviceId: null,
                        template: self.template
                    },
                    onComplete: function () {
                        self.mode === 'edit';
                        self.getTemplateData();
                    }
                });
                adduserModal.modal.show();
            }
        };
        TemplatebuildersvgController.prototype.editComponent = function (component, mode) {
            var self = this, title;
            var helptoken;
            $(".popover").remove();
            switch (component.type) {
                case 'storage':
                    title = self.$translate.instant('COMPONENTEDITOR_StorageComponent');
                    helptoken = 'addstorage';
                    break;
                case 'server':
                    title = self.$translate.instant('COMPONENTEDITOR_ServerComponent');
                    helptoken = 'addserver';
                    break;
                case 'cluster':
                    title = self.$translate.instant('COMPONENTEDITOR_VmWareCluster');
                    helptoken = 'addcluster';
                    break;
                case 'scaleio':
                    title = self.$translate.instant('COMPONENTEDITOR_VxFlexOsCluster');
                    helptoken = 'addcluster';
                    break;
                case 'vm':
                    title = self.$translate.instant('COMPONENTEDITOR_VMComponent');
                    helptoken = 'addappliance';
                    break;
            }
            var addComponentModal = self.Modal({
                title: title,
                onHelp: function () {
                    self.GlobalServices.showHelp(helptoken);
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/addcomponentmodal.html',
                controller: 'AddComponentController as AddComponent',
                params: {
                    mode: mode,
                    action: mode,
                    type: component.type,
                    templateId: self.selectedTemplateId,
                    template: angular.copy(self.template),
                    componentId: component.id,
                    component: component
                },
                onComplete: function () {
                    self.mode === 'edit';
                    self.getTemplateData();
                }
            });
            addComponentModal.modal.show();
        };
        TemplatebuildersvgController.prototype.getNetworkData = function () {
            var self = this;
            self.$http.post(self.Commands.data.networking.networks.getNetworksList, [])
                .then(function (response) {
                self.networks = response.data.responseObj;
            });
        };
        TemplatebuildersvgController.prototype.deleteComponent = function (id) {
            var self = this;
            $('.popover').remove();
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('TEMPLATEBUILDER_Areyousureyouwanttoremovethiscomponent')).then(function () {
                angular.forEach(self.template.components, function (component) {
                    _.remove(component.relatedcomponents, { id: id });
                });
                _.remove(self.template.components, { id: id });
                self.$http.post(self.Commands.data.templates.saveTemplate, self.template).then(function (data) {
                    self.mode === 'edit';
                    self.getTemplateData();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        TemplatebuildersvgController.prototype.addAttachment = function () {
            var self = this;
            var addAttachmentModal = self.Modal({
                title: 'Add Attachment',
                onHelp: function () {
                    self.GlobalServices.showHelp('templateAddAttachment');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/templates/templateaddattachmentmodal.html',
                controller: 'AddAttachmentModalController as AddAttachmentModal',
                params: {
                    templateId: self.template.id
                },
                onComplete: function () {
                    self.getTemplateData();
                    //self.selectedItem = null;
                }
            });
            addAttachmentModal.modal.show();
        };
        TemplatebuildersvgController.prototype.deleteAttachment = function (attachment) {
            var self = this;
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), self.$translate.instant('TEMPLATEBUILDER_Areyousureyouwanttodeletethisattachment'))
                .then(function () {
                self.$http.post(self.Commands.data.templates.deleteAttachment, { id: self.template.id, name: attachment.name })
                    .then(function () {
                    self.getTemplateData();
                    //self.selectedItem = null;
                })
                    .catch(function (data) {
                    //error is in data
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        TemplatebuildersvgController.prototype.downloadAttachment = function (attachment) {
            var self = this;
            var url = 'templates/downloadattachment?name=' + attachment.name + '&templateId=' + self.template.id;
            self.$window.open(url, '_blank');
            //self.config = {
            //    directPost: true,
            //    headers: { 'Content-Type': undefined },
            //    transformRequest: angular.identity
            //};
            //return self.$http.post('/templates/downloadattachment', attachment, self.config);
        };
        TemplatebuildersvgController.prototype.getViewDetailsAction = function () {
            var self = this;
            return self.editComponent(self.selectedComponent, (self.mode !== 'edit' || self.GlobalServices.IsInRole('readonly')) ? "view" : "edit");
        };
        TemplatebuildersvgController.prototype.deployNewService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICES_NEW_SERVICE_DeployService'),
                onHelp: function () {
                    self.GlobalServices.showHelp('deployingserviceoverview');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/deployservice/deployservicewizard.html',
                controller: 'DeployServiceWizard as deployServiceWizard',
                params: {
                    //selectedService: self.selectedItem
                    templateId: self.template.id
                },
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing'))
                        .then(function () {
                        addServiceWizard.modal.close();
                    });
                }
            });
            addServiceWizard.modal.show();
        };
        TemplatebuildersvgController.prototype.cloneTemplate = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.$http.post(self.Commands.data.templates.getTemplateList, {})
                .then(function (response) {
                var createTemplateModal = self.Modal({
                    title: self.$translate.instant("TEMPLATES_CREATE_TEMPLATE_WIZARD_cloneTemplate"),
                    onHelp: function () {
                        self.GlobalServices.showHelp('cloningtemplate');
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/createtemplate.html',
                    controller: 'CreateTemplateModalController as createTemplateModalController',
                    params: {
                        type: 'clone',
                        template: self.template,
                        templates: response.data.responseObj
                    },
                    onComplete: function () {
                    },
                    close: function () {
                    }
                });
                createTemplateModal.modal.show();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
                self.template.draft = true;
                self.mode === 'edit';
            });
        };
        TemplatebuildersvgController.prototype.editMode = function () {
            var self = this;
            self.$location.path("/templatebuilder/" + self.template.id + "/edit");
            self.mode === 'edit';
            self.template.draft = true;
        };
        TemplatebuildersvgController.prototype.viewDetails = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('TEMPLATES_TEMPLATESETTINGS_MODAL_TemplateSettings'),
                onHelp: function () {
                    self.GlobalServices.showHelp('templatesettings');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/templatebuilder/viewtemplatedetailsmodal.html',
                controller: 'ViewTemplateDetailsModalController as viewTemplateDetailsModalController',
                params: {
                    template: self.template
                },
                close: function () {
                    self.$scope.modal.close();
                },
            });
            modal.modal.show();
        };
        TemplatebuildersvgController.prototype.editTemplateInformation = function () {
            var self = this;
            self.GlobalServices.ClearErrors();
            self.$http.post(self.Commands.data.templates.getTemplateList, {})
                .then(function (response) {
                var createTemplateModal = self.Modal({
                    title: self.$translate.instant('TEMPLATES_EditTemplateInformation'),
                    onHelp: function () {
                        self.GlobalServices.showHelp('TemplateEditingTemplateInformation');
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/createtemplate.html',
                    controller: 'CreateTemplateModalController as createTemplateModalController',
                    params: {
                        //selecteduser: modalUser
                        templates: response.data.responseObj,
                        template: self.template,
                        type: 'edit'
                    },
                    onComplete: function (id) {
                        self.getTemplateData();
                    },
                    close: function () {
                        self.getTemplateData();
                    }
                });
                createTemplateModal.modal.show();
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        TemplatebuildersvgController.prototype.publishTemplate = function () {
            var self = this;
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_Confirm'))
                .then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.template.draft = false;
                self.publish(self.template)
                    .then(function (response) {
                    d.resolve();
                    self.$timeout(function () {
                        self.$location.path("templatebuilder/" + self.template.id + "/view");
                    }, 500);
                })
                    .catch(function (response) {
                    d.resolve();
                    self.GlobalServices.DisplayError(response.data);
                    self.template.draft = true;
                    self.mode === 'edit';
                })
                    .finally(function () { return d.resolve(); });
            })
                .catch(function () { });
        };
        TemplatebuildersvgController.prototype.publish = function (template) {
            var self = this;
            return self.$http.post(self.Commands.data.templates.saveTemplate, template);
        };
        TemplatebuildersvgController.prototype.deleteTemplate = function () {
            var self = this;
            self.Dialog(("Confirm"), self.$translate.instant("TEMPLATEBUILDER_DiscardConfirm"))
                .then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.templates.discardTemplate, [self.template.id.toString()])
                    .then(function (data) {
                    self.$location.path('templates');
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        TemplatebuildersvgController.prototype.importTemplate = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('IMPORTTEMPLATE_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('ImportingTemplates');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/importtemplatemodal.html',
                controller: 'ImportTemplateModalController as importtemplate',
                params: {
                    template: self.template.id
                },
                onComplete: function () {
                    self.getTemplateData();
                },
            });
            modal.modal.show();
        };
        TemplatebuildersvgController.prototype.getInterfaceNumTranslation = function (interfaceNum) {
            var self = this;
            return self.$translate.instant("TEMPLATEBUILDER_InterfaceNum", { interfaceNum: interfaceNum });
        };
        TemplatebuildersvgController.prototype.getPartitionTranslation = function (partitionName) {
            var self = this;
            return self.$translate.instant("TEMPLATEBUILDER_Partition", { partitionName: partitionName });
        };
        TemplatebuildersvgController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', 'GlobalServices', '$route',
            'localStorageService', '$routeParams', '$compile', '$scope', '$translate',
            '$location', '$window', 'Loading', '$rootScope', 'Commands'];
        return TemplatebuildersvgController;
    }());
    function templateBuilder() {
        return {
            restrict: 'E',
            templateUrl: 'views/templatebuildersvg.html',
            replace: true,
            transclude: false,
            controller: TemplatebuildersvgController,
            controllerAs: 'templatebuildersvg',
            scope: {
                selectedTemplateId: '=routeparam',
                mode: '=mode',
                errors: '=?'
            },
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('templateBuilder', templateBuilder);
})(asm || (asm = {}));
//# sourceMappingURL=templatebuilderSVGdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var TemplateInformationController = (function () {
        function TemplateInformationController(Modal, Dialog, $http, $timeout, $q, $translate, Commands, Loading, GlobalServices, $filter) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Commands = Commands;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.categories = [];
            var self = this;
            self.activate();
        }
        TemplateInformationController.prototype.activate = function () {
            var self = this;
            self.uniqueId = self.GlobalServices.NewGuid();
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors();
            //self.Loading(d.promise);
            self.templates = self.$filter("filter")(self.templates, { 'isLocked': false }, true);
            if (!self.readOnly) {
                self.managePermissions = (self.template.allStandardUsers || (self.template.assignedUsers && self.template.assignedUsers.length));
                self.categoryOption = self.template.category || undefined;
            }
            self.categories = self.getCategories(self.templates, true);
            self.template._allStandardUsers = self.get_allStandardusers(self.template);
            //RCM is now required, so this field must be true (it used to be a checkbox)
            self.template.manageFirmware = true;
            self.initTemplateCategory();
            self.$q.all([
                self.getAvailableFirmwarePackages()
                    .then(function (response) {
                    self.firmwares = [
                        {
                            id: 'usedefaultcatalog',
                            name: self.$translate.instant("SERVICE_DETAIL_EditService_UseASMappliancedefaultcatalog"),
                            defaultpackage: false
                        }
                    ].concat(response.data.responseObj);
                })
            ])
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            })
                .finally(function () { d.resolve(); });
        };
        TemplateInformationController.prototype.getCategories = function (templates, allowNewCategory) {
            var self = this;
            var categories = [];
            var cats = _.groupBy(templates, "category");
            for (var categoryName in cats) {
                if (cats.hasOwnProperty(categoryName)) {
                    categories.push({ name: categoryName, id: categoryName });
                }
            }
            if (allowNewCategory)
                categories = categories.concat([
                    { name: "____________________", id: 123, disabled: true },
                    { name: self.$translate.instant("TEMPLATES_CreateNewCategory"), id: "new" }]);
            return categories;
        };
        TemplateInformationController.prototype.templateCategoryChanged = function () {
            var self = this;
            self.template.category = self.categoryOption === "new" ? undefined : self.categoryOption;
        };
        TemplateInformationController.prototype.initTemplateCategory = function () {
            var self = this;
            if (self.template.category) {
                if (self.template.category === "Sample Templates") {
                    self.template.category = null;
                    return;
                }
                self.categoryOption = _.find(self.categories, { id: self.template.category })
                    ? self.template.category
                    : "new";
            }
        };
        TemplateInformationController.prototype.isNewCat = function () {
            var self = this;
            return !_.find(self.categories, { id: self.template.category });
        };
        TemplateInformationController.prototype.updateAllStandardUsersProp = function (template) {
            switch (template._allStandardUsers) {
                case "admins":
                    template.assignedUsers = [];
                    template.allStandardUsers = false;
                    break;
                case "specific":
                    template.allStandardUsers = false;
                    break;
                case "allStandard":
                    template.assignedUsers = [];
                    template.allStandardUsers = true;
                    break;
            }
        };
        TemplateInformationController.prototype.get_allStandardusers = function (template) {
            return template.allStandardUsers
                ? "allStandard"
                : (template.assignedUsers && template.assignedUsers.length ? "specific" : "admins");
        };
        TemplateInformationController.prototype.getAvailableFirmwarePackages = function () {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.getAvailableFirmwarePackages, {});
        };
        TemplateInformationController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', 'Commands', 'Loading', 'GlobalServices', "$filter"];
        return TemplateInformationController;
    }());
    angular.module('app')
        .component('templateInformation', {
        templateUrl: 'views/templateinformation.html',
        controller: TemplateInformationController,
        controllerAs: 'templateInformationController',
        bindings: {
            template: "=",
            errors: "=",
            form: "=?",
            readOnly: "<?",
            templateUploadedName: "@",
            templates: "<"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=templateInformation.js.map
var asm;
(function (asm) {
    "use strict";
    var UsersController = (function () {
        function UsersController(Modal, Dialog, $http, $timeout, $q, GlobalServices, $route, localStorageService, $rootScope) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.GlobalServices = GlobalServices;
            this.$route = $route;
            this.localStorageService = localStorageService;
            this.$rootScope = $rootScope;
            this.activeTab = 'users';
            //this.tab();
        }
        UsersController.prototype.clickTab = function (tab) {
            var self = this;
            if (tab == 'users') {
                self.activeTab = tab;
                self.$rootScope.helpToken = 'SettingsUsersHomePage';
            }
            else if (tab == 'directoryservices') {
                self.activeTab = tab;
                self.$rootScope.helpToken = 'SetingsUsersDirectoryServices';
            }
        };
        UsersController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', 'GlobalServices', '$route', 'localStorageService', '$rootScope'];
        return UsersController;
    }());
    function users() {
        return {
            restrict: 'E',
            templateUrl: 'views/users.html',
            replace: true,
            transclude: false,
            controller: UsersController,
            controllerAs: 'users',
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('users', users);
})(asm || (asm = {}));
//# sourceMappingURL=usersdirective.js.map
var asm;
(function (asm) {
    'use strict';
    var UserslistController = (function () {
        function UserslistController(Modal, Dialog, $http, $timeout, $q, $compile, $translate, GlobalServices, Commands, $rootScope) {
            //this.jobs = [
            //    { isSelected: false, "id": 0, "name": 'Scheduled Job 30', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' },
            //    { isSelected: false, "id": 1, "name": 'Scheduled Job 26', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' },
            //    { isSelected: false, "id": 2, "name": 'Scheduled Job 27', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' }
            //];
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$compile = $compile;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            this.$rootScope = $rootScope;
            var self = this;
            self.buttonActive = false;
            self.checkAllBox = false;
            self.selectedStates = [];
            self.selectedUserObjects = [];
            self.activeTab = 'userinfo';
            self.getDirectoryGroups();
            self.refresh();
        }
        UserslistController.prototype.refresh = function () {
            var self = this;
            //Get All users
            self.$http.post(self.Commands.data.users.getUsers, {})
                .then(function (data) {
                self.results = data.data.responseObj;
                self.displayedresults = [].concat(self.results);
                //self.filterbyGroup();
                //console.log(self.displayedresults);
                if (self.selectedUsers().length == 0) {
                    self.buttonActive = false;
                }
                self.selectedDetail = self.results[0];
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
        };
        UserslistController.prototype.getDirectoryGroups = function () {
            var self = this;
            //Get directory groups
            self.$http.post(self.Commands.data.users.getDirectoryGroups, null)
                .then(function (data) {
                self.directoryGroups = data.data.responseObj;
                var item = { name: self.$translate.instant('SETTINGS_AllUsers'), id: 0 };
                self.directoryGroups.splice(0, 0, item);
                self.selectedGroup = self.directoryGroups[0];
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
        };
        UserslistController.prototype.filterbyGroup = function () {
            var self = this;
            if (self.selectedGroup.name == self.$translate.instant('SETTINGS_AllUsers')) {
                this.refresh();
            }
            else {
                self.$http.post(self.Commands.data.users.getDirectoryUsers, self.selectedGroup)
                    .then(function (data) {
                    self.results = data.data.responseObj;
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                });
            }
        };
        UserslistController.prototype.getUserDetails = function (user) {
            var self = this;
            self.$http.post(self.Commands.data.users.getUserById, user)
                .then(function (data) {
                self.selectedDetail = data.data.responseObj;
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
        };
        UserslistController.prototype.selectedUsers = function () {
            var self = this;
            return _.filter(self.results, { 'isSelected': true });
        };
        //TODO: Need pattern for check all boxes
        UserslistController.prototype.checkAll = function () {
            var self = this;
            self.results.forEach(function (user) {
                if (self.checkAllBox) {
                    user.isSelected = true;
                }
                else {
                    user.isSelected = false;
                }
            });
        };
        UserslistController.prototype.disableButtonActive = function () {
            var returnVal = true;
            var self = this;
            self.results.forEach(function (x) {
                if (x.isSelected) {
                    if (x.roleId.toLowerCase() === 'administrator' || x.state === self.$translate.instant('GENERIC_Disabled')) {
                        returnVal = false;
                    }
                }
            });
            return returnVal;
        };
        UserslistController.prototype.enableButtonActive = function () {
            var returnVal = true;
            var self = this;
            self.results.forEach(function (x) {
                if (x.isSelected && x.state === self.$translate.instant('GENERIC_Enabled')) {
                    returnVal = false;
                }
            });
            return returnVal;
        };
        UserslistController.prototype.deleteButtonActive = function () {
            var returnVal = true;
            var self = this;
            self.results.forEach(function (x) {
                if (x.isSelected &&
                    (x.username == self.$rootScope.ASM.CurrentUser.username || x.username == 'admin')) {
                    returnVal = false;
                }
            });
            return returnVal;
        };
        //delete user
        UserslistController.prototype.deleteUser = function () {
            var self = this;
            var userIds = _.map(self.selectedUsers(), 'id');
            var userNames = _.map(self.selectedUsers(), function (u) {
                return '<li>' + u.username + '</li>';
            });
            var Names = (userNames.toString()).replace(/[, ]+/g, " ").trim();
            //Confirmation Dialog box that fires delete on confirmation
            var confirm = self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_UserDeleteConfirm') +
                '<br> <ul class="selectedusers">' +
                Names +
                '</ul>'));
            confirm.then(function () {
                self.$http.post(self.Commands.data.users.deleteUser, userIds)
                    .then(function (data) {
                    self.refresh();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                });
            });
        };
        UserslistController.prototype.disableUser = function () {
            var self = this;
            var userIds = _.map(self.selectedUsers(), 'id');
            self.$http.post(self.Commands.data.users.disableUser, userIds)
                .then(function (data) {
                self.refresh();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
        };
        UserslistController.prototype.enableUser = function () {
            var self = this;
            var userIds = _.map(self.selectedUsers(), 'id');
            self.$http.post(self.Commands.data.users.enableUser, userIds)
                .then(function (data) {
                self.refresh();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
        };
        UserslistController.prototype.createuser = function () {
            var self = this;
            var adduserModal = self.Modal({
                title: self.$translate.instant('SETTINGS_CreateUser'),
                onHelp: function () {
                    self.GlobalServices.showHelp('SettingsCreatingUser');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/createusermodal.html',
                controller: 'CreateUserModalController as createUser',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            adduserModal.modal.show();
        };
        UserslistController.prototype.edituser = function () {
            var self = this;
            var modalUser = self.selectedUsers();
            var adduserModal = self.Modal({
                title: self.$translate.instant('SETTINGS_EditUser'),
                onHelp: function () {
                    self.GlobalServices.showHelp('SettingsUsersEditingUser');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/editusermodal.html',
                controller: 'EditUserModalController as editUser',
                params: {
                    selecteduser: angular.copy(modalUser)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            adduserModal.modal.show();
        };
        UserslistController.prototype.importactivedirectoryusers = function () {
            var self = this;
            var importuserModal = self.Modal({
                title: self.$translate.instant('SETTINGS_ImportActiveDirectoryUsers'),
                onHelp: function () {
                    self.GlobalServices.showHelp('SettingsUsersImportingUsers');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/importactivedirectoryusers.html',
                controller: 'ImportDirUsersModalController as ImportUsersModal',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            importuserModal.modal.show();
        };
        UserslistController.$inject = [
            'Modal', 'Dialog', '$http', '$timeout', '$q', '$compile', '$translate', 'GlobalServices', 'Commands', '$rootScope'
        ];
        return UserslistController;
    }());
    angular.module("app")
        .component("usersList", {
        templateUrl: "views/userslist.html",
        controller: UserslistController,
        controllerAs: "usersList",
        bindings: {
            errors: "="
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=userslistdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var VirtualApplianceManagementController = (function () {
        function VirtualApplianceManagementController(Dialog, $http, $window, $timeout, $scope, $q, $translate, Modal, Loading, Commands, $filter, GlobalServices, $rootScope, $location) {
            this.Dialog = Dialog;
            this.$http = $http;
            this.$window = $window;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Commands = Commands;
            this.$filter = $filter;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.$location = $location;
            this.allSettings = { monitoringSettings: {} };
            this.configServerEabled = true;
            this.refreshTimer = null;
            this.statusTimer = null;
            this.vxRackStateOptions = [];
            this.vxRackConfiguring = false;
            this.possibleVxRackStates = [];
            this.connectionTypeOptions = [];
            var self = this;
            self.initialize();
        }
        VirtualApplianceManagementController.prototype.$onDestroy = function () {
            var self = this;
            if (self.refreshTimer)
                self.$timeout.cancel(self.refreshTimer);
            if (self.statusTimer)
                self.$timeout.cancel(self.statusTimer);
        };
        VirtualApplianceManagementController.prototype.canDeactivate = function () {
            var allow = true;
            //Any logic to prevent navigating away (change allow to false to prevent)
            return allow;
        };
        VirtualApplianceManagementController.prototype.activate = function () {
            var self = this;
            self.refreshTimer = self.$timeout(function () {
                self.refresh();
            }, 10000);
        };
        VirtualApplianceManagementController.prototype.refresh = function (action) {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors();
            //if there's an action, don't use the spinner because too many loaders will cause a meltdown 
            action || self.Loading(d.promise);
            self.$q.all([
                self.getNtpTimeZoneSettings()
                    .then(function (response) {
                    self.allSettings.ntpTimeZoneSettings = response.data.responseObj;
                }),
                self.getTimeZones()
                    .then(function (response) {
                    self.allSettings.timeZones = response.data.responseObj;
                }),
                self.getApplianceUpgrade()
                    .then(function (response) {
                    self.allSettings.applianceUpdateInfo = response.data.responseObj;
                }),
                self.getHttpProxySettings()
                    .then(function (response) {
                    self.allSettings.httpProxySettings = response.data.responseObj;
                }),
                self.getVxRackSettings()
                    .then(function (response) {
                    //response.data.responseObj = { "serialNumber": "None", "model": "VxRack FLEX", "srsAddress": "None", "state": "None", "status": "None", "suspendedUntil": "", "omePassword": "", "alertFilter": "Critical", "alertPollingIntervalHours": 1, "alertPollingIntervalMinutes": 0, "elmsSoftwareId": "", "solutionSerialNumber": "", "srsGatewayHostIp": "", "srsPassword": null, "deviceType": "VxRack FLEX", "srsGatewayHostPort": 9443, "hostIp": "", "username": "", "userId": "" };
                    self.allSettings.vxRackSettings = response.data.responseObj;
                }),
                self.getDhcpSettings()
                    .then(function (response) {
                    self.allSettings.dhcpSettings = response.data.responseObj;
                }),
                self.getApplianceCertInfo()
                    .then(function (response) {
                    self.allSettings.applianceCertInfo = response.data.responseObj;
                }),
                self.getLicenseData()
                    .then(function (response) {
                    self.allSettings.licenseData = response.data.responseObj;
                }),
                self.getServiceTag()
                    .then(function (response) {
                    self.allSettings.aboutData = response.data.responseObj;
                }),
                self.getIpVerification()
                    .then(function (response) {
                    self.allSettings.ipVerification = response.data.responseObj;
                })
            ])
                .then(function () { return action && action(); })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                .finally(function () { return d.resolve(); });
        };
        VirtualApplianceManagementController.prototype.initialize = function () {
            var self = this;
            self.$scope.$on("settingsRefresh", function () { self.refresh(); });
            //id as string
            self.vxRackStateOptions = [
                { id: "Enabled", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Enabled"), readName: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Enabled") },
                { id: "3", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Suspend3hours"), readName: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Suspendedxhours", { number: 3 }) },
                { id: "6", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Suspend6hours"), readName: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Suspendedxhours", { number: 6 }) },
                { id: "12", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Suspend12hours"), readName: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Suspendedxhours", { number: 12 }) },
                { id: "24", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Suspend24hours"), readName: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Suspendedxhours", { number: 24 }) }
            ];
            //these are states that the user cannot set it to be, but can come from the backend 
            self.possibleVxRackStates = [
                { id: "None", readName: self.$translate.instant("SETTINGS_VirtualApplianceManagement_NotAvailable") },
                { id: "Error", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Error"), readName: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Error") },
            ].concat(self.vxRackStateOptions);
            self.connectionTypeOptions = [
                { id: "srs", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_ConnectionType_SRS") },
                { id: "phonehome", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_ConnectionType_PhoneHome") }
            ];
            //get the status of the configure server job
            self.getConfigServerStatus();
            self.refresh(self.dealWithRouteParams());
        };
        VirtualApplianceManagementController.prototype.dealWithRouteParams = function () {
            var self = this;
            //returns modal associated with the route parameter
            if (self.modalOrTab) {
                if (self.modalOrTab === "editRepoPath") {
                    return function () { self.editRepoPath(); };
                }
            }
        };
        VirtualApplianceManagementController.prototype.ntpModal = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETUPWIZARD_NTPSettingsTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('EditingDefaultNTPSettings');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/ntpeditmodal.html',
                controller: 'NtpEditModalController as ntpEditModalController',
                params: {
                    viewModel: angular.copy(self.allSettings)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        /*
          editRepoPath() {
             var self: VirtualApplianceManagementController = this;
             var modal = self.Modal({
                 title: self.$translate.instant('SETTINGS_UpdateRepositoryPath'),
                 onHelp() {
                     self.GlobalServices.showHelp('UpdateRepositoryPath');
                 },
                 modalSize: 'modal-lg',
                 templateUrl: 'views/settings/virtualappliancemanagement/editrepopathmodal.html',
                 controller: 'EditRepoPathModalController as editRepoPathModalController',
                 params: {
                     applianceUpdateInfo: angular.copy(self.allSettings.applianceUpdateInfo)
                 },
                 onComplete() {
                     self.refresh();
                 }
             });
             modal.modal.show();
         }
         */
        VirtualApplianceManagementController.prototype.editRepoPath = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_EditApplianceUpgradeSettings_ModalTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('UpdateRepositoryPath');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/applianceupgradesettingsmodal.html',
                controller: 'ApplianceUpgradeSettingsModalController as applianceUpgradeSettingsModalController',
                params: {
                    applianceUpdateInfo: angular.copy(self.allSettings.applianceUpdateInfo)
                },
                onComplete: function () {
                    self.refresh();
                },
                onCancel: function () {
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.editProxySettings = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETUPWIZARD_ProxySettingsTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('EditingProxySettings');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/editproxysettingsmodal.html',
                controller: 'EditProxySettingsModalController as editProxySettingsModalController',
                params: {
                    httpProxySettings: angular.copy(self.allSettings.httpProxySettings)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.editDhcp = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_DHCPSettings'),
                onHelp: function () {
                    self.GlobalServices.showHelp('EditingDHCPSettings');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/editdhcpsettingsmodal.html',
                controller: 'EditDhcpSettingsModalController as editDhcpSettingsModalController',
                params: {
                    settings: angular.copy(self.allSettings.dhcpSettings)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.editVxRack = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_VirtualApplianceManagement_VxRackFLEXAlertConnectorModalTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('EditingVxRackFLEXAlertConnectorSettings');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/vxrackflexalertconnectormodal.html',
                controller: 'VxRackFlexAlertConnectorModalController as vxRackFlexAlertConnectorModalController',
                params: {
                    settings: angular.copy(self.allSettings.vxRackSettings)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.generateCert = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_GenerateSigningRequest'),
                onHelp: function () {
                    self.GlobalServices.showHelp('appliancemanagementgeneratecert');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/generatecertificatemodal.html',
                controller: 'GenerateCertModalController as generateCertModalController',
                params: {
                    settings: angular.copy(self.allSettings.applianceCertInfo)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.uploadCert = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_UploadSSLCertificate'),
                onHelp: function () {
                    self.GlobalServices.showHelp('UploadinganSSLCertificate');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/uploadcertificatemodal.html',
                controller: 'UploadCertificateModalController  as uploadCertificateModalController',
                params: {
                    settings: angular.copy(self.allSettings.applianceCertInfo)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.addLicense = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_AddLicense'),
                onHelp: function () {
                    self.GlobalServices.showHelp('LicenseManagement');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/addlicensemodal.html',
                controller: 'AddLicenseModalController as addLicenseModalController',
                params: {
                    license: angular.copy(self.allSettings.licenseData)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.downloadCert = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_CertSignRequest'),
                onHelp: function () {
                    self.GlobalServices.showHelp('DownloadinganSSLCertificate');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/downloadcertmodal.html',
                controller: 'DownloadCertModalController as downloadCertModalController',
                params: {
                    certInfo: angular.copy(self.allSettings.applianceCertInfo)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.updateVirtualAppliance = function () {
            var self = this;
            if (self.allSettings.applianceUpdateInfo.currentVersion ===
                self.allSettings.applianceUpdateInfo.availableVersion) {
                //versions are the same, ask if user still wants to perform update
                self.Dialog((self.$translate.instant('SETTINGS_VirtualApplianceManagement_Update_Not_Required')), (self.$translate.instant('SETTINGS_VirtualApplianceManagement_Update_Warning') +
                    '<br/><br/>' +
                    self.$translate.instant('SETTINGS_VirtualApplianceManagement_Update_Current_Version') +
                    self.allSettings.applianceUpdateInfo.currentVersion +
                    '<br/><br/>' +
                    self.$translate.instant('SETTINGS_VirtualApplianceManagement_Update_Confirm')))
                    .then(function () {
                    self.doUpdate();
                });
            }
            else {
                var d = self.$q.defer(), bullets = {};
                self.GlobalServices.ClearErrors();
                self.Loading(d.promise);
                self.$q.all([
                    self.getJobList()
                        .then(function (data) {
                        angular.merge(bullets, {
                            numProgressJobs: _.filter(data.data.responseObj, { status: "running" }).length,
                            numScheduledJobs: _.filter(data.data.responseObj, { status: "scheduled" }).length
                        });
                    }),
                    self.getCurrentUsersAndJobs()
                        .then(function (data) {
                        angular.merge(bullets, {
                            numUsers: data.data.responseObj.currentusers
                        });
                    })
                ])
                    .then(function () {
                    //passing bullets as a parameter to $translate to interpolate values into translation
                    self.Dialog(self.$translate.instant("GENERIC_Warning"), self.$translate.instant("UPDATE_VIRTUAL_APPLIANCE_Description", bullets), false)
                        .then(function () {
                        self.doUpdate();
                    });
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data);
                })
                    .finally(function () { return d.resolve(); });
            }
        };
        VirtualApplianceManagementController.prototype.doUpdate = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors();
            self.Loading(d.promise);
            //Suspend the polling since the backend is abandoning the session and restarting the appliance
            //in the following call which is causing 403 error when the polling request continues
            window.clearInterval(self.$rootScope.ASM.templateInterval);
            window.clearInterval(self.$rootScope.ASM.jobsInterval);
            window.clearInterval(self.$rootScope.ASM.servicesDashboardInterval);
            self.$http.post(self.Commands.data.applianceManagement.submitUpdateVirtualAppliance, self.allSettings.applianceUpdateInfo)
                .then(function (data) {
                self.$timeout(function () { self.$window.location.href = 'status.html#/status'; }, 500);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            })
                .finally(function () { return d.resolve(); });
        };
        VirtualApplianceManagementController.prototype.editServiceTag = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_EditServiceTag'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/editservicetag.html',
                controller: 'EditServiceTagController as editServiceTagController',
                params: {
                    serviceTag: self.allSettings.aboutData.serviceTag
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.editIpVerification = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_EditIPVerificationPortNumbers'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/editipverification.html',
                controller: 'EditIpVerificationController as editIpVerificationController',
                params: {
                    ipVerificationPorts: self.allSettings.ipVerification.ipVerificationPorts
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.generateTroubleBundle = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.applianceManagement.exportTroubleshootingBundle, null)
                .then(function (response) {
                //self.$timeout(() => { window.location = response.data.responseObj; }, 500);
                self.$window.location.assign("" + response.data.responseObj);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            })
                .finally(function () { return d.resolve(); });
        };
        VirtualApplianceManagementController.prototype.generateTroubleBundle_modal = function () {
            var self = this;
            var theModal = self.Modal({
                title: self.$translate.instant('SETTINGS_GenerateTroubleshootingBundle'),
                /*onHelp() {
                    self.GlobalServices.showHelp('Addingfirmwarerepositories');
                },*/
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/generatetroubleshootingbundlemodal.html',
                controller: 'GenerateTroubleshootingBundleModalController as generateTroubleshootingBundleModalController',
                params: {
                    callingPage: 'VirtualApplianceManagement'
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            theModal.modal.show();
        };

        VirtualApplianceManagementController.prototype.generateSNMPModal = function () {
            var self = this;
            var theModal = self.Modal({
                title: self.$translate.instant('Generate SNMP data'),

                /*onHelp() {
                    self.GlobalServices.showHelp('Addingfirmwarerepositories');
                },*/
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/editSNMPdetails.html',
                controller: 'GenerateTroubleshootingBundleModalController as generateTroubleshootingBundleModalController',
                params: {
                    callingPage: 'VirtualApplianceManagement'
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            theModal.modal.show();
        };


        VirtualApplianceManagementController.prototype.saveVxRackSettings = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.applianceManagement.setVxRackSettingsSuspend, self.allSettings.vxRackSettings)
                .then(function (data) {
                self.refresh();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            })
                .finally(function () { return d.resolve(); });
        };
        VirtualApplianceManagementController.prototype.configureServersForAlertConnector = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_VirtualApplianceManagement_AlertConfigJobModalWarning'),
                modalSize: 'modal-md',
                titleIcon: 'text-warning ci-health-warning-tri-bang',
                templateUrl: 'views/settings/virtualappliancemanagement/configureserversforalertconnector.html',
                controller: 'ConfigureServersForAlertConnectorController as configureServersForAlertConnectorController',
                params: {},
                onComplete: function () {
                    self.vxRackConfiguring = true;
                    self.configServerEabled = false;
                    self.getConfigureServersForAlertConnector()
                        .then(function (response) {
                        //get the status of the configure server job
                        self.getConfigServerStatus();
                        self.refresh();
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data);
                        //get the status of the configure server job
                        self.getConfigServerStatus();
                    })
                        .finally(function () {
                        self.vxRackConfiguring = false;
                    });
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.getConfigServerStatus = function () {
            var self = this;
            self.configServerEabled = false;
            self.getConfigureServerStatus()
                .then(function (response) {
                if (response.data.responseObj == 'completed') {
                    self.configServerEabled = true;
                }
                else {
                    self.statusTimer = self.$timeout(function () {
                        self.getConfigServerStatus();
                    }, 60000);
                }
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        VirtualApplianceManagementController.prototype.vxRackSuspended = function () {
            var self = this;
            return self.allSettings.vxRackSettings &&
                self.allSettings.vxRackSettings.state !== "None" &&
                self.allSettings.vxRackSettings.state !== "Enabled" &&
                self.allSettings.vxRackSettings.state !== "Error";
        };
        VirtualApplianceManagementController.prototype.deregisterVxRack = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_VirtualApplianceManagement_DeregisterWarningTitle'),
                modalSize: 'modal-md',
                titleIcon: 'text-danger ci-action-circle-remove',
                templateUrl: 'views/settings/virtualappliancemanagement/deregisterwarning.html',
                controller: 'DeregisterWarningController as deregisterWarningController',
                params: {
                    connectionType: self.allSettings.vxRackSettings.connectionType
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.vxRackNotAvailable = function () {
            var self = this;
            return self.allSettings.vxRackSettings && self.allSettings.vxRackSettings.state === "None";
        };
        VirtualApplianceManagementController.prototype.getNtpTimeZoneSettings = function () {
            var self = this;
            return self.$http.post(self.Commands.data.environment.getNtpTimeZoneSettings, {});
        };
        VirtualApplianceManagementController.prototype.getTimeZones = function () {
            var self = this;
            return self.$http.post(self.Commands.data.environment.getTimeZones, {});
        };
        VirtualApplianceManagementController.prototype.getApplianceUpdateInfo = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getApplianceUpdateInfo, {});
        };
        VirtualApplianceManagementController.prototype.getApplianceUpgrade = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getApplianceUpgrade, {});
        };
        VirtualApplianceManagementController.prototype.getHttpProxySettings = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getHttpProxySettings, {});
        };
        VirtualApplianceManagementController.prototype.getDhcpSettings = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getDhcpSettings, {});
        };
        VirtualApplianceManagementController.prototype.getVxRackSettings = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getVxRackSettings, {});
        };
        VirtualApplianceManagementController.prototype.getApplianceCertInfo = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getCertificateInfo, {});
        };
        VirtualApplianceManagementController.prototype.getLicenseData = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getLicenseData, {});
        };
        VirtualApplianceManagementController.prototype.getServiceTag = function () {
            var self = this;
            return self.$http.post(self.Commands.data.about.getAboutData, '');
        };
        VirtualApplianceManagementController.prototype.getJobList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.jobs.getJobList, null);
        };
        VirtualApplianceManagementController.prototype.getCurrentUsersAndJobs = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getCurrentUsersAndJobs, null);
        };
        VirtualApplianceManagementController.prototype.getIpVerification = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getIpVerifyPorts, null);
        };
        VirtualApplianceManagementController.prototype.getConfigureServersForAlertConnector = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.configureServersForAlertConnector, null);
        };
        VirtualApplianceManagementController.prototype.getConfigureServerStatus = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getConfigureServerStatus, null);
        };
        VirtualApplianceManagementController.$inject = ['Dialog', '$http', '$window', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Commands', '$filter', 'GlobalServices', '$rootScope', '$location'];
        return VirtualApplianceManagementController;
    }());
    angular.module('app')
        .component('virtualApplianceManagement', {
        templateUrl: "views/appliancemanagement.html",
        controller: VirtualApplianceManagementController,
        controllerAs: 'virtualApplianceManagementController',
        bindings: {
            modalOrTab: "<"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=virtualappliancemanagement.js.map
var asm;
(function (asm) {
    "use strict";
    var VirtualApplianceVersionBannerController = (function () {
        function VirtualApplianceVersionBannerController($http, $translate, Commands, GlobalServices, $q, $timeout, $interval, $location, modal, loading, $scope) {
            this.$http = $http;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$q = $q;
            this.$timeout = $timeout;
            this.$interval = $interval;
            this.$location = $location;
            this.modal = modal;
            this.loading = loading;
            this.$scope = $scope;
            this.sessionStorageKey = "virtualApplianceVersionBannerHidden";
            var self = this;
            //if not set, set it
            if (self.getAlertHidden() === "") {
                self.setAlertHidden("false");
            }
            //if userPreferences exist, parse them from string to JSON
            self.userPreference = self.parseUserPreferences(self.userPreference);
            //if userPreferences haven't been created yet, create them
            if (!self.userPreference) {
                self.userPreference = {};
            }
            //if virtualApplianceAlert hasn't been created yet, create it
            if (!self.userPreference.virtualApplianceAlert) {
                self.resetPreferences();
            }
            self.isDismissExpired = self.dismissExpired(self.userPreference.virtualApplianceAlert.dismissedDate);
            //if virtualApplianceAlert is false, user may have recently updated, so reset the dismiss setting
            if (self.isDismissExpired && self.virtualApplianceAlert) {
                self.resetPreferences();
            }
        }
        VirtualApplianceVersionBannerController.prototype.getShowBanner = function () {
            var self = this;
            var value = (self.isDismissExpired && self.getAlertHidden() !== "true") && self.virtualApplianceAlert;
            return value;
        };
        VirtualApplianceVersionBannerController.prototype.viewDetails = function () {
            var self = this;
            //if already at editRepoPath location, just open modal
            //if (self.$location.$$path.endsWith("editRepoPath")) {
            //    self.applianceUpgradeSettingsModal();
            //} else {
            self.$location.path("settings/VirtualApplianceManagement/false/editRepoPath");
            //}
        };
        VirtualApplianceVersionBannerController.prototype.hide = function () {
            var self = this;
            self.setAlertHidden("true");
        };
        VirtualApplianceVersionBannerController.prototype.dismiss = function () {
            var self = this;
            self.hide();
            self.userPreference.virtualApplianceAlert.dismissedDate = moment().toISOString();
            self.save();
        };
        VirtualApplianceVersionBannerController.prototype.dismissExpired = function (dismissedDate) {
            if (!dismissedDate)
                return true;
            var expirationDate = moment(dismissedDate).add(30, 'days');
            return moment().isAfter(expirationDate);
        };
        VirtualApplianceVersionBannerController.prototype.resetPreferences = function () {
            var self = this;
            self.userPreference.virtualApplianceAlert = { dismissedDate: null };
            self.save();
        };
        VirtualApplianceVersionBannerController.prototype.getAlertHidden = function () {
            var value = sessionStorage.getItem(this.sessionStorageKey);
            return value;
        };
        VirtualApplianceVersionBannerController.prototype.setAlertHidden = function (value) {
            sessionStorage.setItem(this.sessionStorageKey, value);
        };
        VirtualApplianceVersionBannerController.prototype.parseUserPreferences = function (userPreference) {
            if (typeof userPreference === "string") {
                userPreference = angular.fromJson(userPreference);
            }
            return userPreference;
        };
        VirtualApplianceVersionBannerController.prototype.save = function () {
            var self = this;
            self.$http.post(self.Commands.data.users.updateUserPreferences, angular.toJson(self.userPreference))
                .then(function (data) {
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        VirtualApplianceVersionBannerController.prototype.applianceUpgradeSettingsModal = function () {
            var self = this;
            var d = self.$q.defer();
            self.loading(d.promise);
            self.$http.post(self.Commands.data.applianceManagement.getApplianceUpgrade, {})
                .then(function (response) {
                var modal = self.modal({
                    title: self.$translate.instant('SETTINGS_EditApplianceUpgradeSettings_ModalTitle'),
                    onHelp: function () {
                        self.GlobalServices.showHelp('UpdateRepositoryPath');
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/settings/virtualappliancemanagement/applianceupgradesettingsmodal.html',
                    controller: 'ApplianceUpgradeSettingsModalController as applianceUpgradeSettingsModalController',
                    params: {
                        applianceUpdateInfo: response.data.responseObj
                    },
                    onComplete: function () {
                        ////hack to trigger refresh
                        //self.$scope.$emit("settingsRefresh", true);
                        self.$location.path("settings/VirtualApplianceManagement/false");
                    },
                    onCancel: function () {
                        self.$location.path("settings/VirtualApplianceManagement/false");
                    }
                });
                modal.modal.show();
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                .finally(function () { return d.resolve(); });
        };
        VirtualApplianceVersionBannerController.$inject = ["$http", "$translate", "Commands", "GlobalServices", "$q", "$timeout", "$interval", "$location", "Modal", "Loading", "$scope"];
        return VirtualApplianceVersionBannerController;
    }());
    angular.module('app')
        .component("virtualApplianceVersionBanner", {
        templateUrl: "views/virtualapplianceversionbanner.html",
        controller: VirtualApplianceVersionBannerController,
        controllerAs: 'virtualApplianceVersionBannerController',
        bindings: {
            userPreference: "=",
            virtualApplianceAlert: "<"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=VirtualApplianceVersionBanner.js.map
var asm;
(function (asm) {
    "use strict";
    var VirtualIdentityPoolsController = (function () {
        function VirtualIdentityPoolsController($http, $timeout, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, $window) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$window = $window;
            this.viewModel = {};
            this.selectedVIP = '';
            this.selectedSummary = {};
            this.displayedData = [];
            this.checkAllBox = false;
            var self = this;
            self.refresh(false);
        }
        VirtualIdentityPoolsController.prototype.activate = function () {
            var self = this;
            this.$timeout(function () {
                self.refresh(false);
            }, 10000);
        };
        VirtualIdentityPoolsController.prototype.refresh = function (calledFromUI) {
            var self = this;
            var data;
            if (calledFromUI) {
                var deferred = self.$q.defer();
                self.GlobalServices.ClearErrors();
                self.Loading(deferred.promise);
            }
            //get the list
            self.$http.post(self.Commands.data.pools.getPools, null).then(function (data) {
                //self.$http.post('bogus', null).then(function (data: any) {
                self.viewModel = data.data.responseObj;
                self.displayedData = [].concat(self.viewModel);
                if (self.viewModel.length) {
                    if (self.selectedVIP)
                        self.onSelectedVIP(self.selectedVIP);
                    else
                        self.onSelectedVIP(self.viewModel[0]);
                }
                else {
                    // no data
                    self.selectedSummary = '';
                    self.selectedVIP = '';
                }
                if (calledFromUI)
                    deferred.resolve();
            }).catch(function (data) {
                //error
                self.viewModel = [];
                if (calledFromUI)
                    deferred.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        VirtualIdentityPoolsController.prototype.vipItemsSelected = function () {
            // used to enable/disable export & delete 
            // if any items are selected, return false (buttons will not be disabled
            // if no items are selected, return true (buttons will be disabled
            var self = this;
            return _.filter(self.displayedData, { 'isSelected': true });
        };
        VirtualIdentityPoolsController.prototype.canDelete = function () {
            var self = this;
            var retValue = true;
            for (var i = 0; i < self.displayedData.length; i++) {
                var currentItem = self.displayedData[i];
                if (currentItem.isSelected == true && currentItem.canDelete == false) {
                    retValue = false;
                    break;
                }
            }
            return retValue;
        };
        VirtualIdentityPoolsController.prototype.onCheckAllPools = function () {
            var self = this;
            self.displayedData.forEach(function (vip) {
                //automagically adds isSelected proeprty 
                //to data 
                vip.isSelected = self.checkAllBox;
            });
        };
        VirtualIdentityPoolsController.prototype.onSelectedVIP = function (selectedVIP) {
            var self = this;
            var data;
            //var deferred = self.$q.defer();
            //self.Loading(deferred.promise);
            self.GlobalServices.ClearErrors();
            data = { 'id': selectedVIP.id };
            self.$http.post(self.Commands.data.pools.getPoolById, { requestObj: data }).then(function (data) {
                //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                self.selectedSummary = data.data.responseObj;
                self.selectedVIP = selectedVIP;
                //deferred.resolve();
            }).catch(function (data) {
                //need to handle error
                //deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        VirtualIdentityPoolsController.prototype.doExport = function () {
            var self = this;
            var vipIds = _.map(self.vipItemsSelected(), 'id');
            var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('LISTPOOLS_Export_Confirmation'));
            confirm.then(function () {
                var deferred = self.$q.defer();
                self.GlobalServices.ClearErrors();
                self.Loading(deferred.promise);
                self.$http.post(self.Commands.data.pools.exportPools, { requestObj: vipIds }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                    self.$window.location.assign("" + data.data.responseObj.id);
                    //var iframe;
                    //iframe = document.createElement('iframe');
                    //iframe.src = data.data.responseObj;
                    //iframe.style.display = 'none';
                    //document.body.appendChild(iframe);
                    ////document.body.appendChild("<iframe src='" + data.data.responseObj + "' style='display: none;' ></iframe>");
                    deferred.resolve();
                    self.refresh(false);
                }).catch(function (data) {
                    //need to handle error
                    deferred.resolve();
                    //data object is always empty
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        VirtualIdentityPoolsController.prototype.doDelete = function () {
            var self = this;
            var vipIds = _.map(self.vipItemsSelected(), 'id');
            var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('LISTPOOLS_Delete_Confirmation'));
            confirm.then(function () {
                var deferred = self.$q.defer();
                self.GlobalServices.ClearErrors();
                self.Loading(deferred.promise);
                self.$http.post(self.Commands.data.pools.deletePools, { requestObj: vipIds }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                    self.selectItemAfterDelete();
                    deferred.resolve();
                    self.refresh(false);
                }).catch(function (data) {
                    //need to handle error
                    deferred.resolve();
                    //data object is always empty
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        VirtualIdentityPoolsController.prototype.selectItemAfterDelete = function () {
            var self = this;
            if (self.vipItemsSelected().length > 1) {
                self.selectedVIP = '';
            }
            else {
                // where was the item that we just deleted?
                var deleteItemNdx = self.displayedData.map(function (ds) { return ds.id; }).indexOf(self.selectedVIP.id);
                // top of list, pick next item down
                if (deleteItemNdx == 0) {
                    //self.displayedData[deleteItemNdx + 1]; may not exist (undefined), this is OK
                    self.selectedVIP = self.displayedData[deleteItemNdx + 1];
                }
                else {
                    if (deleteItemNdx >= 0) {
                        //self.displayedData[deleteItemNdx - 1]; may not exist (undefined), this is OK
                        self.selectedVIP = self.displayedData[deleteItemNdx - 1];
                    }
                }
            }
        };
        VirtualIdentityPoolsController.prototype.doUpdatePool = function (selectedType) {
            var self = this;
            var editModal = this.Modal({
                title: self.$translate.instant('LISTPOOLS_Update_Pool_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/pools/editpool.html',
                controller: 'EditPoolController as EditPoolController',
                params: {
                    'id': self.selectedVIP.id,
                    'type': selectedType
                },
                onComplete: function (modalScope) {
                    //modalScope.modal.dismiss();
                    self.refresh(false);
                }
            });
            editModal.modal.show();
        };
        VirtualIdentityPoolsController.prototype.doAddWizard = function () {
            var self = this;
            var addPoolWizard = self.Modal({
                title: self.$translate.instant('ADDPOOL_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp();
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/pools/addpoolwizard.html',
                controller: 'AddPoolWizardController as AddPoolWizardController',
                params: {},
                onCancel: function () {
                    //THIS FUNCTION IS CALLED ON MODAL.CANCEL, not WIZARD.CANCEL
                    //var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), 'Are you sure you want to cancel?');
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDPOOL_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        addPoolWizard.modal.dismiss();
                        self.refresh(false);
                    });
                },
                onComplete: function (modalScope) {
                    self.refresh(false); //When the modal is closed, update the data.
                }
            });
            addPoolWizard.modal.show();
        };
        VirtualIdentityPoolsController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', "$window"];
        return VirtualIdentityPoolsController;
    }());
    angular.module('app')
        .component('virtualidentitypools', {
        templateUrl: 'views/listpools.html',
        controller: VirtualIdentityPoolsController,
        controllerAs: 'VirtualIdentityPoolsController',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=virtualidentitypoolsdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var VmVirtualDiskConfigurationController = (function () {
        function VmVirtualDiskConfigurationController(GlobalServices, constants) {
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.editMode = true;
            this.validityObj = {
                id: this.GlobalServices.NewGuid(),
                invalid: false
            };
            var self = this;
            self.id = "setting_" + self.setting.id + "_" + (self.setting.category ? self.setting.category.id : '') + "_" + (self.component ? self.component.id : '');
            if (self.invalidArray) {
                self.invalidArray.push(self.validityObj);
            }
            else {
                self.invalidArray = [];
                self.invalidArray.push(self.validityObj);
            }
            if (self.setting.readOnly || self.readOnlyMode) {
                self.editMode = false;
            }
            self.refresh();
        }
        VmVirtualDiskConfigurationController.prototype.refresh = function () {
            var self = this;
            if (!self.setting.value) {
                self.setting.value = {};
            }
            else {
                self.setting.value = typeof self.setting.value === 'string' ?
                    angular.fromJson(self.setting.value) :
                    self.setting.value;
            }
            self.setting.value.virtualdisks = self.setting.value.virtualdisks || [{ id: self.GlobalServices.NewGuid(), disksize: 32 }];
            self.checkAllDisks();
        };
        VmVirtualDiskConfigurationController.prototype.createDisk = function () {
            var self = this;
            self.setting.value.virtualdisks.push({
                id: self.GlobalServices.NewGuid(),
                disksize: 32
            });
        };
        VmVirtualDiskConfigurationController.prototype.checkAllDisks = function () {
            var self = this;
            return self.validityObj.invalid =
                self.editMode
                    && !self.setting.value.virtualdisks.length
                    || !!_.find(self.setting.value.virtualdisks, function (disk) { return self.invalidDisk(disk, true); });
        };
        VmVirtualDiskConfigurationController.prototype.invalidDisk = function (disk, skip) {
            var self = this;
            skip || !self.editMode || self.checkAllDisks();
            return self.editMode && !disk.disksize;
        };
        VmVirtualDiskConfigurationController.$inject = ['GlobalServices', 'constants'];
        return VmVirtualDiskConfigurationController;
    }());
    angular.module('app')
        .component('vmVirtualDiskConfiguration', {
        templateUrl: 'views/vmvirtualdiskconfiguration.html',
        controller: VmVirtualDiskConfigurationController,
        controllerAs: 'diskConfiguration',
        bindings: {
            setting: '=',
            readOnlyMode: '<?',
            invalidArray: '=?',
            form: '=?',
            component: '<?'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=vmvirtualdiskconfiguration.js.map
angular.module('ASM.dataservices', ['ngResource']);

angular.module('ASM.dataservices')
    .service('CollectionService', [ function () {
        this.MergeObjects = function (baseObj, sourceObj) {
            var combinedObj = angular.copy({}, baseObj);
            combinedObj = angular.copy(combinedObj, sourceObj);
            return combinedObj;
        };
    }]);

angular.module('ASM.dataservices')
    .factory('Commands', function () {

        _.templateSettings = {
            interpolate: /\{(.+?)\}/g
        };

        var server = ''; //contains mock data

        //var server = 'https://172.31.59.168/'; //VM environment but has servers and some mock data in database
        //var server = 'https://172.31.62.233/'; //real environment, made by Hepfer
        //var server = 'https://172.31.59.190/'; //environment with jobs
        //var server = 'https://172.31.62.134/'; //environment with storage
        //var server = 'https://172.31.62.250/'; //Barsana's test environment (no fabric)
        //var server = 'https://172.31.62.249/'; //Barsana's test environment (has fabric)

        return {

            data: {
                about: {
                    getAboutData: 'about/getaboutdata'
                },
                svg: {
                    getData: 'topology/getTopologyData',
                    getTemplateData: 'topology/gettemplatetopology',
                    getServiceData: 'topology/getservicetopology',
                    chassissvg: 'images/svg/chassis.svg',
                    networksvg: 'images/svg/network.svg',
                    bladesvg: 'images/svg/blade.svg',
                    bladeexpandedsvg: 'images/svg/blade_expanded.svg',
                    iomsvg: 'images/svg/io_module.svg',
                    clustersvg: 'images/svg/cluster.svg',
                    hostsvg: 'images/svg/resource.svg',
                    vmsvg: 'images/svg/vm.svg',
                    canvassvg: 'images/svg/TempBuilder-canvas.svg',
                    componentsvg: 'images/svg/TempBuilder-components.svg',
                    networkiconsvg: 'images/svg/TB-network-barnacle.svg',
                    addiconsvg: 'images/svg/TB-addicon.svg',
                    serverPortView: 'images/svg/serverportview.svg',
                    applicationtextsvg: 'images/svg/applicationText.svg'
                },
                devices: {
                    getFirmwareById: 'devices/getfirmwarebyid',
                    saveFirmware: 'devices/savefirmware',
                    getComplianceCheckById: 'devices/getcompliancecheckbyid',
                    getFirmwareDeviceList: 'devices/getfirmwaredevicelist',
                    exportFirmware: 'devices/exportfirmware',
                    getDeviceList: 'devices/getdevicelist',
                    getAvailableCloneDeviceList: 'devices/getavailableclonedevicelist',
                    getVCenter: 'devices/getvcenter',
                    getSCVMM: 'devices/getscvmm',
                    getDeviceById: 'devices/getdevicebyid',
                    remove: 'devices/remove',
                    manage: 'devices/manage',
                    unmanage: 'devices/unmanage',
                    reserve: 'devices/reserve',			
                    powerOn: 'devices/poweron',
                    powerOff: 'devices/poweroff',
                    runInventory: 'devices/runinventory',
                    estimateFirmwareUpdate: 'devices/estimatefirmwareupdate',
                    updatedevicefirmware: 'devices/updatedevicefirmware',
                    getDeviceConfiguration: 'devices/getdeviceconfiguration',
                    configureDevice: 'devices/configuredevice',
                    setServiceMode: 'devices/servicemode'
                },
                equalLogicStorage: {
                    getEqualLogicStorageById: 'devices/getequallogicstoragebyid'
                },
                compellentStorage: {
                    getCompellentStorageById: 'devices/getcompellentstoragebyid'
                },
                emcStorage: {
                    getEmcUnityStorageById: 'devices/getemcunitystoragebyid',
                    getEmcvnxStorageById: 'devices/getemcvnxstoragebyid'
                },
                netappStorage: {
                    getNetAppStorageById: 'devices/getnetappstoragebyid'
                },
                scaleIO: {
                    getScaleIObyId: 'devices/getscaleiobyid',
                    getScaleIOWorkload: 'devices/getscaleioworkload',
                },
                dellSwitch: {
                    getDellSwitchById: 'devices/getdellswitchbyid'
                },
                ciscoSwitch: {
                    getCiscoSwitchById: 'devices/getciscoswitchbyid'
                },
                serverpools: {
                    getServerPools: 'serverpool/getserverpools',
                    getServerPoolById: 'serverpool/getserverpoolbyid',
                    saveServerPool: 'serverpool/saveserverpool',
                    remove: 'serverpool/remove'
                },
                firmwarepackages: {
                    getFirmwareBundleDevices: 'firmware/getfirmwarebundledevices',
                    getFirmwarePackages: 'firmware/getfirmwarepackages',
                    getAvailableFirmwarePackages: 'firmware/getavailablefirmwarepackages',
                    getFirmwarePackageById: 'firmware/getfirmwarepackagebyid',
                    getFirmwarePackageNameById: 'firmware/getfirmwarepackagenamebyid',
                    getFirmwareBundleById: 'firmware/getfirmwarebundlebyid',
                    getDefaultFirmwarePackage: 'firmware/getdefaultfirmwarepackage',
                    saveFirmwarePackage: 'firmware/savefirmwarepackage',
                    testFirmwarePackage: 'firmware/testfirmwarepackage',
                    setDefaultFirmwarePackage: 'firmware/setdefaultfirmwarepackage',
                    remove: 'firmware/remove',
                    removeFirmwareBundle: 'firmware/removefirmwarebundle',
                    saveFirmwareBundle: 'firmware/savefirmwarebundle',
                    uploadFirmwarePackage: 'firmware/uploadfirmwarepackage',
                    getAvailableRCMs: 'firmware/getavailablercms'
                },
                addonmodules: {
                    getAddOnModules: 'addonmodule/getaddonmodules',
                    getAddOnModuleById: 'addonmodule/getaddonmodulebyid',
                    removeAddOnModule: 'addonmodule/removeaddonmodule',
                    saveAddOnModule: 'addonmodule/saveaddonmodule',
                    testAddOnModule: 'addonmodule/testaddonmodule',
                    uploadAddOnModule: 'addonmodule/uploadaddonmodule'
                },
                applianceManagement: {
                    getStatus: 'appliance/getstatus',
                    getCurrentUsersAndJobs: 'appliance/getcurrentusersandjobs',
                    setApplianceUpdate: 'appliance/setapplianceupdate',
                    submitUpdateVirtualAppliance: 'appliance/updatevirtualappliance',
                    submitLicenseUpdateForm: 'appliance/updatelicense',
                    verifylicense: 'appliance/verifylicense',
                    submitNtpSettingsForm: 'appliance/saventpsettings',
                    submitProxyInfoForm: 'appliance/setproxy',
                    submitDhcpSettingsForm: 'initialsetup/updatedhcp',
                    testProxySettings: 'appliance/testproxysettings',
                    submitCertificateSigReqForm: 'appliance/setappliancecertificateinfo',
                    getAvailableCountries: 'appliance/getavailablecountries',
                    uploadCertificate: 'appliance/uploadcertificate',
                    uploadCertificateConfirmation: 'appliance/uploadcertificateconfirmation',
                    updateServiceTag: 'appliance/updateservicetag',
                    getIpVerifyPorts: 'appliance/getipverifyports',
                    updateIpVerifyPorts: 'appliance/updateipverifyports',
                    configureServersForAlertConnector: 'appliance/configureserversforalertconnector',
                    getConfigureServerStatus: 'appliance/getconfigureserverstatus',
                    exportTroubleshootingBundle: 'appliance/exporttroubleshootingbundle',
                    testTroubleshootingBundle: 'appliance/testtroubleshootingbundle',
                    addCommunityString: 'appliance/addcommunitystring',
                    deleteCommunityString: 'appliance/deletecommunitystring',
                    addForwardingDetails: 'appliance/addforwardingdetails',
                    deleteForwardingDetails: 'appliance/deleteforwardingdetails',
                    getApplianceUpdateInfo: 'appliance/getapplianceupdateinfo',
                    getLicenseData: 'appliance/getlicensedata',
                    getGeneralSettings: 'appliance/getnetworkinfo',
                    getHttpProxySettings: 'appliance/getproxy',
                    getDhcpSettings: 'appliance/getdhcpsettings',
                    getVxRackSettings: 'appliance/getvxrackflexalertconnectorsettings',
                    setVxRackSettingsRegister: 'appliance/setvxrackflexalertconnectorsettings/register',
                    setVxRackSettingsSuspend: 'appliance/setvxrackflexalertconnectorsettings/suspend',
                    getNtpSettings: 'appliance/getntpsettings',
                    getCertificateInfo: 'appliance/getappliancecertificateinfo',
                    deregisterVxRack: 'appliance/deregistervxrack',
                    setApplianceUpgrade: 'appliance/setapplianceupgradesettings',
                    getApplianceUpgrade: 'appliance/getapplianceupgradesettings'
                },
                backupAndRestore: {
                    backupNow: 'backupandrestore/backupnow',
                    restore: 'backupandrestore/restore',
                    getRestoreStatus: 'backupandrestore/getrestorestatus',
                    getBackupSettings: 'backupandrestore/getbackupsettings',
                    getBackupScheduleInfo: 'backupandrestore/getbackupschedule',
                    saveBackupSettings: 'backupandrestore/savebackupsettings',
                    setBackupScheduleInfo: 'backupandrestore/setbackupschedule',
                    testBackupConnection: 'backupandrestore/testbackupconnection',
                    testRestoreConnection: 'backupandrestore/testrestoreconnection'
                },

                downloads: {
                    create: 'downloads/create',
                    status: 'downloads/status'
                },

                logs: {
                    getLogs: 'logs/getlogs',
                    purgeLogs: 'logs/purgelogs',
                    exportAllLogs: 'logs/exportalllogs',
                    exportFilteredLogs: 'logs/exportfilteredlogs'
                },

                chassis: {
                    getChassisSummariesByCredentialId: 'chassis/getchassissummariesbycredentialid',
                    getManagementTemplatesByCredentialId: 'chassis/getmanagementtemplatesbycredentialid',
                    getChassisById: 'chassis/getchassisbyid',
                    runInventory: 'chassis/runinventory',
                    //Where is configure and reapply template?
                    checkCompliance: 'chassis/checkcompliance',
                    removeChassis: 'chassis/removechassis',
                    resetCertificate: 'chassis/resetcertificate',

                },
                configureChassis: {
                    getChassisSetup: 'chassis/getchassissetupbychassisid',
                    getTemplates: 'managementtemplate/getreadymanagementtemplatesummaries',
                    getFabricPurposes: 'managementtemplate/getfabricpurposes',
                    getIdentityData: 'chassis/getidentitydata',
                    validateChassisIdentities: 'chassis/validatechassisidentities',
                    validateServerIdentities: 'chassis/validateserveridentities',
                    validateIOMIdentities: 'chassis/validateiomidentities',
                    saveConfigureChassis: 'chassis/saveconfigurechassis',
                    getConfigurableResources: 'configurechassis/getconfigurableresources',
                    uploadPortConfiguration: 'configurechassis/uploadportconfiguration',
                    configureResources: 'configurechassis/configureresources'
                },
                repository: {
                    getRepositoryList: 'repository/getrepositorylist',
                    getRepositoryById: 'repository/getrepositorybyid',
                    syncRepositoryById: 'repository/syncrepositorybyid',
                    syncRepository: 'repository/syncrepository',
                    saveRepository: 'repository/saverepository',
                    testRepository: 'repository/testrepository',
                    testFileRepository: 'repository/testfilerepository',
                    deleteRepository: 'repository/deleterepository',
                    deleteRepositoryList: 'repository/deleterepositorylist',
                    getRepositoryTypes: 'repository/getrepositorytypes'
                },
                serverTemplate: {
                    getDefaultTemplate: 'deploymenttemplate/getdefaulttemplate',
                    getServerTemplate: 'deploymenttemplate/getdeploymenttemplatebyid',
                    createServerTemplate: 'deploymenttemplate/createdeploymenttemplate',
                    saveServerTemplate: 'deploymenttemplate/savedeploymenttemplate',
                    getSystemProfiles: 'deploymenttemplate/getsystemprofiles',
                    getBootSequenceByBootType: 'deploymenttemplate/getbootsequencebyboottype'
                },
                serviceTemplate: {
                    getDefaultTemplate: 'servicetemplate/getdefaulttemplate',
                    getServiceTemplate: 'servicetemplate/getservicetemplatebyid',
                    createServiceTemplate: 'servicetemplate/createservicetemplate',
                    saveServiceTemplate: 'servicetemplate/saveservicetemplate',
                    getSystemProfiles: 'servicetemplate/getsystemprofiles',
                    getBootSequenceByBootType: 'servicetemplate/getbootsequencebyboottype'
                },
                configurationTemplate: {
                    getConfigurationTemplate: 'managementtemplate/getmanagementtemplate',
                    createConfigurationTemplate: 'managementtemplate/createmanagementtemplate',
                    saveConfigurationTemplate: 'managementtemplate/savemanagementtemplate',
                    getUserRoles: 'managementtemplate/getmanagementtemplateuserroles',

                    addTemplateUser: 'managementtemplate/addtemplateuser',
                    removeTemplateUser: 'managementtemplate/removetemplateuser',
                    updateTemplateUser: 'managementtemplate/updatetemplateuser',
                    addCMCTemplateUser: 'managementtemplate/addcmctemplateuser',
                    removeCMCTemplateUser: 'managementtemplate/removecmctemplateuser',
                    updateCMCTemplateUser: 'managementtemplate/updatecmctemplateuser'
                },
                credential: {
                    getCredentialList: 'credentials/getcredentiallist',
                    getCredentialSummaryList: 'credentials/getcredentialsummaries',
                    getCredentialByType: 'credentials/getcredentialsbytype',
                    //getCredentialDevices: 'credentials/getcredentialdevicesbyidandtype',
                    getCredentialById: 'credentials/getcredentialbyid',
                    saveCredential: 'credentials/savecredential',
                    deleteCredential: 'credentials/deletecredential'
                },
                dashboard: {
                    getDashboardLandingPageData: 'dashboard/getdashboardlandingpagedata',
                    getDashboardNotifications: 'dashboard/getdashboardnotifications',
                    getServicesDashboardData: 'dashboard/getservicesdashboarddata',
                    getDashboardStorageData: 'dashboard/getdashboardstoragedata',
                    getDashboardScaleIOData: 'dashboard/getdashboardscaleiodata',
                },
                deployment: {
                    attach: 'deployments/attach',
                    detach: 'deployments/detach',
                    migrate: 'deployments/migrate',
                    powerOn: 'deployments/poweron',
                    powerOff: 'deployments/poweroff',
                    getDeploymentSummaries: 'deployments/getdeploymentsummaries',
                    getDeploymentById: 'deployments/getdeploymentbyid',
                    deleteDeployment: 'deployments/deletedeployment',
                    getServerListByTemplateId: 'deployments/getserverlistbytemplateid'
                },
                deviceGroup: {
                    createDeviceGroup: 'discovery/createdevicegroup',
                    getDeviceGroupList: 'discovery/getdevicegrouplist'
                },
                discovery: {
                    getChassisConfigurations: 'discovery/getchassisconfigurations',
                    getChassisList: 'discovery/getchassislist',
                    getRackList: 'discovery/getracklist',
                    saveChassisDiscovery: 'discovery/savechassisdiscovery',
                    submitDiscovery: 'discovery/submitdiscovery',
                    verifyConfiguration: 'discovery/verifyconfiguration',
                    getChassisConfigurationStatus: 'discovery/getchassisconfigurationsstatus',
                    getChassisListStatus: 'discovery/getchassisliststatus',
                    getRackListStatus: 'discovery/getrackliststatus',
                },
                environment: {
                    getMonitoringSettings: 'environment/getmonitoringsettings',
                    setMonitoringSettings: 'environment/setmonitoringsettings',
                    getNtpTimeZoneSettings: 'environment/getntptimezonesettings',
                    getTimeZones: 'environment/gettimezones',
                    setNtpTimeZoneSettings: 'environment/setntptimezonesettings'
                },
                hardwareInventory: {
                    getHardwareInventoryLandingPage: 'hardwareinventory/gethardwareinventorylandingpagedata'
                },
                initialSetup: {
                    getInitialSetup: 'initialsetup/getinitialsetupdata',
                    completeInitialSetup: 'initialsetup/completeinitialsetup',
                    updateTimeData: 'initialsetup/updatetime',
                    updateDhcpData: 'initialsetup/updatedhcp',
                    updateLicenseData: 'appliance/updatelicense',
                    updateProxyData: 'initialsetup/updateproxy',
                    testProxy: 'initialsetup/testproxysettings',
                    gettingStarted: 'initialsetup/gettingstarted',
                    updateGettingStarted: 'initialsetup/updategettingstarted',
                },
                iom: {
                    getIOMSummariesByCredentialId: 'iom/getiomsummariesbycredentialid',
                    getManagementTemplatesByCredentialId: 'iom/getmanagementtemplatesbycredentialid',
                    getIOMById: 'iom/getiombyid',
                    runInventory: 'iom/runinventory',
                    remove: 'iom/remove',
                    //Where is reApplyTemplate?
                    checkCompliance: 'iom/checkcompliance',
                },
                jobs: {
                    getJobList: 'jobs/getjoblist',
                    getJobById: 'jobs/getjobbyid',
                    saveJobSchedule: 'jobs/savejobschedule',
                    getRecurrences: 'jobs/getrecurrences',
                    deleteJob: 'jobs/deletejob',
                    getSelectedJobId: 'jobs/getselectedjobid',
                    exportjobs: 'jobs/exportjobs'
                },
                managementTemplate: {
                    reApplyTemplate: 'managementtemplate/reapplytemplate'
                },
                pollingIntervals: {
                    getChassisInventoryPollingSettings: 'pollingintervals/getchassisinventorypollingsettings',
                    saveChassisInventoryPollingSettings: 'pollingintervals/savechassisinventorypollingsettings',

                    getStatusPollingSettings: 'pollingintervals/getstatuspollingsettings',
                    saveStatusPollingSettings: 'pollingintervals/savestatuspollingsettings'
                },

                servers: {
                    getServerSummariesByCredentialId: 'servers/getserversummariesbycredentialid',
                    getManagementTemplatesByCredentialId: 'servers/getmanagementtemplatesbycredentialid',
                    getServerById: 'servers/getserverbyid',
                    powerOn: 'servers/poweron',
                    powerOff: 'servers/poweroff',
                    runInventory: 'servers/runinventory',
                    checkCompliance: 'servers/checkcompliance',
                    resetCertificate: 'servers/resetcertificate',
                    remove: 'servers/remove',
                    resetPeakValues: 'servers/resetpeakvalues',
                    getServerPortViewById: 'servers/getserverportviewbyid',
                },

                serverTemplateModels: {
                    getServerTemplateModelList: 'servertemplatemodels/getservertemplatemodellist'
                },

                session: {
                    doLogin: 'login',
                    doLogout: 'login/dologout',
                    getSession: 'session/getsession',
                    updateSession: 'session/updatesession'
                },

                pools: {
                    getPools: 'pools/getpools',
                    getPoolById: 'pools/getpoolbyid',
                    deletePools: 'pools/deletepools',
                    validatePool: 'pools/validatepool',
                    createPool: 'pools/createpool',
                    updatePool: 'pools/updatepool',
                    getPoolPrefixList: 'pools/getpoolprefixlist',
                    exportPools: 'pools/exportpools'
                },

                services: {
                    getAdjustServiceComponents: 'services/getAdjustServiceComponents',
                    getServiceById: 'services/getservicebyid',
                    getServiceSettingsById: 'services/getservicesettingsbyid',
                    getUpdatableServiceSettingsById: 'services/getupdatableservicesettingsbyid',
                    getResourcesWithNetworksById: 'services/getresourceswithnetworksbyid',
                    adjustService: 'services/adjustservice',
                    updateComponents: 'services/updatecomponents',
                    getMigrateServersByServiceId: 'services/getmigrateserversbyserviceid',
                    getServiceList: 'services/getservicelist',
                    getServiceDropdown: 'services/getservicedropdown',
                    createService: 'services/createservice',
                    updateService: 'services/updateservice',
                    deleteService: 'services/deleteservice',
                    removeService: 'services/removeservice',
                    cancelService: 'services/cancelservice',
                    deleteResources: 'services/deleteresources',
                    retryService: 'services/retryservice',
                    previewService: 'services/previewservice',
                    getComponentData: 'services/getcomponentdata',
                    migrate: 'services/migrate',
                    updateservicefirmware: 'services/updateservicefirmware',
                    estimateFirmwareUpdate: 'services/estimatefirmwareupdate',
                    exportService: 'services/exportservice',
                    addNetworkToService: 'services/addnetworktoservice',
                    updateServiceNetworkResources: 'services/updateservicenetworkresources',
                    getPuppetLogs: 'services/getpuppetlogs',
                    exportPuppetLogs: 'services/exportpuppetlogs',
                    getExistingInfo: 'services/getexistinginfo',
                    getExistingService: 'services/getexistingservice',
                    addExistingService: 'services/addexistingservice',
                    updateServiceInventory: 'services/updateserviceinventory',
                    updateExistingService: 'services/updateexistingservice',
                    stopManagingApplications: 'services/stopmanagingapplications',
                    getExistingServiceComponent: 'services/getexistingservicecomponent',
                    getExistingServiceOSCredentials: 'services/getexistingserviceoscredentials',
                    getExistingSOServiceOSCredentials: 'services/getexistingsoserviceoscredentials',
                    getExistingServiceSwitches: 'services/getexistingservicevswitches',
                    getExistingServiceNetworks: 'services/getexistingservicenetworks'
                },

                templates: {
                    getParsedConfigFile: 'templates/getparsedconfigfile',
                    getClonedComponentFromTemplate: 'templates/getclonedcomponentfromtemplate',
                    getTemplateById: 'templates/gettemplatebyid',
                    getManagementTemplateById: 'templates/getmanagementtemplatebyid',
                    getTemplateList: 'templates/gettemplatelist',
                    getTemplateBuilderList: 'templates/gettemplatebuilderlist',
                    getQuickTemplateList: 'templates/getquicktemplatelist',
                    getReadyTemplateList: 'templates/getreadytemplatelist',
                    deleteTemplate: 'servicetemplate/deleteservicetemplate',
                    copyTemplate: 'servicetemplate/copyservicetemplate',
                    createReferenceTemplate: 'servicetemplate/createreferenceservicetemplate',
                    addAttachment: 'templates/addattachment',
                    getTemplateBuilderById: 'templates/gettemplatebuilderbyid',
                    uploadTemplates: 'templates/uploadtemplate',
                    uploadConfigFile: 'templates/uploadconfigfile',


                    getTemplateBuilderComponents: 'templates/gettemplatebuildercomponents',
                    getUpdatedTemplateBuilderComponent: 'templates/getupdatedtemplatebuildercomponent',
                    getReferenceComponent: 'templates/getreferencecomponent',
                    loadTemplate: 'templates/gettemplatebuilderbyid',
                    loadTemplateDetails: 'templates/gettemplatedetails',
                    saveTemplate: 'templates/savetemplate',
                    saveTemplateAdditionalSettings: 'templates/savetemplateadditionalsettings',
                    createTemplate: 'templates/createtemplate',
                    validateTemplate: 'templates/validatetemplate',
                    validateSettings: 'templates/validatesettings',
                    discardTemplate: 'templates/discardtemplate',
                    deleteAttachment: 'templates/deleteattachment',
                    importTemplate: 'templates/importtemplate',
                    getFabricPurposes: 'templates/getfabricpurposes',
                    exportTemplate: 'templates/exporttemplate',
                    validateExport: 'templates/validateexport',
                    getVMWareComponent: 'templates/getvmwarecomponent'
                },

                configureTemplate: {
                    uploadConfigurableTemplate: 'configuretemplate/uploadconfigurabletemplate',
                    saveConfigureTemplate: 'configuretemplate/saveconfiguretemplate',
                    getConfigureTemplateById: 'configuretemplate/getconfiguretemplatebyid',
                },

                users: {
                    getCurrentUser: 'users/getcurrentuser',
                    getUsers: 'users/getusers',
                    deleteUser: 'users/deleteuser',
                    disableUser: 'users/disableuser',
                    enableUser: 'users/enableuser',
                    getUserById: 'users/getuserbyid',
                    getUserByRole: 'users/getuserbyrole',
                    saveUser: 'users/saveuser',
                    getRoles: 'users/getroles',
                    getDirectoryList: 'users/getdirectorylist',
                    getDirectoryById: 'users/getdirectorybyid',
                    getDirectoryType: 'users/getdirectorytype',
                    getProtocolType: 'users/getprotocoltype',
                    saveDirectory: 'users/savedirectory',
                    deleteADUser: 'users/deleteaduser',
                    enabledisableDirectories: 'users/enabledisableDirectories',
                    saveImportUser: 'users/saveimportuser',
                    getImportDirectoryList: 'users/getimportdirectorylist',
                    getImportUserById: 'users/getimportuserbyid',
                    deleteImportUser: 'users/deleteimportuser',
                    saveImportDirectoryUsers: 'users/saveimportdirectoryusers',
                    getDirectoryUsers: 'users/getdirectoryusers',
                    getDirectoryGroups: 'users/getdirectorygroups',
                    //getDirectoryUserById: 'users/getdirectoryuserbyid',
                    getImportRoles: 'users/getimportroles',
                    updateImportUser: 'users/updateimportuser',
                    getGroupDetails: 'users/getgroupdetails',
                    updateUserPreferences: 'users/updateuserpreferences'
                },
                networking: {
                    networks: {
                        saveNetwork: 'networks/savenetwork',
                        getNetworksList: 'networks/getnetworks',
                        getUplinkNetworksList: 'networks/getnonhardwaremanagementnetworks',
                        getServiceNetworksList: 'networks/getservicenetworkslist',
                        getServiceNetworkPortGroupList: 'networks/getservicenetworkportgrouplist',
                        getNetworkTypes: 'networks/getnetworktypes',
                        deleteNetwork: 'networks/deletenetwork',
                        getNetworkById: 'networks/getnetworkbyid',
                        getLanNetworks: 'networks/getlannetworks',
                        getSanIscsiNetworks: 'networks/getsaniscsinetworks',
                        getSanFcoeNetworks: 'networks/getsanfcoenetworks',
                        getNetworksByPurpose: 'networks/getnetworksbypurpose',
                        getNetworkTemplatesByNetworkId: '',
                        getHardwareManagementNetworks: 'networks/gethardwaremanagementnetworks'
                    }
                },
                deployTemplate: {
                    getDeploymentTemplateList: 'deploymenttemplate/getdeploymenttemplatelist',
                    getChassisListByTemplateId: 'deployments/getchassislistbytemplateid',
                    getNetworkListByTemplateId: 'deployments/getnetworklistbytemplateid',
                    saveDeployment: 'deployments/submitdeployment',
                    exportDeployTemplate: 'deployments/exportdeploytemplate',

                    addVirtualNic: 'deploymenttemplate/addvirtualnic',
                    removeVirtualNic: 'deploymenttemplate/removevirtualnic',
                    updateVirtualNic: 'deploymenttemplate/updatevirtualnic'
                },
                firmwareReport: {
                    getfirmwarereport: "firmware/getfirmwarereport"
                }


            },
            templates: {},

            help: {
                //this is the index, which is GUID-5B8DE7B7-879F-45A4-88E0-732155904029.html, which happens to be Notes, cautions, and warnings
                //none: 'help/index.html',

                //this is gettingstarted
                none: 'help/GUID-C6B6B706-1D45-458E-B47D-1D14FC416C3D.html',

                //added for page level help
                resources: "help/GUID-DCE48024-1840-480A-823F-1C926332134A.html",
                backupandrestore: "help/GUID-D2C936AF-C242-45C1-BFE6-867819245ADE.html",
                gettingstarted: "help/GUID-C6B6B706-1D45-458E-B47D-1D14FC416C3D.html",

                serverpoolcreate: "help/GUID-0D3A9AE2-28E7-45E4-8407-F42A951D7E6A.html",
                serverpooledit: "help/GUID-982DFF2E-83DA-41B4-80FD-33EBC76A9B6A.html",
                discoverywizardwelcome: "help/GUID-4B948DC5-05D0-4B66-A887-1EA4C980EF58.html",
                discoverywizardfirmwaredefault: "help/GUID-4B948DC5-05D0-4B66-A887-1EA4C980EF58.html",
                discoverydiscoverresourcespage: "help/GUID-4B948DC5-05D0-4B66-A887-1EA4C980EF58.html",
                discoveryaddiprangedialog: "help/GUID-279D9EB4-C9C1-4895-8F2C-2B56156CE2F5.html",
                discoverydiscovereddevices: "help/GUID-339DE4CE-CCB1-445D-8C54-54A9184C8C2E.html",
                discoverywizardfirmwarecompliance: "help/GUID-4B948DC5-05D0-4B66-A887-1EA4C980EF58.html",
                Settings: "help/GUID-92176BC4-A06B-4521-84A3-2644070F5F8C.html",
                networkslandingpage: "help/GUID-2002C7A9-44BF-473E-92AA-3A8364AF746D.html",
                networksaddingediting: "help/GUID-C89539DD-AAC1-4CA2-9DE1-9BB4F5ECB242.html",
                virtualidentitypoolslandingpage: "help/GUID-D748E7CD-9409-4C67-BFB6-647A7A111C09.html",
                virtualidentitypoolcreate: "help/GUID-BE4F327D-2A22-4DEC-8F2F-7EE0A0C1F39D.html",
                virtualidentitiespooladdingMAC: "help/GUID-B5AA5F58-D738-4D0A-A5D5-A61D29817004.html",
                virtualidentitiespooladdingIQN: "help/GUID-E45E5AE5-3472-4BFB-8A4F-B19AE3CB8A19.html",
                virualidentitypooladdingWWPN: "help/GUID-ED147BBA-A7BE-4AD5-85EC-663A15A0C4B5.html",
                virtualidentitypooladdingWWNN: "help/GUID-5B3464DB-8BA2-4676-9EBF-4C50D0B24702.html",
                SettingsUsersHomePage: "help/GUID-DE302F08-A5B3-4380-9138-8380C2009144.html",
                SettingsCreatingUser: "help/GUID-867D0995-352C-4DB4-B65A-602440BA6A94.html",
                SettingsUsersEditingUser: "help/GUID-1A4B7486-665C-42DE-BCEA-1E9511176DBA.html",
                SettingsUsersImportingUsers: "help/GUID-07289072-3699-4567-AA67-8D7AF94880A0.html",
                SetingsUsersDirectoryServices: "help/GUID-98858DAC-3947-4DA9-ADCD-9C71BBBDC9B1.html",
                SetingsUsersDirectoryServicesConnectionSettings: "help/GUID-4EAFC0F8-4BD8-4A01-B5A5-A123D49C00A1.html",
                SettingsUsersDirectoryServicesAttributeSettings: "help/GUID-CB18BA64-A917-4A49-8534-F2A3791FB3CE.html",
                SettingsUsersDirectoryServicesSummary: "help/GUID-34C736F1-E753-4380-8D74-EB6F0E91B80D.html",
                credentialslandingpage: "help/GUID-B4C4600A-1B8A-49D1-9BE0-D8B75961FD65.html",
                creatingcredentials: "help/GUID-152B27C5-8165-4121-A126-5701E9046597.html",
                editingcredentials: "help/GUID-8C279792-C3A3-447F-BAA7-E90459206A7C.html",
                Logs: "help/GUID-9D0A415E-869C-4795-B5E6-E9906BCC2370.html",
                appliancemanagementhomepage: "help/GUID-3820906D-846E-4A8A-BD74-222B96F2412C.html",
                appliancemanagementgeneratecert: "help/GUID-92AB3E3B-1D37-4EBC-A667-9DF659BAA322.html",

                initialsetupwelcome: "help/GUID-0D32AB59-08F7-4EFE-9287-7992D615F2E2.html",
                initialsetuplicensing: "help/GUID-70E23B3C-854B-4867-ABF6-F44E3E111ED9.html",
                initialsetuptimezone: "help/GUID-432EC241-8D28-4EFB-A751-280A9FCA150B.html",
                initialsetupproxysettings: "help/GUID-879CE912-BE7B-4260-B65C-CA63B8A9C5CC.html",
                initalsetupnetworks: "help/GUID-13AC0B2C-05DB-4CD8-99C2-624DC01E82F9.html",
                initialsetupsummary: "help/GUID-F40CD627-3AA7-44C6-B110-0635A77BCDA6.html",
                dashboardoverview: "help/GUID-A23B7FFC-9E91-42D5-A3FE-1B32757B2AA9.html",
                dashboarddeploynewservice: "help/GUID-4F98D4A9-4E41-4831-B348-D59B46016463.html",
                templatesoverview: "help/GUID-BF3B9047-373C-486F-9D52-8A30133FBECE.html",
                templateshomepage: "help/GUID-CBFFF4B6-E4AD-475C-98C0-0A46371929B5.html",
                sampletemplates: "help/GUID-69B22C4F-C0BA-4CA1-9FD4-62E8CA50C8E8.html",
                creatingtemplate: "help/GUID-90061F56-B1A1-4664-A3A8-3F7457BAFAB9.html",
                cloningtemplate: "help/GUID-10CD78FB-ED63-4B82-AF27-642386E3B299.html",
                deployingserviceoverview: "help/GUID-6C347A4C-1851-446D-877B-B97E3C21985E.html",
                deployingservice: "help/GUID-08692DCB-BDB7-44A9-A78F-7CBF5E525E9F.html",
                deployservicesummary: "help/GUID-08337D59-513C-407B-A463-22740A1CFD6B.html",
                deployservicetemplatedetails: "help/GUID-B281A7F0-66B7-49B9-961A-85EA1C9B508B.html",

                services: "help/GUID-ECA74D5D-7553-463E-A847-62C6FE5447E3.html",
                servicesaddserver: "help/GUID-0B19223E-5C8A-41BE-B4CE-0ECD6064C157.html",
                servicesaddstorage: "help/GUID-0877BB1F-5A6C-44F0-851A-0A658040CFA4.html",
                servicesaddvm: "help/GUID-E584CE9F-30C1-4CEE-9ED6-F42A1A3CE272.html",

                adjustresources: "help/GUID-DA55E711-6BD6-4AEE-B3B0-DF00087B855C.html",
                migrateserver: "help/GUID-176D8738-1FDD-4211-A751-0945CD50255E.html",
                templatebuilder: "help/GUID-E95E031D-97A8-4AB2-8C20-9B9A767F8F3C.html",
                templatesettings: "help/GUID-10F9BC7E-8A2B-48E5-A9E5-3301C6866B64.html",
                addstorage: "help/GUID-8F6DFB36-A15F-461B-B05B-C24C3A5F587A.html",
                addserver: "help/GUID-2F45EC04-0CFA-4B42-90EF-C2F4C6F3C0B1.html",
                addcluster: "help/GUID-EB2075D8-B964-4603-859F-A1AF4304C7F4.html",
                addappliance: "help/GUID-234AE139-8EDE-4742-AC73-68D22B18FF3B.html",
                addapplication: "help/GUID-DDFD7386-D614-4AB8-9DC2-40993F007B10.html",
                addapplicationservice: "help/GUID-6B9AFFA6-BFA5-4782-A396-B06AD1724DC6.html",
                importreferenceserver: "help/GUID-32CDCA7A-D22D-4F8D-9127-F3EB21F5CA1E.html",
                importtemplate: "help/GUID-EA0F30F3-7610-4E6B-88AD-DCD6FC48B983.html",
                createtemplate: "help/GUID-AD053629-1EB2-4129-9B03-0C1053EFB7FC.html",
                addtemplate: "help/GUID-90061F56-B1A1-4664-A3A8-3F7457BAFAB9.html",

                dhcp: "help/GUID-402DAFDC-4465-461B-A3D0-E0F11C2DC3C2.html",
                resourcesupdatingfirmware: "help/GUID-98DAF563-A44D-4C04-BA55-805A62994E4B.html",
                updatefirmwarewizard: "help/GUID-98DAF563-A44D-4C04-BA55-805A62994E4B.html",
                configurechassis: "help/GUID-7CB57D8F-2E95-4A8B-AD28-A4D97FEAEB34.html",
                repositories: "help/GUID-29778BCC-D293-4885-9B5A-786AEF8CF107.html",

                discoveryinitialchassisconfiguration: "help/GUID-44C740DE-D5B7-4DDC-AE67-C344A8FDC889.html",
                scheduledjobs: "help/GUID-DB7868BF-0260-47B6-99B5-E67542B3097C.html",

                //10-21-2014 Help Drop Integration

                configureDHCPsettings: "help/GUID-402DAFDC-4465-461B-A3D0-E0F11C2DC3C2.html",

                resourcedetails: "help/GUID-3DA30A19-1C38-4E26-960E-7AB6CF45952A.html",
                serverpools: "help/GUID-3CB7C7BE-8BE9-47DB-8117-98F28573B672.html",
                servicedetails: "help/GUID-09061359-0CFA-4480-9E81-BC461839BFC5.html",
                ServicesAddClusters: "help/GUID-ABAFCE3E-AABE-4BAD-BC8F-C06FB08B4B88.html",
                ServicesAddApplications: "help/GUID-DDFD7386-D614-4AB8-9DC2-40993F007B10.html",
                deleteservice: "help/GUID-6B1FEB89-27E7-4720-9D7C-566403BFD433.html",
                DeleteResources: "help/GUID-F1FCD4CA-8A26-4967-BBDD-4A50D9AC93F9.html",
                EditServiceInformation: "help/GUID-6FBA007F-1F1F-4B87-85E2-718DD23C981D.html",
                ViewDeploymentSettings: "help/GUID-072C70BF-F26C-4B48-8A15-1D3E7E6A362F.html",

                initialchassisconfiguration: "help/GUID-44C740DE-D5B7-4DDC-AE67-C344A8FDC889.html",

                configuringchassis: "help/GUID-7CB57D8F-2E95-4A8B-AD28-A4D97FEAEB34.html",
                configurechassisdiscoveredresources: "help/GUID-2768FB1F-FC4D-432D-99CA-BDBDB3EE0FCD.html",
                configurechassisconfiguredefaultrepository: "help/GUID-73665B98-3C81-4B29-87A6-AB986ED5E821.html",
                configurechassisfirmwarecompliance: "help/GUID-74403F65-DED9-4BBF-A6C0-B89A67EB011E.html",
                configurechassischassisglobal: "help/GUID-3416E41B-1961-44B7-8C15-45EFB7BCBBE5.html",
                ConfigureChassisAddCMCUser: "help/GUID-759745A8-B4D3-4B28-804E-26F31824EC72.html",
                ConfigureChassisiDRACUser: "help/GUID-DC1CAE28-9E4B-4DA4-BCDB-EFB5A011D180.html",
                configurechassisconfigurechassis: "help/GUID-55862FC4-5A15-4830-9C05-E6DDD2B91EC8.html",
                configurechassisconfigureserver: "help/GUID-64A7DFAF-BA33-4D57-9452-587390FEFDBC.html",
                configurechassisconfigureIOmodules: "help/GUID-D8071F08-4F4A-419A-8BC5-B7DB4D1DAD8A.html",
                configurechassiconfigureuplinks: "help/GUID-3E7F5240-5A9A-498F-BD6E-D3241D166BAB.html",
                configuechassisDefineuplinkdialog: "help/GUID-3C2E9886-1281-45A8-91AA-6A30E46CA0BF.html",
                ConfigureChassisSummary: "help/GUID-7E1DCE1D-CB66-4682-A3D8-A1C55F649528.html",

                viewfirmwarecompliance: "help/GUID-57681C39-16A9-49E8-AAA5-B83064D8CD31.html",
                viewfirmwarecomplianceservice: "help/GUID-B3DF3974-3512-4027-AD3C-06A23D397984.html",

                ImportingTemplates: "help/GUID-8B9AA354-34DE-4336-979A-D42D800748D3.html",
                TemplateEditingTemplateInformation: "help/GUID-24F76008-81FE-4F36-98BE-10284C22F296.html",

                repositorieshomepage: "help/GUID-29778BCC-D293-4885-9B5A-786AEF8CF107.html",
                AddOSImageRepository: "help/GUID-F2AFCFE6-F28E-4EA6-A26C-7E5CE94E09F1.html",
                EditOSImageRepository: "help/GUID-F13B2694-A391-4BD6-8D57-82F75CAC8E71.html",
                SyncOSImageRepository: "help/GUID-00C6E147-FF71-4EE3-851E-7EFFD89AD400.html",
                UnderstandingFirmwareRepositories: "help/GUID-F4A1D04F-0649-41C4-8EA1-0B79610504AF.html",
                viewbundles: "help/GUID-95330B4B-072A-46E6-B0C7-2D085959F921.html",
                Addingfirmwarerepositories: "help/GUID-74B9EE18-16EE-4A35-99FA-5E449BDCA479.html",
                configureRcm: "help/GUID-F4A1D04F-0649-41C4-8EA1-0B79610504AF.html",

                BackupNow: "help/GUID-25DAB7DA-314F-4FAE-927E-47F9A8ED1055.html",
                RestoreNow: "help/GUID-D46DFFA2-2CAC-44F1-9073-D031E1AA8FFF.html",
                EditingBackupSettingsAndDetails: "help/GUID-347E4F95-E735-466D-80E4-E5DE5E714F76.html",
                EditingAutomaticallyScheduledBackups: "help/GUID-0EA99976-B62D-4AC2-8A49-6A8529357678.html",

                EditingDefaultNTPSettings: "help/GUID-5635F5F5-CBAA-422B-BA36-A1047EE0C29A.html",
                EditingProxySettings: "help/GUID-E223F488-0D92-45A8-8F05-56F24B756FD2.html",
                EditingVxRackFLEXAlertConnectorSettings: "help/GUID-C044F94E-7E6B-4946-A50C-A6574927C20E.html",
                InitialSetupAlertConnectorSettings: "help/GUID-5B2EC1A9-9328-432E-B9C3-96AC3EAA36C0.html",
                EditingDHCPSettings: "help/GUID-1B478D09-7D69-4B87-9A82-E23A44993D22.html",
                UploadinganSSLCertificate: "help/GUID-90E8E840-A825-408C-8BEF-1F03A39F1F29.html",
                DownloadinganSSLCertificate: "help/GUID-FFC60E06-0254-493D-AE4B-D9F664CF5739.html",
                LicenseManagement: "help/GUID-AB959B7A-5D13-4ABD-8730-1118772710D2.html",

                exportingtemplate: 'help/GUID-0A6214EF-4D65-4612-BDE1-D522525C2EB1.html',
                uploadingtemplate: 'help/GUID-C14F691C-340C-4A1C-89EB-77E3B82F2E46.html',

                templateAddAttachment: 'help/GUID-30B43E75-29F5-4346-8153-7DA9DF532BD3.html',
                TemplateExportTemplate: 'help/GUID-0A6214EF-4D65-4612-BDE1-D522525C2EB1.html',
                Template_UploadExternalTemplate: 'help/GUID-C14F691C-340C-4A1C-89EB-77E3B82F2E46.html',
                Template_DeployService: 'help/GUID-E0E98DCC-F837-496C-8284-69612DDEDF68.html',

                DeployServiceAddNetwork: 'help/GUID-0957E277-D2F7-41C4-A718-CD1E15E3B71E.html',
                UpdateRepositoryPath: 'help/GUID-B476B03D-47C0-4562-919A-8ACD7DFD03D5.html',
                uploadServerConfigProfile: 'help/GUID-33E8F572-A039-48CC-8F15-E4D84F784F3F.html',
                addCustomBundle: 'help/GUID-1A989EA1-F5F0-486D-866A-8BDF30AF59BA.html',
                updateComponents: 'help/GUID-ADE94816-9B37-4E0F-80D8-3A28F1349E87.html',
                UpdateInventory: 'help/GUID-644FC7DF-7677-4831-BF6A-7DB6F4BECE67.html',

                AddingAddonModules: "help/GUID-793C54ED-C3EC-446C-A108-FCEB2DE8D826.html",
                AddingExistingService: "help/GUID-5CCF9C2B-052F-4AA5-A70C-D1BA793E3FCE.html",
                addonmodules: "help/GUID-23A231BB-B4EA-4FA1-97BE-662CF68021A2.html",
                storageAlertLearnMore: "help/GUID-8E4E473E-1C57-47E4-BE41-A81E33B2A935.html"
            },

            GenerateUrl: function (command, params) {

                if (!command) return '';

                var url = this[command];
                if (!url) url = command;

                var template = _.template(url);
                return template(params);

            }

        };
    });
angular.module('Enums', [])
    .factory('Enum', function () {
        return {
            deviceHealth: function (value) {

                var deviceHealths = [
                        "unknown",
                        "green",
                        "yellow",
                        "red"
                ];
                return deviceHealths[value];
            },
            deviceType: function (value) {

                var deviceType = [
                    "Unknown",
                    "Rack Server",
                    "Blade Server",
                    "Chassis",
                    "Fabric",
                    "Switch",
                    "Internal Storage",
                    "External Storage",
                    "Controller"
                ];
                return deviceType[value];
            },
            serviceHealth: function (value) {
                
                var serviceHealths = [
                        "unknown",
                        "green",
                        "yellow",
                        "red"
                ];
                return serviceHealths[value];
            },
            serviceState: function (value) {

                var serviceState = [
                        "In Progress",
                        "Complete",
                        "Pending",
                        "Completed With Errors"
                ];
                return serviceState[value];
            },
            healthToColor: function (value) {
                var color = [
                    "bg-primary",
                    "bg-success",
                    "bg-warning",
                    "bg-danger"
                ];
                return color[value];
            },
            healthToColorText: function (value) {
                var color = [
                    "",
                    "text-success",
                    "text-warning",
                    "text-danger"
                ];
                return color[value];
            },
            slaToText: function (value) {
                var sla = [
                    "Bronze",
                    "Silver",
                    "Gold",
                    "Platinum"
                ];
                return sla[value];
            },

            StatusToText: function (value) {
                var status = [
                    "Unknown",
                    "Available",
                    "Pending"
                ];
                return status[value];
            },


            deviceStatusToText: function (value) {
                var devicestatus = [
                    "Unknown",
                    "Available",
                    "Pending"
                ];
                return devicestatus[value];
            },
            devicePowerStateToText: function (value) {
                var powerstate = [
                    "Off",
                    "On"
                ];
                return powerstate[value];
            },
            serviceDetailsHealthIcon: function (value) {
                var health = [
                    "ci-threshold-alert-clock",
                    "ci-ok-square-check",
                    "ci-status-warning",
                    "ci-critical-circle-x"
                ];
                return health[value];
            }
            
        }
    });
angular.module('ASM.dataservices')
    .filter('uppercaseFirstLetter', function () {
        return function (val) {
            return val ? val.substring(0, 1).toUpperCase() + val.substring(1).toLowerCase() : "";
        };
    })
     .filter('scaleioStorageFilter', function () {
         return function (protectionDomains) {
             var a = [];
             _.forEach(protectionDomains, function (protectionDomain) {
                 if (protectionDomain.scaleIOStoragePools.length) {
                     a.push(protectionDomain);
                 }
             });
             return a;
         };
     })
    .filter('scaleioServerFilter', function () {
        return function (protectionDomains) {
            return _.filter(protectionDomains, function (protectionDomain) {
                return protectionDomain.scaleIOServerTypes.length;
            })
        };
    })
        .filter('clusterFilter', function () {
            return function (components) {
                return _.filter(components, function (component) {
                    return component.type == 'cluster' || component.type == 'scaleio';
                })
            };
        })
     .filter('byteConvert', function () {
         return function (size) {
             //using this function found on Stackâ¢ to get a rounding to 2 decimals only when necessary
             function round(value, decimals) {
                 return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals).toString();
             }
             var hrSize = "0";
             var k = size;
             var m = size / 1024;
             var g = size / 1048576;
             var t = size / 1073741824;
             var decimalPlaces = 2;

             if (t > 1) {
                 hrSize = round(t, decimalPlaces).concat(" TB");
             } else if (g > 1) {
                 hrSize = round(g, decimalPlaces).concat(" GB");
             } else if (m > 1) {
                 hrSize = round(m, decimalPlaces).concat(" MB");
             } else if (k > 1) {
                 hrSize = round(k, decimalPlaces).concat(" KB");
             }
             return hrSize;
         };
     })
    .filter('unique', [
        '$parse', function ($parse) {
            return function (input, filter) {
                if (angular.isArray(input)) {

                    //unique key
                    var getter = $parse(filter);

                    return _.uniq(input, function (elm) {
                        return getter(elm);
                    });
                }
                return input;
            };
        }
    ])
    .filter('lookup', function () {
        return function (list, key) {
            return list[key];
        };
    })
    .filter('ip2long', function () {
        return function (ipaddress) {
            var parts = ipaddress.split('.');
            var res = 0;

            res += (parseInt(parts[0], 10) << 24) >>> 0;
            res += (parseInt(parts[1], 10) << 16) >>> 0;
            res += (parseInt(parts[2], 10) << 8) >>> 0;
            res += parseInt(parts[3], 10) >>> 0;

            return res;
        };
    })
    .filter('ip2link', function () {
        return function (ipaddress) {
            var link = ipaddress;
            if (link != undefined && link !== '' && link.indexOf('http') !== 0) link = 'http://' + link;
            return link;
        };
    })
    .filter('toclassname', function () {
        return function (val) {

            if (!val) return '';

            return val.replace(/[^a-z0-9]/g, function (s) {
                var c = s.charCodeAt(0);
                if (c === 32) return '-';
                if (c >= 65 && c <= 90) return '_' + s.toLowerCase();
                return '__' + ('000' + c.toString(16)).slice(-4);
            });

        };
    })
    .filter('dependenciesMet', function () {
        return function (setting, component) {
            var returnVal = [];
            if (setting && component) {
                angular.forEach(setting, function (option) {
                    if (option.dependencyTarget && option.dependencyValue) {
                        var targetSetting = null;

                        angular.forEach(component.categories, function (c) {
                            var matchingSetting = _.find(c.settings, function (s) { return (s.id == setting.dependencyTarget); });

                            if (matchingSetting) {
                                targetSetting = matchingSetting;
                                return;
                            }
                        });

                        var matchingValue = false;

                        if (targetSetting && targetSetting.value != null) {
                            var settingvalues = option.dependencyValue.split(',');
                            angular.forEach(settingvalues, function (val) { if (val.toString() === targetSetting.value.toString()) matchingValue = true; });
                        }

                        if (matchingValue) returnVal.push(option);
                    } else {
                        returnVal.push(option);
                    }
                });
            }
            return returnVal;
        };
    })
    .filter('settingVisible', ["$filter", function ($filter) {
        var _isVisible = function (setting, component) {
            var isVisible = false;

            if (setting && component) {
                if (setting.dependencyTarget && setting.dependencyValue) {
                    var targetSetting = null;

                    angular.forEach(component.categories, function (c) {
                        var matchingSetting = _.find(c.settings, function (s) { return (s.id == setting.dependencyTarget); });

                        if (matchingSetting) {
                            targetSetting = matchingSetting;
                            return;
                        }
                    });

                    var matchingValue = false;

                    if (targetSetting && targetSetting.value != null) {
                        var settingvalues = setting.dependencyValue.split(',');
                        angular.forEach(settingvalues, function (val) { if (val.toString() === targetSetting.value.toString()) matchingValue = true; });
                    }

                    isVisible = (matchingValue && _isVisible(targetSetting, component));
                } else {
                    isVisible = true;
                }
            }

            return isVisible;
        };

        return function (settings, component) {
            var returnVal = [];
            angular.forEach(settings, function (setting) { if (_isVisible(setting, component)) returnVal.push(setting); });
            return returnVal;
        };
    }])
    .filter('settingsVisibleComponentEditorFilter', [function () {
        return function (settings, component) {
            var visible = function (setting, component) {
                if (!setting || !component) return true;

                if (setting.dependencyTarget && setting.dependencyValue) {
                    var targetSetting = null;

                    $.each(component.categories, function (ix, c) {
                        var matchingSetting = _.find(c.settings, function (s) { return (s.id == setting.dependencyTarget); });

                        if (matchingSetting) {
                            targetSetting = matchingSetting;
                            return;
                        }
                    });

                    var matchingValue = false;
                    if (targetSetting && targetSetting.value != null) {
                        var settingvalues = setting.dependencyValue.split(',');
                        $.each(settingvalues, function (idx, val) {
                            if (val.toString() === targetSetting.value.toString()) matchingValue = true;
                        });
                    }

                    return matchingValue && visible(targetSetting, component);
                }

                return true;
            }
            return _.filter(settings, function (setting) { return visible(setting, component) });
        }

    }])
    .filter('addExistingSettings', ["$filter", function ($filter) {
        return function (settings, component) {
            var visible = function (setting, component) {
                switch (setting.datatype) {
                    case 'raidconfiguration':
                    case 'biosconfiguration':
                    case 'networkconfiguration':
                        return false;
                }
                if (setting.hidefromtemplate) { return false };
                if (!setting || !component) return true;

                if (setting.dependencyTarget && setting.dependencyValue) {
                    var targetSetting = null;

                    $.each(component.categories, function (ix, c) {
                        var matchingSetting = _.find(c.settings, function (s) {
                            return (s.id == setting.dependencyTarget);
                        });

                        if (matchingSetting) {
                            targetSetting = matchingSetting;
                            return;
                        }
                    });

                    var matchingValue = false;

                    if (targetSetting && targetSetting.value != null) {
                        var settingvalues = setting.dependencyValue.split(',');
                        $.each(settingvalues, function (idx, val) {
                            if (val.toString() == targetSetting.value.toString())
                                matchingValue = true;
                        });
                    }
                    return matchingValue && visible(targetSetting, component);
                }

                return true;
            }

            return _.filter(settings, function (setting) { return visible(setting, component) });
        }

    }])
    .filter('serviceComponentFilter', ["$filter", function ($filter) {
        return function (settings, component) {
            var visible = function (setting, component) {
                var targetSetting, matchingValue;

                if (!setting.requireatdeployment) { return false };

                if (!setting || !component) return true;

                if (setting.dependencyTarget && setting.dependencyValue) {

                    _.find(component.categories, function (c) {
                        return targetSetting = _.find(c.settings, { id: setting.dependencyTarget });
                    });


                    if (targetSetting && targetSetting.value != null) {
                        matchingValue = !!_.find(_.split(setting.dependencyValue, ","), function (val) {
                            return val.toString() == targetSetting.value.toString();
                        });
                    }

                    return matchingValue && visible(targetSetting, component);
                }
                return true;
            }

            return _.filter(settings, function (setting) { return visible(setting, component) });
        }

    }])

 .filter('updateComponents', ["$filter", function ($filter) {
     return function (settings, component) {
         var visible = function (setting, component) {
             var targetSetting = null, matchingValue = false;

             if (setting.hidefromtemplate) { return false };
             if (!setting || !component) return true;

             if (setting.dependencyTarget && setting.dependencyValue) {
                 _.find(component.categories,
                     function (c) {
                         targetSetting = _.find(c.settings, { id: setting.dependencyTarget }) || null;
                         return targetSetting
                     });

                 if (targetSetting && targetSetting.value != null) {
                     var settingvalues = setting.dependencyValue.split(',');
                     matchingValue = !!_.find(settingvalues, function (val) {
                         return (val.toString() == targetSetting.value.toString())
                     });
                 }
                 return matchingValue && visible(targetSetting, component);
             }
             return true;
         }

         return _.filter(settings, function (setting) { return visible(setting, component) });
     }

 }])

 .filter('viewTemplateDetailsFilter', ["$filter", function ($filter) {
     return function (settings, component) {
         var visible = function (setting, component) {
             var targetSetting,
                 matchingValue;

             if (!setting || !component) return true;

             //if (setting.hidefromtemplate || component.type === 'application') return false;

             if (setting.dependencyTarget && setting.dependencyValue) {

                 _.find(component.categories,
                     function (c) {
                         return targetSetting = _.find(c.settings, { id: setting.dependencyTarget });
                     });

                 if (targetSetting && targetSetting.value != null) {
                     matchingValue = !!_.find(_.split(setting.dependencyValue, ","),
                         function (val) {
                             return val.toString() == targetSetting.value.toString();
                         });
                 }
                 return matchingValue && visible(targetSetting, component);
             }

             return true;
         }
         return _.filter(settings, function (setting) { return visible(setting, component) });
     }

 }])
 .filter('addApplicationSettingsFilter', ["$filter", function ($filter) {
     return function (settings, component) {
         var visible = function (setting, component) {
             if (!setting || !component) return true;

             if (setting.dependencyTarget && setting.dependencyValue) {
                 var targetSetting = null;

                 $.each(component.categories, function (ix, c) {
                     var matchingSetting = _.find(c.settings, function (s) {
                         return (s.id == setting.dependencyTarget);
                     });

                     if (matchingSetting) {
                         targetSetting = matchingSetting;
                         return;
                     }
                 });

                 var matchingValue = false;

                 if (targetSetting && targetSetting.value != null) {
                     var settingvalues = setting.dependencyValue.split(',');
                     $.each(settingvalues, function (idx, val) {
                         if (val.toString() == targetSetting.value.toString())
                             matchingValue = true;
                     });
                 }

                 return matchingValue && visible(targetSetting, component);
             }

             return true;
         }
         var settingsNotHiddenFromTemplate = $filter("templatesettings")(settings);
         return _.filter(settingsNotHiddenFromTemplate, function (setting) { return visible(setting, component) });
     }

 }])
    .filter('vdsTemplateSettingsFilter', ["$filter", function ($filter) {
        return function (settings) {
            var visible = function (setting, settingsList) {
                var targetSetting = null;
                if (setting && settingsList && settingsList.length && setting.dependencyTarget && setting.dependencyValue) {

                    targetSetting = _.find(settingsList, { id: setting.dependencyTarget }) || null;

                    var matchingValue = false;

                    if (targetSetting && targetSetting.value != null) {
                        var settingvalues = setting.dependencyValue.split(',');
                        matchingValue = !!_.find(settingvalues, function (val) {
                            return (val.toString() == targetSetting.value.toString())
                        });
                    }
                    return matchingValue && visible(targetSetting, settingsList);
                }
                return true;
            }
            var settingsNotHiddenFromTemplate = $filter("templatesettings")(settings);
            return _.filter(settingsNotHiddenFromTemplate, function (setting) { return visible(setting, settings) });
        }

    }])

 .filter('componentEditorLinkableType', function () {
     return function (array, componentType) {
         var k = _.filter(array,
             function (component) {
                 switch (componentType) {
                     case 'application':
                         return false;
                     case 'vm':
                         return component.type == 'cluster';
                     case 'cluster':
                     case 'scaleio':
                         return component.type == 'server' || component.type == 'vm';
                     case 'server':
                         return component.type == 'storage' || component.type == 'cluster' || component.type == 'scaleio';
                     case 'storage':
                         return component.type == 'server';
                 }
             });
         return k;
     };
 })

    .filter('networkVisible', function () {
        return function (listOfNetworks, network) {
            return _.filter(listOfNetworks,
                function (networkListItem) {
                    if (network === "PUBLIC_LAN" || network === "PRIVATE_LAN") {
                        if (networkListItem.typeid === "PUBLIC_LAN" || networkListItem.typeid === "PRIVATE_LAN") {
                            return true;
                        }
                    }
                    return networkListItem.typeid === network || networkListItem.id === "new" || angular.isUndefined(networkListItem.id);
                });
        };
    })
    .filter('deviceHealth', [
        'constants', function (constants) {
            return function (id) {
                var match = _.find(constants.deviceHealth, { id: id }) || { name: '' };
                return match.name;
            };
        }
    ])
    //.filter('filteredDevices', [
    //    function () {
    //        return function (arr) {
    //            var ret = [];
    //            $.each(arr, function (index, device) {
    //                if (device.isChassis && device.chassisConfiguration.configChassis) {
    //                    ret.push(device);
    //                }
    //            });
    //            return ret;
    //        };
    //    }
    //])
    .filter('uplinkList', [
        function () {
            return function (arr, vltenabled) {
                var x = angular.copy(arr);
                if (vltenabled)
                    x.unshift({
                        id: 'VLT',
                        uplinkId: 'VLT',
                        uplinkName: 'VLT',
                        portChannel: '',
                        networks: [],
                        networkNames: []
                    });

                return x;
            };
        }
    ])
      .filter('noUpdate', ["$translate", function ($translate){
            return function (str) {
                if (!str) {
                    return $translate.instant("GENERIC_NoUpdate");
                }
                
                return str;
            };
        }
      ])
    .filter('deviceType', [
        'constants', function (constants) {
            return function (id) {
                var match = _.find(constants.deviceTypes, { id: id }) || { name: '' };
                return match.name;
            };
        }
    ])
    .filter('firmwareStatus', [
            'constants', function (constants) {
                return function (id) {
                    var match = _.find(constants.firmwareStatus, { id: id }) || { name: '' };
                    return match.name;
                };
            }
    ])
    .filter('firmwareStatusIcon', [
                'constants', function (constants) {
                    return function (id) {
                        var match = _.find(constants.firmwareStatus, { id: id }) || { icon: '' };
                        return match.icon;
                    };
                }
    ])
    .filter('deviceState', [
            'constants', function (constants) {
                return function (id) {
                    var match = _.find(constants.deviceState, { id: id }) || { name: '' };
                    return match.name;
                };
            }
    ])
    .filter('deviceManagementState', [
                'constants', function (constants) {
                    return function (id) {
                        var match = _.find(constants.resourceStateFilter, { id: id }) || { name: '' };
                        return match.name;
                    };
                }
    ])
    .filter('staticIPState', [
            'constants', function (constants) {
                return function (id) {
                    var match = _.find(constants.staticIPState, { id: id }) || { name: '' };
                    return match.name;
                };
            }
    ])
    .filter('availableResourceTypes', [
            'constants', function (constants) {
                return function (id) {
                    var match = _.find(constants.availableResourceTypes, { id: id }) || { name: '' };
                    return match.name;
                };
            }
    ])
    .filter('availableManagedStates', [
            'constants', function (constants) {
                return function (id) {
                    var match = _.find(constants.availableManagedStates, { id: id }) || { name: '' };
                    return match.name;
                };
            }
    ])
    .filter('healthToColor', [
        'Enum', function (Enum) {
            return function (health) {
                return Enum.healthToColor(health);
            };
        }
    ])
    .filter('healthToColorText', [
        'Enum', function (Enum) {
            return function (health) {
                return Enum.healthToColorText(health);
            };
        }
    ])
    .filter('serviceState', [
        'Enum', function (Enum) {
            return function (state) {
                return Enum.serviceState(state);
            };
        }
    ])
    .filter('StatusToText', [
        'Enum', function (Enum) {
            return function (status) {
                return Enum.StatusToText(status);
            };
        }
    ])
    .filter('deviceStatusToText', [
        'Enum', function (Enum) {
            return function (devicestatus) {
                return Enum.deviceStatusToText(devicestatus);
            };
        }
    ])
    .filter('devicePowerStateToText', [
        'Enum', function (Enum) {
            return function (powerstate) {
                return Enum.devicePowerStateToText(powerstate);
            };
        }
    ])
    .filter('slaToText', [
        'Enum', function (Enum) {
            return function (sla) {
                return Enum.slaToText(sla);
            };
        }
    ])
    .filter('serviceDetailsHealthIcon', [
        'Enum', function (Enum) {
            return function (health) {
                return Enum.serviceDetailsHealthIcon(health);
            };
        }
    ])
    .filter('sum', [
        function () {
            return function (items, prop) {
                return items.reduce(function (a, b) {
                    return a + b[prop];
                }, 0);
            };
        }
    ])
    .filter('ellipsis', [function () {
        return function (value, limit) {
            var returnVal = value;
            if (value.length > limit) {
                returnVal = value.substring(0, limit) + '...';
            }
            return returnVal;
        };
    }
    ])
    .filter('able', ["$translate", function ($translate) {
        return function (bool) {
            if (bool === true || bool === "true") {
                return $translate.instant('SETTINGS_Enabled');
            }
            if (bool === false || bool === "false") {
                return $translate.instant('SETTINGS_Disabled');
            }
            return $translate.instant('DEVICETYPE_Unknown');
        }
    }
    ])
    .filter('range', [function () {
        return function (input, min, max) {
            min = parseInt(min); //Make string input int
            max = parseInt(max);
            for (var i = min; i < max; i++) {
                if (i < 10) { i = "0" + i; }
                input.push(i.toString());
            }

            return input;
        };
    }
    ])
    .filter('percentage', [function () {
        return function (input) {
            var x = input.toFixed(2);
            return x + "%";
        };
    }])
    .filter('bool', ['$translate', function ($translate) {
        return function (bool) {
            return bool ? $translate.instant('SETTINGS_Repositories_True') :
                $translate.instant('SETTINGS_Repositories_False');
        };
    }
    ])
    .filter('yesNo', ['$translate', function ($translate) {
        return function (bool) {
            return bool ? $translate.instant('GENERIC_Yes') :
                $translate.instant('GENERIC_No');
        };
    }
    ])
    .filter('repoState', ['$translate', function ($translate) {
        return function (status) {
            switch (status) {
                case 'errors':
                    return $translate.instant('SETTINGS_Repositories_Error');
                case 'pending':
                    return $translate.instant('SETTINGS_Repositories_Pending');
                case 'copying':
                    return $translate.instant('SETTINGS_Repositories_Copying');
                case 'available':
                    return $translate.instant('SETTINGS_Repositories_Available');

            }
        }
    }])
.filter('deviceState', ['$translate', function ($translate) {
    return function (status) {
        switch (status) {
            case "poweringoff":
                return $translate.instant("TEMPLATEBUILDER_VALIDATE_PoweringOff");
            case "available":
                return $translate.instant("GENERIC_Available");
            case "reserved":
                return $translate.instant("TEMPLATEBUILDER_VALIDATE_Reserved");
            case "unknown":
                return $translate.instant("GENERIC_Unknown");
            case "unmanaged":
                return $translate.instant("TEMPLATEBUILDER_VALIDATE_Unmanaged");
            case "pending":
                return $translate.instant("GENERIC_Pending");

        }
    }
}])

.filter('jobState', ['$translate', function ($translate) {
    return function (status) {
        switch (status) {
            case 'running':
                return $translate.instant('GENERIC_Running');
            case 'scheduled':
                return $translate.instant('GENERIC_Scheduled');
            case 'completed':
                return $translate.instant('GENERIC_Completed');
            case 'error':
                return $translate.instant('GENERIC_Error');
        }
    }
}])
.filter('serviceHealth', ['$translate', function ($translate) {
    return function (health) {
        switch (health) {
            case 'green':
                return $translate.instant("GENERIC_Healthy");
            case 'yellow':
                return $translate.instant("GENERIC_Warning");
            case 'red':
                return $translate.instant("GENERIC_Critical");
            case 'pending':
                return $translate.instant("GENERIC_Pending");
            case 'unknown':
                return $translate.instant("GENERIC_InProgress");
            case 'cancelled':
                return $translate.instant("GENERIC_Cancelled");
            case 'incomplete':
                return $translate.instant("GENERIC_Incomplete");
            case 'servicemode':
                return $translate.instant("GENERIC_ServiceMode");
        }
    }
}])
    .filter('resourceHealth', ['$translate', function ($translate) {
        return function (health) {
            switch (health) {
                case 'green':
                    return $translate.instant("GENERIC_Healthy");
                case 'yellow':
                    return $translate.instant("GENERIC_Warning");
                case 'red':
                    return $translate.instant("GENERIC_Critical");
                case 'cancelled':
                    return $translate.instant("GENERIC_Cancelled");
                case 'pending':
                    return $translate.instant("GENERIC_Pending");
                case 'servicemode':
                    return $translate.instant("GENERIC_ServiceMode");
                case 'blue':
                case 'unknown':
                case '':
                    return $translate.instant("GENERIC_InProgress");
            }
        }
    }])
    .filter("onOff", ['$translate', function ($translate) {
        return function (bool) {
            return bool ? $translate.instant('GENERIC_On_') :
                $translate.instant('CONFIGURECHASSIS_DEVICE_CONFIG_Off');
        };
    }
    ])
    .filter("compliant", ['$translate', function ($translate) {
        return function (compliance) {
            switch (compliance) {
                case "compliant":
                    return $translate.instant("DEVICES_CompliantStatus_Compliant");
                case "noncompliant":
                    return $translate.instant("DEVICES_CompliantStatus_NonCompliant");
                case "updaterequired":
                    return $translate.instant("DEVICES_CompliantStatus_UpdateRequired");
                case "updatefailed":
                    return $translate.instant("DEVICES_CompliantStatus_UpdateFailed");
                case "updating":
                    return $translate.instant("DEVICES_CompliantStatus_PendingUpdates");
                default:
                    return $translate.instant("DEVICES_CompliantStatus_Unknown");
            }
        }
    }
    ])
    .filter('templatesettings', [function () {
        return function (arr, isService) {
            var x = [];
            $.each(arr, function (index, model) {
                if (!isService) {
                    if ((!model.hidefromtemplate) && !model.isDisposed)
                        x.push(model);
                } else {
                    if ((!model.hidefromtemplate || model.requireatdeployment) && !model.isDisposed)
                        x.push(model);
                }
            });

            return x;
        }
    }])

    .filter('deploysettings', [function () {
        return function (arr) {
            var x = [];
            $.each(arr, function (index, model) {
                if (model.requireatdeployment)
                    x.push(model);
            });

            return x;
        }
    }])
.filter('groupFilter', [function () {
    return function (array) {
        return _.uniqBy(array, 'group');
    }
}])
    .filter('criticality', ['constants', function (constants) {
        return function (constant) {
            return constants.firmwareCriticality.filter(function (option) { return option.id === constant })[0].name;
        }
    }])
    .filter('isTypeChassis', [function () {
        return function (device) {
            return !!_.find(["ChassisM1000e", "ChassisVRTX", "ChassisFX"],
            function (val) { return val === device.resourceType });

        }
    }])
    .filter('filteredDevices', ["$filter", function ($filter) {
        return function (devices) {
            return $filter('filter')(devices,
                function (d) {
                    return $filter("isTypeChassis")(d) && d.chassisConfiguration.configChassis === true;
                });
        }
    }])
    .filter('policyFilter', ['constants', '$filter', function (constants, $filter) {
        return function (policies, devices) {
            var fxcount = 0,
                m1000count = 0,
                devices = $filter("filteredDevices")(devices),
                returnArray = [];

            angular.forEach(devices, function (device) {
                if (device.chassisConfiguration && device.chassisConfiguration.configChassis === true) {
                    if (device.resourceType === 'ChassisFX') {
                        fxcount++;
                    } else {
                        m1000count++;
                    }
                }
            });

            if (fxcount > 0 && m1000count > 0) {
                returnArray = policies;
            } else if (fxcount > 0) {
                returnArray.push(policies[2]);
            } else {
                returnArray.push(policies[3]);
            }
            return returnArray;
        }
    }])

    .filter('orderComponents', [function () {
        return function (components) {
            return _.flatten(
                 _.map(["vm", "cluster", "scaleio", "server", "storage"],
                     function (type) {
                         return _.filter(components, { type: type });
                     })
             );
        }
    }])

      .filter('sortConfigureDevices', ["$filter", function ($filter) {
          return function (devices) {
              //sorts into 1. Chassis, 2. Servers, 3. Other 
              var devicesCopy = angular.copy(devices);

              var chassis = _.remove(devicesCopy,
                  function (device) { return (device.chassisId || device.id) && $filter("isTypeChassis")(device) });

              var servers = _.remove(devicesCopy, function (device) { return device.resourceType.indexOf('Server') >= 0; });

              var other = devicesCopy;
              return _.concat([],
                    chassis,
                    servers,
                    other
                  );
          }
      }])

    .filter('translateLabel', ['$translate', function ($translate) {
        return function (id, category, name) {
            var nameToTry = "FORM_BUILDER_LABELS_" + category + "_" + id,
                    translation = $translate.instant(nameToTry);
            return translation === nameToTry ? name : translation;
        }
    }])

    .filter('titleCase', [function () {
        return function (input) {
            return input ? input.replace(/\w\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1) }) : '';
        }
    }])


    .directive('stringToNumber', function () {
        return {
            require: 'ngModel',
            link: function (scope, element, attrs, ngModel) {
                ngModel.$parsers.push(function (value) {
                    return '' + value;
                });
                ngModel.$formatters.push(function (value) {
                    return parseFloat(value, 10);
                });
            }
        };
    })
    .constant('donutChartConfig', {



        navigator: { enabled: false },
        credits: { enabled: false },
        exporting: { enabled: false },

        options: {
            chart: {
                events: {
                    load: function () {
                        $('.highcharts-container').css('z-index', '12');
                        $('.highcharts-background').attr('fill', 'none');
                    }
                }
            },
            tooltip: {
                backgroundColor: '#ffffff'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: false
                    }
                }
            }
        },

        title: {
            text: '',
            verticalAlign: 'bottom'
        },
        size: {
            width: 250,
            height: 200
        },
        series: [
            {
                type: 'pie',
                innerSize: '95%',
                name: '',
                data: []
            }
        ]
    })
.factory('GlobalServices', [
    '$rootScope', 'localStorageService', '$timeout', '$window', '$q', '$http', 'URLs', '$translate', '$filter', '$location', '$injector', '$resource', 'Enums', '$route', 'Commands', '$anchorScroll',
    function ($rootScope, localStorage, $timeout, $window, $q, $http, URLs, $translate, $filter, $location, $injector, $resource, Enums, $route, Commands, $anchorScroll) {
        $rootScope.ASM = this;

        $rootScope.ASM.showInitialSetup = false;

        $rootScope.ASM.CurrentUser = null;

        $rootScope.ASM.Enums = Enums;

        $rootScope.ASM.IsInRole = function (role) {
            if ($rootScope.ASM.CurrentUser == null) {
                var currentUser = localStorage.get('ASM.currentUserObject');

                //var currentUser = sessionStorage.getItem('ASM.currentUserObject');
                //currentUser = JSON.parse(currentUser);
                $rootScope.ASM.CurrentUser = angular.copy(currentUser);
            }
            return ($rootScope.ASM.CurrentUser && $rootScope.ASM.CurrentUser.roleId && $rootScope.ASM.CurrentUser.roleId.toLowerCase() === role.toLowerCase());
        };

        $rootScope.ASM.NewGuid = function () {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        };

        $rootScope.ASM.showHelp = function (helptoken) {

            //if null check to see if one was set prior to the call
            if (!helptoken) helptoken = $rootScope.helpToken;

            //if still no help token set to none
            var helpToken = helptoken || 'none';

            var helpUrl = Commands.help[helpToken];

            var width = 820;
            var height = 600;

            if (height > screen.height) {
                height = screen.height - 20;
            }

            var left = Math.round((screen.width - width) / 2);
            var top = Math.round((screen.height - height) / 2);

            var winHelp = window.open(helpUrl, 'winHelp', 'width=' + width + ',height=' + height + ',top=' + top + ',left=' + left + ',scrollbars=1,resizable=1,location=1,toolbar=1');
            if (winHelp.focus) {
                winHelp.focus();
            }
        };

        $rootScope.ASM.resetCache = function () {
            $rootScope.ASM.cache = {
                devices: [],
                templates: [],
                services: []
            };
        }
        $rootScope.ASM.resetCache();

        $rootScope.ASM.servicesData = {
            healthy: 0,
            warning: 0,
            error: 0,
            pending: 0,
            inprogress: 0,
            cancelled: 0,
            incomplete: 0,
            servicemode: 0
        };

        $rootScope.ASM.loadNavigation = function (serviceData) {

            return [
                {
                    guid: 'nav_dashboard_home',
                    label: $translate.instant('DASHBOARD_Title'),
                    icon: 'ci-grid-dashboard',
                    href: '#/home',
                    children: [
                    ]
                },
                {
                    guid: 'nav_services',
                    label: $translate.instant('GENERIC_Services'),
                    icon: 'ci-deploy',
                    href: '#/services',
                    children: [
                        {
                            guid: 'nav_services_healthy', label: $translate.instant('GENERIC_Healthy') + ' (' + serviceData.healthy + ')',
                            href: '/services/green', disabled: serviceData.healthy >= 1 ? false : true
                        },
                        {
                            guid: 'nav_services_warning', label: $translate.instant('GENERIC_Warning') + ' (' + serviceData.warning + ')',
                            href: '/services/yellow', disabled: serviceData.warning >= 1 ? false : true
                        },
                        {
                            guid: 'nav_services_error', label: $translate.instant('GENERIC_Critical') + ' (' + serviceData.error + ')',
                            href: '/services/red', disabled: serviceData.error >= 1 ? false : true
                        },
                        {
                            guid: 'nav_services_pending', label: $translate.instant('GENERIC_Pending') + ' (' + serviceData.pending + ')',
                            href: '/services/pending', disabled: serviceData.pending >= 1 ? false : true
                        },
                        {
                            guid: 'nav_services_inprogress', label: $translate.instant('GENERIC_InProgress') + ' (' + serviceData.inprogress + ')',
                            href: '/services/unknown', disabled: serviceData.inprogress >= 1 ? false : true
                        },
                        {
                            guid: 'nav_services_cancelled', label: $translate.instant('GENERIC_Cancelled') + ' (' + serviceData.cancelled + ')',
                            href: 'services/cancelled', disabled: serviceData.cancelled >= 1 ? false : true
                        },
                        {
                            guid: 'nav_services_incomplete', label: $translate.instant('GENERIC_Incomplete') + ' (' + serviceData.incomplete + ')',
                            href: 'services/incomplete', disabled: serviceData.incomplete >= 1 ? false : true
                        },
                        {
                            guid: 'nav_services_servicemode', label: $translate.instant('GENERIC_ServiceMode') + ' (' + serviceData.servicemode + ')',
                            href: '/services/servicemode', disabled: serviceData.servicemode >= 1 ? false : true
                        }

                        //{ guid: 'nav_services_cancelled', label: $translate.instant('GENERIC_Cancelled') + ' (' + serviceData.cancelled + ')', href: '/services/Cancelled', disabled: serviceData.cancelled >= 1 ? false : true },
                        //{ guid: 'nav_services_error', label: $translate.instant('GENERIC_Critical') + ' (' + serviceData.error + ')', href: '/services/Critical', disabled: serviceData.error >= 1 ? false : true },
                        //{ guid: 'nav_services_healthy', label: $translate.instant('GENERIC_Healthy') + ' (' + serviceData.healthy + ')', href: '/services/Healthy', disabled: serviceData.healthy >= 1 ? false : true },
                        //{ guid: 'nav_services_inprogress', label: $translate.instant('GENERIC_InProgress') + ' (' + serviceData.inprogress + ')', href: '/services/In Progress', disabled: serviceData.inprogress >= 1 ? false : true },
                        //{ guid: 'nav_services_warning', label: $translate.instant('GENERIC_Warning') + ' (' + serviceData.warning + ')', href: '/services/Warning', disabled: serviceData.warning >= 1 ? false : true }
                    ]
                },
                {
                    guid: 'nav_templates',
                    label: $translate.instant('NAVIGATION_Templates'),
                    href: '#/templates',
                    icon: 'ci-device-templates-blank-stacked',
                    children: [
                        { guid: 'nav_templates_mytemplates', label: $translate.instant('NAVIGATION_MyTemplates'), href: '/templates/mytemplates' },
                        { guid: 'nav_templates_sampletemplates', label: $translate.instant('NAVIGATION_SampleTemplates'), href: '/templates/sampletemplates' }
                    ]
                },
                {
                    guid: 'nav_resources',
                    label: $translate.instant('NAVIGATION_Resources'),
                    href: '#/devices',
                    icon: 'ci-device-tower',
                    children: [
                        { guid: 'nav_resources_allresources', label: $translate.instant('NAVIGATION_AllResources'), href: '/devices' },
                        { guid: 'nav_resources_serverpools', label: $translate.instant('NAVIGATION_ServerPools'), href: '/devices/serverpools' }
                    ]
                }
                //,                {
                //    guid: 'nav_settings',
                //    label: $translate.instant('Settings'),
                //    href: '/settings',
                //    icon: 'ci-settings-sliders-vert-2',
                //    hideintopmenu: true,
                //    pinright: true,
                //    children: [
                //        { guid: 'nav_settings_addonmodules', label: $translate.instant('SETTINGS_AddOnModule'), href: '/settings/AddOnModule' },
                //        { guid: 'nav_settings_backuprestore', label: $translate.instant('SETTINGS_BackupRestore'), href: '/settings/BackupAndRestore' }
                //    ]
                //}
            ];
        }

        $rootScope.ASM.navigation = $rootScope.ASM.loadNavigation($rootScope.ASM.servicesData);

        $rootScope.$watch('ASM.servicesData', function (serviceData) {
            $rootScope.ASM.navigation = $rootScope.ASM.loadNavigation(serviceData);
            $rootScope.$broadcast('navigationUpdated', $rootScope.ASM.navigation);
        });



        //$rootScope.ASM.showMenuItems = function () {
        //    $rootScope.$broadcast('navigationUpdated', $rootScope.ASM.navigation);
        //};

        //$rootScope.ASM.hideMenuItems = function () {
        //    $rootScope.$broadcast('navigationUpdated', []);
        //};



        $rootScope.ASM.ClearErrors = function (errorArray) {

            if (errorArray)
                errorArray.splice(0, errorArray.length);
            else
                errorArray = [];

            return errorArray;
        };

        $rootScope.ASM.RemoveError = function (error, array) {
            var errorArray = array || angular.extend([], $rootScope.errors);
            angular.forEach(errorArray, function (e, index) {
                if (e.refId && e.refId === error.refId) {
                    errorArray.splice(index, 1);
                }
                else if (e.id && e.id === error.id) errorArray.splice(index, 1);
            });

            $rootScope.errors = errorArray;
        };

        $rootScope.ASM.DisplayError = function (error, errorArray) {

            if (!error) return;
            if (!errorArray) errorArray = $rootScope.errors;

            //convert old style errors to new style
            if (error.errorMessage) {

                if (error.errorMessage) {
                    error.message = error.errorMessage;
                }

                if (error.errorAction) {
                    error.details = (error.details || '') + error.errorAction;
                }

                if (error.errorDetails) {
                    if (error.details) { error.details += '<br />'; }
                    error.details = error.errorDetails;
                }

                if (error.errorCode) {
                    error.code = error.errorCode;
                } else {
                    error.code = -1;
                }

                //copy fldErrors to error.errors collection for errorDisplay directive
                error.fldErrors = error.fldErrors || undefined;
                if (error.fldErrors) {
                    angular.forEach(error.fldErrors, function (suberror) {
                        if (suberror.errorAction) {
                            if (suberror.errorDetails) {
                                suberror.errorAction += ('<br />' + suberror.errorDetails);
                            }
                        }
                        var fldError =
                        {
                            message: suberror.errorMessage || null,
                            details: suberror.errorAction || suberror.errorDetails || null,
                            code: suberror.errorCode || null,
                            severity: suberror.errorSeverity || 'CRITICAL'
                        };

                        
                        if (!error.errors)
                            error.errors = [];
                        error.errors.push(fldError);
                    });
                }

                error.Message = '' + error.code + ': ' + error.message;
                //  error.refId = '' + response.config.url;
            }

            angular.forEach(errorArray, function (e, index) {
                if (e.refId === error.refId)
                    errorArray.splice(index, 1);
            });

            error.id = $rootScope.ASM.NewGuid();
            error.errors = error.errors || [];
            errorArray.push(error);
        };

        $rootScope.ASM.findInvalidElements = function (id) {
            return $("#" + id)
                .find(".ng-invalid")
                .not("ng-form, form, [ng-form]");
        }

        $rootScope.ASM.hasInvalidElement = function (id) {
            return $rootScope.ASM.findInvalidElements(id).length;
        }

        $rootScope.ASM.scrollToInvalidElement = function (id) {
            //form elements must have an id to be scrolled to 
            var invalidElement = $rootScope.ASM.findInvalidElements(id).first();
            if (invalidElement.length) {
                // open parent collapsed rows of the input that are closed
                var panels = $(invalidElement.parents()).filter(".collapse").not(".in"),
                    completedCollapses = 0;
                if (panels.length) {
                    angular.forEach(_.reverse(panels),
                   function (panel) {
                       var panelElement = $("#" + $(panel).attr("id"));
                       panelElement.collapse("show");
                       panelElement.on("shown.bs.collapse", function (event) {
                           event.preventDefault();
                           completedCollapses++;
                           if (completedCollapses === panels.length) {
                               //all panels done collapsing
                               $rootScope.ASM.scrollTo(invalidElement.attr("id"));
                           }
                           panelElement.off("shown.bs.collapse");
                       })
                   });
                    //scroll to invalid element

                } else $rootScope.ASM.scrollTo(invalidElement.attr("id"));
            }
            return !!invalidElement.length;
        }

        $rootScope.ASM.scrollTo = function (id) {
            $timeout(function () {
                $anchorScroll(id);
            })

        }

        $rootScope.ASM.scrollToCollapsableRowTitle = function (idOfTitle) {
            //wait for collapsing row to close, then only scroll to it if it's opening and not closing
            $timeout(function () {
                $("#" + idOfTitle).find(".collapsed")[0] || $rootScope.ASM.scrollTo(idOfTitle);
            }, 500);
        }

        $rootScope.ASM.getBaseName = function (name) {
            var pat = /\s\([0-9]*\)$/, // Match the pattern like: (7)
                match = name.match(pat);
            return match ? name.replace(match, '') : name;
        }

        $rootScope.ASM.namePicker = function (namedArray, unNamedArray, baseName) {
            //namedArray is array of all components of same type as in unNamedArray
            var defaultName = $rootScope.ASM.getBaseName(unNamedArray[0].name).toLowerCase();
            //if default name
            var nameToTry = "", i = (defaultName === unNamedArray[0].type) ? _.filter(namedArray, function (name) { _.startsWith(name, unNamedArray[0].type) }).length + 1 : 1;
            _.map(unNamedArray, function (unNamedItem) {
                var originalName = unNamedItem.name,
                    done;
                while (!done) {
                    nameToTry = i > 1 ? baseName + " (" + i + ")" : baseName;
                    if (!(_.find(namedArray, { name: nameToTry }) ||
                        _.find(unNamedArray, function (unNamed) {
                            return unNamed.name === nameToTry && unNamed.id !== unNamedItem.id
                    }))) {
                        //untaken name found
                        unNamedItem.name = nameToTry;
                        return done = true;
                    }
                    i++;
                }
            });
            return unNamedArray;
        }

        $rootScope.ASM.stringifyCategories = function (categories) {
            return angular.forEach(categories, function (category) {
                angular.forEach(category.settings, function (setting) {
                    if (angular.isString(setting.value)) { return }
                    else if (setting.value === null || angular.isUndefined(setting.value)) { return }
                    else if (!angular.isString(setting.value)) { return setting.value = JSON.stringify(setting.value) }
                    else if (setting.value === true) { return setting.value = "true" }
                    else if (setting.value === false) { return setting.value = "false" }
                })
            });
        }

        $rootScope.ASM.setTab = function (tabgroup, tabname) {
            var params = $route.current.params;
            if (tabgroup && tabname) {
                params[tabgroup] = tabname;
            } else {
                if (tabgroup) {
                    delete params[tabgroup];
                }
            }
            $route.updateParams(params);
        }

        $rootScope.errors = [];

        //$rootScope.$watch('errors', function () { $rootScope.ASM.ErrorDetailsHeight(); }, true);
        //clear out errors because we navigated away
        $rootScope.$on('$locationChangeStart', function () { $rootScope.errors = []; });
        //Mark added this so we can clear errors after specific events like closing a modal
        $rootScope.$on('clearErrors', function () { $rootScope.errors = []; });

        $rootScope.ASM.anyChecked = function (arr) {

            if (!arr) return false;

            var val = false;

            $.each(arr, function (index, value) {
                if (value.isChecked) {
                    val = true;
                    return;
                }
            });
            return val;
        };

        $rootScope.ASM.onlyChecked = function (arr, prop, values) {

            //If only passed single valid property, turn it into an array
            if (typeof value == 'string') {
                values = [values];
            }

            //default return value to true. We will be checking for invalid
            var ret = true;
            $.each(arr, function (index, value) {
                //if row is checked and its property is not in the values array
                if (value.isChecked && values.indexOf(value[prop]) == -1) {
                    ret = false;
                    return;
                }
            });

            return ret;
        };


        $rootScope.ASM.IsDeviceType = function (deviceType, targetDeviceType) {

            var dt = deviceType;
            var tdt = targetDeviceType;

            switch (tdt) {
                case 'Switch':
                    return dt.indexOf('switch') != -1 || dt.indexOf('IOM') != -1;
                case 'IOM':
                    return dt.indexOf('IOM') != -1;
                case 'Server':
                    return dt.indexOf('Server') != -1;
                case 'RackServer':
                    return dt.indexOf('RackServer') != -1;
                case 'BladeServer':
                    return dt.indexOf('BladeServer') != -1;
                case 'FXServer':
                    return dt.indexOf('FXServer') != -1;
                case 'Chassis':
                    return dt.indexOf('Chassis') != -1;
                case 'Storage':
                    return dt == 'storage' || dt == 'compellent' || dt == 'equallogic' || dt == 'netapp';
                case 'VM':
                    return dt == 'vm';
                case 'vCenter':
                    return dt == 'vcenter';
                case 'SCVMM':
                    return dt == 'scvmm';
            }

            return false;
        };

        $rootScope.ASM.getters = {
            ipaddress: function (field) {
                return function (object) {
                    return $filter('ip2long')(object[field]);
                }
            },
            resourcename: function () {
                return function (device) {

                    if ($rootScope.ASM.isServer(device)) return device['dnsdracname'];
                    if ($rootScope.ASM.isIOM(device) || $rootScope.ASM.isDellSwitch(device)) return device['hostname'];
                    if ($rootScope.ASM.isChassis(device)) return device['chassisname'];
                    if ($rootScope.ASM.isEqualLogic(device)) return device['groupname'];
                    if ($rootScope.ASM.isCompellent(device) || $rootScope.ASM.isNetApp(device)) return device['storagecentername'];
                    if (device.deviceType === 'scvmm' || device.deviceType === 'vcenter' || device.deviceType === 'em') return device['model'];
                    if (device.deviceType === 'storage' || device.deviceType === 'Server' || device.deviceType === 'vm') return '-';

                    return '';
                }
            },
            model: function () {
                return function (device) {
                    if (device.deviceType === 'scvmm' || device.deviceType === 'vcenter' || device.deviceType === 'em') return '-';
                    var manufacturer = device.manufacturer || '';
                    var model = device.model || '';

                    return manufacturer + ' ' + model;
                }
            },
            memory: function () {
                return function (rowItem) {
                    return parseFloat(rowItem.memory);
                }
            }
        };

        $rootScope.ASM.isChassis = function (device) {
            return (device.deviceType === 'ChassisM1000e' || device.deviceType === 'ChassisVRTX' || device.deviceType === 'ChassisFX');
        }
        $rootScope.ASM.isFX2 = function (device) {
            return (device.deviceType === 'ChassisFX');
        }
        $rootScope.ASM.isIOM = function (device) {
            return (device.deviceType === 'AggregatorIOM' || device.deviceType === 'MXLIOM' || device.deviceType === 'FXIOM');
        }
        $rootScope.ASM.isServer = function (device) {
            return (device.deviceType === 'RackServer' || device.deviceType === 'TowerServer' || device.deviceType === 'BladeServer' || device.deviceType === 'FXServer' || device.deviceType === 'Server');
        }
        $rootScope.ASM.isStorage = function (device) {
            return device.deviceType === 'storage' || device.deviceType === 'compellent' || device.deviceType === 'equallogic' || device.deviceType === 'netapp' || device.deviceType === 'emcvnx' || device.deviceType === 'emcunity';
        }
        $rootScope.ASM.isEqualLogic = function (device) {
            return (device.deviceType === 'equallogic');
        }
        $rootScope.ASM.isCompellent = function (device) {
            return (device.deviceType === 'compellent');
        }
        $rootScope.ASM.isEmcvnx = function (device) {
            return device.deviceType === 'emcvnx';
        }
        $rootScope.ASM.isEmcUnity = function (device) {
            return device.deviceType === 'emcunity';
        }
        $rootScope.ASM.isNetApp = function (device) {
            return (device.deviceType === 'netapp');
        }
        $rootScope.ASM.isDellSwitch = function (device) {
            return (device.deviceType === 'dellswitch' || device.deviceType === 'genericswitch');
        }

        $rootScope.ASM.gettingStarted = null;

        $rootScope.ASM.limitString = function (str, limit) {
            if (str && limit) {
                return $filter('ellipsis')(str, limit);
            }
        }

        return $rootScope.ASM;
    }
])


;

angular.module('ASM.dataservices')
    .service('SearchService', ['$http', '$q', '$filter', 'Commands', 'GlobalServices', function ($http, $q, $filter, Commands, GlobalServices) {
        this.search = function (term, limit, skip) {

            if (!limit) limit = 0;

            //skip = true;
            if (skip && skip === true) {
                //console.log('short-circuited the actual search in SearchService');
                var promise = $q.all().then(function () {
                    return {
                        "bogus-data": true,
                        "searchedTerm": "template",
                        "totalResults": 70,
                        "totalUnlimitedResults": 70
                    };
                });
                return promise;
            }

            //console.log('all searches started');

            var unlimitedCount_devices;
            var unlimitedCount_services;
            var unlimitedCount_templates;

            var request = {
                requestObj: null,
                criteriaObj: null
            }

            var devicePromise, servicePromise, templatePromise;

            if (GlobalServices.cache.devices.length > 0) {
                devicePromise = $q.resolve({ data: { responseObj: GlobalServices.cache.devices } });
                //console.log('retrieving DEVICES data from cache');
            }
            else {
                devicePromise = $http.post(Commands.data.devices.getDeviceList, request);
            }

            if (GlobalServices.cache.services.length > 0) {
                servicePromise = $q.resolve({ data: { responseObj: GlobalServices.cache.services } });
                //console.log('retrieving SERVICES data from cache');
            }
            else {
                servicePromise = $http.post(Commands.data.services.getServiceList, request);
            }

            if (GlobalServices.cache.templates.length > 0) {
                templatePromise = $q.resolve({ data: { responseObj: GlobalServices.cache.templates } });
                //console.log('retrieving TEMPLATES data from cache');
            }
            else {
                templatePromise = $http.post(Commands.data.templates.getTemplateList, request);
            }

            //clear cache every 5 minutes
            setTimeout(GlobalServices.resetCache, 60000 * 5);

            var searches = [devicePromise, servicePromise, templatePromise];

            //console.log('searches data before q:  ' + JSON.stringify(searches));

            var promise = $q.all(searches)
                //load data
                .then(
                    function (data) {

                        //console.log('all searches returned');
                        //console.log('searches data after q:  ' + JSON.stringify(searches));

                        var devices = data[0].data.responseObj;
                        var services = data[1].data.responseObj;
                        var templates = data[2].data.responseObj;

                        if (GlobalServices.cache.devices.length === 0) { GlobalServices.cache.devices = devices; }
                        if (GlobalServices.cache.services.length === 0) { GlobalServices.cache.services = services; }
                        if (GlobalServices.cache.templates.length === 0) { GlobalServices.cache.templates = templates; }

                        var matchDevices = $filter('filter')(devices, term);
                        var matchServices = $filter('filter')(services, term);
                        var matchTemplates = $filter('filter')(templates, term);

                        unlimitedCount_devices = matchDevices.length;
                        unlimitedCount_services = matchServices.length;
                        unlimitedCount_templates = matchTemplates.length;

                        if (limit > 0) {
                            //note:  this overrides the matched filter above
                            matchDevices = $filter('limitTo')(matchDevices, limit);
                            matchServices = $filter('limitTo')(matchServices, limit);
                            matchTemplates = $filter('limitTo')(matchTemplates, limit);
                        }

                        //note:  if filtering is slow, should we store the filtered results in the cache and return them both?
                        //console.log('all filtering done');

                        return { devices: matchDevices, services: matchServices, templates: matchTemplates };

                    },
                    function (data) {

                        return { devices: [], services: [], templates: [] };

                    }
                )
                .then(function (matches) {

                    //console.log('matches:  ' + JSON.stringify(matches));
                    //console.log('building results');

                    var deviceResults = [];
                    var serviceResults = [];
                    var templatesResults = [];

                    angular.forEach(matches.devices, function (d) {
                        deviceResults.push({
                            id: d.id,
                            status: d.health,
                            name: d.name || d.serviceTag || d.ipAddress || d.deviceid,
                            description: 'Resource Sub-category:  ' + d.deviceType + ', OS Hostname:  ' + d.hostname + ', Management IP:  ' + d.ipAddress + ', Model:  ' + d.manufacturer + ' ' + d.model,
                            deviceType: d.deviceType,
                            osHostname: d.hostname,
                            managementIp: d.ipAddress,
                            model: d.manufacturer + ' ' + d.model,
                            target: '#/device/' + d.id + '/' + d.deviceType,
                            relevance: null,
                            subcategory: d.deviceType
                        });
                    });

                    angular.forEach(matches.services, function (d) {
                        serviceResults.push({
                            id: d.id,
                            status: d.health,
                            name: d.name,
                            //description: d.description,
                            description: 'Deployed By:  ' + d.deployedBy + ', Deployed On:  ' + moment(d.deployedOn).format('LLL'),
                            deployedBy: d.deployedBy,
                            deployedOn: d.deployedOn,
                            target: '#/service/' + d.id + '/details',
                            relevance: null,
                            subcategory: null
                        });
                    });

                    angular.forEach(matches.templates, function (d) {
                        templatesResults.push({
                            id: d.id,
                            status: d.isTemplateValid,
                            name: d.name,
                            //description: d.description,
                            description: 'State:  ' + (d.draft == true ? 'Draft' : 'Published') + ', Category:  ' + d.category + ', Last Deployed On:  ' + moment(d.lastDeployed).format('LLL'),
                            state: d.draft,
                            category: d.category,
                            lastDeployed: d.lastDeployed,
                            target: '#/templatebuilder/' + d.id + '/view',
                            relevance: null,
                            subcategory: null
                        });
                    });

                    var results = {
                        searchedTerm: term,
                        totalResults: matches.devices.length + matches.services.length + matches.templates.length,
                        totalUnlimitedResults:  unlimitedCount_devices + unlimitedCount_services + unlimitedCount_templates,
                        categories: [
                            { name: 'Resources', icon: 'ci-device-tower', items: deviceResults, totalItems: deviceResults.length, unlimitedItems:  unlimitedCount_devices },
                            { name: 'Services', icon: 'ci-deploy', items: serviceResults, totalItems: serviceResults.length, unlimitedItems: unlimitedCount_services },
                            { name: 'Templates', icon: 'ci-device-templates-blank-stacked', items: templatesResults, totalItems: templatesResults.length, unlimitedItems: unlimitedCount_templates }
                        ]
                    };

                    //console.log('done building results');

                    return results;

                });

            return promise;

        };
    }]);

angular.module('ASM.dataservices').run(['$templateCache', function ($templateCache) {

    //override templates here or add if necessary
    //we tested this here and it did not work
    //$templateCache.put("__clarity/masthead.html", "<h1>Foo Bar</h1>");

}]);


var asm;
(function (asm) {
    var AddNetworkModalController = (function () {
        function AddNetworkModalController($http, $timeout, $scope, $q, $translate, loading, Dialog, commands, GlobalServices, $filter, MessageBox, modal, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.MessageBox = MessageBox;
            this.modal = modal;
            this.constants = constants;
            this.errors = new Array();
            this.toBeAdded = new Array();
            this.serviceHasVDS = true;
            var self = this;
            self.serviceHasVDS = self.$scope.modal.params.service.hasVDS;
            self.refresh();
        }
        //Please note that networks attached to resources in mock back-end are completely random
        AddNetworkModalController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.$q.all([
                self.getServiceNetworksList(self.$scope.modal.params.serviceId).then(function (response) {
                    self.serviceNetworks = response.data.responseObj;
                }),
                self.getResourcesWithNetworksById(self.$scope.modal.params.serviceId)
                    .then(function (response) {
                    self.resources = response.data.responseObj;
                    //test to fill all resources with both test networks
                    //angular.forEach(self.resources, (resource) => { self.resources.indexOf(resource) % 2 === 0 ? resource.networks = ["f3b21fbc-afb9-433a-ad59-29e94243e8d3", "608799be-bbbd-47b0-b602-7310632c2784"]: null });
                })
            ]).then(function () {
                self.resources = self.getCorespondingNetworkNames(self.resources, self.serviceNetworks);
                self.uniqueDeployedNetworks = _.uniqBy(_.flatMap(self.resources, function (resource) { return resource.networks; }), "id");
                self.disableFullOrUsedNetworks();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            }).finally(function () { return d.resolve(); });
        };
        AddNetworkModalController.prototype.newNetwork = function () {
            var self = this;
            self.toBeAdded.push({
                id: self.GlobalServices.NewGuid(),
                networkid: self.selectedNetwork.id,
                networkname: self.selectedNetwork.name,
                portgroupid: null,
                portgroupname: null,
                //all resources with those that are already using this network removed
                resourceNames: self.getResources(self.selectedNetwork, angular.copy(self.resources)),
                //model of which resources were choosen
                resources: [],
                _portGroups: angular.copy(self.portGroups)
            });
            self.disableFullOrUsedNetworks();
        };
        AddNetworkModalController.prototype.defineNewNetwork = function () {
            var self = this;
            var editNetworkModal = self.modal({
                title: self.$translate.instant('NETWORKS_Edit_CreateTitle'),
                modalSize: 'modal-lg',
                templateUrl: "views/networking/networks/editnetwork.html",
                controller: "EditNetworkModalController as editNetwork",
                params: {
                    editMode: "CREATE",
                    id: ""
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            editNetworkModal.modal.show();
        };
        AddNetworkModalController.prototype.removeNetwork = function (resource) {
            var self = this;
            self.toBeAdded.splice(self.toBeAdded.indexOf(resource), 1);
            self.disableFullOrUsedNetworks();
        };
        AddNetworkModalController.prototype.selectedNetworkChanged = function () {
            var self = this;
            if (self.selectedNetwork && self.selectedNetwork.id) {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.loading(d.promise);
                self.networkChanging = true;
                self.getServiceNetworkPortGroupList(self.$scope.modal.params.serviceId, self.selectedNetwork.id)
                    .then(function (response) {
                    //place title option as first in array of options
                    self.portGroups = [
                        {
                            portGroup: self.$translate.instant("NETWORKS_ADD_NewPortGroup"),
                            newPortGroup: true
                        }
                    ].concat(response.data.responseObj);
                    self.networkChanging = false;
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                }).finally(function () { return d.resolve(); });
            }
        };
        AddNetworkModalController.prototype.getResources = function (selectedNetwork, resources) {
            //resource will be removed as an option for a network if it is already in use by the network
            //returns an array of resources marked on whether they're disabled
            var array = [];
            angular.forEach(resources, function (resource) {
                //only include if it's not already in use
                if (!_.find(resource.networks, { name: selectedNetwork.name })) {
                    //set checkbox to false
                    resource.included = false;
                    array.push(resource);
                }
            });
            return array;
        };
        AddNetworkModalController.prototype.disableFullOrUsedNetworks = function () {
            var self = this;
            //A network is disabled from being selected if one of each kind of resource is using it OR it is in the toBeAdded array
            _.forEach(self.serviceNetworks, function (network) {
                network.disabled = !_.find(self.resources, function (resource) {
                    return !_.find(resource.networks, { id: network.id });
                }) || !!_.find(self.toBeAdded, { networkid: network.id });
            });
        };
        AddNetworkModalController.prototype.getCorespondingNetworkNames = function (resources, networks) {
            //Each resource comes with an array of ids for networks, this function replaces the ids with the id's full coresponding network object
            //Converts resource.networks from ["id", "id", "id"] To [networkObj, networkObj, networkObj]
            angular.forEach(resources, function (resource) {
                resource.networks = _.map(resource.networks, function (network) {
                    return _.find(networks, { id: network });
                });
            });
            return resources;
        };
        AddNetworkModalController.prototype.enableSave = function () {
            var self = this;
            var enableSaveButton = false;
            if (self.toBeAdded.length > 0) {
                enableSaveButton = _.find(self.toBeAdded, function (network) {
                    if ((network.portgroup && !network.portgroup.newPortGroup) || (network.portgroup && network.portgroup.newPortGroup && network.portgroupname)) {
                        return true;
                    }
                    else {
                        return false;
                    }
                });
            }
            else {
                enableSaveButton = false;
            }
            return enableSaveButton;
        };
        AddNetworkModalController.prototype.validateResourceSelections = function () {
            var self = this;
            //returns whether any row has no selected resources
            return _.find(self.toBeAdded, function (network) {
                //if new portgroup, don't check it
                if (network.portgroup && network.portgroup.newPortGroup) {
                    return false;
                }
                return network._missingResource = !_.find(network.resourceNames, { included: true });
            });
        };
        AddNetworkModalController.prototype.save = function () {
            var self = this;
            if (self.validateResourceSelections())
                return;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            var request = {
                networks: [],
                serviceid: self.serviceHasVDS ? self.$scope.modal.params.serviceId : ""
            };
            angular.forEach(self.toBeAdded, function (network, index) {
                if (network.portgroup && network.portgroup.newPortGroup && self.serviceHasVDS) {
                    network.resourceNames = angular.copy([self.resources[0]]);
                    network.resourceNames[0].included = true;
                }
                var requestNetwork = {
                    id: network.id,
                    networkid: network.networkid,
                    networkname: network.networkname,
                    portgroupid: null,
                    portgroupname: null,
                    resources: network.resources
                };
                if (self.serviceHasVDS) {
                    if (network.portgroup && network.portgroup.newPortGroup) {
                        requestNetwork.portgroupid = "-1";
                        requestNetwork.portgroupname = network.portgroupname;
                    }
                    else {
                        requestNetwork.portgroupname = network.portgroup.portGroup;
                        requestNetwork.portgroupid = network.portgroup.id;
                    }
                }
                request.networks.push(requestNetwork);
                //remove all resource names that have included of false
                var includedResources = _.filter(network.resourceNames, { included: true });
                //push all remaining networks' ids into resourceNames array
                angular.forEach(includedResources, function (resource) {
                    request.networks[index].resources.push(resource.id);
                });
            });
            self.updateServiceNetworkResources(self.$scope.modal.params.serviceId, request.networks)
                .then(function (data) {
                self.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        AddNetworkModalController.prototype.getServiceNetworksList = function (serviceId) {
            var self = this;
            return self.$http.post(self.commands.data.networking.networks.getServiceNetworksList, { serviceId: serviceId });
        };
        AddNetworkModalController.prototype.getServiceNetworkPortGroupList = function (serviceId, networkId) {
            var self = this;
            return self.$http.post(self.commands.data.networking.networks.getServiceNetworkPortGroupList, { serviceId: serviceId, networkId: networkId });
        };
        AddNetworkModalController.prototype.getResourcesWithNetworksById = function (id) {
            var self = this;
            return self.$http.post(self.commands.data.services.getResourcesWithNetworksById, { id: id });
        };
        AddNetworkModalController.prototype.updateServiceNetworkResources = function (serviceId, networks) {
            var self = this;
            return self.$http.post(self.commands.data.services.updateServiceNetworkResources, { serviceid: serviceId, networks: networks });
        };
        AddNetworkModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddNetworkModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddNetworkModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog',
            'Commands', 'GlobalServices', '$filter', 'Messagebox', 'Modal', 'constants'];
        return AddNetworkModalController;
    }());
    asm.AddNetworkModalController = AddNetworkModalController;
    angular
        .module('app')
        .controller('AddNetworkModalController', AddNetworkModalController);
})(asm || (asm = {}));
//# sourceMappingURL=addNetworkModal.js.map
var asm;
(function (asm) {
    var EditNetworkModalController = (function () {
        function EditNetworkModalController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $filter, MessageBox, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.MessageBox = MessageBox;
            this.constants = constants;
            this.errors = new Array();
            this.calledFromDiscoverWizard = false;
            var self = this;
            //create or edit
            self.editMode = $scope.modal.params.editMode;
            //if create then id is blank, if edit then id is selectedNetworkId
            self.selectedNetworkId = $scope.modal.params.id;
            self.isScaleUp = false;
            self.networkTypes = [];
            //self.network = {};
            //type: { id: "", networkType: "", disableStaticOrDHCP: "", vlanidrequired: "" },
            self.network = {
                id: '',
                serverid: '',
                name: '',
                description: '',
                type: {},
                typeid: '',
                vlanid: '',
                staticordhcp: '',
                ipaddressranges: [],
                staticipaddressdetails: [],
                gateway: '',
                subnet: '',
                primarydns: '',
                secondarydns: '',
                dnssuffix: '',
                createdDate: '',
                createdBy: '',
                updatedDate: '',
                updatedBy: '',
                addressPools: [],
                totalAddressPools: 0,
                availableAddressPools: 0,
                assignedAddressPools: 0,
                networkTemplateUsages: [],
                configurestatic: false
            };
            self.ipRange = {
                id: '',
                startingIpAddress: '',
                endingIpAddress: '',
                totalIPAddresses: 0,
                inUseIPAddresses: 0,
                role: ''
            };
            //other fields from old asm used due to shared nature of this model between networks and discovery
            //resourcetype: '',
            //ipaddresstype: 'single',
            //serverCredentialId: '',
            //chassisCredentialId: '',
            //bladeCredentialId: '',
            //iomCredentialId: '',
            //storageCredentialId: '',
            //vcenterCredentialId: '',
            //scvmmCredentialId: '',
            //emCredentialId: '',
            //torCredentialId: '',
            //deviceGroupId: '',
            //includeServers: false,
            //includeChassis: false,
            //includeStorage: false,
            //includeVCenter: false,
            //includeSCVMM: false,
            //includeHypervisor: false,
            //includeTOR: false,
            //managedstate: 'managed',
            //serverPoolId: '',
            if ($scope.modal.params.type) {
                self.typeId = $scope.modal.params.type;
            }
            else {
                self.typeId = '';
            }
            if ($scope.modal.params.calledFromDiscoverWizard) {
                self.calledFromDiscoverWizard = $scope.modal.params.calledFromDiscoverWizard;
                self.typeId = 'HARDWARE_MANAGEMENT';
            }
            //testing
            //self.typeId = 'HARDWARE_MANAGEMENT';
            //self.typeId = 'HYPERVISOR_MANAGEMENT';
            if ($scope.modal.params.mgmtonly) {
                self.networktypelocked = true;
            }
            else {
                self.networktypelocked = false;
            }
            //testing
            //self.networktypelocked = true;
            self.submitForm = false;
            self.activate();
        }
        EditNetworkModalController.prototype.activate = function () {
            var self = this;
            self.loadNetworkTypes();
            self.setSelectedNetworkType();
            //console.log('activate, before get, self.network:');
            //console.log(self.network);
            if (self.selectedNetworkId) {
                self.editMode = 'edit';
                self.$http.post(self.Commands.data.networking.networks.getNetworkById, { 'id': self.selectedNetworkId })
                    .then(function (data) {
                    self.network = data.data.responseObj;
                    //console.log('activate, after get, self.network:');
                    //console.log(self.network);
                    //this must be called here so that it runs upon return from this call
                    self.setSelectedNetworkType();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                });
            }
            else {
                self.editMode = 'create';
            }
        };
        EditNetworkModalController.prototype.loadNetworkTypes = function () {
            var self = this;
            self.$http.post(self.Commands.data.networking.networks.getNetworkTypes, { 'scaleup': self.isScaleUp })
                .then(function (data) {
                self.networkTypes = data.data.responseObj;
                //this must be called here so that it runs upon return from this call
                self.setSelectedNetworkType();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        EditNetworkModalController.prototype.setSelectedNetworkType = function () {
            var self = this;
            if (self.networkTypes.length == 0)
                return;
            if (!self.network.typeid && self.typeId)
                self.network.typeid = self.typeId;
            var networkType = _.find(self.networkTypes, { id: self.network.typeid });
            if (networkType) {
                if (networkType.disableStaticOrDHCP == true) {
                    self.network.staticordhcp = 'DHCP';
                    self.network.configurestatic = false;
                }
                if (networkType.id == 'HARDWARE_MANAGEMENT') {
                    self.network.configurestatic = true;
                    self.network.vlanid = null;
                }
                if (networkType.id == 'HYPERVISOR_MANAGEMENT' || networkType.id == 'SCALEIO_MANAGEMENT' || networkType.id == 'SCALEIO_DATA' || networkType.id == 'SCALEIO_DATA_SDC' || networkType.id == 'SCALEIO_DATA_SDS') {
                    self.network.configurestatic = true;
                }
            }
            self.selectedNetworkType = networkType;
            //this must be called here so that it runs at the end of this call
            self.setConfigureStatic(self.network.configurestatic);
            //TODO:  JB NOT YET COMPLETE
            //added to html:  ; editNetwork.form._submitted = false;
            //on network type change, reset the form
            //self.$scope.form.editNetwork.form._submitted = false;
            //self.$scope.editNetwork.form.$setPristine();
            //self.$scope.editNetwork.form.$setUntouched();
            //$( "#edit_network_form" ).toggleClass( 'has-error', false );
        };
        EditNetworkModalController.prototype.setConfigureStatic = function (newVal) {
            var self = this;
            if (newVal == undefined)
                return;
            var form = self.network;
            if (newVal == false) {
                form.staticordhcp = 'DHCP';
                form.subnet = null;
                form.gateway = null;
                form.primarydns = null;
                form.secondarydns = null;
                form.dnssuffix = null;
                form.ipaddressranges = [];
            }
            else {
                form.staticordhcp = 'Static';
            }
        };
        EditNetworkModalController.prototype.disableStatic = function (networkType) {
            var result = (networkType == 'HYPERVISOR_MANAGEMENT' || networkType == 'SCALEIO_MANAGEMENT' || networkType == 'SCALEIO_DATA' || networkType == 'SCALEIO_DATA_SDC' || networkType == 'SCALEIO_DATA_SDS');
            return result;
        };
        EditNetworkModalController.prototype.doSave = function (formHasErrors) {
            var self = this;
            if (formHasErrors) {
                self.submitForm = true;
                return;
            }
            //if (self.network.type == null) {
            //    self.network.type = angular.copy(self.selectedNetworkType);
            //}
            var validIPrange = true;
            angular.forEach(self.network.ipaddressranges, function (ipRange) {
                if (ipRange.startingIpAddress && ipRange.endingIpAddress) {
                    var ipaddress1 = self.$filter('ip2long')(ipRange.startingIpAddress);
                    var ipaddress2 = self.$filter('ip2long')(ipRange.endingIpAddress);
                    if (ipaddress1 > ipaddress2) {
                        validIPrange = false;
                    }
                }
            });
            if (!validIPrange) {
                //note that this is asynchronous
                var confirm = self.MessageBox((self.$translate.instant('GENERIC_Alert')), (self.$translate.instant('NETWORKS_Edit_AlertSaveIPCheck')));
            }
            if (validIPrange) {
                var myScope = this.$scope;
                var deferred = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                //self.Loading( deferred.promise );
                //self.$http.post( self.Commands.data.networking.networks.saveNetwork, { requestObj: self.network })
                //console.log('doSave, before save, self.network:');
                //console.log(JSON.stringify(self.network));
                self.$http.post(self.Commands.data.networking.networks.saveNetwork, self.network)
                    .then(function (data) {
                    self.objectId = data.data.responseObj.id;
                    //console.log('doSave, after save, self.network:');
                    //console.log(JSON.stringify(data.data.responseObj));
                    deferred.resolve();
                    myScope.modal.close(data.data.responseObj.id);
                }).catch(function (data) {
                    deferred.resolve();
                    //error is in data
                    self.GlobalServices.DisplayError(data.data, self.errors);
                });
            }
        };
        EditNetworkModalController.prototype.iprange_add = function () {
            var self = this;
            var x = angular.copy(self.ipRange);
            //x.id = self.GlobalServices.NewGuid()
            self.network.ipaddressranges.push(x);
        };
        EditNetworkModalController.prototype.iprange_remove = function (range) {
            var self = this;
            var index = self.network.ipaddressranges.indexOf(range);
            self.network.ipaddressranges.splice(index, 1);
        };
        EditNetworkModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditNetworkModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog',
            'Commands', 'GlobalServices', '$filter', 'Messagebox', 'constants'];
        return EditNetworkModalController;
    }());
    asm.EditNetworkModalController = EditNetworkModalController;
    angular
        .module('app')
        .controller('EditNetworkModalController', EditNetworkModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editNetworkModal.js.map
var asm;
(function (asm) {
    var AddLicenseModalController = (function () {
        function AddLicenseModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $rootScope, FileUploader) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.FileUploader = FileUploader;
            this.settings = {};
            this.countries = new Array();
            this.licenseFile = {};
            this.setupData = {};
            this.license = {};
            this.fileIsUploaded = false;
            this.errors = [];
            var self = this;
            self.initialize();
            //Wrap in a timeout to give screen time to render.  ////TODO: Replace with $onInit or similar.
            self.$timeout(function () {
                document.getElementById('idLocationFileUpload').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    self.licenseFile = element.files[0];
                    //self.setupData.licenseData.licensefile = element.value;
                    self.$timeout(function () { self.verifyLicense(self.licenseFile); }, 10); //Wrap in a timeout to trigger a digest cycle.
                };
            }, 500);
            self.uploader = self.$scope.uploader = new FileUploader({
                url: self.Commands.data.applianceManagement.verifylicense
            });
        }
        //help url: ASM.urlConfig.help.LicenseManagement
        AddLicenseModalController.prototype.initialize = function () {
            var self = this;
            self.setupData = self.$scope.modal.params.license;
        };
        AddLicenseModalController.prototype.verifyLicense = function (file) {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            //using angular uploader
            self.$scope.uploader.formData = [];
            self.$scope.uploader.formData.push(file);
            //set error and success callbacks 
            angular.extend(self.uploader, {
                onErrorItem: function (fileItem, response, status, headers) {
                    self.GlobalServices.DisplayError(response.errorObj, self.errors);
                    d.reject();
                },
                onCompleteAll: function (criteriaObj, errorObj, responseObj, responseCode) {
                    d.resolve();
                },
                onBeforeUploadItem: function (item) {
                    item.formData = angular.copy(item.uploader.formData);
                },
                onSuccessItem: function (item, response, status, headers) {
                    if (response.errorObj) {
                        self.GlobalServices.DisplayError(response.errorObj, self.errors);
                    }
                    else {
                        self.setupData = response.responseObj;
                        self.fileIsUploaded = true;
                        console.log(response.responseObj);
                    }
                }
            });
            self.uploader.uploadAll();
            return d.promise;
        };
        //verifyLicense() {
        //    var self: AddLicenseModalController = this;
        //    var d = self.$q.defer();
        //    self.GlobalServices.ClearErrors(self.errors);
        //    self.Loading(d.promise);
        //    self.$http.post(self.Commands.data.applianceManagement.verifylicense, self.setupData.licenseData)
        //        .then((data: any) => {
        //            self.setupData.licenseData = data.data.responseObj;
        //            self.fileIsUploaded = true;
        //        })
        //        .catch(response => {
        //            self.fileIsUploaded = false;
        //            self.GlobalServices.DisplayError(response.data, self.errors);
        //        })
        //        .finally(() => d.resolve());
        //}
        AddLicenseModalController.prototype.updateLicense = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.initialSetup.updateLicenseData, self.setupData)
                .then(function () {
                d.resolve();
                self.close();
            }).catch(function (response) {
                d.resolve();
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
            return d;
        };
        AddLicenseModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddLicenseModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddLicenseModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q',
            '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices',
            '$rootScope', 'FileUploader'];
        return AddLicenseModalController;
    }());
    asm.AddLicenseModalController = AddLicenseModalController;
    angular
        .module('app')
        .controller('AddLicenseModalController', AddLicenseModalController);
})(asm || (asm = {}));
//# sourceMappingURL=addLicense.js.map
var asm;
(function (asm) {
    var ApplianceUpgradeSettingsModalController = (function () {
        function ApplianceUpgradeSettingsModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.applianceUpdateInfo = {};
            this.errors = [];
            this.disabled = false;
            var self = this;
            self.initialize();
        }
        ApplianceUpgradeSettingsModalController.prototype.initialize = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.applianceUpdateInfo = self.$scope.modal.params.applianceUpdateInfo;
            self.Loading(d.promise);
            self.getGettingStarted()
                .then(function (data) {
                self.disabled = !data.data.responseObj.secureRemoteServicesConfigured;
                if (!self.disabled) {
                    if (!self.applianceUpdateInfo.source) {
                        self.applianceUpdateInfo.source = "remoteservice";
                    }
                }
                else {
                    self.applianceUpdateInfo.source = "local";
                }
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ApplianceUpgradeSettingsModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.saveApplianceUpdate(self.applianceUpdateInfo)
                .then(function (response) {
                self.close();
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data, self.errors); })
                .finally(function () { return d.resolve(); });
        };
        ApplianceUpgradeSettingsModalController.prototype.saveApplianceUpdate = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.setApplianceUpgrade, update);
        };
        ApplianceUpgradeSettingsModalController.prototype.getGettingStarted = function () {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.gettingStarted, null);
        };
        ApplianceUpgradeSettingsModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ApplianceUpgradeSettingsModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        ApplianceUpgradeSettingsModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ApplianceUpgradeSettingsModalController;
    }());
    asm.ApplianceUpgradeSettingsModalController = ApplianceUpgradeSettingsModalController;
    angular
        .module('app')
        .controller('ApplianceUpgradeSettingsModalController', ApplianceUpgradeSettingsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=applianceUpgradeSettingsModal.js.map
var asm;
(function (asm) {
    var ConfigureServersForAlertConnectorController = (function () {
        function ConfigureServersForAlertConnectorController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.initialize();
        }
        ConfigureServersForAlertConnectorController.prototype.initialize = function () {
            var self = this;
        };
        ConfigureServersForAlertConnectorController.prototype.ok = function () {
            var self = this;
            self.close();
        };
        ConfigureServersForAlertConnectorController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ConfigureServersForAlertConnectorController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        ConfigureServersForAlertConnectorController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ConfigureServersForAlertConnectorController;
    }());
    asm.ConfigureServersForAlertConnectorController = ConfigureServersForAlertConnectorController;
    angular
        .module('app')
        .controller('ConfigureServersForAlertConnectorController', ConfigureServersForAlertConnectorController);
})(asm || (asm = {}));
//# sourceMappingURL=configureServersForAlertConnector.js.map
var asm;
(function (asm) {
    var DeregisterWarningController = (function () {
        function DeregisterWarningController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = [];
            var self = this;
            self.connectionType = self.$scope.modal.params.connectionType;
            self.initialize();
        }
        DeregisterWarningController.prototype.initialize = function () {
            var self = this;
        };
        DeregisterWarningController.prototype.deregister = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors();
            self.Loading(d.promise);
            self.deregisterVxRack()
                .then(function (data) {
                self.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            })
                .finally(function () { return d.resolve(); });
        };
        DeregisterWarningController.prototype.deregisterVxRack = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.deregisterVxRack, { connectionType: self.connectionType });
        };
        DeregisterWarningController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DeregisterWarningController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        DeregisterWarningController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return DeregisterWarningController;
    }());
    asm.DeregisterWarningController = DeregisterWarningController;
    angular
        .module('app')
        .controller('DeregisterWarningController', DeregisterWarningController);
})(asm || (asm = {}));
//# sourceMappingURL=deregisterWarning.js.map
var asm;
(function (asm) {
    var EditDhcpSettingsModalController = (function () {
        function EditDhcpSettingsModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.settings = {};
            this.ranges = {
                days: 31,
                hours: 24,
                minutes: 60,
                seconds: 60
            };
            this.errors = [];
            var self = this;
            self.initialize();
        }
        EditDhcpSettingsModalController.prototype.initialize = function () {
            var self = this;
            self.settings = self.$scope.modal.params.settings;
        };
        EditDhcpSettingsModalController.prototype.testProxy = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.setProxyTest(self.settings)
                .then(function (response) {
                //test successful
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data, self.errors); })
                .finally(function () { return d.resolve(); });
        };
        EditDhcpSettingsModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.saveApplianceUpdate(self.settings)
                .then(function (response) {
                self.close();
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data, self.errors); })
                .finally(function () { return d.resolve(); });
        };
        EditDhcpSettingsModalController.prototype.saveApplianceUpdate = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.submitDhcpSettingsForm, update);
        };
        EditDhcpSettingsModalController.prototype.setProxyTest = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.testProxy, update);
        };
        EditDhcpSettingsModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditDhcpSettingsModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditDhcpSettingsModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return EditDhcpSettingsModalController;
    }());
    asm.EditDhcpSettingsModalController = EditDhcpSettingsModalController;
    angular
        .module('app')
        .controller('EditDhcpSettingsModalController', EditDhcpSettingsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=dhcp.js.map
var asm;
(function (asm) {
    var DownloadCertModalController = (function () {
        function DownloadCertModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.cert = {};
            this.countries = new Array();
            this.showLink = false;
            var self = this;
            self.initialize();
        }
        DownloadCertModalController.prototype.initialize = function () {
            var self = this;
            self.$http.post('appliance/getappliancecertificateinfo', null)
                .then(function (response) {
                self.cert = response.data.responseObj;
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        DownloadCertModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DownloadCertModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        DownloadCertModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return DownloadCertModalController;
    }());
    asm.DownloadCertModalController = DownloadCertModalController;
    angular
        .module('app')
        .controller('DownloadCertModalController', DownloadCertModalController);
})(asm || (asm = {}));
//# sourceMappingURL=downloadCert.js.map
var asm;
(function (asm) {
    var EditIpVerificationController = (function () {
        function EditIpVerificationController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = [];
            var self = this;
            self.initialize();
        }
        EditIpVerificationController.prototype.initialize = function () {
            var self = this;
            self.ipVerificationPorts = angular.copy(self.$scope.modal.params.ipVerificationPorts);
        };
        EditIpVerificationController.prototype.save = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.setIpVerification(self.ipVerificationPorts)
                .then(function () {
                self.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        EditIpVerificationController.prototype.setIpVerification = function (ipVerificationPorts) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.updateIpVerifyPorts, { ipVerificationPorts: ipVerificationPorts });
        };
        EditIpVerificationController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditIpVerificationController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditIpVerificationController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return EditIpVerificationController;
    }());
    asm.EditIpVerificationController = EditIpVerificationController;
    angular
        .module('app')
        .controller('EditIpVerificationController', EditIpVerificationController);
})(asm || (asm = {}));
//# sourceMappingURL=editIpVerification.js.map
var asm;
(function (asm) {
    var EditRepoPathModalController = (function () {
        function EditRepoPathModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.applianceUpdateInfo = {};
            this.errors = [];
            var self = this;
            self.initialize();
        }
        //help url: ASM.urlConfig.help.UpdateRepositoryPath
        EditRepoPathModalController.prototype.initialize = function () {
            var self = this;
            self.applianceUpdateInfo = self.$scope.modal.params.applianceUpdateInfo;
        };
        EditRepoPathModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.saveApplianceUpdate(self.applianceUpdateInfo).then(function (response) {
                d.resolve();
                self.close();
            }).catch(function (response) { self.GlobalServices.DisplayError(response.data, self.errors); });
        };
        EditRepoPathModalController.prototype.saveApplianceUpdate = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.setApplianceUpdate, { requestObj: update });
        };
        EditRepoPathModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditRepoPathModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditRepoPathModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return EditRepoPathModalController;
    }());
    asm.EditRepoPathModalController = EditRepoPathModalController;
    angular
        .module('app')
        .controller('EditRepoPathModalController', EditRepoPathModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editRepoPath.js.map
var asm;
(function (asm) {
    var EditServiceTagController = (function () {
        function EditServiceTagController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $rootScope) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.serviceTag = '';
            this.errors = [];
            var self = this;
            self.initialize();
        }
        EditServiceTagController.prototype.initialize = function () {
            var self = this;
            self.serviceTag = self.$scope.modal.params.serviceTag ? self.$scope.modal.params.serviceTag : '';
        };
        EditServiceTagController.prototype.updateServiceTag = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.applianceManagement.updateServiceTag, self.serviceTag)
                .then(function () {
                self.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
            return d;
        };
        EditServiceTagController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditServiceTagController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditServiceTagController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope'];
        return EditServiceTagController;
    }());
    asm.EditServiceTagController = EditServiceTagController;
    angular
        .module('app')
        .controller('EditServiceTagController', EditServiceTagController);
})(asm || (asm = {}));
//# sourceMappingURL=editServiceTag.js.map
var asm;
(function (asm) {
    var GenerateCertModalController = (function () {
        function GenerateCertModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.settings = {};
            this.countries = new Array();
            this.showLink = false;
            this.errors = [];
            var self = this;
            self.initialize();
        }
        GenerateCertModalController.prototype.initialize = function () {
            var self = this;
            self.settings = self.$scope.modal.params.settings;
            self.getCountries().then(function (response) {
                self.countries = response.data.responseObj;
                self.countries.unshift({ name: self.$translate.instant('SETTINGS_SelectaCountry'), id: null });
            });
        };
        GenerateCertModalController.prototype.save = function () {
            var self = this;
            self.Dialog(self.$translate.instant("GENERIC_Success"), self.$translate.instant("SETTINGS_Certificate_ConfirmationDialog"))
                .then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.saveCert(self.settings)
                    .then(function (response) {
                    self.close();
                    self.$timeout(function () { return self.downloadCert(); }, 1000);
                })
                    .catch(function (error) {
                    self.GlobalServices.DisplayError(error.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            })
                .catch(function () {
                self.close();
            });
        };
        GenerateCertModalController.prototype.saveCert = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.submitCertificateSigReqForm, { requestObj: update });
        };
        GenerateCertModalController.prototype.getCountries = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getAvailableCountries, {});
        };
        GenerateCertModalController.prototype.downloadCert = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_CertSignRequest'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/downloadcertmodal.html',
                controller: 'DownloadCertModalController as downloadCertModalController',
                params: {
                    certInfo: angular.copy(self.settings)
                },
                onComplete: function () {
                }
            });
            modal.modal.show();
        };
        GenerateCertModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        GenerateCertModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        GenerateCertModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return GenerateCertModalController;
    }());
    asm.GenerateCertModalController = GenerateCertModalController;
    angular
        .module('app')
        .controller('GenerateCertModalController', GenerateCertModalController);
})(asm || (asm = {}));
//# sourceMappingURL=generateCertificate.js.map
var asm;
(function (asm) {
    var UpdateApplianceModalController = (function () {
        function UpdateApplianceModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.settings = {};
            this.errors = [];
            var self = this;
            self.initialize();
        }
        //help url: ASM.urlConfig.help.EditingProxySettings
        UpdateApplianceModalController.prototype.initialize = function () {
            var self = this;
            self.settings = self.$scope.modal.params.settings;
        };
        UpdateApplianceModalController.prototype.testProxy = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.setProxyTest(self.settings).then(function (response) {
                //test successful
                d.resolve();
            }).catch(function (response) { self.GlobalServices.DisplayError(response.data, self.errors); });
        };
        UpdateApplianceModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.saveApplianceUpdate(self.settings)
                .then(function (response) {
                self.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        UpdateApplianceModalController.prototype.saveApplianceUpdate = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.submitDhcpSettingsForm, update);
        };
        UpdateApplianceModalController.prototype.setProxyTest = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.testProxy, update);
        };
        UpdateApplianceModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        UpdateApplianceModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UpdateApplianceModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return UpdateApplianceModalController;
    }());
    asm.UpdateApplianceModalController = UpdateApplianceModalController;
    angular
        .module('app')
        .controller('UpdateApplianceModalController', UpdateApplianceModalController);
})(asm || (asm = {}));
//# sourceMappingURL=genericController.js.map
var asm;
(function (asm) {
    var EditProxySettingsModalController = (function () {
        function EditProxySettingsModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.settings = {};
            this.errors = [];
            var self = this;
            self.initialize();
        }
        //help url: ASM.urlConfig.help.EditingProxySettings
        EditProxySettingsModalController.prototype.initialize = function () {
            var self = this;
            self.settings = self.$scope.modal.params.httpProxySettings;
        };
        EditProxySettingsModalController.prototype.testProxy = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.setProxyTest(self.settings)
                .then(function (response) {
                //test successful
                self.Dialog(self.$translate.instant('GENERIC_Success'), self.$translate.instant('SETTINGS_TestSuccessful'), true);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        EditProxySettingsModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.saveApplianceUpdate(self.settings).then(function (response) {
                d.resolve();
                self.close();
            }).catch(function (response) { d.resolve(); self.GlobalServices.DisplayError(response.data, self.errors); });
        };
        EditProxySettingsModalController.prototype.saveApplianceUpdate = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.submitProxyInfoForm, update);
        };
        EditProxySettingsModalController.prototype.setProxyTest = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.testProxy, update);
        };
        EditProxySettingsModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditProxySettingsModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        EditProxySettingsModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return EditProxySettingsModalController;
    }());
    asm.EditProxySettingsModalController = EditProxySettingsModalController;
    angular
        .module('app')
        .controller('EditProxySettingsModalController', EditProxySettingsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=proxySettings.js.map
var asm;
(function (asm) {
    var UploadCertificateConfirmModalController = (function () {
        function UploadCertificateConfirmModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = [];
            var self = this;
            self.initialize();
        }
        UploadCertificateConfirmModalController.prototype.initialize = function () {
            var self = this, d = self.$q.defer(), bullets = {};
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.getJobList()
                    .then(function (data) {
                    angular.merge(bullets, {
                        numProgressJobs: _.filter(data.data.responseObj, { status: "running" }).length,
                        numScheduledJobs: _.filter(data.data.responseObj, { status: "scheduled" }).length
                    });
                }),
                self.getCurrentUsersAndJobs()
                    .then(function (data) {
                    angular.merge(bullets, {
                        numUsers: data.data.responseObj.currentusers,
                    });
                })
            ])
                .then(function () {
                //passing bullets as a parameter to $translate to interpolate values into translation
                self.message = self.$translate.instant("UPDATE_VIRTUAL_APPLIANCE_Description", bullets);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        UploadCertificateConfirmModalController.prototype.getJobList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.jobs.getJobList, null);
        };
        UploadCertificateConfirmModalController.prototype.getCurrentUsersAndJobs = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getCurrentUsersAndJobs, null);
        };
        UploadCertificateConfirmModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        UploadCertificateConfirmModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UploadCertificateConfirmModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return UploadCertificateConfirmModalController;
    }());
    asm.UploadCertificateConfirmModalController = UploadCertificateConfirmModalController;
    angular
        .module('app')
        .controller('UploadCertificateConfirmModalController', UploadCertificateConfirmModalController);
})(asm || (asm = {}));
//# sourceMappingURL=sslConfirmModal.js.map
var asm;
(function (asm) {
    var UploadCertificateModalController = (function () {
        function UploadCertificateModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $rootScope, FileUploader, $window) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.FileUploader = FileUploader;
            this.$window = $window;
            this.errors = new Array();
            var self = this;
            self.initialize();
        }
        UploadCertificateModalController.prototype.initialize = function () {
            var self = this;
            self.$scope.uploader = self.newUploader();
            //Wrap in a timeout to give screen time to render.  ////TODO: Replace with $onInit or similar.
            self.$timeout(function () {
                document.getElementById('idLocationFileUpload').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    var file = element.files[0];
                    self.file = element.value;
                    self.$timeout(function () { self.uploadCert(); }, 10); //Wrap in a timeout to trigger a digest cycle.
                };
            }, 500);
        };
        UploadCertificateModalController.prototype.newUploader = function () {
            var self = this;
            return new self.FileUploader({
                url: self.Commands.data.applianceManagement.uploadCertificate,
                removeAfterUpload: true
            });
        };
        UploadCertificateModalController.prototype.uploadCert = function () {
            var self = this;
            //    fd = new FormData(),
            //    //uploader = self.$scope.uploader = self.newUploader(),
            //    d = self.$q.defer();
            //self.GlobalServices.ClearErrors(self.errors);
            //self.Loading(d.promise);
            //fd.append('file', self.file);
            //self.save(fd)
            //    .catch(response => { self.GlobalServices.DisplayError(response.data, self.errors) })
            //    .finally(() => d.resolve());
            self.$scope.uploader.formData = [];
            //set error and success callbacks 
            var error = false;
            angular.extend(self.$scope.uploader, {
                onErrorItem: function (fileItem, response, status, headers) {
                    fileItem.isUploaded = false;
                    error = true;
                    self.GlobalServices.DisplayError(response.data, self.errors);
                    d.resolve();
                },
                onCompleteAll: function (criteriaObj, errorObj, responseObj, responseCode) {
                    //if (!error) {
                    //    deferred.resolve();
                    //}
                },
                onBeforeUploadItem: function (item) {
                    item.formData = angular.copy(item.uploader.formData);
                },
                onSuccessItem: function (item, response, status, headers) {
                    if (response.responseCode != 0) {
                        d.resolve();
                        //item.isUploaded = false;
                        error = true;
                        self.GlobalServices.DisplayError(response.errorObj, self.errors);
                    }
                    else {
                        d.resolve();
                        self.cert = response.responseObj;
                    }
                }
            });
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$scope.uploader.uploadAll();
        };
        UploadCertificateModalController.prototype.saveUpdates = function () {
            var self = this, d = self.$q.defer();
            var modal = self.Modal({
                title: self.$translate.instant('GENERIC_Warning'),
                modalSize: 'modal-md',
                templateUrl: 'views/settings/virtualappliancemanagement/licensingconfirmmodal.html',
                controller: 'UploadCertificateConfirmModalController as uploadCertificateConfirmModalController',
                params: {},
                onComplete: function () {
                    self.Loading(d.promise);
                    self.uploadCertificateConfirmation()
                        .then(function () {
                        self.close();
                        self.$timeout(function () { self.$window.location.href = "status.html#/status"; }, 500);
                    })
                        .catch(function (error) {
                        self.GlobalServices.DisplayError(error.errorObj, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
            });
            modal.modal.show();
        };
        UploadCertificateModalController.prototype.uploadCertificateConfirmation = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.uploadCertificateConfirmation, self.cert);
        };
        //save(form) {
        //    var self: UploadCertificateModalController = this,
        //        config: any = {
        //            directPost: true,
        //            headers: { 'Content-Type': undefined },
        //            transformRequest: angular.identity
        //        };
        //    return self.$http.post(self.Commands.data.applianceManagement.uploadCertificate, form, config);
        //}
        UploadCertificateModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        UploadCertificateModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UploadCertificateModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope', 'FileUploader', '$window'];
        return UploadCertificateModalController;
    }());
    asm.UploadCertificateModalController = UploadCertificateModalController;
    angular
        .module('app')
        .controller('UploadCertificateModalController', UploadCertificateModalController);
})(asm || (asm = {}));
//# sourceMappingURL=uploadCertificate.js.map
var asm;
(function (asm) {
    var VxRackFlexAlertConnectorComponentController = (function () {
        function VxRackFlexAlertConnectorComponentController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.ranges = {
                days: 31,
                hours: 24,
                minutes: 60,
                seconds: 60
            };
            this.alertFilterOptions = [];
            this.hours = [];
            this.deviceTypeOptions = [];
            this.connectionTypeOptions = [];
            var self = this;
            self.initialize();
        }
        VxRackFlexAlertConnectorComponentController.prototype.initialize = function () {
            var self = this;
            self.alertFilterOptions = [
                { id: "Critical", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Critical") },
                { id: "Warning", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Warning") },
                { id: "Info", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_Info") }
            ];
            //create options array for hours
            _.times(24, function (n) { return self.hours.push(n); });
            self.connectionTypeOptions = [
                { id: "srs", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_ConnectionType_SRS") },
                { id: "phonehome", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_ConnectionType_PhoneHome") }
            ];
            self.deviceTypeOptions = [
                { id: "vxrackflex", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_VxRackFlex") },
                { id: "vxflexappliance", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_VxFlexAppliance") }
            ];
            //self.settings.connectionType = self.connectionType;
            self.setDeviceType();
            //hardcode the below fields since the user can't change them for now.
            //May need to remove these hard coded values when these values can be updated by the user in the future.
            self.settings.srsGatewayHostPort = 9443;
            self.editMode = self.settings.state !== "None";
        };
        VxRackFlexAlertConnectorComponentController.prototype.setDeviceType = function () {
            var self = this;
            self.settings.deviceType = self.settings.connectionType == "srs" ? "vxrackflex" : "vxflexappliance";
        };
        VxRackFlexAlertConnectorComponentController.prototype.getAlertMinutes = function (hours) {
            //return an array of only valid values to enforce minimum number of time allowed for polling
            var self = this;
            var minimumMinutes = 0;
            if (hours == 0) {
                minimumMinutes = 5;
                if (self.settings.alertPollingIntervalMinutes < minimumMinutes) {
                    self.settings.alertPollingIntervalMinutes = minimumMinutes;
                }
            }
            //create new array with a size of 60 - excluded values, push numbers into it
            return _.map(new Array(60 - minimumMinutes), function (n, index) { return (index + minimumMinutes); });
        };
        VxRackFlexAlertConnectorComponentController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return VxRackFlexAlertConnectorComponentController;
    }());
    asm.VxRackFlexAlertConnectorComponentController = VxRackFlexAlertConnectorComponentController;
    angular.module('app')
        .component('vxRackFlexAlertConnectorComponent', {
        templateUrl: 'views/settings/virtualappliancemanagement/vxrackflexalertconnectorcomponent.html',
        controller: VxRackFlexAlertConnectorComponentController,
        controllerAs: 'vxRackFlexAlertConnectorComponentController',
        bindings: {
            settings: "=",
            errors: "=?",
            form: "=?",
            submitted: "<?",
            readOnly: "<?",
            disabled: "<?",
            connectionType: "=",
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=vxRackFlexAlertConnectorComponent.js.map
var asm;
(function (asm) {
    var VxRackFlexAlertConnectorModalController = (function () {
        function VxRackFlexAlertConnectorModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = [];
            this.formSubmitted = false;
            this.connectionTypeOptions = [];
            var self = this;
            self.settings = self.$scope.modal.params.settings;
            self.initialize();
        }
        VxRackFlexAlertConnectorModalController.prototype.initialize = function () {
            var self = this;
            self.connectionTypeOptions = [
                { id: "srs", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_ConnectionType_SRS") },
                { id: "phonehome", name: self.$translate.instant("SETTINGS_VirtualApplianceManagement_ConnectionType_PhoneHome") }
            ];
            self.connectionType = self.settings.connectionType;
        };
        VxRackFlexAlertConnectorModalController.prototype.save = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.applianceManagement.setVxRackSettingsRegister, self.settings)
                .then(function (data) {
                self.close();
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data, self.errors); })
                .finally(function () { return d.resolve(); });
        };
        VxRackFlexAlertConnectorModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        VxRackFlexAlertConnectorModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        VxRackFlexAlertConnectorModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return VxRackFlexAlertConnectorModalController;
    }());
    asm.VxRackFlexAlertConnectorModalController = VxRackFlexAlertConnectorModalController;
    angular
        .module('app')
        .controller('VxRackFlexAlertConnectorModalController', VxRackFlexAlertConnectorModalController);
})(asm || (asm = {}));
//# sourceMappingURL=vxRackFlexAlertConnectorModal.js.map
var asm;
(function (asm) {
    /*
    View-
    Parameters: Bundle, type

    Edit-
    Parameters: Bundle, repo, type

    Create-
    Parameters: Repo, type
    */
    var AddEditViewBundleModalController = (function () {
        function AddEditViewBundleModalController(modal, $http, $timeout, $scope, $q, $translate, loading, dialog, Commands, GlobalServices, constants, FileUploader) {
            this.modal = modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.dialog = dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.FileUploader = FileUploader;
            this.bundle = {};
            this.errors = new Array();
            var self = this;
            self.initialize();
            var uploader = $scope.uploader = new FileUploader({
                url: self.Commands.data.firmwarepackages.saveFirmwareBundle,
            });
            self.$timeout(function () {
                document.getElementById('firmwarepackagefile').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    self.$timeout(function () { self.file = element.files[0]; }, 10); //Wrap in a timeout to trigger a digest cycle.
                };
            }, 500);
        }
        AddEditViewBundleModalController.prototype.initialize = function () {
            var self = this;
            self.repo = self.$scope.modal.params.repo;
            self.type = self.$scope.modal.params.type;
            if (self.$scope.modal.params.bundle && self.$scope.modal.params.bundle.firmwarecomponents) {
                delete self.$scope.modal.params.bundle.firmwarecomponents[0].id;
                self.bundle = angular.extend({}, self.bundle, self.$scope.modal.params.bundle, self.$scope.modal.params.bundle.firmwarecomponents[0], { bundleId: self.$scope.modal.params.bundle.id });
            }
            angular.extend(self.bundle, {
                packageId: self.repo.id
            });
            //send in repo
            self.getBundleDevices()
                .then(function (response) {
                self.bundleDevices = angular.copy(response.data.responseObj);
                if (self.type !== 'view') {
                    self.bundleDeviceChanged(true);
                }
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        AddEditViewBundleModalController.prototype.bundleDeviceChanged = function (preventClearOfDeviceModel) {
            var self = this;
            if (!preventClearOfDeviceModel) {
                self.bundle.deviceModel = undefined;
            }
            var match = _.find(self.bundleDevices, { id: self.bundle.deviceType });
            self.bundleChildrenOptions = angular.isDefined(match) ? angular.copy(match.children) : [];
        };
        AddEditViewBundleModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            if (self.bundle.deviceType.toLowerCase() === 'storage' || !self.file) {
                //do old fashioned post (not angular-upload) if no file to upload
                self.postFormNoFile(d, self.bundle);
            }
            else {
                //using angular uploader
                self.$scope.uploader.formData = [];
                self.$scope.uploader.formData.push(self.bundle);
                //set error and success callbacks 
                angular.extend(self.$scope.uploader, {
                    onErrorItem: function (fileItem, response, status, headers) {
                        d.resolve();
                        self.GlobalServices.DisplayError(response.data, self.errors);
                    },
                    onCompleteAll: function (fileItem, response, status, headers) {
                        self.close(d);
                    },
                    onBeforeUploadItem: function (item) {
                        item.formData = angular.copy(item.uploader.formData);
                    }
                });
                self.$scope.uploader.uploadAll();
            }
        };
        AddEditViewBundleModalController.prototype.postFormNoFile = function (d, bundle) {
            var self = this;
            var fd = new FormData();
            fd.append('packageId', bundle.packageId);
            //fd.append('bundleId', bundle.bundleId);
            fd.append('bundleId', bundle.bundleId == undefined ? '' : bundle.bundleId);
            fd.append('bundleName', bundle.bundleName);
            fd.append('bundleDescription', bundle.bundleDescription);
            fd.append('deviceType', bundle.deviceType);
            fd.append('deviceModel', bundle.deviceModel);
            fd.append('bundleVersion', bundle.bundleVersion);
            bundle.deviceType.toLowerCase() === 'switch' && fd.append('criticality', bundle.criticality);
            fd.append('file', "");
            self.saveBundle(fd).then(function () {
                self.close(d);
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        AddEditViewBundleModalController.prototype.getBundleDevices = function () {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.getFirmwareBundleDevices, {});
        };
        AddEditViewBundleModalController.prototype.saveBundle = function (form) {
            var self = this;
            var config = {
                directPost: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            };
            return self.$http.post(self.Commands.data.firmwarepackages.saveFirmwareBundle, form, config);
        };
        AddEditViewBundleModalController.prototype.setProxyTest = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.testProxy, update);
        };
        AddEditViewBundleModalController.prototype.close = function (d) {
            var self = this;
            d && d.resolve();
            self.$scope.modal.close();
        };
        AddEditViewBundleModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddEditViewBundleModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants', 'FileUploader'];
        return AddEditViewBundleModalController;
    }());
    asm.AddEditViewBundleModalController = AddEditViewBundleModalController;
    angular
        .module('app')
        .controller('AddEditViewBundleModalController', AddEditViewBundleModalController);
})(asm || (asm = {}));
//# sourceMappingURL=addEditViewBundle.js.map
var asm;
(function (asm) {
    var EditRepoModalController = (function () {
        function EditRepoModalController(modal, $http, $timeout, $scope, $q, $translate, loading, dialog, commands, globalServices, constants, $rootScope) {
            this.modal = modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.dialog = dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.constants = constants;
            this.$rootScope = $rootScope;
            this.errors = [];
            var self = this;
            self.initialize();
        }
        EditRepoModalController.prototype.initialize = function () {
            var self = this;
            self.repo = self.$scope.modal.params.repo;
            self.type = self.$scope.modal.params.type;
        };
        EditRepoModalController.prototype.testConnection = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            //self.testFileRepo(self.repo)
            //    .then((response: any) => {
            //        if (response.data.responseObj === "Success") {
            //            self.dialog(self.$translate.instant('SETTINGS_Repositories_Success'), self.$translate.instant('SETTINGS_Repositories_TestSuccess'), true);
            //        } else {
            //            self.dialog(self.$translate.instant('SETTINGS_Repositories_Failure'), self.$translate.instant('SETTINGS_Repositories_TestFailed'), true);
            //        }
            //    })
            //    .catch(response => { self.globalServices.DisplayError(response.data, self.errors) })
            //    .finally(() => d.resolve());
            self.testFileRepo(self.repo)
                .then(function (data) {
                self.dialog((self.$translate.instant('SETTINGS_Repositories_testconnection_success_title')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('SETTINGS_Repositories_testconnection_success_message')), true);
            })
                .catch(function (data) {
                self.globalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        EditRepoModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            if (self.type === 'sync') {
                self.syncRepo(self.repo)
                    .then(function (response) {
                    self.close();
                })
                    .catch(function (response) {
                    self.globalServices.DisplayError(response.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            }
            else {
                self.saveRepo(self.repo)
                    .then(function (response) {
                    self.close();
                })
                    .catch(function (response) {
                    self.globalServices.DisplayError(response.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            }
        };
        EditRepoModalController.prototype.saveRepo = function (repo) {
            var self = this;
            return self.$http.post(self.commands.data.repository.saveRepository, repo);
        };
        EditRepoModalController.prototype.testFileRepo = function (repo) {
            var self = this;
            return self.$http.post(self.commands.data.repository.testFileRepository, repo);
        };
        EditRepoModalController.prototype.syncRepo = function (repo) {
            var self = this;
            return self.$http.post(self.commands.data.repository.syncRepository, repo);
        };
        EditRepoModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditRepoModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        EditRepoModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants', '$rootScope'];
        return EditRepoModalController;
    }());
    asm.EditRepoModalController = EditRepoModalController;
    angular
        .module('app')
        .controller('EditRepoModalController', EditRepoModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editRepoModal.js.map
var asm;
(function (asm) {
    var ViewBundleDetailsController = (function () {
        function ViewBundleDetailsController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, $rootScope) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.viewModel = {};
            var self = this;
            this.viewData = {
                firmwarePackageId: '',
                firmwareBundleId: '',
                displayedData: {},
                viewType: ''
            };
            this.viewData.firmwarePackageId = $scope.modal.params.firmwarePackageId;
            this.viewData.firmwareBundleId = $scope.modal.params.firmwareBundleId;
            this.viewData.viewType = $scope.modal.params.viewType;
            self.refresh();
        }
        ViewBundleDetailsController.prototype.activate = function () {
        };
        ViewBundleDetailsController.prototype.refresh = function () {
            var self = this;
            var deferred = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(deferred.promise);
            //{ "requestObj":{ "firmwarePackageId":"a4685379-4124-4264-8cb7-79643b496b92", "firmwareBundleId":"a13d9cf6-9fe0-420b-a230-13d8c8a43176" } }
            var postData = {
                'firmwarePackageId': self.viewData.firmwarePackageId,
                'firmwareBundleId': self.viewData.firmwareBundleId
            };
            self.$http.post(self.Commands.data.firmwarepackages.getFirmwareBundleById, { requestObj: postData }).then(function (data) {
                self.viewModel = data.data.responseObj;
                self.viewData.displayedData = [].concat(self.viewModel);
                //self.viewData.displayedData = data.data.responseObj;
                deferred.resolve();
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //data object is always empty
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        ViewBundleDetailsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ViewBundleDetailsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope'];
        return ViewBundleDetailsController;
    }());
    asm.ViewBundleDetailsController = ViewBundleDetailsController;
    angular
        .module('app')
        .controller('ViewBundleDetailsController', ViewBundleDetailsController);
})(asm || (asm = {}));
//# sourceMappingURL=viewBundleDetails.js.map
var asm;
(function (asm) {
    var ViewBundlesController = (function () {
        function ViewBundlesController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, $rootScope) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.viewModel = {};
            var self = this;
            this.viewData = {
                firmwarePackageId: '',
                displayedData: {},
                selectedPackageBundle: '',
                selectedCustomBundle: '',
                viewBundles: 'firmware'
            };
            this.viewData.firmwarePackageId = $scope.modal.params.id;
            self.refresh();
        }
        ViewBundlesController.prototype.activate = function () {
        };
        ViewBundlesController.prototype.refresh = function () {
            var self = this;
            self.$rootScope.$broadcast('clearErrors');
            //self.GlobalServices.ClearErrors(self.errors);
            var deferred = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(deferred.promise);
            var postData = { 'id': self.viewData.firmwarePackageId };
            self.$http.post(self.Commands.data.firmwarepackages.getFirmwarePackageById, { requestObj: postData }).then(function (data) {
                self.viewModel = data.data.responseObj;
                self.viewData.displayedData = [].concat(self.viewModel);
                //self.viewData.displayedData = data.data.responseObj;
                deferred.resolve();
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //data object is always empty
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        ViewBundlesController.prototype.onSelectedPackageBundle = function (selectedItem) {
            var self = this;
            self.viewData.selectedPackageBundle = selectedItem;
        };
        ViewBundlesController.prototype.onSelectedCustomBundle = function (selectedItem) {
            var self = this;
            self.viewData.selectedCustomBundle = selectedItem;
        };
        ViewBundlesController.prototype.onClickViewPackageBundleDetails = function (selectedItem) {
            var self = this;
            var theModal = this.Modal({
                title: selectedItem.bundleName,
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/viewbundledetails.html',
                controller: 'ViewBundleDetailsController as vbd',
                params: {
                    firmwarePackageId: self.viewData.firmwarePackageId,
                    firmwareBundleId: selectedItem.id,
                    viewType: self.viewData.viewBundles
                },
                onComplete: function (modalScope) {
                    self.refresh(false);
                }
            });
            theModal.modal.show();
        };
        ViewBundlesController.prototype.onClickViewCustomBundleDetails = function (selectedItem) {
            var self = this;
            var modal = this.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_ViewCustomBundle'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/addeditviewbundle.html',
                controller: 'AddEditViewBundleModalController as c',
                params: {
                    repo: angular.copy(self.viewModel),
                    bundle: angular.copy(selectedItem),
                    type: 'view'
                },
                onComplete: function () {
                    self.refresh(false);
                }
            });
            modal.modal.show();
        };
        ViewBundlesController.prototype.onClickEditCustomBundleDetails = function (selectedItem) {
            var self = this;
            var modal = this.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_EditCustomBundle'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/addeditviewbundle.html',
                controller: 'AddEditViewBundleModalController as c',
                params: {
                    repo: angular.copy(self.viewModel),
                    bundle: angular.copy(selectedItem),
                    type: 'edit'
                },
                onComplete: function () {
                    self.refresh(false);
                }
            });
            modal.modal.show();
        };
        ViewBundlesController.prototype.onClickDeleteCustomBundle = function (selectedItem) {
            var self = this;
            var deferred = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(deferred.promise);
            var postData = {
                'packageId': self.viewData.firmwarePackageId,
                'bundleId': selectedItem.id
            };
            //this will do an update/create
            self.$http.post(self.Commands.data.firmwarepackages.removeFirmwareBundle, { requestObj: postData }).then(function (data) {
                //self.$http.post('bogus', { requestObj: self.viewModel }).then(function (data: any) {
                deferred.resolve();
                self.refresh();
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        ViewBundlesController.prototype.doSave = function (formHasErrors) {
            var self = this;
            if (formHasErrors)
                return;
            var myScope = this.$scope;
        };
        ViewBundlesController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ViewBundlesController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope'];
        return ViewBundlesController;
    }());
    asm.ViewBundlesController = ViewBundlesController;
    angular
        .module('app')
        .controller('ViewBundlesController', ViewBundlesController);
})(asm || (asm = {}));
//# sourceMappingURL=viewBundles.js.map
angular.module('app')
    .controller('AppController',
    [
       '$rootScope', '$q', '$filter', '$route', '$window', '$http', '$templateCache', '$scope', '$log', '$resource', '$translate', 'GlobalServices', '$location', 'Commands', '$cookies', 'Modal', 'localStorageService', 'SearchService', 'Dialog', '$timeout', 'About',
        function ($rootScope, $q, $filter, $route, $window, $http, $templateCache, $scope, $log, $resource, $translate, GlobalServices, $location, Commands, $cookies, Modal, localStorageService, SearchService, Dialog, $timeout, About) {

            //in order to update the masthead from using icon files to using images with background-images, we overwrite the templateCache entries used by the components with custom templates
            $templateCache.put("__clarity/masthead.html", "<div class=\"navbar navbar-inverse clarity\"><div class=container-fluid><div id=navHover class=\"navbar-header menu-top\" ng-class=\"{\'hoverClass\' : data.showpinnednav === \'dontshow\' && hideTopNav !== true, \'nohoverClass\' : data.showpinnednav !== \'dontshow\' || hideTopNav == true}\"><span class=navbar-brand ng-if=hideTopNav style=\"margin-top: 0; margin-bottom: 0\"><i class='masthead-logo-vxflexmanager-white'></i>{{applicationTitle}}</span><div class=\"nav navbar-nav\" ng-if=!hideTopNav style=\"margin-top: 0; margin-bottom: 0\"><masthead-top-menu menu-items=menuItems icon-class=iconClass pin-menu=pinMenu><menu-buttons-left><ng-transclude ng-transclude-slot=menuleft></ng-transclude></menu-buttons-left><menu-buttons><ng-transclude ng-transclude-slot=menu></ng-transclude></menu-buttons><menu-pinned-buttons><ng-transclude ng-transclude-slot=pinnedmenu></ng-transclude></menu-pinned-buttons></masthead-top-menu></div></div><div id=navbar class=\"nav navbar-nav navbar-right navbar-collapse collapse\" style=\"margin-right: 5px\"><ng-transclude ng-transclude-slot=header></ng-transclude></div></div></div>");
            $templateCache.put("__clarity/mastheadTopMenu.html", "<div class=menu-top><div style=\"position: relative; margin-right: 0px\" class=\"pull-left top-nav-arrow\"><span ng-show=data.showPinNavigation class=navbar-brand><i class='masthead-logo-vxflexmanager-white'></i>{{applicationTitle}}</span><button class=\"btn btn-link\" ng-click=actions.toggleNav() style=\"padding: 0; border: 0; text-decoration: none; margin-left: -14px\"><span ng-show=\"data.showPinNavigation == false\" class=navbar-brand style=\"margin-right: 20px; padding-left: 29px\"><i class='masthead-logo-vxflexmanager-white'></i>{{applicationTitle}}</span><i ng-show=data.showTopMenuButton style=\"position: relative; top: 19px; right: 18px\" class=ci-arrow-chev-down-2-med></i></button></div><span class=backdrop ng-show=data.showNavigation||false ng-click=\"data.showNavigation=false\"></span><div class=top-menu ng-show=data.showNavigation||false><nav role=navigation><div class=form><div style=\"position: relative; left: -6px\"><button class=\"btn btn-link\" ng-click=actions.toggleNav() style=\"margin-left: 19px; padding: 0; border: 0; text-decoration: none; color: #007db8 !important; background-color: #fff; padding-top: 2px\"><span class=\"navbar-brand navbarOpen\" style=\"margin-right: 2px\"><i class='masthead-logo-vxflexmanager-blue'></i>{{applicationTitle}}</span><i style=\"position: relative; top: 19px\" class=ci-arrow-chev-up-2-med></i></button> <button class=\"btn btn-link\" ng-click=actions.toggleNav() style=\"text-decoration: none; padding: 10px; line-height: 0px; border: 0; float: right; margin-top: 7px; margin-right: 14px\"><i style=\"margin: 0px\" class=ci-state-critical-health></i></button> <button class=\"btn btn-link\" ng-click=actions.pinNav() style=\"padding: 10px; line-height: 0px; border: 0; float: right; margin-top: 7px; margin-right: 3px\"><i style=\"margin: 0px\" class=\"text-primary ci-pin\"></i></button></div><hr style=\"width: 95%; margin-left: 11px; margin-right: auto; margin-top: 0px; border-color: #BBB\"><div id=top-buttons-left class=pull-left style=\"margin-right: 20px\"><ng-transclude ng-transclude-slot=extraleft></ng-transclude></div><ul class=\"list-unstyled list-inline pull-left\"><li class=menu-item ng-class=\"{\'hidden\': menuItem.hideintopmenu==true}\" ng-repeat=\"menuItem in menuItems\"><span class=menu-item-block ng-class=\"{\'navactive\': menuItem.activeitem == true}\"><i class={{menuItem.icon}}></i> <a href={{menuItem.href}}>{{menuItem.label}}</a></span><ul class=list-unstyled><li class=sub-menu-item ng-repeat=\"subMenuItem in menuItem.children\"><button ng-disabled=\"subMenuItem.disabled==true\" class=\"btn btn-link\" ng-class=\"{\'navactive\': subMenuItem.activeitem == true,  \'disabled\':subMenuItem.disabled==true}\" ng-click=actions.go(subMenuItem.href) ng-if=\"subMenuItem.label != \'Controllers\' && subMenuItem.label != \'Fabric\'\">{{subMenuItem.label}}</button></li></ul><ul class=list-unstyled><li class=sub-menu-item ng-class=\"{\'subsection\': subMenuItem.label === \'Fabric\',\'disabled\':subMenuItem.disabled==true}\" ng-repeat=\"subMenuItem in menuItem.children\"><button class=\"btn btn-link\" ng-disabled=\"subMenuItem.disabled==true\" ng-class=\"{\'navactive\': subMenuItem.activeitem == true}\" ng-click=actions.go(subMenuItem.href) ng-if=\"subMenuItem.label === \'Controllers\' || subMenuItem.label === \'Fabric\'\">{{subMenuItem.label}}</button></li></ul></li></ul><div id=top-buttons class=pull-right style=\"margin-right: 20px\"><ng-transclude ng-transclude-slot=extra></ng-transclude></div></div></nav></div><script type=text/ng-template id=topMenuPinTemplate.html><button ng-disabled=\"subMenuItem.disabled==true\" ng-click=\"actions.go(subMenuItem.href)\" class=\"sub-menu-button btn btn-link\" ng-class=\"{\'disabled\':subMenuItem.disabled==true}\">\r\n            {{subMenuItem.label}}\r\n        </button>\r\n        <span tabindex=\"0\" class=\"collapsed\" data-toggle=\"collapse\" data-target=\"#pin-{{subMenuItem.guid | toclassname}}\" ng-show=\"subMenuItem.children.length > 0\">\r\n            <i class=\"ci-arrow-chev-down-2-med\"></i>\r\n            <i class=\"ci-arrow-chev-down-2-med\"></i>\r\n        </span>\r\n        <ul id=\"pin-{{subMenuItem.guid | toclassname}}\" class=\"list-unstyled collapse\" ng-show=\"subMenuItem.children.length > 0\">\r\n            <li ng-repeat=\"subMenuItem in subMenuItem.children\" class=\"sub-menu-item\" ng-include=\"\'topMenuTemplate.html\'\"></li>\r\n        </ul></script><div id=pinned-nav ng-if=data.showPinNavigation><div class=panel-group id=pinaccordion role=tablist aria-multiselectable=true><div class=\"panel panel-default\" ng-repeat=\"menuItem in menuItems\"><div class=panel-heading role=tab ng-class=\"{\'pinright\': menuItem.pinright==true}\"><h4 class=\"panel-title hoverItem\"><i class={{menuItem.icon}}></i> <a href={{menuItem.href}}>{{menuItem.label}}</a> <a role=button class=collapsed data-toggle=collapse data-parent=#pinaccordion data-target=\"#pin-{{menuItem.guid | toclassname}}\" aria-expanded=true><i class=ci-arrow-chev-down-2-med ng-show=\"menuItem.children.length > 0\"></i> <i class=ci-arrow-chev-up-2-med ng-show=\"menuItem.children.length > 0\"></i></a></h4></div><div id=\"pin-{{menuItem.guid | toclassname}}\" class=\"panel-collapse collapse\" role=tabpanel><div class=panel-body><ul class=\"list-unstyled subnav\" ng-show=\"menuItem.children.length > 0\"><li ng-repeat=\"subMenuItem in menuItem.children\" class=sub-menu-item ng-include=\"\'topMenuPinTemplate.html\'\" ng-class=\"{\'navactive\': subMenuItem.activeitem == true}\"></li></ul></div></div></div><ng-transclude class=menu-extras ng-transclude-slot=extrapinned></ng-transclude><button id=unpin class=\"btn btn-link\" ng-click=actions.unpinNav()><i style=\"top: 3px\" class=\"text-primary ci-pin\"></i></button></div></div></div>");

            $scope.navigation = GlobalServices.navigation;
            $scope.appTitle = $translate.instant('ApplicationTitle')
            $scope.$on('navigationUpdated', function (evt, navigation) {
                $scope.navigation = navigation;
            });

            $scope.frontPageImages = {
                first: true,
                second: false,
                third: false
            };

            $scope.goTo = function (route) {
                $('#settings_menu').collapse('hide');
                $location.path(route);
            };

            $scope.setupWizard = function () {

                $('#settings_menu').collapse('hide');

                var setupWizard = Modal({
                    title: $translate.instant('SETUPWIZARD_Title'),
                    onHelp: function () {
                        GlobalServices.showHelp();
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/setupwizard.html',
                    controller: 'SetupWizardController as SetupWizard',
                    params: {
                    },
                    onComplete: function () {
                        $scope.initialize();
                    }
                });
                setupWizard.modal.show();
            }

            $scope.data = {
                showPinNavigation: true,
                searchResults: [],
                searching: false,
                alerts: [
                    {
                        id: 1,
                        description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',
                        severity: 'warning',
                        source: 'admin',
                        date: "12/31/2015 12:59 PM"
                    },
                    {
                        id: 1,
                        description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',
                        severity: 'critical',
                        source: 'admin',
                        date: "12/31/2015 12:59 PM"
                    }
                ]
            };

            $rootScope.$on('pin', function () {
                $scope.pinnav = true;
            });

            $rootScope.$on('unpin', function () {
                $scope.pinnav = false;
            });

            $scope.updateNavigation = function (menuItems) {
                var newMenu = [];
                //Add the first menu item (Home) to the top.  If there is only one Global menu item, save it for the end.
                if (GlobalServices.navigation.length >= 2) newMenu.push(GlobalServices.navigation[0]);
                menuItems.sort(function (a, b) {
                    var compare = 0;
                    if (a['order'] == undefined || b['order'] == undefined) compare = 0;
                    else compare = a['order'] - b['order'];
                    if (compare === 0) {
                        if (a['label'] < b['label']) compare = -1;
                        if (a['label'] > b['label']) compare = 1;
                    }
                    return compare;
                });
                newMenu = newMenu.concat(menuItems);
                //Add any other global menu items to the end (start with 0 if there is only 1, start with 1 if there are at least two)
                for (var i = (GlobalServices.navigation.length >= 2) ? 1 : 0; i < GlobalServices.navigation.length; i++) {
                    newMenu.push(GlobalServices.navigation[i]);
                }
                $scope.navigation = newMenu;
                if ($location.path() == undefined || $location.path() === '') {
                    var newHash = $scope.navigation[0]['href'];
                    if (newHash.indexOf('#') === 0) newHash = newHash.slice(1, newHash.length); //Strip off the leading hash
                    if (newHash.indexOf('/') !== 0) newHash = '/' + newHash; //Ensure path starts with a slash
                    $location.path(newHash);
                }
            };

            $scope.about = function () {

                $http.post(Commands.data.about.getAboutData, {}).then(function (data) {
                    var aboutData = data.data.responseObj;
                    //about-logo-vxflexmanager-blue
                    //ci-logo-asm
                    var about = About(
                           "about-logo-vxflexmanager-blue",
                           $translate.instant('ApplicationTitle'),
                           aboutData.version + " / " + aboutData.build,
                           aboutData.patent,
                           aboutData.trademark,
                           aboutData.copyright
                    );

                }).catch(function (data) {
                    d.resolve();
                    GlobalServices.DisplayError(data.data);
                });


                //var aboutModal = Modal({
                //    modalSize: 'modal-md',
                //    templateUrl: 'views/about.html',
                //    controller: 'AboutController as aboutController'
                //});

                //aboutModal.modal.show();
                //aboutModal.$on('modal:closed', function () {
                //    //$scope.initialize();
                //});
            };

            $scope.help = function () {
                GlobalServices.showHelp();
            };

            $scope.logout = function () {

                localStorageService.remove('ASM.currentUserObject');
                //sessionStorage.removeItem('ASM.currentUserObject');
                GlobalServices.CurrentUser = null;
                $window.sessionStorage.passwordDialogShown = 'false';

                $http.post(Commands.data.session.doLogout, {})
                    .success(function (data, status, headers, config) {
                        delete $window.sessionStorage.token;
                        window.location = data.responseObj.url;
                    })
                    .error(function (data, status, headers, config) {
                        delete $window.sessionStorage.token;
                        window.location = '/';
                    });
            };

            $scope.editUser = function () {

                var editUser = Modal({
                    title: $translate.instant('SETTINGS_EditUser'),
                    modalSize: 'modal-md',
                    templateUrl: 'views/settings/modals/edituser.html',
                    controller: 'EditUserController',
                    params: {
                        user: angular.copy($scope.data.currentUser)
                    }
                });

                editUser.modal.show();
                editUser.$on('modal:closed', function () {
                    $scope.initialize();
                }); //When the modal is closed, update the data.

            };


            $scope.onSearch = function (searchTerm, limit) {

                //$("#searchBar").off('focus').focus(function () {
                //    $("#searchicon").css("display", "none");
                //    $("#searchiconfocus").css("display", "inline");
                //});

                ////not sure how to keep search bar open long enough to click on an item or scroll
                //$("#searchBar").off('focusout').focusout(function () {
                //    if ($("#searchBar").val().length == 0) {
                //        setTimeout(function() {
                //            $("#searchicon").css("display", "inline");
                //            $("#searchiconfocus").css("display", "none");
                //        }, 1000);
                //    }
                //});

                if (!searchTerm || searchTerm.length < 3) return;
                $scope.data.searchTerm = searchTerm;
                $scope.data.searchResults = [];
                $scope.data.searching = true;
                SearchService.search(searchTerm, 5).then(function (results) {
                    //$scope.data.searchTerm = searchTerm;
                    $scope.data.searchResults = results;
                    //console.log('$scope.data.searchResults:  ' + JSON.stringify($scope.data.searchResults));
                    $scope.data.searching = false;
                });
            };

            $scope.mockServices = function () {
                //$http.get(Commands.mockServices)
                //    .success(function (data, status, headers, config) {
                //        $route.reload();
                //        $rootScope.$emit('MenuTop::Hide', 'AppController.mockServices()');
                //    })
                //    .error(function (data, status, headers, config) {
                //        $route.reload();
                //        $rootScope.$emit('MenuTop::Hide', 'AppController.mockServices()');
                //    });
            };

            $scope.createTemplate = function () {
                var createTemplateModal = Modal({
                    title: $translate.instant('TEMPLATES_CreateTemplate'),
                    onHelp: function () {
                        GlobalServices.showHelp('creatingtemplate');
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/templatewizard.html',
                    controller: 'TemplateWizardController as templateWizardController',
                    params: {
                    },
                    onComplete: function (id) {
                        $timeout(function () {
                            self.$location.path("templatebuilder/" + id + "/edit");
                        }, 500)
                    }
                });
                createTemplateModal.modal.show();
            }

            $scope.addExistingService = function () {
                var addServiceWizard = Modal({
                    title: $translate.instant('SERVICE_ADD_EXISTING_SERVICE_Title'),
                    onHelp: function () {
                        GlobalServices.showHelp('AddingExistingService');
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/services/addexistingservice.html',
                    controller: 'AddExistingServiceController as addExistingServiceController',
                    params: {
                    },
                    onCancel: function () {
                        var confirm = Dialog($translate.instant('GENERIC_Confirm'), $translate.instant('SERVICE_ADD_EXISTING_SERVICE_Cancel_Confirmation'));
                        confirm.then(function (modalScope) {
                            addServiceWizard.modal.dismiss();
                        });
                    }
                });
                addServiceWizard.modal.show();
            }

            $scope.deployNewService = function () {
                var addServiceWizard = Modal({
                    title: $translate.instant('SERVICES_NEW_SERVICE_DeployService'),
                    onHelp: function () {
                        GlobalServices.showHelp('deployingserviceoverview');
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/services/deployservice/deployservicewizard.html',
                    controller: 'DeployServiceWizard as deployServiceWizard',
                    params: {
                    },

                    onCancel: function () {
                        Dialog($translate.instant('GENERIC_Confirm'), $translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function () {
                            addServiceWizard.modal.close();
                        });
                    }
                });
                addServiceWizard.modal.show();
            }

            $scope.setActiveMenu = function () {
                //check for current page and set nav item to active class
                var currentpage = '#' + $location.path();

                angular.forEach($scope.navigation, function (menuItem) {
                    if (currentpage === menuItem.href) {
                        menuItem.activeitem = true;
                    } else {
                        menuItem.activeitem = false;
                    }

                    if (menuItem.children) {
                        angular.forEach(menuItem.children, function (subMenuItem) {
                            if (currentpage === subMenuItem.href) {
                                subMenuItem.activeitem = true;
                            } else {
                                subMenuItem.activeitem = false;
                            }
                        });
                    }
                });
            };

            $scope.limitString = function (str, limit) {
                return GlobalServices.limitString(str, limit);
            };

            //set active navigation by tabs
            $rootScope.$on('$locationChangeSuccess', function () { $scope.setActiveMenu(); });
            //$rootScope.$on('$routeChangeSuccess', function () { $scope.setActiveMenu(); });

            $scope.loadServiceData = function () {

                $http.post(Commands.data.dashboard.getServicesDashboardData, {})
                    .success(function (data, status, headers, config) {

                        var response = data.responseObj;

                        //'Error', red, self.viewmodel.servicesData.servicecriticalcount()
                        //'Healthy', green, self.viewmodel.servicesData.servicesuccesscount()
                        //'In Progress', unknown/blue, self.viewmodel.servicesData.serviceunknowncount()
                        //'Warning', yellow, self.viewmodel.servicesData.servicewarningcount()
                        //'Cancelled', cancelled, self.viewmodel.servicesData.servicecancelledcount()

                        $rootScope.ASM.servicesData = {
                            healthy: response.servicesuccesscount ? response.servicesuccesscount : 0,
                            warning: response.servicewarningcount ? response.servicewarningcount : 0,
                            error: response.servicecriticalcount ? response.servicecriticalcount : 0,
                            pending: response.servicependingcount ? response.servicependingcount : 0,
                            inprogress: response.serviceunknowncount ? response.serviceunknowncount : 0,
                            cancelled: response.servicecancelledcount ? response.servicecancelledcount : 0,
                            incomplete: response.serviceincompletecount ? response.serviceincompletecount : 0,
                            servicemode: response.serviceservicemodecount ? response.serviceservicemodecount : 0
                        };

                    })
                    .error(function (data, status) {

                    });
            };
            $scope.initialize = function () {

                $scope.servicesDashboardInterval = window.setInterval(function () { $scope.loadServiceData(); }, 30000);

                $http.post(Commands.data.initialSetup.gettingStarted, null)
                    .success(function (data, status, headers, config) {
                        $rootScope.ASM.showInitialSetup = !data.responseObj.initialSetupCompleted;
                    })
                    .error(function (data, status) {
                        $rootScope.ASM.showInitialSetup = false;
                    });


                window.clearInterval($scope.templateInterval);
                $scope.templateInterval = window.setInterval(function () {
                    $http.post(Commands.data.templates.getQuickTemplateList, null)
                        .success(function (data, status, headers, config) {
                            $scope.templatesAvailable = data.responseObj.length;
                        })
                        .error(function (data, status) {
                            $scope.templatesAvailable = 0;
                        });
                }, 30000);

                //load current user, get role, send role in to get list of permissions
                $http.post(Commands.GenerateUrl(Commands.data.users.getCurrentUser, {}))
                    .success(function (data) {

                        var user = data.responseObj;
                        user.userPreference = $scope.parseUserPreferences(user.userPreference);
                        $rootScope.ASM.CurrentUser = angular.copy(user);
                        localStorageService.set('ASM.currentUserObject', angular.copy(user));

                        //var stringUser = JSON.stringify(user);
                        //sessionStorage.setItem('ASM.currentUserObject', angular.copy(stringUser));

                        //show password modal
                        if ($rootScope.ASM.IsInRole('administrator') && $rootScope.ASM.CurrentUser.userPreference.showdefaultpasswordprompt && $rootScope.ASM.CurrentUser.showdefaultpasswordprompt && (!$window.sessionStorage.passwordDialogShown || $window.sessionStorage.passwordDialogShown !== 'true')) {
                            $window.sessionStorage.passwordDialogShown = 'true';

                            var self = this;

                            var defaultPasswordModal = Modal({
                                title: $translate.instant('DEFAULTPASSWORD_Title'),
                                //modalSize: 'modal-sm',
                                className: 'showOnTop',
                                templateUrl: 'views/defaultpasswordmodal.html',
                                controller: 'DefaultPasswordModalController as defaultPassword',
                                onComplete: function (modalScope) {
                                    if (defaultPasswordModal.defaultPassword.checked) {

                                        $rootScope.ASM.CurrentUser.userPreference.showdefaultpasswordprompt = false;

                                        $http.post(Commands.data.users.updateUserPreferences, angular.toJson($rootScope.ASM.CurrentUser.userPreference))
                                            .success(function (data) {

                                            });

                                    }
                                }
                            });

                            defaultPasswordModal.modal.show();
                            //window.setTimeout(function () { defaultPasswordModal.modal.show() }, 30000);

                        }
                    })
                    .error(function () {
                    });


                $(document).on('shown.bs.tab', function (e) {

                    //fire resize event on tab change to give time to repaint modal static backdrop
                    window.setTimeout(function () {
                        $(window).trigger('resize');
                    }, 500);

                    var tab = e.target;
                    var key = $(tab).closest('.nav-tabs')[0].id;
                    var val = $(tab).attr('aria-controls');
                    if (!val)
                        val = $(tab).attr('data-target').replace('#', '');

                    var tabstate = localStorageService.get('tabstate') || {};

                    tabstate[key] = val;
                    localStorageService.set('tabstate', tabstate);

                });

                //collapse any collapsibles if clicking off of menu
                $('body').on('click', function (e) {

                    angular.forEach($('.menu-top .panel-collapse'), function (element) {
                        if (element.id !== e.target.id)
                            $(element).collapse('hide');
                    });

                });

            };

            $scope.parseUserPreferences = function (userPreference) {
                if (userPreference) {
                    if (typeof (userPreference) === "string") {
                        //userPreference is a stringified object ready to be parsed
                        userPreference = angular.fromJson(userPreference);
                    } 
                   if (angular.isUndefined(userPreference.showdefaultpasswordprompt)) {
                        //userPreference has been set elsewhere but has no setting for showdefaultpasswordprompt, so we set it
                       userPreference.showdefaultpasswordprompt = true;
                    }
                } else {
                    //userPreference is empty, so we set it up
                    userPreference = { showdefaultpasswordprompt: true };
                }
                return userPreference;
            }

            $scope.initialize();

        }
    ])


;

angular.module('app-login')
    .controller('AppLoginController',
    [
        '$window', '$http', '$scope', '$log', '$resource', '$translate', 'localStorageService', 'Commands', '$cookies',
        function ($window, $http, $scope, $log, $resource, $translate, localStorage, Commands, $cookies) {

            $scope.verifyingCredentials = false;
            $scope.failedLogin = false;
            $scope.message = '';
            $scope.shouldNextButtonBeEnabled = false;

            var rememberUser = function (userdata) {
                if (userdata && $scope.data.settings.rememberMe) {
                    var currentUser = {
                        username: userdata.username,
                        domain: userdata.domain
                    };

                    localStorage.set('ASM.currentUser', currentUser);
                } else {
                    localStorage.remove('ASM.currentUser');
                }
            };

            $scope.data = {
                loginalert: true,
                settings: {
                    username: '',
                    rememberMe: false,
                    applicationName: $translate.instant('ApplicationTitle'),
                    //applicationLogo: 'images/icee_icon.svg',
                    //applicationLogo: 'css/app/images/logos/dellemc-logo-196x32.png',
                    //appIcon: 'ci-logo-asm',
                    applicationLogo: 'images/AppIcon-VxFlexManager-white-32.svg',

                    copyright:  $translate.instant('DELL_COPYRIGHT'),
                    //UPDATE THIS FOR China build...
                    //copyrightIcon: 'ci-logo-dell-halo-o',
                    copyrightIcon: 'logo-dellemc',

                    messageIcon: '',
                    messageIconColor: '',
                    messageText: 'Powered by Dell EMC',
                    signInLabel: $translate.instant('GENERIC_Login'),
                    showRememberMe: true,
                    rememberMeText: $translate.instant('GENERIC_RememberMe')
                }
            };

            $scope.displayError = function (status, message) {

                delete $window.sessionStorage.token;

                var error = $translate.instant('GENERIC_LoginFailed');

                if (status === 404) {
                    error = $translate.instant('GENERIC_NoConnection');
                }

                if (status === 200 && message) {
                    error = message;
                }

                $scope.data.settings.isSpinning = false;
                $scope.failedLogin = true;
                $scope.data.settings.showMessage = true;
                $scope.data.settings.messageText = error;

            };

            $scope.actions = {
                clickLogin: function (userdata) {

                    $scope.data.settings.isSpinning = true;
                    $scope.data.settings.showMessage = false;

                    $scope.verifyingCredentials = true;

                    localStorage.clearAll();

                    $http.post(Commands.data.session.doLogin, { Username: userdata.username, Password: userdata.password })
                        .success(function (data, status, headers, config) {

                            var response = data.responseObj;

                            if (!response.success) {
                                var errorMessage = data.errorObj && data.errorObj.errorMessage ? data.errorObj.errorMessage : null;
                                $scope.displayError(status, errorMessage);
                                return;
                            }
                            $scope.actions.setAlertHidden("false");
                            $scope.actions.setStorageAlertHidden("false");
                            $scope.actions.setVirtualApplianceVersionAlertHidden("false");
                            rememberUser(userdata); //Only remember if successful
                            $scope.verifyingCredentials = false;

                            $window.sessionStorage.token = headers('JSESSIONID');
                            $window.sessionStorage.currentUser = userdata.username;

                            $scope.verifyingCredentials = false;

                            $cookies.put('username', userdata.username);

                            var url = response.url;

                            if (response.route.length > 0) {
                                url += '#' + response.route;
                                url = url.replace('##', '#');
                            }
                            window.location = url;


                        })
                        .error(function (data, status) {

                            $scope.displayError(status, null);

                        });

                },
                setStorageAlertHidden: function (value) {
                    sessionStorage.setItem("storageAlertHidden", value);
                },
                setVirtualApplianceVersionAlertHidden: function (value) {
                    sessionStorage.setItem("virtualApplianceVersionBannerHidden", value);
                },
                setAlertHidden: function (value) {
                    sessionStorage.setItem("rcmAlertHidden", value);
                }
            };

            $scope.initialize = function () {
                var currentUser = localStorage.get('ASM.currentUser');
                if (currentUser != undefined) {
                    $scope.data.settings.username = currentUser.username;
                    $scope.data.settings.rememberMe = true;
                }

                localStorage.remove('ASM.currentUserObject');
                //sessionStorage.removeItem('ASM.currentUserObject');

                ////dummy call to force certificate acceptance (can be replaced with get version eventually)
                //$http.get(Commands.users)
                //    .success(function(data, status, headers, config) {
                //    })
                //    .error(function(data, status, headers, config) {
                //    });


            };
            $scope.initialize();
        }
    ])


;

var asm;
(function (asm) {
    var DefaultPasswordModalController = (function () {
        function DefaultPasswordModalController($scope, $translate) {
            this.$scope = $scope;
            this.$translate = $translate;
            this.checked = false;
            var self = this;
            self.initialize();
        }
        DefaultPasswordModalController.prototype.initialize = function () {
            var self = this;
        };
        DefaultPasswordModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DefaultPasswordModalController.$inject = ['$scope', '$translate'];
        return DefaultPasswordModalController;
    }());
    asm.DefaultPasswordModalController = DefaultPasswordModalController;
    angular
        .module('app')
        .controller('DefaultPasswordModalController', DefaultPasswordModalController);
})(asm || (asm = {}));
//# sourceMappingURL=defaultpassword.js.map
var asm;
(function (asm) {
    var DeviceController = (function () {
        function DeviceController($http, $translate, $routeParams, GlobalServices, $timeout, constants, Commands, Loading, $q, $filter, Modal) {
            this.$http = $http;
            this.$translate = $translate;
            this.$routeParams = $routeParams;
            this.GlobalServices = GlobalServices;
            this.$timeout = $timeout;
            this.constants = constants;
            this.Commands = Commands;
            this.Loading = Loading;
            this.$q = $q;
            this.$filter = $filter;
            this.Modal = Modal;
            this.tabs = {
                summary: "Summary",
                portView: "PortView",
                networkInterfaces: "NetworkInterfaces",
                firmwareRevisions: "FirmwareRevisions",
                cpus: "CPUs",
                memory: "Memory",
                blades: "Blades",
                iOModules: "IOModules",
                chassisController: "ChassisController",
                iKVM: "IKVM",
                powerSupplies: "PowerSupplies",
                equallogicVolumes: "EquallogicVolumes",
                compellentVolumes: "CompellentVolumes",
                netAppVolumes: "NetAppVolumes",
                localStorage: "LocalStorage",
                luns: "Luns",
                fileSystems: "FileSystems",
                scaleIOStorage: "ScaleIOStorage",
                scaleIOServers: "ScaleIOServers",
                performance: "Performance"
            };
            this.errors = new Array();
            //pie chart
            this.overallSystemUsage = null;
            this.memorySystemUsage = null;
            this.cpuSystemUsage = null;
            this.ioSystemUsage = null;
            //line charts
            this.systemUsageHistoricalData = null;
            this.memoryUsageHistoricalData = null;
            this.cpuUsageHistoricalData = null;
            this.ioUsageHistoricalData = null;
            //dropdown values & data populating text below charts (Whole timeframe object)
            this.usages = {
                system: undefined,
                cpu: undefined,
                ram: undefined,
                io: undefined
            };
            var self = this;
            self.id = self.$routeParams.id;
            self.deviceType = self.$routeParams.resourceType;
        }
        DeviceController.prototype.activate = function () {
            var self = this, callToMake, url = "", callback;
            if (self.deviceType) {
                if (self.isServer()) {
                    self.setTab(self.tabs.portView);
                    url = self.Commands.data.servers.getServerById;
                    callback = function () {
                        //set pie charts
                        if (self.device.systemusage) {
                            self.setTab(self.tabs.summary);
                            self.overallSystemUsage = angular.merge(self.getPieChartObject(self.device.systemusage, { innerSize: "90%" }), {
                                size: {
                                    height: 230,
                                    width: undefined
                                }
                            });
                            self.overallSystemUsage2 = self.getPieChartObject(self.device.systemusage);
                        }
                        if (self.device.cpuusage) {
                            self.cpuSystemUsage = self.getPieChartObject(self.device.cpuusage);
                        }
                        if (self.device.memoryusage) {
                            self.memorySystemUsage = self.getPieChartObject(self.device.memoryusage);
                        }
                        if (self.device.iousage) {
                            self.ioSystemUsage = self.getPieChartObject(self.device.iousage);
                        }
                        //set dropdowns with initial value
                        if (self.device.systemusage) {
                            if (_.find(self.device.systemusage.historicaldata, { id: "Last Month" })) {
                                self.usages.system = _.find(self.device.systemusage.historicaldata, { id: "Last Month" });
                            }
                            else {
                                self.usages.system = self.device.systemusage.historicaldata[0];
                            }
                            self.updateSystemUsage();
                        }
                        if (self.device.memoryusage) {
                            self.usages.ram = self.device.memoryusage.historicaldata[0];
                            self.updateMemoryUsage();
                        }
                        if (self.device.cpuusage) {
                            self.usages.cpu = self.device.cpuusage.historicaldata[0];
                            self.updateCPUUsage();
                        }
                        if (self.device.iousage) {
                            self.usages.io = self.device.iousage.historicaldata[0];
                            self.updateIOUsage();
                        }
                    };
                }
                if (self.isChassis()) {
                    self.setTab(self.tabs.blades);
                    url = self.Commands.data.chassis.getChassisById;
                }
                if (self.isIOM()) {
                    url = self.Commands.data.iom.getIOMById;
                }
                if (self.isDellSwitch()) {
                    url = self.Commands.data.dellSwitch.getDellSwitchById;
                }
                if (self.isCiscoSwitch()) {
                    url = self.Commands.data.ciscoSwitch.getCiscoSwitchById;
                }
                if (self.isEqualLogic()) {
                    self.setTab(self.tabs.equallogicVolumes);
                    url = self.Commands.data.equalLogicStorage.getEqualLogicStorageById;
                }
                if (self.isCompellent()) {
                    self.setTab(self.tabs.summary);
                    url = self.Commands.data.compellentStorage.getCompellentStorageById;
                    callback = function () {
                        // set pie charts
                        self.storageCapacity = angular.merge(self.getGenericPie(), {
                            series: [
                                {
                                    data: [
                                        { name: self.$translate.instant("DEVICEDETAILS_UsedDiskSpace"), y: (parseFloat(self.device.useddiskspacepercent) / parseFloat(/([0-9]*)/.exec(self.device.diskspacetotal)[0])) * 100, color: "#007db8", num: _.round(parseFloat(self.device.useddiskspacepercent), 2).toString() + " GB" },
                                        { name: self.$translate.instant("DEVICEDETAILS_FreeDiskSpace"), y: (parseFloat(self.device.freediskspacepercent) / parseFloat(/([0-9]*)/.exec(self.device.diskspacetotal)[0])) * 100, color: "#dddddd", num: _.round(parseFloat(self.device.freediskspacepercent), 2).toString() + " GB" },
                                    ]
                                }
                            ],
                            legend: {
                                align: 'right',
                                layout: 'vertical',
                                verticalAlign: 'top',
                                x: 0,
                                y: 100
                            }
                        });
                    };
                }
                if (self.isEmcUnity()) {
                    self.setTab(self.tabs.summary);
                    url = self.Commands.data.emcStorage.getEmcUnityStorageById;
                    callback = function () {
                        // set pie charts
                        self.storagePoolCapacity = angular.merge(self.getGenericPie(), {
                            series: [
                                {
                                    data: [
                                        { name: self.$translate.instant("DEVICEDETAILS_UsedDiskSpace"), y: (parseFloat(self.device.useddiskspacepercent) / parseFloat(/([0-9]*)/.exec(self.device.diskspacetotal)[0])) * 100, color: "#007db8", num: _.round(parseFloat(self.device.useddiskspacepercent), 2).toString() + " GB" },
                                        { name: self.$translate.instant("DEVICEDETAILS_FreeDiskSpace"), y: (parseFloat(self.device.freediskspacepercent) / parseFloat(/([0-9]*)/.exec(self.device.diskspacetotal)[0])) * 100, color: "#dddddd", num: _.round(parseFloat(self.device.freediskspacepercent), 2).toString() + " GB" },
                                    ]
                                }
                            ],
                            legend: {
                                align: 'right',
                                layout: 'vertical',
                                verticalAlign: 'top',
                                x: 0,
                                y: 100
                            }
                        });
                        var sizeTotal = 0;
                        angular.forEach(self.device.storagepools, function (storagePool) {
                            storagePool.intSize = parseFloat(/([0-9]*)/.exec(storagePool.size)[0]);
                            sizeTotal += storagePool.intSize;
                        });
                        self.storagePools = angular.merge(self.getGenericPie(), {
                            series: [
                                {
                                    data: _.map(self.device.storagepools, function (storagePool) {
                                        return {
                                            name: storagePool.name,
                                            y: Math.round(storagePool.intSize),
                                            sizeUsed: storagePool.size,
                                            percent: (storagePool.intSize / sizeTotal) * 100,
                                            showInLegend: true
                                        };
                                    })
                                }
                            ],
                            legend: { enabled: true }
                        });
                    };
                }
                if (self.isEmcvnx()) {
                    self.setTab(self.tabs.summary);
                    url = self.Commands.data.emcStorage.getEmcvnxStorageById;
                    callback = function () {
                        // set pie charts
                        self.storagePoolCapacity = angular.merge(self.getGenericPie(), {
                            series: [
                                {
                                    data: [
                                        { name: self.$translate.instant("DEVICEDETAILS_UsedDiskSpace"), y: (parseFloat(self.device.useddiskspacepercent) / parseFloat(/([0-9]*)/.exec(self.device.diskspacetotal)[0])) * 100, color: "#007db8", num: _.round(parseFloat(self.device.useddiskspacepercent), 2).toString() + " GB" },
                                        { name: self.$translate.instant("DEVICEDETAILS_FreeDiskSpace"), y: (parseFloat(self.device.freediskspacepercent) / parseFloat(/([0-9]*)/.exec(self.device.diskspacetotal)[0])) * 100, color: "#dddddd", num: _.round(parseFloat(self.device.freediskspacepercent), 2).toString() + " GB" },
                                    ]
                                }
                            ],
                            legend: {
                                align: 'right',
                                layout: 'vertical',
                                verticalAlign: 'top',
                                x: 0,
                                y: 100
                            }
                        });
                        var sizeTotal = 0;
                        angular.forEach(self.device.storagepools, function (storagePool) {
                            storagePool.intSize = parseFloat(/([0-9]*)/.exec(storagePool.size)[0]);
                            sizeTotal += storagePool.intSize;
                        });
                        self.storagePools = angular.merge(self.getGenericPie(), {
                            series: [
                                {
                                    data: _.map(self.device.storagepools, function (storagePool) {
                                        return {
                                            name: storagePool.name,
                                            y: Math.round(storagePool.intSize),
                                            sizeUsed: storagePool.size,
                                            percent: (storagePool.intSize / sizeTotal) * 100,
                                            showInLegend: true
                                        };
                                    })
                                }
                            ],
                            legend: { enabled: true }
                        });
                    };
                }
                if (self.isNetApp()) {
                    self.setTab(self.tabs.netAppVolumes);
                    url = self.Commands.data.netappStorage.getNetAppStorageById;
                }
                if (self.isScaleIO()) {
                    self.setTab(self.tabs.performance);
                    url = self.Commands.data.scaleIO.getScaleIObyId;
                    callback = function () {
                        self.scaleIODonut = {
                            options: {
                                chart: {
                                    type: 'pie',
                                    renderTo: 'scaleIODonut',
                                    animation: false
                                },
                                title: {
                                    text: ''
                                },
                                tooltip: {
                                    enabled: false,
                                    useHTML: true,
                                    style: { zIndex: 99999 },
                                    positioner: function (labelWidth, labelHeight, point) { return { x: point.plotX + 10, y: point.plotY + 10 }; }
                                },
                                plotOptions: {
                                    pie: {
                                        allowPointSelect: true,
                                        size: '100%',
                                        //innerSize: '75%',
                                        dataLabels: { enabled: false },
                                        states: { select: { borderColor: '#0085c3' } },
                                        borderWidth: 3,
                                    }
                                }
                            },
                            size: {
                                height: 200,
                                width: 200
                            },
                            spacingBottom: 0,
                            spacingTop: 0,
                            spacingLeft: 0,
                            spacingRight: 0,
                            series: [{
                                    data: [
                                        {
                                            name: self.$translate.instant('DEVICES_EMC_SCALEIO_Protected_DonutTitle'),
                                            y: angular.copy(self.device.scaleIOInformation.protectedInKb),
                                            color: '#007db8'
                                        },
                                        {
                                            name: self.$translate.instant('DEVICES_EMC_SCALEIO_InMaintenance_DonutTitle'),
                                            y: angular.copy(self.device.scaleIOInformation.inMaintenanceInKb),
                                            color: '#6bacde'
                                        },
                                        {
                                            name: self.$translate.instant('DEVICES_EMC_SCALEIO_Degraded_DonutTitle'),
                                            y: angular.copy(self.device.scaleIOInformation.degradedInKb),
                                            color: '#f2af00'
                                        },
                                        {
                                            name: self.$translate.instant('DEVICES_EMC_SCALEIO_Failed_DonutTitle'),
                                            y: angular.copy(self.device.scaleIOInformation.failedInKb),
                                            color: '#CE1126'
                                        },
                                        {
                                            name: self.$translate.instant('DEVICES_EMC_SCALEIO_Unused_DonutTitle'),
                                            y: angular.copy(self.device.scaleIOInformation.unusedInKb),
                                            color: '#EEEEEE'
                                        },
                                        {
                                            name: self.$translate.instant('DEVICES_EMC_SCALEIO_Spare_DonutTitle'),
                                            y: angular.copy(self.device.scaleIOInformation.spareInKb),
                                            color: '#cce5f1'
                                        },
                                        {
                                            name: self.$translate.instant('DEVICES_EMC_SCALEIO_Decreased_DonutTitle'),
                                            y: angular.copy(self.device.scaleIOInformation.decreasedInKb),
                                            color: '#6e2585'
                                        },
                                        {
                                            name: self.$translate.instant('DEVICES_EMC_SCALEIO_Unavailable_DonutTitle'),
                                            y: angular.copy(self.device.scaleIOInformation.unavailableUnusedInKb),
                                            color: '#FFFFFF'
                                        }
                                    ],
                                    innerSize: '80%'
                                }]
                        };
                        self.scaleIODonutDataCopy = angular.copy(self.scaleIODonut.series[0].data);
                        var minimumValue = self.device.scaleIOInformation.maxCapacityInKb * .05;
                        angular.forEach(self.scaleIODonut.series[0].data, function (slice) {
                            if (slice.y > 0 && slice.y < minimumValue) {
                                slice.y = minimumValue;
                            }
                        });
                    };
                }
                callToMake = self.$http.post(url, { id: self.id });
                self.GlobalServices.ClearErrors();
                self.Loading(callToMake);
                callToMake
                    .then(function (response) {
                    self.device = response.data.responseObj;
                    callback && callback();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            }
        };
        DeviceController.prototype.updateSystemUsage = function () {
            var self = this;
            self.systemUsageHistoricalData = self.getLineChartObject(self.usages.system);
        };
        DeviceController.prototype.updateCPUUsage = function () {
            var self = this;
            self.cpuUsageHistoricalData = self.getLineChartObject(self.usages.cpu);
        };
        DeviceController.prototype.updateMemoryUsage = function () {
            var self = this;
            self.memoryUsageHistoricalData = self.getLineChartObject(self.usages.ram);
        };
        DeviceController.prototype.updateIOUsage = function () {
            var self = this;
            self.ioUsageHistoricalData = self.getLineChartObject(self.usages.io);
        };
        //pie with usage data
        DeviceController.prototype.getPieChartObject = function (UsageData, customOptions) {
            var self = this;
            return angular.merge(self.getGenericPie(customOptions), {
                series: [
                    {
                        data: [
                            { name: self.$translate.instant('DEVICEDETAILS_CurrentUtilization'), y: Math.round(parseFloat(UsageData.currentvalue)), color: UsageData.currentvalue <= UsageData.threshold ? '#7AB800' : '#f0ad4e' },
                            { name: self.$translate.instant('DEVICEDETAILS_CurrentAvailable'), y: Math.round(100 - UsageData.currentvalue), color: '#ccc' }
                        ]
                    }
                ]
            });
        };
        DeviceController.prototype.getGenericPie = function (customOptions) {
            return {
                options: {
                    chart: {
                        type: 'pie',
                        animation: false
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: false,
                            innerSize: 100,
                            dataLabels: { enabled: false },
                            borderWidth: 3
                        },
                        series: {
                            states: {
                                hover: {
                                    enabled: false
                                }
                            }
                        }
                    }
                },
                size: {
                    height: 170,
                    width: 170
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: [],
                        innerSize: customOptions && customOptions.innerSize || '70%'
                    }]
            };
        };
        DeviceController.prototype.getLineChartObject = function (UsageDataSeries) {
            var self = this;
            return {
                options: {
                    chart: {
                        type: 'area',
                        animation: true,
                        height: 130,
                        borderWidth: 0,
                        backgroundColor: 'rgba(255, 255, 255, 0)'
                    },
                    title: {
                        text: ''
                    },
                    tooltip: {
                        useHTML: true,
                        shared: true,
                        enabled: true,
                        formatter: function () {
                            return "Value: " + parseFloat(this.y.toFixed(2)) + "%<br />Date: " + moment(this.x).format('LLL');
                        }
                    },
                },
                xAxis: {
                    labels: { enabled: false },
                    type: 'datetime',
                    //                    tickPositioner: () => {
                    //                        return _.map(UsageDataSeries.data, (point: any) => [
                    //                            moment(point.timestamp).toDate().getTime(),
                    //                            point.value
                    //                        ]
                    //                        );
                    //                    },
                    lineColor: '#ececec',
                    tickColor: '#ececec',
                    title: { margin: 10, style: { color: '#888888' }, text: UsageDataSeries.chartlabel }
                },
                yAxis: {
                    gridLineColor: "#cecece",
                    title: null,
                    tickInterval: 20,
                    plotLines: [{
                            value: 0,
                            width: 1,
                            color: '#808080'
                        }],
                    min: 0,
                    max: 100
                },
                legend: {
                    enabled: false
                },
                series: [{
                        showInLegend: false,
                        name: 'Usage',
                        color: "#007db8",
                        data: self.convertLineChartData(UsageDataSeries.data),
                        fillColor: {
                            linearGradient: [0, 0, 0, 75],
                            stops: [
                                [0, self.setOpacity(Highcharts.Color(Highcharts.getOptions().colors[0]), 0.3)],
                                [1, self.setOpacity(Highcharts.Color(Highcharts.getOptions().colors[0]), 0)]
                            ]
                        },
                        marker: {
                            radius: 2
                        }
                    }],
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0
            };
        };
        //laundering type to prevent build-breaking
        DeviceController.prototype.setOpacity = function (highChartsColor, opacity) {
            return highChartsColor.setOpacity(opacity).get("rgba");
        };
        DeviceController.prototype.convertLineChartData = function (data) {
            return _.map(data, function (point) { return [
                //moment(point.timestamp).toDate().getTime(),
                moment(point.timestamp, 'YYYY-MM-DDTHH:mm:ss').toDate().getTime(),
                point.value
            ]; });
        };
        DeviceController.prototype.openFirmwareReport = function (deviceId) {
            var self = this;
            //self.pauseRefreshDevices = true;
            var firmwareReportModal = self.Modal({
                title: self.$translate.instant('SERVICES_RESOURCE_FirmwareReportTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('viewfirmwarecompliance');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/resourcecompliancereport.html',
                controller: 'ResourceComplianceReportController as resourceComplianceReportController',
                params: {
                    id: deviceId
                },
                onComplete: function () {
                    //self.pauseRefreshDevices = false;
                    //self.refresh();
                }
            });
            firmwareReportModal.modal.show();
        };
        DeviceController.prototype.launchGUI = function () {
            var self = this;
            window.open(self.device.ipaddressurl);
        };
        DeviceController.prototype.isCurrentTab = function (tab) {
            var self = this;
            return self.activeTab === tab;
        };
        DeviceController.prototype.setTab = function (tab) {
            var self = this;
            self.activeTab = tab;
        };
        DeviceController.prototype.hideTabView = function () {
            var self = this;
            return self.isIOM() || self.isDellSwitch() || self.isCiscoSwitch();
        };
        DeviceController.prototype.isChassis = function () {
            return (this.deviceType === 'ChassisM1000e' || this.deviceType === 'ChassisVRTX' || this.deviceType === 'ChassisFX');
        };
        DeviceController.prototype.isFX2 = function () {
            return (this.deviceType === 'ChassisFX');
        };
        DeviceController.prototype.isIOM = function () {
            return (this.deviceType === 'AggregatorIOM' || this.deviceType === 'MXLIOM' || this.deviceType === 'FXIOM');
        };
        DeviceController.prototype.isServer = function () {
            return (this.deviceType === 'RackServer' || this.deviceType === 'TowerServer' || this.deviceType === 'BladeServer' || this.deviceType === 'FXServer' || this.deviceType === 'Server');
        };
        DeviceController.prototype.isEqualLogic = function () {
            return (this.deviceType === 'equallogic');
        };
        DeviceController.prototype.isCompellent = function () {
            return (this.deviceType === 'compellent');
        };
        DeviceController.prototype.isEmcUnity = function () {
            return this.deviceType === "emcunity";
        };
        DeviceController.prototype.isEmcvnx = function () {
            return this.deviceType === "emcvnx";
        };
        DeviceController.prototype.isNetApp = function () {
            return (this.deviceType === 'netapp');
        };
        DeviceController.prototype.isDellSwitch = function () {
            return (this.deviceType === 'dellswitch' || this.deviceType === 'genericswitch');
        };
        DeviceController.prototype.isCiscoSwitch = function () {
            return (this.deviceType === 'ciscoswitch');
        };
        DeviceController.prototype.isScaleIO = function () {
            return this.deviceType === 'scaleio';
        };
        DeviceController.prototype.isEm = function () {
            return this.deviceType === 'em';
        };
        DeviceController.$inject = ['$http', '$translate', '$routeParams', 'GlobalServices', '$timeout', 'constants', "Commands", "Loading", "$q", "$filter", "Modal"];
        return DeviceController;
    }());
    asm.DeviceController = DeviceController;
    angular
        .module("app")
        .controller("DeviceController", DeviceController);
})(asm || (asm = {}));
//# sourceMappingURL=device.js.map
var asm;
(function (asm) {
    /*
    Notes:
    use self.selectedDevices() to get checked items
     */
    var DevicesController = (function () {
        function DevicesController($http, $window, $translate, $timeout, Dialog, Loading, $q, Modal, Commands, GlobalServices, MessageBox, $rootScope, $routeParams, $filter, constants, localStorageService) {
            this.$http = $http;
            this.$window = $window;
            this.$translate = $translate;
            this.$timeout = $timeout;
            this.Dialog = Dialog;
            this.Loading = Loading;
            this.$q = $q;
            this.Modal = Modal;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.MessageBox = MessageBox;
            this.$rootScope = $rootScope;
            this.$routeParams = $routeParams;
            this.$filter = $filter;
            this.constants = constants;
            this.localStorageService = localStorageService;
            this.selectorConfig = {};
            this.safeSources = { serverPoolsTab: { servers: [], users: [] } };
            this.deviceTimeout = null;
            this.pauseRefreshDevices = false;
            this.getters = {};
            this.debugMode = false;
            var self = this;
            //self.currentView = '';
            //self.currentHealthView = '';
            //self.currentStateView = '';
            self.availableManagedStates = angular.copy(self.constants.availableManagedStates);
            self.availableManagedStates_buttonoverflow = angular.copy(self.constants.availableManagedStates);
            self.availableManagedStates.unshift({
                name: self.$translate.instant('DEVICES_ChangeResourceTypeTo'), id: ''
            });
            self.resourceState = '';
            self.activeTab = 'AllResources';
            self.serverPoolActiveTab = 'Servers';
            self.removeEnabled = true;
            self.loadingDetails = false;
            self.showFilters = false;
            self.selectedDevice = null;
            self.selectedServerPool = {};
            self.selectedServerPoolId = '';
            self.serverpoolslist = [];
            //self.$watch('selectedDevice', function (newValue, oldValue) {
            //    alert("here");
            //});
            self.buttonoverflow = [];
            self.getters = {
                ipaddress: function (field) {
                    return function (object) {
                        return self.$filter('ip2long')(object[field]);
                    };
                }
            };
            if (self.$routeParams.resourceType === 'serverpools') {
                self.clickTab('ServerPools');
                self.showFilters = false;
                if (self.$routeParams.health) {
                    self.selectedServerPoolId = self.$routeParams.health;
                }
            }
            else {
                if (self.$routeParams.resourceType) {
                    self.clickTab('AllResources');
                    self.showFilters = true;
                    self.currentView = self.$routeParams.resourceType;
                    self.currentHealthView = '';
                }
                if (self.$routeParams.health) {
                    self.clickTab('AllResources');
                    self.showFilters = true;
                    self.currentHealthView = self.$routeParams.health;
                }
            }
        }
        Object.defineProperty(DevicesController.prototype, "currentView", {
            get: function () { var self = this; return self.localStorageService.get('devicesTable_currentView') || ''; },
            set: function (val) {
                var self = this;
                self.localStorageService.set('devicesTable_currentView', val);
                self.filterDevices();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DevicesController.prototype, "currentHealthView", {
            get: function () { var self = this; return self.localStorageService.get('devicesTable_currentHealthView') || ''; },
            set: function (val) { var self = this; self.localStorageService.set('devicesTable_currentHealthView', val); self.filterDevices(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DevicesController.prototype, "currentServiceView", {
            get: function () { var self = this; return self.localStorageService.get('devicesTable_currentServiceView') || ''; },
            set: function (val) { var self = this; self.localStorageService.set('devicesTable_currentServiceView', val); self.filterDevices(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DevicesController.prototype, "currentStateView", {
            get: function () { var self = this; return self.localStorageService.get('devicesTable_currentStateView') || ''; },
            set: function (val) { var self = this; self.localStorageService.set('devicesTable_currentStateView', val); self.filterDevices(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DevicesController.prototype, "currentServerPoolView", {
            get: function () { var self = this; return self.localStorageService.get('devicesTable_currentServerPoolView') || ''; },
            set: function (val) { var self = this; self.localStorageService.set('devicesTable_currentServerPoolView', val); self.filterDevices(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DevicesController.prototype, "searchText", {
            get: function () {
                var self = this;
                return self._searchText;
            },
            set: function (value) {
                var self = this;
                self._searchText = value;
                self.filterDevices();
            },
            enumerable: true,
            configurable: true
        });
        DevicesController.prototype.calcButtonOverflow = function () {
            var self = this;
            self.buttonoverflow = [];
            var collapsibleBars = $('.collapsible-button-bar');
            angular.forEach(collapsibleBars, function (b) {
                var taskbar = $(b);
                var currentWidth = 0;
                var taskbarWidth = taskbar.width();
                var buttons = taskbar.find('li');
                angular.forEach(buttons, function (button) {
                    var bWidth;
                    if ($(button).data('current-width'))
                        bWidth = parseInt($(button).data('current-width'));
                    else {
                        bWidth = $(button).width();
                        $(button).data('current-width', bWidth);
                    }
                    currentWidth += bWidth;
                    if (button.id && currentWidth > (taskbarWidth - 375))
                        self.buttonoverflow.push(button.id);
                });
            });
        };
        DevicesController.prototype.activate = function () {
            var self = this;
            // self.checkSelected = self.checkselected();
            $(window).resize(function () {
                if (self.resizetimer)
                    self.$timeout.cancel(self.resizetimer);
                self.resizetimer = self.$timeout(function () {
                    self.calcButtonOverflow();
                }, 300);
            });
            self.refresh();
            self.$http.post(self.Commands.data.services.getServiceDropdown, {
                criteriaObj: {
                    currentPage: 1,
                    filterObj: [],
                    firstDisplayedRowNumber: 0,
                    itemCount: '0',
                    lastDisplayedRowNumber: '0',
                    lastPage: 0,
                    nextPageEnabled: false,
                    paginationObj: { currentPage: 0, rowCountPerPage: 9999, currentCount: 0, totalItemsCount: 0 },
                    previousPageEnabled: false,
                    sortObj: [{ field: 'name', order: 1 }]
                },
                requestObj: []
            })
                .then(function (data) {
                //sort by name, then add All at top
                var sortedData = _.sortBy(data.data.responseObj, function (n) {
                    return n.name.toLowerCase();
                });
                self.services = sortedData;
                //self.currentServiceView = '';
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            });
            angular.element(self.$window).bind('scroll', function () {
                self.scrollPos();
            });
            angular.element(self.$window).bind('resize', function () {
                self.scrollPos();
            });
            self.$rootScope.$on('$locationChangeSuccess', function () {
                self.$timeout.cancel(self.resizetimer);
                self.$timeout.cancel(self.deviceTimeout);
            });
            self.$rootScope.$watch('ASM.gettingStarted', function (newVal, oldVal) {
                if (newVal && oldVal) {
                    if (newVal.pendingResources < oldVal.pendingResources) {
                        self.refresh();
                    }
                }
            });
        };
        DevicesController.prototype.clearTooltips = function () {
            $('.tooltip').remove();
        };
        DevicesController.prototype.scrollPos = function () {
            var self = this;
            self.$timeout.cancel(self.animate);
            self.animate = self.$timeout(function () {
                var currentPos = self.$window.pageYOffset;
                var panelHeight = $('#devicePanel').height();
                var sidebarHeight = $('#deviceInfo').height();
                var adjust = (sidebarHeight + currentPos) - panelHeight;
                if (adjust > 0 && currentPos >= adjust)
                    currentPos -= adjust;
                if (sidebarHeight > panelHeight)
                    currentPos = 0;
                $('#deviceInfo').animate({ 'margin-top': currentPos + 'px' }, 'slow');
            }, 100);
        };
        DevicesController.prototype.clickTab = function (tab) {
            var self = this;
            self.activeTab = tab;
            if (tab === 'AllResources') {
                self.$rootScope.helpToken = 'resources';
            }
            else if (tab === 'ServerPools') {
                self.$rootScope.helpToken = 'serverpools';
            }
        };
        DevicesController.prototype.launchManagementIP = function (ipAddressUrl) {
            window.open(ipAddressUrl);
        };
        DevicesController.prototype.selectedDevices = function () {
            return _.filter(this.devices, { 'isChecked': true });
        };
        DevicesController.prototype.removeDisabled = function () {
            var self = this;
            return !!_.find(self.selectedDevices(), function (device) {
                return ['deploying', 'inuse', 'pendingupdates', 'pendingdelete', 'updating'].indexOf(device.status) !== -1;
            });
        };
        DevicesController.prototype.filterDevices = function () {
            var self = this;
            if (!self.alldevices || self.alldevices.length === 0) {
                self.devices = [];
                self.displayeddevices = [];
                return;
            }
            //self.devices = self.$filter('filter')(self.alldevices, {
            //    deviceType: self.currentView || '',
            //    health: self.currentHealthView || '',
            //    displayservicelist: self.currentServiceView || '',
            //    state: self.currentStateView || '',
            //    displayserverpools: self.currentServerPoolView || ''
            //});
            var filteredDevices = angular.copy(self.alldevices);
            if (self.searchText) {
                self.showSearch = true;
                filteredDevices = self.$filter("filter")(filteredDevices, self.searchText);
            }
            //filter on selected property
            if (self.currentHealthView) {
                self.showFilters = true;
                filteredDevices = _.filter(filteredDevices, function (d) {
                    return d.health === self.currentHealthView;
                });
            }
            if (self.currentServiceView) {
                self.showFilters = true;
                filteredDevices = _.filter(filteredDevices, function (d) {
                    return _.find(d.servicelist, { id: self.currentServiceView });
                });
            }
            if (self.currentStateView) {
                self.showFilters = true;
                filteredDevices = _.filter(filteredDevices, function (d) {
                    return d.state === self.currentStateView;
                });
            }
            if (self.currentServerPoolView) {
                self.showFilters = true;
                filteredDevices = _.filter(filteredDevices, function (d) {
                    return _.find(d.displayserverpools.split(","), function (pool) {
                        return pool === self.currentServerPoolView;
                    });
                });
            }
            //filter based on deviceType
            switch (self.currentView) {
                case 'chassis':
                    self.devices = _.filter(filteredDevices, function (d) {
                        self.showFilters = true;
                        return d.deviceType === 'ChassisM1000e' || d.deviceType === 'ChassisVRTX' || d.deviceType === 'ChassisFX';
                    });
                    break;
                case 'server':
                    self.devices = _.filter(filteredDevices, function (d) {
                        self.showFilters = true;
                        return d.deviceType === 'RackServer' || d.deviceType === 'TowerServer' || d.deviceType === 'BladeServer'
                            || d.deviceType === 'Server' || d.deviceType === 'FXServer';
                    });
                    break;
                case 'switch':
                    self.devices = _.filter(filteredDevices, function (d) {
                        self.showFilters = true;
                        return d.deviceType === 'AggregatorIOM' || d.deviceType === 'MXLIOM' || d.deviceType === 'FXIOM'
                            || d.deviceType === 'genericswitch' || d.deviceType === 'dellswitch' || d.deviceType === 'ciscoswitch';
                    });
                    break;
                case 'unsupported':
                    self.devices = _.filter(filteredDevices, function (d) {
                        self.showFilters = true;
                        return d.deviceType === 'Unsupported';
                    });
                    break;
                case 'vcenter':
                    self.devices = _.filter(filteredDevices, function (d) {
                        self.showFilters = true;
                        return d.deviceType === 'vcenter';
                    });
                    break;
                case 'scvmm':
                    self.devices = _.filter(filteredDevices, function (d) {
                        self.showFilters = true;
                        return d.deviceType === 'scvmm';
                    });
                    break;
                case 'vmm':
                    self.devices = _.filter(filteredDevices, function (d) {
                        self.showFilters = true;
                        return d.deviceType === 'scvmm' || d.deviceType === 'vcenter';
                    });
                    break;
                case 'em':
                    self.devices = _.filter(filteredDevices, function (d) {
                        self.showFilters = true;
                        return d.deviceType === 'em';
                    });
                    break;
                case 'storage':
                    self.devices = _.filter(filteredDevices, function (d) {
                        self.showFilters = true;
                        return d.deviceType === 'storage' || d.deviceType === 'compellent' || d.deviceType === 'equallogic'
                            || d.deviceType === 'netapp' || d.deviceType === 'emcvnx' || d.deviceType === 'emcunity';
                    });
                    break;
                case 'scaleio':
                    self.devices = _.filter(filteredDevices, function (d) {
                        self.showFilters = true;
                        return d.deviceType === 'scaleio';
                    });
                    break;
                default:
                    self.devices = filteredDevices;
                    break;
            }
            self.displayeddevices = [].concat(self.devices);
        };
        //Reusable refresh method that we can put on a timeout
        DevicesController.prototype.refresh = function () {
            var self = this;
            //old part of the test:  || self.selectedDevices().length > 0
            if (self.pauseRefreshDevices) {
                //skip call and wait for next refresh cycle
                self.$timeout.cancel(self.deviceTimeout);
                self.deviceTimeout = self.$timeout(function () {
                    self.refresh();
                }, 120000); //2 minutes
                return;
            }
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors();
            self.Loading(d.promise).then(function () {
                self.$timeout(self.calcButtonOverflow, 500);
            });
            self.$q.all([
                self.$http.post(self.Commands.data.devices.getDeviceList, null)
                    .then(function (data) {
                    if (self.GlobalServices.cache.devices.length > 0) {
                        self.GlobalServices.cache.devices = data.data.responseObj;
                    }
                    //testing code
                    //console.log('getDeviceList response:');
                    //console.log(JSON.stringify(data.data.responseObj));
                    //sort by deviceType
                    var sortedData = _.sortBy(data.data.responseObj, function (n) {
                        return n.deviceType.toLowerCase();
                    });
                    angular.forEach(sortedData, function (device) {
                        var match = _.find(self.devices, { id: device.id });
                        if (match)
                            device.isChecked = match.isChecked;
                    });
                    self.alldevices = sortedData;
                    angular.forEach(self.alldevices, function (device) {
                        device.displayservicelist = device.servicelist.join(',');
                        device.displayserverpools = device.displayserverpools || '';
                    });
                    self.filterDevices();
                    if (!self.selectedDevice && self.displayeddevices.length) {
                        self.selectedDevice = angular.copy(self.displayeddevices[0]);
                        self.selectedDeviceId = self.selectedDevice.id;
                        self.selectRow(self.selectedDevice);
                    }
                }),
                self.$http.post(self.Commands.data.serverpools.getServerPools, null)
                    .then(function (data) {
                    //sort by name, then add All at top
                    var sortedData = _.sortBy(data.data.responseObj, function (n) {
                        return n.name.toLowerCase();
                    });
                    self.serverpools = sortedData;
                    self.safeSources.serverPoolsTab.serverPools = [].concat(self.serverpools);
                    //load up drop down list for server filter
                    angular.copy(self.serverpools, self.serverpoolslist);
                    //self.currentServerPoolView = '';
                    if (self.serverpools.length) {
                        self.selectServerPoolRow(self.selectedServerPoolId
                            ? _.find(self.serverpools, { id: self.selectedServerPoolId })
                            : self.serverpools[0]);
                    }
                })
            ]).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () {
                self.$timeout.cancel(self.deviceTimeout);
                self.deviceTimeout = self.$timeout(function () {
                    self.refresh();
                }, 120000); //2 minutes
                d.resolve();
            });
        };
        DevicesController.prototype.getManageStateOptions = function () {
            var self = this;
            if (!self.devices)
                return null;
            //var states = self.constants.availableManagedStates.slice();
            var states = self.availableManagedStates.slice();
            /* updated 2/8/17 jb
               removed the logic to determine the state options dynamically based on selection/checked status
               because the back-end now does validation on this anyway so we do not have to handle this on the front end;
               we will now just show all options in ths list all the time */
            //var manage = true;
            //var unmanage = true;
            //var reserved = true;
            //$.each(self.devices, function (index, device) {
            //    if (device.isChecked) {
            //        if (manage && device.state === 'managed') {
            //            manage = false;
            //        } else if (unmanage && device.state === 'unmanaged') {
            //            unmanage = false;
            //        } else if (reserved && device.state === 'reserved') {
            //            reserved = false;
            //        }
            //    }
            //});
            //if (!reserved)
            //    states.splice(3, 1);
            //if (!unmanage)
            //    states.splice(2, 1);
            //if (!manage)
            //    states.splice(1, 1);
            return states;
        };
        DevicesController.prototype.getManageStateOptions_buttonoverflow = function () {
            var self = this;
            if (!self.devices)
                return null;
            var states = self.availableManagedStates_buttonoverflow.slice();
            return states;
        };
        DevicesController.prototype.updateManagedState = function () {
            var self = this;
            var confirmMsg = '';
            var action = '';
            if (self.resourceState === '')
                return;
            else if (self.resourceState === 'managed') {
                action = 'manage';
                confirmMsg = self.$translate.instant('DEVICES_ConfirmManage');
            }
            else if (self.resourceState === 'unmanaged') {
                action = 'unmanage';
                confirmMsg = self.$translate.instant('DEVICES_ConfirmUnmanage');
            }
            else if (self.resourceState === 'reserved') {
                action = 'reserve';
                confirmMsg = self.$translate.instant('DEVICES_ConfirmReserve');
            }
            var confirm = self.Dialog((self.$translate.instant('GENERIC_Confirm')), confirmMsg);
            confirm.then(function () {
                var selectedDevices = [];
                $.each(self.devices, function (index, model) {
                    if (model.isChecked)
                        selectedDevices.push(model.id);
                });
                self.$http.post('devices/' + action, selectedDevices)
                    .then(function () {
                    //refresh also clears the checked items
                    self.refresh();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            });
            //reset change resource state message whether confirmed or not
            self.resourceState = '';
        };
        //figures out whether to select the first device, no device, or keep the existing device on filter change
        DevicesController.prototype.selectFirstDevice = function () {
            var self = this;
            if (self.selectedDevice.id && self.displayeddevices.length) {
                var deviceFound = self.$filter('filter')(self.displayeddevices, { id: self.selectedDevice.id }, true).length;
                if (deviceFound) {
                    return true;
                }
                else {
                    if (self.displayeddevices.length) {
                        self.selectRow(self.displayeddevices[0]);
                    }
                    else {
                        self.selectedDevice = { id: '' };
                    }
                }
            }
            else {
                if (self.displayeddevices.length) {
                    self.selectRow(self.displayeddevices[0]);
                }
                else {
                    self.selectedDevice = { id: '' };
                }
            }
        };
        DevicesController.prototype.selectRow = function (device) {
            var self = this;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            //if called from refresh() q$
            //an error is trapped during 
            //the copy: Can't copy! Source and 
            //destination are identical.
            if (device.id != self.selectedDeviceId)
                angular.copy(device, self.selectedDevice);
            //            self.loadingDetails = true;
            self.$http.post(self.Commands.data.devices.getDeviceById, { id: device.id }).then(function (data) {
                //data.data.responseObj = { "id": "e31c2cad-4c24-4787-a1a4-5be4a7bdc2e4", "state": "Normal", "deviceType": "scaleio", "deviceDetails": { "id": null, "protectedInKb": 122234, "inMaintenanceInKb": 222133, "degradedInKb": 333345, "failedInKb": 222243, "unusedInKb": 333345, "spareInKb": 345435, "decreasedInKb": 223344, "unavailableUnusedInKb": 333455, "maxCapacityInKb": 444555 }, "scaleIOProtectionDomains": [{ "id": "75765465-6eb5-49ea-96a7-eb880aecbf71", "protectionDomainName": "SDS", "scaleIOServerTypes": [{ "id": "27a692d1-8d5a-492c-bd3b-d52bb486b79e", "name": "Hostname 1", "scaleIOServerDetails": [{ "id": "c60458cd-4df0-4d64-8ed5-3d00a13cfdba", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.1"] }, { "id": "8925d926-9a69-4658-b0da-dcb975f5c7c5", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.2"] }, { "id": "e7ad1ec5-3379-4f2e-9d99-0689b6a52f6c", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.3"] }, { "id": "c7222183-ab43-4c37-bff5-374a2a9c4d24", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.4"] }] }, { "id": "0fa221ff-2a52-4b40-891c-45b02f43ea1b", "name": "Hostname 2", "scaleIOServerDetails": [{ "id": "c60458cd-4df0-4d64-8ed5-3d00a13cfdba", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.1"] }, { "id": "8925d926-9a69-4658-b0da-dcb975f5c7c5", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.2"] }, { "id": "e7ad1ec5-3379-4f2e-9d99-0689b6a52f6c", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.3"] }, { "id": "c7222183-ab43-4c37-bff5-374a2a9c4d24", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.4"] }] }], "scaleIOStoragePools": [] }, { "id": "1e9d1606-5b16-4407-b929-c9402c8323e5", "protectionDomainName": "SDS", "scaleIOServerTypes": [{ "id": "27a692d1-8d5a-492c-bd3b-d52bb486b79e", "name": "Hostname 1", "scaleIOServerDetails": [{ "id": "c60458cd-4df0-4d64-8ed5-3d00a13cfdba", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.1"] }, { "id": "8925d926-9a69-4658-b0da-dcb975f5c7c5", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.2"] }, { "id": "e7ad1ec5-3379-4f2e-9d99-0689b6a52f6c", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.3"] }, { "id": "c7222183-ab43-4c37-bff5-374a2a9c4d24", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.4"] }] }, { "id": "0fa221ff-2a52-4b40-891c-45b02f43ea1b", "name": "Hostname 2", "scaleIOServerDetails": [{ "id": "c60458cd-4df0-4d64-8ed5-3d00a13cfdba", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.1"] }, { "id": "8925d926-9a69-4658-b0da-dcb975f5c7c5", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.2"] }, { "id": "e7ad1ec5-3379-4f2e-9d99-0689b6a52f6c", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.3"] }, { "id": "c7222183-ab43-4c37-bff5-374a2a9c4d24", "name": "Hostname 1", "connected": null, "ipAddresses": ["10.10.10.4"] }] }], "scaleIOStoragePools": [] }, { "id": "eac9333e-0b7d-4a1a-9df8-06114321766b", "protectionDomainName": "StoragePool 1", "scaleIOServerTypes": [], "scaleIOStoragePools": [{ "id": "02a4ef89-1af9-41c3-96cd-3baf8370378f", "name": "Storage Pool 1", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }, { "id": "0c095624-9480-4200-8f17-3821a2e09328", "name": "Storage Pool 2", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }, { "id": "86e35c80-5a63-4bdd-b912-591776ef943e", "name": "Storage Pool 3", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }, { "id": "caebec8c-4e89-4bc3-b98b-998abfc49822", "name": "Storage Pool 4", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }] }, { "id": "a09a5a69-6e88-4237-8fb6-4ee0f47ac107", "protectionDomainName": "StoragePool 2", "scaleIOServerTypes": [], "scaleIOStoragePools": [{ "id": "02a4ef89-1af9-41c3-96cd-3baf8370378f", "name": "Storage Pool 1", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }, { "id": "0c095624-9480-4200-8f17-3821a2e09328", "name": "Storage Pool 2", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }, { "id": "86e35c80-5a63-4bdd-b912-591776ef943e", "name": "Storage Pool 3", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }, { "id": "caebec8c-4e89-4bc3-b98b-998abfc49822", "name": "Storage Pool 4", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }] }, { "id": "e5fe487b-e2ca-4d72-825a-d9ac4d2b2d92", "protectionDomainName": "StoragePool 3", "scaleIOServerTypes": [], "scaleIOStoragePools": [{ "id": "02a4ef89-1af9-41c3-96cd-3baf8370378f", "name": "Storage Pool 1", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }, { "id": "0c095624-9480-4200-8f17-3821a2e09328", "name": "Storage Pool 2", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }, { "id": "86e35c80-5a63-4bdd-b912-591776ef943e", "name": "Storage Pool 3", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }, { "id": "caebec8c-4e89-4bc3-b98b-998abfc49822", "name": "Storage Pool 4", "scaleIOStorageVolumes": [{ "id": "9f92d3c4-ba8c-4a25-8e1e-2b7d7ff4d209", "name": "Volume1", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "f484245d-f938-477f-ab8e-f964fd1787c9", "name": "Volume2", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "48b4eade-7aed-4234-9177-80b8640b4252", "name": "Volume3", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }, { "id": "15a53c4f-149b-430f-94f6-262d671c2676", "name": "Volume4", "size": "5.5TB", "type": "Thin", "mappedSDCs": 3 }] }] }], "connectionState": "Joined", "membershipState": "Connected", "protectionDomainCount": 6, "serverCount": 10, "volumeCount": 215, "sDCCount": 10, "sDSCount": 15, "management": "Clustered" };
                //                self.selectedDevice = data.data.responseObj;
                angular.extend(self.selectedDevice, data.data.responseObj);
                self.selectedDeviceId = self.selectedDevice.id;
                //testing code
                //console.log('self.selectedDeviceId:');
                //console.log(JSON.stringify(self.selectedDeviceId));
                //                self.loadingDetails = false;
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { deferred.resolve(); });
            if (self.selectedDevice.deviceType === 'vcenter') {
                self.$http.post(self.Commands.data.devices.getVCenter, { id: device.id }).then(function (data) {
                    self.vcenter = data.data.responseObj;
                }).catch(function (response) {
                    self.vcenter = null;
                    self.GlobalServices.DisplayError(response.data);
                }).finally(function () { deferred.resolve(); });
                ;
            }
            if (self.selectedDevice.deviceType === 'scvmm') {
                self.$http.post(self.Commands.data.devices.getSCVMM, { id: device.id }).then(function (data) {
                    self.scvmm = data.data.responseObj;
                }).catch(function (response) {
                    self.scvmm = null;
                    self.GlobalServices.DisplayError(response.data);
                }).finally(function () { deferred.resolve(); });
                ;
            }
            //if (self.selectedDevice.deviceType === 'ciscoswitch') {
            //    self.selectedDeviceImageClass = self.selectedDevice.modelid;
            //}
            switch (self.selectedDevice.deviceType) {
                case 'ChassisM1000e':
                case 'ChassisVRTX':
                case 'ChassisFX':
                case 'BladeServer':
                case 'RackServer':
                case 'TowerServer':
                case 'FXServer':
                case 'AggregatorIOM':
                case 'MXLIOM':
                case 'FXIOM':
                case 'Server':
                case 'dellswitch':
                case 'ciscoswitch':
                case 'compellent':
                case 'equallogic':
                case 'emcvnx':
                case 'emcunity':
                case 'scaleio':
                    self.viewDetailsAvailable = true;
                    break;
                default:
                    self.viewDetailsAvailable = false;
            }
        };
        DevicesController.prototype.selectServerPoolRow = function (serverPool) {
            var self = this;
            self.serverPoolActiveTab = 'Servers';
            //testing code                
            //angular.forEach(serverPool.servers, (server: any) => {
            //    server.ipaddressurl = 'http://1.1.1.1';
            //})
            angular.copy(serverPool, self.selectedServerPool);
            angular.extend(self.safeSources.serverPoolsTab, {
                servers: angular.copy(serverPool.servers),
                users: angular.copy(serverPool.users)
            });
        };
        DevicesController.prototype.remove = function () {
            var self = this;
            var confirm = self.Dialog(('Confirm'), self.$translate.instant('DEVICES_RemoveConfirm'));
            confirm.then(function () {
                var ids = [];
                self.displayeddevices.forEach(function (device) {
                    if (device.isChecked) {
                        ids.push(device.id);
                    }
                });
                self.$http.post(self.Commands.data.devices.remove, ids)
                    .then(function () {
                    //clear out selected
                    self.selectedDevice = null;
                    self.selectedDeviceId = null;
                    self.refresh();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data);
                });
            });
        };
        DevicesController.prototype.launchGUI = function () {
            var self = this;
            window.open(self.selectedDevice.ipaddressurl);
        };
        DevicesController.prototype.clearFilter = function () {
            var self = this;
            self.currentView =
                self.currentHealthView =
                    self.currentServiceView =
                        self.currentStateView =
                            self.currentServerPoolView = '';
        };
        DevicesController.prototype.createNewServerPool = function () {
            var self = this;
            self.pauseRefreshDevices = true;
            var createnewServerPoolModal = self.Modal({
                title: self.$translate.instant('RESOURCE_CREATE_SERVER_POOL_CreateServerPool'),
                onHelp: function () {
                    self.GlobalServices.showHelp('serverpoolcreate');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/newserverpoolwizard.html',
                controller: 'NewServerPoolWizardController as newServerPoolWizardController',
                params: {},
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function () {
                        console.log('closing');
                        createnewServerPoolModal.modal.close();
                        self.pauseRefreshDevices = false;
                    });
                },
                //TODO: make onfinish actually fire
                onComplete: function () {
                    self.pauseRefreshDevices = false;
                    self.refresh();
                }
            });
            createnewServerPoolModal.modal.show();
        };
        DevicesController.prototype.editServerPool = function () {
            var self = this;
            self.pauseRefreshDevices = true;
            var createnewServerPoolModal = self.Modal({
                title: self.$translate.instant('RESOURCE_EDIT_SERVER_POOL_EditServerPool'),
                onHelp: function () {
                    self.GlobalServices.showHelp('serverpooledit');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/newserverpoolwizard.html',
                controller: 'NewServerPoolWizardController as newServerPoolWizardController',
                params: {
                    pool: angular.copy(self.getChecked(self.serverpools)[0]),
                    editMode: true
                },
                onCancel: function (noConfirm) {
                    if (noConfirm) {
                        self.pauseRefreshDevices = false;
                        createnewServerPoolModal.modal.close();
                    }
                    else {
                        self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function () {
                            self.pauseRefreshDevices = false;
                            createnewServerPoolModal.modal.close();
                        });
                    }
                },
                onComplete: function () {
                    self.pauseRefreshDevices = false;
                    self.refresh();
                }
            });
            createnewServerPoolModal.modal.show();
        };
        DevicesController.prototype.removeServerPool = function () {
            var self = this;
            var confirm = self.Dialog(('Confirm'), self.$translate.instant('SERVERPOOLS_RemoveConfirm'));
            confirm.then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors();
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.serverpools.remove, self.getCheckedIds(self.serverpools)).then(function () {
                    self.refresh();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                })
                    .finally(function () {
                    d.resolve();
                });
            });
        };
        DevicesController.prototype.toggleAll = function (array) {
            var self = this, allSelected = self.getNumChecked(array) === array.length;
            angular.forEach(array, function (user) {
                user.isChecked = !allSelected;
            });
        };
        DevicesController.prototype.canDeleteAll = function (array) {
            var self = this;
            return !_.find(self.getChecked(array), { canDelete: false });
        };
        DevicesController.prototype.getChecked = function (array) {
            return _.filter(array, { isChecked: true });
        };
        DevicesController.prototype.getCheckedIds = function (array) {
            var self = this;
            return self.getChecked(array).map(function (pool) { return pool.id; });
        };
        DevicesController.prototype.isTypeChassis = function (type) {
            return !!_.find(['ChassisM1000e', 'ChassisVRTX', 'ChassisFX'], function (val) { return val === type; });
        };
        DevicesController.prototype.configureChassisButtonDisabled = function () {
            var self = this;
            var configurableCheckedChassis = self.getConfigurableCheckedChassis();
            return !configurableCheckedChassis || configurableCheckedChassis.length !== self.getChecked(self.devices).length;
        };
        DevicesController.prototype.getConfigurableCheckedChassis = function () {
            var self = this;
            var checkedDevices = self.getChecked(self.devices);
            return checkedDevices.length ? _.filter(checkedDevices, function (device) {
                return self.isTypeChassis(device.deviceType) && device.status !== 'updating';
            }).map(function (chassis) { return chassis.id; }) : undefined;
        };
        DevicesController.prototype.getNumChecked = function (array) {
            var self = this;
            return self.getChecked(array).length;
        };
        DevicesController.prototype.launchDiscoverWizard = function () {
            var self = this;
            self.pauseRefreshDevices = true;
            var discoveryWizard = self.Modal({
                title: self.$translate.instant('DISCOVERY_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp();
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/discoverywizard.html',
                controller: 'DiscoveryWizardController as DiscoveryWizard',
                params: {
                    mode: 'resources'
                },
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DISCOVERY_Cancel_Confirmation'));
                    confirm.then(function () {
                        self.pauseRefreshDevices = false;
                        discoveryWizard.modal.dismiss();
                    });
                },
                onComplete: function () {
                    self.pauseRefreshDevices = false;
                }
            });
            discoveryWizard.modal.show();
        };
        DevicesController.prototype.configureChassis = function () {
            var self = this;
            self.pauseRefreshDevices = true;
            var configChassis = self.Modal({
                title: self.$translate.instant('DEVICES_CONFIGURE_CHASSIS_ConfigureChassis'),
                onHelp: function () {
                    self.GlobalServices.showHelp();
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/configurechassiswizard.html',
                controller: 'ConfigureChassisWizardController as ConfigureChassis',
                params: {
                    id: self.selectedDeviceId,
                    devices: self.getConfigurableCheckedChassis()
                },
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DEVICES_Apply_Firmware_Updates_Cancel_Confirmation')).then(function () {
                        self.pauseRefreshDevices = false;
                        configChassis.modal.dismiss();
                    });
                },
                onComplete: function () {
                    self.pauseRefreshDevices = false;
                    self.refresh();
                }
            });
            configChassis.modal.show();
        };
        DevicesController.prototype.runInventory = function () {
            var self = this;
            var selectedDevices = [];
            $.each(self.devices, function (index, model) {
                if (model.isChecked)
                    selectedDevices.push(model.id);
            });
            self.$http.post(self.Commands.data.devices.runInventory, { requestObj: selectedDevices })
                .then(function () {
                //note that this is asynchronous
                self.MessageBox((self.$translate.instant('GENERIC_Alert')), (self.$translate.instant('DEVICES_Alert_RunInventorySuccess')));
                self.refresh();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        DevicesController.prototype.updateFirmware = function () {
            var self = this;
            self.pauseRefreshDevices = true;
            var selectedDeviceIds = [];
            $.each(self.devices, function (index, model) {
                if (model.isChecked)
                    selectedDeviceIds.push(model.id);
            });
            var updateFirmware = self.Modal({
                title: self.$translate.instant('DEVICES_Apply_Resource_Updates_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('resourcesupdatingfirmware');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/updateservicefirmware.html',
                controller: 'UpdateServiceFirmwareController as UpdateServiceFirmware',
                params: {
                    id: self.selectedDeviceId,
                    ids: selectedDeviceIds,
                    mode: 'device'
                },
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DEVICES_Apply_Firmware_Updates_Cancel_Confirmation'));
                    confirm.then(function () {
                        self.pauseRefreshDevices = false;
                        updateFirmware.modal.dismiss();
                        self.refresh();
                    });
                },
                onComplete: function () {
                    self.pauseRefreshDevices = false;
                    self.refresh(); //When the modal is closed, update the data.
                }
            });
            updateFirmware.modal.show();
        };
        DevicesController.prototype.exportAll = function () {
            var self = this;
            var deferred = self.$q.defer();
            self.GlobalServices.ClearErrors();
            self.Loading(deferred.promise);
            self.doDownloadRequests('initial', '', deferred);
        };
        DevicesController.prototype.doDownloadRequests = function (call, id, deferred) {
            var self = this;
            var urlToCall;
            var data;
            urlToCall = self.Commands.data.downloads.status;
            data = { 'id': id };
            if (call === 'initial') {
                urlToCall = self.Commands.data.downloads.create;
                data = { 'type': 'devices' };
            }
            self.$http.post(urlToCall, { requestObj: data })
                .then(function (data) {
                switch (data.data.responseObj.status) {
                    case 'NOT_READY':
                        self.$timeout(function () {
                            self.doDownloadRequests('status', data.data.responseObj.id, deferred);
                        }, 5000);
                        break;
                    case 'READY':
                        self.$window.location.assign("downloads/getfile/" + data.data.responseObj.id);
                        deferred.resolve();
                        break;
                    case 'ERROR':
                        deferred.resolve();
                        var errorObj = { message: self.$translate.instant('DEVICES_ExportAll_ErrorExportingDevices'), details: '' };
                        self.GlobalServices.DisplayError(errorObj);
                        break;
                }
            }).catch(function (data) {
                deferred.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        DevicesController.prototype.openFirmwareReport = function (deviceId) {
            var self = this;
            self.pauseRefreshDevices = true;
            var firmwareReportModal = self.Modal({
                title: self.$translate.instant('SERVICES_RESOURCE_FirmwareReportTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('viewfirmwarecompliance');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/resourcecompliancereport.html',
                controller: 'ResourceComplianceReportController as resourceComplianceReportController',
                params: {
                    id: deviceId
                },
                onComplete: function () {
                    self.pauseRefreshDevices = false;
                    self.refresh();
                }
            });
            firmwareReportModal.modal.show();
        };
        DevicesController.prototype.jobsModal = function () {
            var self = this;
            self.pauseRefreshDevices = true;
            var jobsModal = self.Modal({
                title: 'Jobs',
                modalSize: 'modal-lg',
                templateUrl: 'views/jobsmodal.html',
                controller: 'JobsModalController as jobs',
                params: {},
                onComplete: function () {
                    self.pauseRefreshDevices = false;
                }
            });
            jobsModal.modal.show();
        };
        DevicesController.prototype.disableUpdateResourcesButton = function () {
            var self = this, count, selectedDevices = self.selectedDevices();
            return !selectedDevices.length || !!_.find(selectedDevices, function (device) {
                if (!self.canUpdateFirmware(device)) {
                    return true;
                }
                if ((device.availability !== 'notinuse' && device.status !== 'ready') || device.state === 'unmanaged')
                    return true;
                if (device.availability === 'inuse' && self.isServer(device))
                    return true;
                if (device.compliant === 'compliant' || device.compliant === 'updating')
                    return true;
                if (self.isChassis(device) || self.isDellSwitch(device) || self.isCiscoSwitch(device) || self.isServer(device)) {
                    count++;
                    if (count > 1)
                        return true;
                }
                if (self.isStorage(device))
                    return true;
                //if (self.isFirmwareUpdated()) {
                //    returnVal = false;
                //    self.isFirmwareUpdated(false);
                //}
                //return returnVal;
                return false;
            });
        };
        DevicesController.prototype.logSelectedDeviceDetails = function () {
            var self = this;
            console.log('logSelectedDeviceDetails()');
            console.log('self.configureResources.devices:');
            console.log(JSON.stringify(self.selectedDevice));
            console.log('done');
        };
        DevicesController.prototype.isChassis = function (device) {
            return (device.deviceType === 'ChassisM1000e' || device.deviceType === 'ChassisVRTX' || device.deviceType === 'ChassisFX');
        };
        DevicesController.prototype.isFX2 = function (device) {
            return (device.deviceType === 'ChassisFX');
        };
        DevicesController.prototype.isIOM = function (device) {
            return (device.deviceType === 'AggregatorIOM' || device.deviceType === 'MXLIOM' || device.deviceType === 'FXIOM');
        };
        DevicesController.prototype.isServer = function (device) {
            return (device.deviceType === 'RackServer' || device.deviceType === 'TowerServer' || device.deviceType === 'BladeServer' || device.deviceType === 'FXServer' || device.deviceType === 'Server');
        };
        DevicesController.prototype.isStorage = function (device) {
            return device.deviceType === 'storage' || device.deviceType === 'compellent' || device.deviceType === 'equallogic' || device.deviceType === 'netapp' || device.deviceType === 'emcvnx' || device.deviceType === 'emcunity';
        };
        DevicesController.prototype.isEqualLogic = function (device) {
            return (device.deviceType === 'equallogic');
        };
        DevicesController.prototype.isCompellent = function (device) {
            return (device.deviceType === 'compellent');
        };
        DevicesController.prototype.isEmcvnx = function (device) {
            return device.deviceType === 'emcvnx';
        };
        DevicesController.prototype.isEmcUnity = function (device) {
            return device.deviceType === 'emcunity';
        };
        DevicesController.prototype.isNetApp = function (device) {
            return (device.deviceType === 'netapp');
        };
        DevicesController.prototype.isDellSwitch = function (device) {
            return (device.deviceType === 'dellswitch' || device.deviceType === 'genericswitch');
        };
        DevicesController.prototype.isCiscoSwitch = function (device) {
            return (device.deviceType === 'ciscoswitch');
        };
        DevicesController.prototype.isScaleIO = function (device) {
            return (device.deviceType === 'scaleio');
        };
        DevicesController.prototype.canUpdateFirmware = function (device) {
            return !(device.deviceType === 'genericswitch' || device.deviceType === 'scaleio' || device.deviceType === 'vcenter' || device.deviceType === 'em');
        };
        DevicesController.$inject = ['$http', '$window', '$translate',
            '$timeout', 'Dialog', 'Loading',
            '$q', 'Modal', 'Commands',
            'GlobalServices', 'Messagebox', '$rootScope',
            '$routeParams', '$filter', 'constants', 'localStorageService'];
        return DevicesController;
    }());
    asm.DevicesController = DevicesController;
    angular
        .module('app')
        .controller('DevicesController', DevicesController);
})(asm || (asm = {}));
//# sourceMappingURL=devices.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceSummaryController = (function () {
        function DeviceSummaryController($http) {
            this.$http = $http;
            this.refresh();
        }
        DeviceSummaryController.prototype.activate = function () {
            var self = this;
        };
        DeviceSummaryController.prototype.refresh = function () {
            var self = this;
            //Get All Jobs
        };
        DeviceSummaryController.$inject = ['$http'];
        return DeviceSummaryController;
    }());
    asm.DeviceSummaryController = DeviceSummaryController;
    angular.module('app').
        controller('DeviceSummaryController', DeviceSummaryController);
})(asm || (asm = {}));
//# sourceMappingURL=devicesummary.js.map
var asm;
(function (asm) {
    var GettingstartedController = (function () {
        function GettingstartedController() {
        }
        return GettingstartedController;
    }());
    asm.GettingstartedController = GettingstartedController;
    // getting started made into component, "gettingStartedComponent.ts"
    angular
        .module('app')
        .controller('GettingstartedController', GettingstartedController);
})(asm || (asm = {}));
//# sourceMappingURL=gettingStarted.js.map
var asm;
(function (asm) {
    var HomeController = (function () {
        function HomeController($http, $filter, $translate, $timeout, GlobalServices, Modal, $location, dialog, Commands, $q, $rootScope) {
            this.$http = $http;
            this.$filter = $filter;
            this.$translate = $translate;
            this.$timeout = $timeout;
            this.GlobalServices = GlobalServices;
            this.Modal = Modal;
            this.$location = $location;
            this.dialog = dialog;
            this.Commands = Commands;
            this.$q = $q;
            this.$rootScope = $rootScope;
            this.popoverbuttontext = 'Test';
            this.wsMessages = [];
            var self = this;
            self.loadingServerUtilization = true;
            self.loadingServerHealth = true;
            self.viewByOptions = [
                { id: 'lastTenDays', name: self.$translate.instant('DASHBOARD_LastTen') },
                { id: 'lastWeek', name: self.$translate.instant('DASHBOARD_LastWeek') },
                { id: 'lastMonth', name: self.$translate.instant('DASHBOARD_LastMonth') },
                { id: 'lastSixMonths', name: self.$translate.instant('DASHBOARD_LastSixMonths') },
                { id: 'lastYear', name: self.$translate.instant('DASHBOARD_LastYear') }
            ];
            self.config = {};
            self.dashboardRequest = {
                deploymentTemplates: [],
                totalServersInDeployments: 0,
                totalServersAvailable: 0,
                totalChassisAvailable: 0,
                totalIOModAvailable: 0,
                totalIpAddressesAvailable: 0,
                chassisdiscovered: 0,
                serversdiscovered: 0,
                switchesdiscovered: 0,
                storagediscovered: 0,
                licenseData: {
                    id: '',
                    licensefile: '',
                    type: 'Perpetual',
                    totalnodes: 100,
                    usednodes: 0,
                    availablenodes: 0,
                    activationdate: '',
                    expirationdate: new Date(),
                    softwareservicetag: '',
                    currentWizardStep: 0,
                    isValid: true,
                    signature: '',
                    warningmessage: '',
                    expired: false,
                    expiressoon: false,
                    expiressoonmessage: '',
                    force: false
                }
            };
            self.serverHealth = {
                green: 0,
                unknown: 0,
                yellow: 0,
                red: 0
            };
            self.parseServerPoolsProxy = function (data) {
                self.parseServerPools(data);
            };
            self.licenseDataLoaded = false;
            self.isDeployServiceEnabled = false;
            //set default values
            self.gettingStarted = {
                initialConfigurationCompleted: true,
                firmwareUpdateCompleted: true,
                inventoryUpdateCompleted: true
            };
        }
        HomeController.prototype.activate = function () {
            var self = this;
            self.$rootScope.$on('$locationChangeStart', function (a, destination, c) {
                //if actually changing routes. 
                //note: when / is hit, this will fire and change route to /home, this condition checks if route is changing away from home
                if (destination.indexOf("home") === -1) {
                    self.$timeout.cancel(self.gaugeTimeout);
                }
            });
            self.setGauge();
            //service overview config
            self.config = {
                options: {
                    chart: {
                        type: 'pie',
                        renderTo: 'serviceOverviewPie',
                        animation: false,
                        backgroundColor: "none"
                    },
                    title: {
                        text: ''
                    },
                    tooltip: {
                        enabled: true,
                        formatter: function () { return self.getServicesTooltip(this.point.status, this.y); },
                        useHTML: true,
                        style: { zIndex: 99999 },
                        positioner: function (labelWidth, labelHeight, point) { return { x: point.plotX + 10, y: point.plotY + 10 }; }
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            size: '100%',
                            //innerSize: '75%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3,
                            point: {
                                events: {
                                    click: function (evt) {
                                        var _this = this;
                                        self.$timeout(function () {
                                            self.wedge = _this.status;
                                        });
                                    }
                                }
                            }
                        }
                    }
                },
                size: {
                    height: 260,
                    width: 260
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: [],
                        innerSize: '85%'
                    }]
            };
            //server health config
            self.serverHealthConfig = {
                options: {
                    chart: {
                        type: 'pie',
                        renderTo: 'serverHealthPie',
                        animation: false
                    },
                    title: {
                        text: ''
                    },
                    tooltip: {
                        enabled: true,
                        formatter: function () { return self.getServersTooltip(this.point._state, this.y); },
                        useHTML: true,
                        style: { zIndex: 99999 },
                        positioner: function (labelWidth, labelHeight, point) { return { x: point.plotX + 10, y: point.plotY + 10 }; }
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            size: '100%',
                            //innerSize: '75%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3,
                            point: {
                                events: {
                                    click: function (evt) {
                                        var _this = this;
                                        self.$timeout(function () {
                                            self.$location.path("devices/server/" + _this._state);
                                        });
                                    }
                                }
                            }
                        }
                    }
                },
                size: {
                    height: 200,
                    width: 200
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: [],
                        innerSize: '90%'
                    }]
            };
            //server utilization
            self.serverUtilizationConfig = {
                options: {
                    chart: {
                        type: 'pie',
                        renderTo: 'serverUtilizationPie',
                        animation: false
                    },
                    title: {
                        text: ''
                    },
                    tooltip: {
                        enabled: true,
                        formatter: function () { return '<b>' + this.key + ': </b>' + this.y; },
                        useHTML: true,
                        style: { zIndex: 99999 },
                        positioner: function (labelWidth, labelHeight, point) { return { x: point.plotX + 10, y: point.plotY + 10 }; }
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: false,
                            size: '100%',
                            //innerSize: '75%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3,
                            showInLegend: false
                        }
                    }
                },
                size: {
                    height: 200,
                    width: 200
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: [],
                        innerSize: '90%'
                    }]
            };
            //Storage Capacity
            self.scaleIOConfig = {
                options: {
                    chart: {
                        type: 'pie',
                        renderTo: 'dashboardStorageCapacityPie',
                        animation: false
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: false,
                            size: '100%',
                            //innerSize: '75%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3
                        }
                    },
                    tooltip: {
                        enabled: true,
                        formatter: function () {
                            return "<b>" + this.key + ": </b>" + Math.round(this.percentage) + "%";
                        },
                        useHTML: true,
                        style: { zIndex: 99999 },
                        positioner: function (labelWidth, labelHeight, point) { return { x: point.plotX + 10, y: point.plotY + 10 }; }
                    }
                },
                size: {
                    height: 200,
                    width: 200
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: [],
                        innerSize: '90%'
                    }]
            };
            //base server pool usage bar - possible service
            self.serverPoolUsageBaseConfig = {
                options: {
                    chart: {
                        type: 'bar',
                        animation: false,
                        style: { 'font-family': 'inherit', },
                        height: 30,
                        spacingTop: 0,
                        spacingBottom: 0,
                        margin: [0, 0, 0, 0]
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        bar: {
                            allowPointSelect: true,
                            size: '100%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3,
                            stacking: 'percent'
                        }
                    },
                    legend: { enabled: false },
                    xAxis: { labels: { enabled: false }, gridLineWidth: 0, lineColor: 'transparent', tickLength: 0 },
                    yAxis: { labels: { enabled: false }, gridLineWidth: 0, lineColor: 'transparent', tickLength: 0, title: '' },
                    tooltip: { enabled: false }
                },
                margin: 0,
                padding: 0,
                series: []
            };
            self.serverPoolUsageConfigs = [];
            self.refresh('all');
        };
        ;
        //Reusable refresh method that we can put on a timeout
        HomeController.prototype.refresh = function (mode) {
            var self = this, servicesDataCriteriaObj = { paginationObj: { rowCountPerPage: undefined }, filterObj: {} }, genericPieSlice = { sliced: false, selected: false }, request = { requestObj: [], criteriaObj: {} };
            self.loadingServiceOverview = true;
            var filterObj = [];
            if (self.viewBy) {
                switch (self.viewBy) {
                    case "lastTenDays":
                        servicesDataCriteriaObj.paginationObj.rowCountPerPage = 10;
                        filterObj = [];
                        break;
                    case "lastWeek":
                        var week = moment().subtract('week', 6).toISOString();
                        servicesDataCriteriaObj.paginationObj.rowCountPerPage = 9999;
                        filterObj.push({ field: 'deployedOn', op: '>=', opTarget: [week] });
                        break;
                    case "lastMonth":
                        var month = moment().subtract('month', 1).toISOString();
                        servicesDataCriteriaObj.paginationObj.rowCountPerPage = 9999;
                        filterObj.push({ field: 'deployedOn', op: '>=', opTarget: [month] });
                        break;
                    case "lastSixMonths":
                        var sixmonths = moment().subtract('month', 6).toISOString();
                        servicesDataCriteriaObj.paginationObj.rowCountPerPage = 9999;
                        filterObj.push({ field: 'deployedOn', op: '>=', opTarget: [sixmonths] });
                        break;
                    case "lastYear":
                        var oneyear = moment().subtract('year', 1).toISOString();
                        servicesDataCriteriaObj.paginationObj.rowCountPerPage = 9999;
                        filterObj.push({ field: 'deployedOn', op: '>=', opTarget: [oneyear] });
                        break;
                    default:
                        servicesDataCriteriaObj.paginationObj.rowCountPerPage = 9999;
                        break;
                }
            }
            servicesDataCriteriaObj.filterObj = filterObj;
            request.criteriaObj = servicesDataCriteriaObj;
            self.$q.all([
                self.$http.post(self.Commands.data.dashboard.getServicesDashboardData, {
                    servicecancelledcount: 0,
                    servicecount: 0,
                    servicecriticalcount: 0,
                    servicesuccesscount: 0,
                    serviceunknowncount: 0,
                    servicewarningcount: 0,
                    servicependingcount: 0,
                    serviceservicemodecount: 0,
                    serviceincompletecount: 0
                })
                    .then(function (data) {
                    self.servicesData = data.data.responseObj;
                    //temporary fix until api is updated
                    if (!self.servicesData.serviceservicemodecount) {
                        self.servicesData.serviceservicemodecount = 0;
                    }
                    self.wedge = self.getDefaultWedgeColor(self.servicesData, self.wedge);
                    self.config.series[0].data = [
                        angular.extend({}, genericPieSlice, {
                            y: 0,
                            color: "#eeeeee",
                            name: 'none',
                            status: "none",
                        }),
                        angular.extend({}, genericPieSlice, {
                            y: self.servicesData.servicesuccesscount,
                            color: "#7AB800",
                            name: self.$translate.instant("DASHBOARD_TOOLTIP_Health_Healthy"),
                            status: "green"
                        }),
                        angular.extend({}, genericPieSlice, {
                            y: self.servicesData.serviceunknowncount,
                            color: "#0085c3",
                            name: self.$translate.instant("DASHBOARD_TOOLTIP_Health_InProgress"),
                            status: "unknown"
                        }),
                        angular.extend({}, genericPieSlice, {
                            y: self.servicesData.servicependingcount,
                            color: '#cccccc',
                            name: self.$translate.instant("DASHBOARD_TOOLTIP_Health_Pending"),
                            status: "pending"
                        }),
                        angular.extend({}, genericPieSlice, {
                            y: self.servicesData.servicewarningcount,
                            color: "#efb106",
                            name: self.$translate.instant("DASHBOARD_TOOLTIP_Health_Warning"),
                            status: "yellow"
                        }),
                        angular.extend({}, genericPieSlice, {
                            y: self.servicesData.servicecriticalcount,
                            color: "#d00e28",
                            name: self.$translate.instant("DASHBOARD_TOOLTIP_Health_Critical"),
                            status: "red"
                        }),
                        angular.extend({}, genericPieSlice, {
                            y: self.servicesData.serviceservicemodecount,
                            color: "#efad18",
                            name: self.$translate.instant("DASHBOARD_TOOLTIP_Health_ServiceMode"),
                            status: "servicemode"
                        }),
                        angular.extend({}, genericPieSlice, {
                            y: self.servicesData.servicecancelledcount,
                            color: "#333333",
                            name: self.$translate.instant("DASHBOARD_TOOLTIP_Health_Cancelled"),
                            status: "cancelled"
                        }),
                        angular.extend({}, genericPieSlice, {
                            y: self.servicesData.serviceincompletecount,
                            color: "#EE6411",
                            name: self.$translate.instant("DASHBOARD_TOOLTIP_Health_Incomplete"),
                            status: "incomplete"
                        })
                    ];
                    if (!self.servicesData.servicecount) {
                        self.config.series[0].data[0].y = 1;
                    }
                }),
                self.$http.post(self.Commands.data.services.getServiceList, request)
                    .then(function (data) {
                    self.services = data.data.responseObj;
                }),
                self.$http.post(self.Commands.data.dashboard.getDashboardScaleIOData, {})
                    .then(function (data) {
                    self.scaleIOData = data.data.responseObj;
                    angular.forEach(self.scaleIOData.storageComponents, function (component) {
                        if (component.usedInKb === null) {
                            component.usedInKb = 0;
                        }
                        if (component.totalInKb === null || component.totalInKb === 0) {
                            component.totalInKb = 1;
                        }
                    });
                    self.setScaleIOConfig();
                })
            ])
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            })
                .finally(function () {
                self.loadingServiceOverview = false;
            });
            if (mode == "all") {
                self.loadingServerUtilization = true;
                self.loadingServerHealth = true;
                self.loadingStorageCapacity = true;
                self.loadingNotifications = true;
                self.$q.all([
                    self.$http.post(self.Commands.data.dashboard.getDashboardLandingPageData, self.dashboardRequest)
                        .then(function (data) {
                        self.dashboard = data.data.responseObj;
                        self.licenseDataLoaded = true;
                        //JUST FOR LICENSE TESTING
                        //                        self.dashboard.licenseData.availablenodes = 0;
                        //                        self.dashboard.licenseData.expiressoon = true;
                    }),
                    self.$http.post(self.Commands.data.serverpools.getServerPools, null)
                        .then(function (data) {
                        self.parseServerPoolsProxy(data);
                    }),
                    self.$http.post(self.Commands.data.dashboard.getDashboardStorageData, null)
                        .then(function (data) {
                        self.storageUtilization = data.data.responseObj;
                        self.loadingStorageCapacity = false;
                    }),
                    self.$http.post(self.Commands.data.templates.getQuickTemplateList, null)
                        .then(function (data) {
                        var publishedTemplate = false;
                        self.templates = data.data.responseObj.forEach(function (template) {
                            if (!template.draft)
                                publishedTemplate = true;
                        });
                        self.isDeployServiceEnabled = publishedTemplate;
                    })
                        .catch(function () { return self.isDeployServiceEnabled = true; }),
                    self.$http.post(self.Commands.data.dashboard.getDashboardNotifications, null)
                        .then(function (data) {
                        self.dashboardNotifications = data.data.responseObj;
                        self.loadingNotifications = false;
                    })
                        .catch(function () { return self.loadingNotifications = false; }),
                    self.$http.post(self.Commands.data.initialSetup.gettingStarted, null)
                        .then(function (data) {
                        //Show navmenu when initial setup is completed instead of checking all steps - Requested by Donna                            
                        //if (response.initialSetupCompleted && response.discoveryCompleted && response.templateCompleted && response.networksCompleted && response.configurationCompleted) {
                        self.gettingStarted = data.data.responseObj;
                    })
                ]).then(function () { })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            }
        };
        HomeController.prototype.setScaleIOConfig = function (scaleIO) {
            var self = this;
            var used, available;
            self.scaleIOConfig.series[0].data = [];
            if (scaleIO) {
                self.scaleIODetailsLoading = true;
                self.selectedStorageDisplay = {};
                self.$http.post(self.Commands.data.scaleIO.getScaleIObyId, { id: scaleIO.id })
                    .then(function (response) {
                    angular.extend(self.selectedStorageDisplay, response.data.responseObj);
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                })
                    .finally(function () { return self.scaleIODetailsLoading = false; });
                used = scaleIO.usedInKb;
                available = scaleIO.totalInKb - used;
                self.scaleIODonutPercent = Math.round((scaleIO.usedInKb / scaleIO.totalInKb) * 100) || 0;
            }
            else {
                if (self.scaleIOData.usedInKb === null) {
                    self.scaleIOData.usedInKb = 0;
                }
                if (self.scaleIOData.totalInKb === null || self.scaleIOData.totalInKb === 0) {
                    self.scaleIOData.totalInKb = 1;
                }
                self.selectedStorageDisplay = null;
                used = self.scaleIOData.usedInKb;
                available = self.scaleIOData.totalInKb - self.scaleIOData.usedInKb;
                self.scaleIODonutPercent = Math.round((self.scaleIOData.usedInKb / self.scaleIOData.totalInKb) * 100) || 0;
            }
            self.scaleIOConfig.series[0].data.push({ name: self.$translate.instant("DASHBOARD_StorageUsed"), y: used, color: '#0685C2', percentage: self.scaleIODonutPercent }, { name: self.$translate.instant("DASHBOARD_StorageAvailable"), y: available, color: '#CCCCCC', percentage: 100 - self.scaleIODonutPercent });
        };
        HomeController.prototype.getDefaultWedgeColor = function (servicesData, currentSelection) {
            var options = [
                { name: "red", value: servicesData.servicecriticalcount },
                { name: "yellow", value: servicesData.servicewarningcount },
                { name: "pending", value: servicesData.servicependingcount },
                { name: "unknown", value: servicesData.serviceunknowncount },
                { name: "green", value: servicesData.servicesuccesscount },
                { name: "servicemode", value: servicesData.serviceservicemodecount },
                { name: "cancelled", value: servicesData.servicecancelledcount },
                { name: "incomplete", value: servicesData.serviceincompletecount },
                { name: "none", value: 1 },
            ];
            var match = _.find(options, { name: currentSelection });
            if (currentSelection && match && match.value) {
                //if current selection matches one with > 0 
                return currentSelection;
            }
            else {
                //return first in options where value > 1
                var firstNotEmpty = _.find(options, function (option) { return option.value; });
                return firstNotEmpty ? firstNotEmpty.name : "";
            }
        };
        HomeController.prototype.getServicesTooltip = function (status, count) {
            var self = this;
            switch (status) {
                case "green":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Healthy", { count: count });
                case "unknown":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_InProgress", { count: count });
                case "pending":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Pending", { count: count });
                case "yellow":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Warning", { count: count });
                case "red":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Critical", { count: count });
                case "cancelled":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Cancelled", { count: count });
                case "none":
                    return self.$translate.instant("DASHBOARD_NoServices");
                case "servicemode":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Server_Health_ServiceMode", { count: count });
                case "incomplete":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Server_Health_Incomplete", { count: count });
                default:
                    return self.$translate.instant("DASHBOARD_TOOLTIP_InProgress", { count: count });
            }
        };
        HomeController.prototype.getServersTooltip = function (status, count) {
            var self = this;
            switch (status) {
                case "green":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Server_Health_Healthy", { count: count });
                case "yellow":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Server_Health_Warning", { count: count });
                case "red":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Server_Health_Critical", { count: count });
                case "servicemode":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Server_Health_ServiceMode", { count: count });
                case "cancelled":
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Server_Health_Unknown", { count: count });
                default:
                    return self.$translate.instant("DASHBOARD_TOOLTIP_Server_Health_Unknown", { count: count });
            }
        };
        HomeController.prototype.parseServerPools = function (response) {
            var self = this;
            var data = response.data.responseObj;
            var serverHealth = {
                green: 0,
                yellow: 0,
                red: 0,
                unknown: 0,
                servicemode: 0,
                total: 0
            };
            var serverUtilization = {
                available: 0,
                deployed: 0,
                pending: 0,
                unknown: 0,
                deploying: 0,
                errors: 0,
                poweringoff: 0,
                poweringon: 0,
                reserved: 0,
                totalavailable: 0,
                totalinuse: 0,
                totalservers: 0,
                pctavailable: 0,
                pctinuse: 0,
                serverpools: [],
                currentview: 'inuse'
            };
            var servers = [];
            //foreach serverpool
            data.forEach(function (pool) {
                var serverpool = {
                    id: pool.id,
                    name: pool.name,
                    available: 0,
                    deployed: 0,
                    pending: 0,
                    unknown: 0,
                    deploying: 0,
                    errors: 0,
                    poweringoff: 0,
                    poweringon: 0,
                    reserved: 0,
                    totalavailable: 0,
                    totalinuse: 0,
                    totalservers: 0
                };
                pool.servers.forEach(function (server) {
                    var newServer = false;
                    if (servers.indexOf(server.id) == -1) {
                        servers.push(server.id);
                        newServer = true;
                    }
                    if (newServer) {
                        switch (server.health.toLowerCase()) {
                            case "green":
                                serverHealth.green++;
                                break;
                            case "yellow":
                                serverHealth.yellow++;
                                break;
                            case "servicemode":
                                serverHealth.servicemode++;
                                break;
                            case "red":
                                serverHealth.red++;
                                break;
                            default:
                                serverHealth.unknown++;
                                break;
                        }
                        serverHealth.total++;
                    }
                    //switch (server.state) {
                    //    case 'available':
                    //        serverpool.available++;
                    //        serverpool.totalavailable++;
                    //        serverpool.totalservers++;
                    //        if (newServer) {
                    //            serverUtilization.available++;
                    //            serverUtilization.totalavailable++;
                    //            serverUtilization.totalservers++;
                    //        }
                    //        break;
                    //    case 'deployed':
                    //        serverpool.deployed++;
                    //        serverpool.totalinuse++;
                    //        serverpool.totalservers++;
                    //        if (newServer) {
                    //            serverUtilization.deployed++;
                    //            serverUtilization.totalinuse++;
                    //            serverUtilization.totalservers++;
                    //        }
                    //        break;
                    //    case 'pending':
                    //        serverpool.pending++;
                    //        serverpool.totalavailable++;
                    //        serverpool.totalservers++;
                    //        if (newServer) {
                    //            serverUtilization.pending++;
                    //            serverUtilization.totalavailable++;
                    //            serverUtilization.totalservers++;
                    //        }
                    //        break;
                    //    case 'deploying':
                    //        serverpool.deploying++;
                    //        serverpool.totalinuse++;
                    //        serverpool.totalservers++;
                    //        if (newServer) {
                    //            serverUtilization.deploying++;
                    //            serverUtilization.totalinuse++;
                    //            serverUtilization.totalservers++;
                    //        }
                    //        break;
                    //    case 'errors':
                    //        serverpool.errors++;
                    //        serverpool.totalinuse++;
                    //        serverpool.totalservers++;
                    //        if (newServer) {
                    //            serverUtilization.errors++;
                    //            serverUtilization.totalinuse++;
                    //            serverUtilization.totalservers++;
                    //        }
                    //        break;
                    //    case 'poweringoff':
                    //        serverpool.poweringoff++;
                    //        serverpool.totalavailable++;
                    //        serverpool.totalservers++;
                    //        if (newServer) {
                    //            serverUtilization.poweringoff++;
                    //            serverUtilization.totalavailable++;
                    //            serverUtilization.totalservers++;
                    //        }
                    //        break;
                    //    case 'poweringon':
                    //        serverpool.poweringon++;
                    //        serverpool.totalavailable++;
                    //        serverpool.totalservers++;
                    //        if (newServer) {
                    //            serverUtilization.poweringon++;
                    //            serverUtilization.totalavailable++;
                    //            serverUtilization.totalservers++;
                    //        }
                    //        break;
                    //    case 'reserved':
                    //        serverpool.reserved++;
                    //        serverpool.totalinuse++;
                    //        serverpool.totalservers++;
                    //        if (newServer) {
                    //            serverUtilization.reserved++;
                    //            serverUtilization.totalinuse++;
                    //            serverUtilization.totalservers++;
                    //        }
                    //        break;
                    //    case 'unknown':
                    //    default: //By default, assume this server is unavailable and in an unknown state.
                    //        serverpool.unknown++;
                    //        serverpool.totalavailable++;
                    //        serverpool.totalservers++;
                    //        if (newServer) {
                    //            serverUtilization.unknown++;
                    //            serverUtilization.totalavailable++;
                    //            serverUtilization.totalservers++;
                    //        }
                    //        break;
                    //}
                    switch (server.availability) {
                        case 'notinuse':
                            serverpool.available++;
                            serverpool.totalavailable++;
                            serverpool.totalservers++;
                            if (newServer) {
                                serverUtilization.available++;
                                serverUtilization.totalavailable++;
                                serverUtilization.totalservers++;
                            }
                            break;
                        case 'inuse':
                            serverpool.deployed++;
                            serverpool.totalinuse++;
                            serverpool.totalservers++;
                            if (newServer) {
                                serverUtilization.deployed++;
                                serverUtilization.totalinuse++;
                                serverUtilization.totalservers++;
                            }
                            break;
                    }
                });
                serverUtilization.serverpools.push(serverpool);
            });
            if (serverUtilization.totalservers > 0) {
                serverUtilization.pctavailable = Math.floor(100 * serverUtilization.totalavailable / serverUtilization.totalservers);
                serverUtilization.pctinuse = Math.floor(100 * serverUtilization.totalinuse / serverUtilization.totalservers);
            }
            if (serverUtilization.totalavailable > 0)
                serverUtilization.currentview = 'available';
            self.serverPoolUtilization = serverUtilization;
            self.serverHealth = serverHealth;
            self.serverHealthConfig.series.data = self.serverHealthConfig.series.data;
            self.loadingServerUtilization = false;
            self.loadingServerHealth = false;
            self.serverHealthConfig.series[0].data = [];
            self.serverHealthConfig.series[0].data.push({
                name: self.$translate.instant('SERVICES_DEPLOY_STATE_Healthy'),
                y: self.serverHealth.green,
                color: '#7AB800',
                sliced: false,
                selected: false,
                _state: "green"
            }, {
                name: self.$translate.instant('GENERIC_Unknown'),
                y: self.serverHealth.unknown,
                color: '#cccccc',
                sliced: false,
                selected: false,
                _state: "unknown"
            }, {
                name: self.$translate.instant('SERVICES_DEPLOY_STATE_Warning'),
                y: self.serverHealth.yellow,
                color: '#efb106',
                sliced: false,
                selected: false,
                _state: "yellow"
            }, {
                name: self.$translate.instant('GENERIC_ServiceMode'),
                y: self.serverHealth.servicemode,
                color: '#efad18',
                sliced: false,
                selected: false,
                _state: "servicemode"
            }, {
                name: self.$translate.instant('GENERIC_Critical'),
                y: self.serverHealth.red,
                color: '#d00e28',
                sliced: false,
                selected: false,
                _state: "red"
            });
            self.serverUtilizationConfig.series[0].data = [];
            self.serverUtilizationConfig.series[0].data.push({
                name: self.$translate.instant('DASHBOARD_ServersInUse'),
                y: self.serverPoolUtilization.totalinuse,
                color: '#0685C2'
            }, {
                name: self.$translate.instant('DASHBOARD_ServersAvailable'),
                y: self.serverPoolUtilization.totalavailable,
                color: '#CCCCCC'
            });
            self.buildServerPoolBarGraphs();
            //reset loading watchers
            self.loadingServerUtilization = false;
            self.loadingServerHealth = false;
        };
        HomeController.prototype.buildServerPoolBarGraphs = function () {
            var self = this;
            self.serverPoolUtilization.serverpools.forEach(function (pool) {
                var graphConfig = {};
                angular.copy(self.serverPoolUsageBaseConfig, graphConfig);
                graphConfig.series.push({ name: self.$translate.instant("DASHBOARD_Unused"), data: [pool.totalavailable], color: '#CCCCCC', id: 'unused', states: { hover: { enabled: false } } });
                graphConfig.series.push({ name: self.$translate.instant("DASHBOARD_InUse"), data: [pool.totalinuse], color: '#0685C2', id: 'inuse', states: { hover: { enabled: false } } });
                self.serverPoolUsageConfigs.push(graphConfig);
            });
        };
        HomeController.prototype.changeType = function () {
            var self = this;
            if (self.config.options.chart.type == 'pie') {
                self.config.options.chart.type = 'line';
            }
            else {
                self.config.options.chart.type = 'pie';
            }
        };
        HomeController.prototype.viewByChanged = function () {
            var self = this;
            self.refresh('services');
        };
        HomeController.prototype.toObj = function (obj) {
            return obj;
        };
        HomeController.prototype.setGauge = function () {
            var self = this;
            //if value for gauge is defined
            if (!self.gauge) {
                self.gauge = {
                    options: {
                        chart: {
                            type: 'gauge',
                            animation: false,
                            backgroundColor: "none",
                            marginTop: 16,
                            marginLeft: 0,
                            marginRight: 0,
                            spacingLeft: 0,
                            spacingRight: 0
                        },
                        title: {
                            text: self.$translate.instant("DASHBOARD_STORAGE_CAPACITY_ChartTitle"),
                            style: { "color": "#333333", "fontSize": "13px" },
                            y: 0
                        },
                        tooltip: {
                            enabled: false
                        },
                        pane: {
                            startAngle: -90,
                            endAngle: 90,
                            background: null
                        },
                        plotOptions: {
                            gauge: {
                                dataLabels: {
                                    enabled: false
                                },
                                pivot: {
                                    backgroundColor: "#007db8",
                                },
                                dial: {
                                    baseLength: '0%',
                                    baseWidth: 10,
                                    radius: '75%',
                                    rearLength: '0%',
                                    topWidth: 1,
                                    backgroundColor: "#007db8",
                                }
                            }
                        }
                    },
                    //    // the value axis
                    yAxis: {
                        min: 0,
                        max: 100,
                        lineWidth: 0,
                        minorTickWidth: 0,
                        tickWidth: 0,
                        labels: {
                            enabled: false
                        },
                        title: {
                            text: "",
                            y: 6
                        },
                        plotBands: [
                            {
                                from: 0,
                                to: 73,
                                color: '#6ea204',
                                thickness: '22%' // green
                            }, {
                                from: 75,
                                to: 93,
                                color: '#efb106',
                                thickness: '22%' // yellow
                            }, {
                                from: 95,
                                to: 100,
                                color: '#ce1126',
                                thickness: '22%' // red
                            }
                        ]
                    },
                    size: {
                        height: 225,
                        width: 240
                    },
                    spacingBottom: 0,
                    spacingTop: 0,
                    spacingLeft: 0,
                    spacingRight: 0,
                    series: [
                        {
                            name: '',
                            data: [0]
                        }
                    ]
                };
            }
            if (self.GlobalServices.gettingStarted) {
                self.gauge.series[0].name = self.GlobalServices.gettingStarted.partitionName;
                self.gauge.series[0].data[0] = self.GlobalServices.gettingStarted.storageUtilization.percentageUsed * 100;
                self.gauge.yAxis.title.text = "<span style=\"font-size: 19px\">" + self
                    .$filter("number")(self.gauge.series[0].data[0], 0) + " %</span> <br/> <span style=\"font-size: 15px\">" + self
                    .$translate.instant("GENERIC_Used") + "</span>";
            }
            self.gaugeTimeout = self.$timeout(function () { return self.setGauge(); }, 5000);
        };
        HomeController.prototype.getOpacity = function (id) {
            var self = this;
            var active = (self.selectedStorage && self.selectedStorage.id !== id);
            return active ? '.5' : '1';
        };
        HomeController.prototype.createTemplate = function (template, templateInputType) {
            var self = this;
            var createTemplateWizard = self.Modal({
                title: self.$translate.instant('TEMPLATES_CREATE_TEMPLATE_WIZARD_CreateTemplate'),
                onHelp: function () {
                    self.GlobalServices.showHelp();
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/templatewizard.html',
                controller: 'TemplateWizardController as templateWizardController',
                params: {
                    template: template ? angular.copy(template) : undefined,
                    templateInputType: templateInputType
                },
                onComplete: function (id) {
                    //self.$timeout(function () {
                    //    self.$location.path(`templatebuilder/${id}/edit`);
                    //}, 500)
                }
            });
            createTemplateWizard.modal.show();
        };
        HomeController.prototype.addExistingService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('AddingExistingService');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/addexistingservice.html',
                controller: 'AddExistingServiceController as addExistingServiceController',
                params: {},
                onCancel: function () {
                    //THIS FUNCTION IS CALLED ON MODAL.CANCEL, not WIZARD.CANCEL
                    //var confirm : self.Dialog(self.$translate.instant('GENERIC_Confirm'), 'Are you sure you want to cancel?');
                    var confirm = self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        addServiceWizard.modal.dismiss();
                        self.$timeout(function () {
                            self.activate();
                        }, 500);
                    });
                },
                onComplete: function () {
                    self.$timeout(function () {
                        self.activate(); //When the modal is closed, update the data.
                    }, 500);
                }
            });
            addServiceWizard.modal.show();
        };
        HomeController.prototype.deployNewService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICES_NEW_SERVICE_DeployService'),
                onHelp: function () {
                    self.GlobalServices.showHelp('deployingserviceoverview');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/deployservice/deployservicewizard.html',
                controller: 'DeployServiceWizard as deployServiceWizard',
                params: {},
                onCancel: function () {
                    self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing'))
                        .then(function () {
                        addServiceWizard.modal.close();
                    });
                }
            });
            addServiceWizard.modal.show();
        };
        HomeController.prototype.testing123 = function () {
            var self = this;
            if (self.wedge != 'red')
                self.wedge = 'red';
            else
                self.wedge = 'unknown';
        };
        HomeController.prototype.Connect = function () {
            var self = this;
            self.wsMessages.messages = 'Connecting...';
            self.ws = new WebSocket('ws://localhost:1750/api/WebSocket');
            self.ws.onopen = function () {
                self.wsMessages = 'Connected.';
            };
            self.ws.onmessage = function (evt) {
                self.$timeout(function () {
                    self.wsMessages = evt.data;
                }, 100);
            };
            self.ws.onerror = function (evt) {
                self.wsMessages = evt.message;
            };
            self.ws.onclose = function () {
                self.wsMessages = 'Disconnected.';
            };
        };
        HomeController.prototype.SendMessage = function () {
            var self = this;
            if (self.ws.readyState === WebSocket.OPEN) {
                self.ws.send('Test');
            }
            else {
                self.wsMessages = 'Connection is closed.';
            }
        };
        HomeController.prototype.goTo = function (route) {
            var self = this;
            self.$location.path(route);
        };
        HomeController.prototype.showHelp = function (helptoken) {
            var self = this;
            self.GlobalServices.showHelp(helptoken);
        };
        HomeController.prototype.getServerPoolTitleTranslation = function (serverPoolName) {
            var self = this;
            return self.$translate.instant("DASHBOARD_TOOLTIP_ViewServerPool", { serverPoolName: serverPoolName });
        };
        HomeController.$inject = ['$http', '$filter', '$translate',
            '$timeout', 'GlobalServices', 'Modal', '$location', 'Dialog', 'Commands', '$q', "$rootScope"];
        return HomeController;
    }());
    asm.HomeController = HomeController;
    angular
        .module("app")
        .controller("HomeController", HomeController);
})(asm || (asm = {}));
//# sourceMappingURL=home.js.map
var asm;
(function (asm) {
    var SearchResultsController = (function () {
        function SearchResultsController($rootScope, $log, $q, Loading, $translate, $timeout, $location, $filter, Modal, GlobalServices, SearchService, $window) {
            this.$rootScope = $rootScope;
            this.$log = $log;
            this.$q = $q;
            this.Loading = Loading;
            this.$translate = $translate;
            this.$timeout = $timeout;
            this.$location = $location;
            this.$filter = $filter;
            this.Modal = Modal;
            this.GlobalServices = GlobalServices;
            this.SearchService = SearchService;
            this.$window = $window;
            this.searchResults = {};
            this.defaultSearchResults = {};
            this.subcategories = {};
            var self = this;
            self.showResults = false;
            self.noResults = false;
            self.searching = false;
            self.allCategories = true;
            //*** temporary flag to allow for faster search
            self.skipRealSearch = false;
            self.defaultSearchResults = {
                "searchedTerm": null,
                "totalResults": 0,
                "totalUnlimitedResults": 0,
                "categories": [
                    {
                        "name": "Resources",
                        "totalItems": 0,
                        "showcategory": false,
                        "subcategories": []
                    },
                    {
                        "name": "Services",
                        "totalItems": 0,
                        "showcategory": false,
                        "subcategories": []
                    },
                    {
                        "name": "Templates",
                        "totalItems": 0,
                        "showcategory": false,
                        "subcategories": []
                    }]
            };
            //console.log( 'constructor' );
            self.initialize();
        }
        SearchResultsController.prototype.initialize = function () {
            var self = this;
            //$( document ).ready( function ()
            //{
            //    //to do                
            //});
            //console.log( 'initialize' );
            var search = self.$location.search();
            if (search != undefined && search['term'] != undefined) {
                self.searchTerm = search['term'];
            }
            $("#searchimg").css("display", "inline");
            $("#searchimgfocus").css("display", "none");
            if (self.searchTerm) {
                //self.$timeout.cancel( timeoutPromise_con );
                //timeoutPromise_con = self.$timeout( function ()
                //{
                //    self.executeSearch();
                //}, delayInMs );
                //execute the search on initial page load
                //self.executeSearch();
                //execute the search on initial page load by calling searchInput_searchChange on the element
                self.searchInput_searchChange();
            }
            //this never runs and never throws an error
            //$( "#searchInput" ).focus( function ()
            //{
            //    console.log( 'focus' );
            //    $( "#searchInput" ).addClass( "on" );
            //    $( "#searchimg" ).css( "display", "none" );
            //    $( "#searchimgfocus" ).css( "display", "inline" );
            //});
            //$( "#searchInput" ).on( "focus", function ()
            //{
            //    console.log( 'focus' );
            //    $( "#searchInput" ).addClass( "on" );
            //    $( "#searchimg" ).css( "display", "none" );
            //    $( "#searchimgfocus" ).css( "display", "inline" );
            //});
            //this never runs and never throws an error
            //$( "#searchInput" ).focusout( function ()
            //{
            //    console.log( 'focusout' );
            //    if ( !self.searchTerm || self.searchTerm.length == 0 )
            //    {
            //        $( "#searchInput" ).removeClass( "on" );
            //        $( "#searchimg" ).css( "display", "inline" );
            //        $( "#searchimgfocus" ).css( "display", "none" );
            //    }
            //});
            //$( "#searchInput" ).on( "focusout", function ()
            //{
            //    console.log( 'focusout' );
            //    if ( !self.searchTerm || self.searchTerm.length == 0 )
            //    {
            //        $( "#searchInput" ).removeClass( "on" );
            //        $( "#searchimg" ).css( "display", "inline" );
            //        $( "#searchimgfocus" ).css( "display", "none" );
            //    }
            //});
            //sample $watch from loaderModal.ts
            //$scope.$watch( 'modal.params.loaderMessage', function ( newVal, oldVal )
            //{
            //    self.loaderMessage = newVal;
            //});
            //sample from devices.ts
            //self.$watch('selectedDevice', function (newValue, oldValue) {
            //    alert("here");
            //});
            //sample from web:  http://stackoverflow.com/questions/24078535/angularjs-controller-as-syntax-and-watch
            //$scope.$watch( angular.bind( this, function ()
            //{
            //    return this.name;
            //}), function ( newVal )
            //{
            //    console.log( 'Name changed to ' + newVal );
            //});
            //these do not work:
            //self.$rootScope.$watch( self.searchTerm, self.searchInput_searchChange() );
            //self.$watch( self.searchTerm, self.searchInput_searchChange() );
            //var boundvar = angular.bind( self, function ()
            //{
            //    return self.searchTerm;
            //});
            //self.$rootScope.$watch( boundvar, self.searchInput_searchChange() );
            self.$rootScope.$on('$locationChangeStart', function (a, destination, c) {
                //console.log( '$locationChangeStart' );
                if (destination.indexOf("Search") === -1) {
                    self.clearSearch(true);
                }
                else {
                    self.initialize();
                }
            });
            //$( "body" ).on( "click", function ( e )
            //{
            //    if ( !$( e.target ).parents( ".globalSearch" ).length )
            //    {
            //        self.clearSearch( true );
            //    }
            //});
        };
        SearchResultsController.prototype.activate = function () {
            var self = this;
            //console.log( 'activate' );
            //searchpageLink
            //searchpageDesc
            //return $( '<span>' ).html( "<strong>" + str + "</strong>" ).text();
            //return $( '<strong>' ).text( str );
            //var activateTimeoutPromise: any;
            //var delayInMs = 1000;
            //self.$timeout.cancel( activateTimeoutPromise );
            //activateTimeoutPromise = self.$timeout( function ()
            //{
            //    self.addBold();
            //}, delayInMs );
        };
        SearchResultsController.prototype.addBold = function () {
            var self = this;
            //return $( '<span>' ).html( "<strong>" + str + "</strong>" ).text();
            //return $( '<strong>' ).text( str );
            //console.log( 'addBold' );
            //$( '#searchpageDesc:contains("Hostname")' ).css( { 'font-weight': 'bold;'} );                                              
            //try this on a parent element?
            var html = $('.searchpageDesc').html();
            $('.searchpageDesc').html(html.replace(/Hostname/gi, '<strong>$&</strong>'));
            //try using a class--it may be having an issue finding a collection of objects with the same id
            //$( '.searchpageDesc' ).each( function ( index, element )
            //{
            //    var $desc = $( this );
            //    console.log( $desc.html() );
            //    console.log( $desc.text() );
            //});
        };
        SearchResultsController.prototype.goPreviousPage = function () {
            var self = this;
            self.$window.history.back();
        };
        SearchResultsController.prototype.limitString = function (str, limit) {
            var self = this;
            return self.$filter('ellipsis')(str, limit);
        };
        SearchResultsController.prototype.searchInput_onFocus = function () {
            var self = this;
            $("#searchInput").addClass("on");
            $("#searchimg").css("display", "none");
            $("#searchimgfocus").css("display", "inline");
        };
        SearchResultsController.prototype.searchInput_onBlur = function () {
            var self = this;
            if (!self.searchTerm || self.searchTerm.length == 0) {
                $("#searchInput").removeClass("on");
                $("#searchimg").css("display", "inline");
                $("#searchimgfocus").css("display", "none");
            }
        };
        SearchResultsController.prototype.allCheck = function () {
            var self = this;
            self.searchResults.categories.forEach(function (category) {
                if (self.allCategories) {
                    category.showcategory = true;
                }
                else {
                    category.showcategory = false;
                }
                self.categoryCheck(category);
            });
        };
        SearchResultsController.prototype.categoryCheck = function (cat) {
            var self = this;
            //var connection: any = _.filter( self.portView.portConnections, { nicId: nicId, nicPortId: portId });
            //var sw = cat.name;
            //var subcats: any = _.filter( self.subcategories, function ( s: any )
            //{
            //    return s.indexOf( cat.name ) == 0;
            //});
            //_.map( subcats, function ( x )
            //{
            //    x = true;
            //    return x
            //});            
            //console.log( JSON.stringify( subcats ) );
            //test this
            //for the category checked, set the value of all associated subcategories to the same value as the category
            angular.forEach(self.subcategories, function (value, key) {
                if (key.indexOf(cat.name) == 0) {
                    //found
                    self.subcategories[key] = cat.showcategory;
                }
                else {
                }
                if (!cat.showcategory) {
                }
            });
            //self.subcategories.forEach(( localsub ) =>
            //_.forEach( self.subcategories, function ( value, key )
            //left off on this, but this was method 1
            //angular.forEach( self.subcategories,
            //(subcat: any) =>
            //{
            //    if ( subcat.indexOf( cat.name ) == 0 )
            //    {
            //        if ( cat.showcategory )
            //        {
            //            subcat.value = true;
            //        } else
            //        {
            //            subcat.value = false;
            //        }
            //    }
            //});
            //self.searchResults.categories[cat].subcategories.forEach(( subcat ) =>
            //{
            //    //subcat.showsubcategory = true;
            //    //self.subcategories[cat.name + subcat]
            //    self.subcategories.forEach(( localsub ) =>
            //    {
            //        if ( localsub.startsWith( cat.name ) )
            //        {
            //            if ( cat.showcategory )
            //            {
            //                localsub = true;
            //            } else
            //            {
            //                localsub = false;
            //            }
            //        }
            //    });
            //});
        };
        SearchResultsController.prototype.subcategoryCheck = function (cat, sub) {
            var self = this;
            //cateogry ng-model="searchResults.searchResults.categories[category].showcategory"
            //subcategory ng-model="searchResults.subcategories[category.name + sub]"
            var subvalue = self.subcategories[cat.name + sub];
            //if all subcats are unchecked, then uncheck the category
            //if all subcats are checked, then check the category; no, if even one subcat is checked, then check the category, so that we show the header
            if (subvalue === true) {
                cat.showcategory = true;
            }
            else {
                var allsubcatssame = true;
                angular.forEach(self.subcategories, function (value, key) {
                    if (key.indexOf(cat.name) == 0) {
                        //found
                        if (self.subcategories[key] != subvalue) {
                            allsubcatssame = false;
                        }
                    }
                    else {
                    }
                });
                if (allsubcatssame) {
                    //check/unchceck the category to match the subcat
                    cat.showcategory = subvalue;
                }
            }
        };
        SearchResultsController.prototype.subcategoryCheck_Old = function (cat, sub) {
            var self = this;
            //cateogry ng-model="searchResults.searchResults.categories[category].showcategory"
            //subcategory ng-model="searchResults.subcategories[category.name + sub]"
            var subvalue = self.subcategories[cat.name + sub];
            //if even one subcat is unchecked, then uncheck the category--is this really what we want to do we want a tri-state, disabled checked value or something else?  no
            //if all subcats are unchecked, then uncheck the category
            if (subvalue === false) {
            }
            else {
                //if all subcats are checked, then check the category
                var allsubcatstrue = true;
                angular.forEach(self.subcategories, function (value, key) {
                    if (key.indexOf(cat.name) == 0) {
                        //found
                        if (self.subcategories[key] === false) {
                            //if even one subcat is false, then the cat should ramain false
                            allsubcatstrue = false;
                        }
                    }
                    else {
                    }
                });
                if (allsubcatstrue) {
                    //check the category
                    cat.showcategory = true;
                }
            }
        };
        SearchResultsController.prototype.searchInput_searchChange = function () {
            var self = this;
            //console.log('searchInput_searchChange function');
            var timeoutPromise;
            var delayInMs = 650;
            //cancel and reset timer to create delay for:  user entry, variable updates before waiting on promise
            self.$timeout.cancel(timeoutPromise);
            timeoutPromise = self.$timeout(function () {
                self.executeSearch();
            }, delayInMs);
        };
        SearchResultsController.prototype.clearSearch = function (clearTerm) {
            var self = this;
            //console.log( 'clearSearch' );
            self.$rootScope.$evalAsync(function () {
                if (clearTerm) {
                    self.showResults = false;
                    self.searchTerm = "";
                    self.noResults = false;
                    self.searchResults = angular.copy(self.defaultSearchResults);
                    $("#searchInput").removeClass("on");
                    $("#searchimg").css("display", "inline");
                    $("#searchimgfocus").css("display", "none");
                    $("#searchInput").blur();
                }
            });
        };
        SearchResultsController.prototype.executeSearch = function () {
            var self = this;
            //console.log( 'executeSearch' );
            var currentTerm = self.searchTerm.trim();
            if (currentTerm === undefined || currentTerm === "") {
                self.clearSearch(true);
                self.showResults = false;
                self.noResults = false;
            }
            else {
                self.searching = true;
                //console.log( 'searching:  ' + self.searching );
                if (self.skipRealSearch) {
                    self.skipSearch();
                    self.searching = false;
                    self.allCategories = true;
                    self.showResults = true;
                    self.noResults = false;
                }
                else {
                    self.doSearch(currentTerm);
                }
            }
            //self.searching = false;
            //console.log( 'searching:  ' + self.searching );
        };
        SearchResultsController.prototype.doSearch = function (searchTerm) {
            var self = this;
            if (!searchTerm || searchTerm.length < 3) {
                //console.log( '*** short search term' );
                self.searching = false;
                //console.log( 'searching:  ' + self.searching );
                return;
            }
            self.searchTerm = searchTerm;
            self.searchResults = angular.copy(self.defaultSearchResults);
            //console.log( 'running the regular search with doSearch' );
            //SearchService.search promise
            //by default, the search page does not have a limit, unlike the measthead search ( refer to app.js onSearch)
            self.SearchService.search(searchTerm).then(function (results) {
                self.processResults(results);
                self.searching = false;
                //console.log( 'searching:  ' + self.searching );
                self.allCategories = true;
                self.showResults = true;
                self.noResults = false;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data, self.$rootScope.errors);
                self.$log.debug(data);
            });
        };
        SearchResultsController.prototype.processResults = function (results) {
            var self = this;
            if (results != undefined && (results.categories != undefined && results.categories.length > 0)) {
                self.searchResults = results;
                //processing subcategories
                angular.forEach(self.searchResults.categories, function (category) {
                    category.showcategory = true;
                    category.subcategories = [];
                    var uniquesubcategories = self.$filter('unique')(category.items, 'subcategory');
                    angular.forEach(uniquesubcategories, function (usub) {
                        self.subcategories[category.name + usub.subcategory] = true;
                        category.subcategories.push(usub.subcategory);
                        //var show
                        //if ( usub.subcategory === null )
                        //{
                        //    show = false;
                        //} else
                        //{
                        //    show = true;                                
                        //}
                        //category.subcategories.push( {
                        //    id: category.name + usub.subcategory,
                        //    name: usub.subcategory,
                        //    showsubcategory: show
                        //    });
                    });
                });
            }
            //console.log( 'post processing self.searchResults:  ' + JSON.stringify( self.searchResults ) );
            //console.log( 'post processing self.subcategories:  ' + JSON.stringify( self.subcategories ) );
        };
        SearchResultsController.prototype.skipSearch = function () {
            var self = this;
            var results = {};
            self.processResults(results);
        };
        SearchResultsController.$inject = ['$rootScope', '$log', '$q', 'Loading', '$translate',
            '$timeout', '$location', '$filter', 'Modal', 'GlobalServices', 'SearchService', '$window'];
        return SearchResultsController;
    }());
    asm.SearchResultsController = SearchResultsController;
    angular
        .module('app')
        .controller('SearchResultsController', SearchResultsController);
})(asm || (asm = {}));
//# sourceMappingURL=searchresults.js.map
var asm;
(function (asm) {
    var ServiceController = (function () {
        function ServiceController($http, $timeout, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, $routeParams, constants, $location, $window) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$routeParams = $routeParams;
            this.constants = constants;
            this.$location = $location;
            this.$window = $window;
            this.activeTab = 'serviceDetails';
            this.warnings = [];
            var self = this;
            self.serviceId = self.$routeParams.id;
            self.firmwarereport = self.$routeParams.firmwarereport;
            //having child populate parent so that updates here take place automatically
            //self.refresh(); 
        }
        ServiceController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors();
            self.Loading(d.promise);
            self.getService(self.serviceId).then(function (data) {
                self.service = data.data.responseObj;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        ServiceController.prototype.editService = function () {
            var self = this;
            var editServiceModal = self.Modal({
                title: self.$translate.instant('SERVICE_DETAIL_EditServiceInformation'),
                onHelp: function () {
                    self.GlobalServices.showHelp('EditServiceInformation');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/editservice.html',
                controller: 'EditServiceModalController as editService',
                params: {
                    id: self.service.id
                },
                onComplete: function () {
                    self.refreshService = !self.refreshService;
                }
            });
            editServiceModal.modal.show();
        };
        ServiceController.prototype.showPortView = function (tab, server) {
            var self = this;
            self.activeTab = tab;
            //set server id
            self.portviewServer = server;
        };
        ServiceController.prototype.getService = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.services.getServiceById, { id: id });
        };
        ServiceController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$routeParams', 'constants', '$location', '$window'];
        return ServiceController;
    }());
    asm.ServiceController = ServiceController;
    angular
        .module("app")
        .controller("ServiceController", ServiceController);
})(asm || (asm = {}));
//# sourceMappingURL=service.js.map
var asm;
(function (asm) {
    var ServicesController = (function () {
        function ServicesController($http, $timeout, $q, $translate, Modal, Loading, dialog, Commands, GlobalServices, $location, constants, $routeParams, $rootScope, $route, $window, localStorageService) {
            var _this = this;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.dialog = dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$location = $location;
            this.constants = constants;
            this.$routeParams = $routeParams;
            this.$rootScope = $rootScope;
            this.$route = $route;
            this.$window = $window;
            this.localStorageService = localStorageService;
            this.smartTableOptions = {
                pages: 7,
                itemsPerPage: 20
            };
            this.tileView = false;
            this.actions = {
                viewDetails: function () { return _this.viewDetails(); },
                exportService: function () { return _this.exportService(); },
                updateFirmware: function () { return _this.updateFirmware(); }
            };
            this.dropdownOptions = angular.copy(this.constants.serviceHealths);
            var self = this;
            var health = _.find(self.constants.serviceHealths, { id: self.$routeParams.health });
            self.filterBy = health ? health.id : undefined;
            self.dropdownOptions.unshift({ id: undefined, name: self.$translate.instant("SERVICES_All") });
            self.refresh();
        }
        Object.defineProperty(ServicesController.prototype, "safeSource", {
            get: function () {
                var self = this;
                return self._safeSource;
            },
            set: function (value) {
                var self = this;
                self._safeSource = value;
            },
            enumerable: true,
            configurable: true
        });
        ServicesController.prototype.clearTooltips = function () {
            $('[data-toggle="tooltip"]').tooltip('hide');
        };
        ServicesController.prototype.storeView = function () {
            var self = this;
            if (self.tileView) {
                self.localStorageService.set('servicesTable_currentView', 'tileView');
            }
            else {
                self.localStorageService.set('servicesTable_currentView', 'listView');
            }
        };
        ServicesController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.clearTooltips();
            var storedView = self.localStorageService.get('servicesTable_currentView');
            if (storedView) {
                if (storedView === 'tileView') {
                    self.tileView = true;
                }
                else {
                    self.tileView = false;
                }
            }
            self.GlobalServices.ClearErrors();
            self.Loading(d.promise);
            // get all services
            self.$q.all([
                self.getServiceList().then(function (data) {
                    if (self.GlobalServices.cache.services.length > 0) {
                        self.GlobalServices.cache.services = data.data.responseObj;
                    }
                    //Copy for filter to reference to reset safe source
                    self.unFilteredServiceList = angular.copy(data.data.responseObj);
                    //copy for smart table to sort on and for controller to filter on (final result)
                    self.displayedData = angular.copy(data.data.responseObj);
                    //copy for smart table to reference that will be filtered
                    self.safeSource = angular.copy(data.data.responseObj);
                    self.groupStates();
                    self.filterSafeSource();
                }),
                self.getReadyTemplateList().then(function (data) {
                    self.readyTemplateList = data.data.responseObj;
                })
            ]).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        ServicesController.prototype.viewDetails = function (id) {
            var self = this;
            self.$location.path("service/" + (id || self.selectedService.id) + "/details");
        };
        //filters smart table's safe source, allows paging to be accurate
        ServicesController.prototype.filterSafeSource = function () {
            var self = this;
            //reset safeSource to original value
            self.safeSource = angular.copy(self.unFilteredServiceList);
            //filter safeSource
            if (self.filterBy) {
                self.safeSource = _.filter(self.safeSource, { health: self.filterBy });
            }
        };
        ServicesController.prototype.exportService = function () {
            var self = this;
            self.$window.location.assign("services/exportservice/" + self.selectedService.id);
        };
        ServicesController.prototype.downloadAll = function () {
            var self = this;
            var deferred = self.$q.defer();
            self.GlobalServices.ClearErrors();
            self.Loading(deferred.promise);
            self.processDownloadRequests('initial', '', deferred);
        };
        ServicesController.prototype.processDownloadRequests = function (type, id, deferred) {
            var self = this;
            var urlToCall;
            var data;
            urlToCall = self.Commands.data.downloads.status;
            data = { 'id': id };
            if (type == 'initial') {
                urlToCall = self.Commands.data.downloads.create;
                data = { 'type': 'services' };
            }
            self.$http.post(urlToCall, { requestObj: data }).then(function (data) {
                switch (data.data.responseObj.status) {
                    case 'NOT_READY':
                        self.$timeout(function () {
                            self.processDownloadRequests('status', data.data.responseObj.id, deferred);
                        }, 5000);
                        break;
                    case 'READY':
                        self.$window.location.assign("downloads/getfile/" + data.data.responseObj.id);
                        deferred.resolve();
                        break;
                    case 'ERROR':
                        //handle error
                        var x = 0;
                        deferred.resolve();
                        self.GlobalServices.DisplayError(data.data);
                        break;
                }
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        //creates the display of tiles for the "all" filter
        ServicesController.prototype.groupStates = function () {
            var self = this;
            self.groups = [];
            var id = 0;
            self.groups = _.map(_.map(self.constants.serviceHealths, function (health) {
                return {
                    count: _.filter(self.unFilteredServiceList, { health: health.id }).length,
                    name: health.id,
                    dropdown: health.id,
                    id: id++,
                    health: health.id,
                    alias: health.alias
                };
            }), function (finalHealth) {
                return angular.extend(finalHealth, { name: finalHealth.alias + " (" + finalHealth.count + ")" });
            });
        };
        ServicesController.prototype.updateFirmware = function () {
            var self = this;
            self.clearTooltips();
            var updateFirmware = self.Modal({
                title: self.$translate.instant('SERVICE_APPLY_FIRMWARE_UPDATES_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('resourcesupdatingfirmware');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/updateservicefirmware.html',
                controller: 'UpdateServiceFirmwareController as UpdateServiceFirmware',
                params: {
                    id: self.selectedService.id,
                    mode: 'service'
                },
                onCancel: function () {
                    //THIS FUNCTION IS CALLED ON MODAL.CANCEL, not WIZARD.CANCEL
                    //var confirm : self.Dialog(self.$translate.instant('GENERIC_Confirm'), 'Are you sure you want to cancel?');
                    var confirm = self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICE_APPLY_FIRMWARE_UPDATES_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        updateFirmware.modal.dismiss();
                        self.refresh();
                    });
                },
                onComplete: function (modalScope) {
                    self.refresh(); //When the modal is closed, update the data.
                }
            });
            updateFirmware.modal.show();
        };
        ServicesController.prototype.addExistingService = function () {
            var self = this;
            self.clearTooltips();
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('AddingExistingService');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/addexistingservice.html',
                controller: 'AddExistingServiceController as addExistingServiceController',
                params: {},
                onCancel: function () {
                    //THIS FUNCTION IS CALLED ON MODAL.CANCEL, not WIZARD.CANCEL
                    //var confirm : self.Dialog(self.$translate.instant('GENERIC_Confirm'), 'Are you sure you want to cancel?');
                    var confirm = self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        addServiceWizard.modal.dismiss();
                    });
                },
                onComplete: function (modalScope) {
                    self.refresh(); //When the modal is closed, update the data.
                }
            });
            addServiceWizard.modal.show();
        };
        ServicesController.prototype.deployNewService = function () {
            var self = this;
            self.clearTooltips();
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICES_NEW_SERVICE_DeployService'),
                onHelp: function () {
                    self.GlobalServices.showHelp('deployingserviceoverview');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/deployservice/deployservicewizard.html',
                controller: 'DeployServiceWizard as deployServiceWizard',
                params: {},
                onCancel: function () {
                    self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function () {
                        console.log('closing');
                        addServiceWizard.modal.close();
                    });
                }
            });
            addServiceWizard.modal.show();
        };
        ServicesController.prototype.getServiceList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.services.getServiceList, {});
        };
        ServicesController.prototype.getReadyTemplateList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.templates.getReadyTemplateList, {});
        };
        ServicesController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog',
            'Commands', 'GlobalServices', '$location', 'constants', '$routeParams', "$rootScope", "$route", "$window", "localStorageService"];
        return ServicesController;
    }());
    asm.ServicesController = ServicesController;
    angular
        .module("app")
        .controller("ServicesController", ServicesController);
})(asm || (asm = {}));
//# sourceMappingURL=services.js.map
var asm;
(function (asm) {
    var SettingslistController = (function () {
        function SettingslistController(Modal, Dialog, $http, $timeout, $q, $router, $location, $routeParams, GlobalServices, commands) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$router = $router;
            this.$location = $location;
            this.$routeParams = $routeParams;
            this.GlobalServices = GlobalServices;
            this.commands = commands;
            this.sections = {
                //addOnModule: "AddOnModule",
                backupAndRestore: "BackupAndRestore",
                credentialsManagement: "CredentialsManagement",
                gettingStarted: "GettingStarted",
                jobs: "Jobs",
                logs: "Logs",
                networks: "Networks",
                repositories: "Repositories",
                initialApplianceSetup: "InitialApplianceSetup",
                users: "Users",
                virtualApplianceManagement: "VirtualApplianceManagement"
            };
            var self = this;
            self.changeSection(self.$routeParams.settingType
                ? self.$routeParams.settingType
                : self.sections.backupAndRestore);
            self.fullscreen = self.$routeParams.fullscreen === 'true';
            self.modalOrTab = self.$routeParams.modalOrTab;
            self.setInitialSetup();
        }
        SettingslistController.prototype.changeSection = function (section) {
            var self = this;
            self.showSection = section;
            self.$location.path("settings/" + section);
        };
        SettingslistController.prototype.isCurrentTab = function (section) {
            var self = this;
            return angular.equals(self.showSection, section);
        };
        SettingslistController.prototype.setInitialSetup = function () {
            var self = this;
            self.getStartupData()
                .then(function (response) {
                self.GlobalServices.showInitialSetup = !response.data.responseObj.initialSetupCompleted;
            });
        };
        SettingslistController.prototype.getStarted = function () {
            var self = this;
            self.$location.path("/gettingstarted");
        };
        SettingslistController.prototype.getStartupData = function () {
            var self = this;
            return self.$http.post(self.commands.data.initialSetup.gettingStarted, null);
        };
        SettingslistController.prototype.setupWizard = function () {
            var self = this;
            var setupWizard = self.Modal({
                title: 'Setup Wizard',
                onHelp: function () {
                    self.GlobalServices.showHelp();
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/setupwizard.html',
                controller: 'SetupWizardController as SetupWizard',
                params: {},
                onComplete: function () {
                    self.setInitialSetup();
                }
            });
            setupWizard.modal.show();
        };
        SettingslistController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$router', "$location", "$routeParams", 'GlobalServices', "Commands"];
        return SettingslistController;
    }());
    asm.SettingslistController = SettingslistController;
    angular
        .module('app')
        .controller('SettingslistController', SettingslistController);
})(asm || (asm = {}));
//# sourceMappingURL=settingslist.js.map
var asm;
(function (asm) {
    var StatusController = (function () {
        function StatusController($window, $http, $timeout, $q, $router, Commands, $translate) {
            this.$window = $window;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$router = $router;
            this.Commands = Commands;
            this.$translate = $translate;
            this.refreshTimer = null;
            var self = this;
            self.copywriteStatement = self.$translate.instant("GENERIC_CopywriteStatement", { year: new Date().getFullYear() });
            this.getApplianceStatus();
        }
        StatusController.prototype.$onDestroy = function () {
            var self = this;
            if (self.refreshTimer)
                self.$timeout.cancel(self.refreshTimer);
        };
        StatusController.prototype.canDeactivate = function () {
            var self = this;
            var allow = true;
            //Any logic to prevent navigating away (change allow to false to prevent)
            return allow;
        };
        StatusController.prototype.getJobsInProgressTranslation = function (jobsInProgress) {
            var self = this;
            return self.$translate.instant("GETTINGSTARTED_jobsinprogress", { jobsInProgress: jobsInProgress });
        };
        StatusController.prototype.getApplianceStatus = function () {
            var self = this;
            self.$http.post(self.Commands.data.applianceManagement.getStatus, null)
                .success(function (data, status, headers, config) {
                self.status = data.responseObj;
                if (self.status === 'ready') {
                    self.$window.location.href = 'login.html';
                    return;
                }
                self.refreshTimer = self.$timeout(function () {
                    self.getApplianceStatus();
                }, 15000);
            })
                .error(function (data, status, headers, config) {
                self.status = 'notready';
                self.refreshTimer = self.$timeout(function () {
                    self.getApplianceStatus();
                }, 15000);
            });
        };
        StatusController.$inject = ['$window', '$http', '$timeout', '$q', '$router', 'Commands', "$translate"];
        return StatusController;
    }());
    asm.StatusController = StatusController;
    angular
        .module('app')
        .controller('StatusController', StatusController);
})(asm || (asm = {}));
//# sourceMappingURL=status.js.map
var asm;
(function (asm) {
    var TemplateBuilderController = (function () {
        function TemplateBuilderController($http, $translate, $routeParams, GlobalServices, $timeout, $rootScope) {
            this.$http = $http;
            this.$translate = $translate;
            this.$routeParams = $routeParams;
            this.GlobalServices = GlobalServices;
            this.$timeout = $timeout;
            this.$rootScope = $rootScope;
            var self = this;
            self.activate();
        }
        TemplateBuilderController.prototype.activate = function () {
            var self = this;
            self.selectedTemplateId = self.$routeParams.id;
            self.mode = self.$routeParams.mode;
            self.errors = self.$rootScope.errors;
        };
        TemplateBuilderController.$inject = ['$http', '$translate', '$routeParams', 'GlobalServices', '$timeout', '$rootScope'];
        return TemplateBuilderController;
    }());
    asm.TemplateBuilderController = TemplateBuilderController;
    angular
        .module("app")
        .controller("TemplatebuilderController", TemplateBuilderController);
})(asm || (asm = {}));
//# sourceMappingURL=templatebuilder.js.map
var asm;
(function (asm) {
    var TemplatesController = (function () {
        function TemplatesController(Modal, Dialog, $http, $timeout, $q, $compile, $translate, GlobalServices, Loading, Commands, $location, $filter, constants, $window, $routeParams, dialog, $rootScope, localStorageService) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$compile = $compile;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.Loading = Loading;
            this.Commands = Commands;
            this.$location = $location;
            this.$filter = $filter;
            this.constants = constants;
            this.$window = $window;
            this.$routeParams = $routeParams;
            this.dialog = dialog;
            this.$rootScope = $rootScope;
            this.localStorageService = localStorageService;
            this.activeTab = 'MyTemplates';
            this.filterBy = '';
            this.invalidTemplates = false;
            var self = this;
            self.view = 'ListView';
            if (!self.$routeParams.category || self.$routeParams.category === 'mytemplates') {
                self.activeTab = 'MyTemplates';
                self.filterBy = '';
            }
            else if (self.$routeParams.category === "sampletemplates") {
                self.activeTab = 'SampleTemplates';
                self.filterBy = '';
            }
            else {
                self.activeTab = 'MyTemplates';
                self.filterBy = self.$routeParams.category;
            }
            self.refresh();
            self.actions = {
                deleteTemplate: self.deleteTemplate,
                viewDetails: self.viewDetails,
                exportTemplate: self.exportTemplate,
                addAttachment: self.addAttachment,
                cloneTemplate: self.cloneTemplate
            };
        }
        TemplatesController.prototype.clearTooltips = function () {
            $('[data-toggle="tooltip"]').tooltip('hide');
        };
        TemplatesController.prototype.clickTab = function (tab) {
            var self = this;
            self.clearTooltips();
            if (tab == 'MyTemplates') {
                self.activeTab = tab;
                self.$rootScope.helpToken = 'templateshomepage';
                self.selectedItem = self.myTemplates[0];
            }
            else if (tab == 'SampleTemplates') {
                self.activeTab = tab;
                self.$rootScope.helpToken = 'sampletemplates';
                self.selectedItem = self.sampleTemplates[0];
            }
        };
        TemplatesController.prototype.storeView = function () {
            var self = this;
            if (self.view === 'GridView') {
                self.localStorageService.set('templatesTable_currentView', 'tileView');
            }
            else {
                self.localStorageService.set('templatesTable_currentView', 'listView');
            }
        };
        TemplatesController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.clearTooltips();
            self.GlobalServices.ClearErrors();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.templates.getTemplateList, {})
                .then(function (data) {
                if (self.GlobalServices.cache.templates.length > 0) {
                    self.GlobalServices.cache.templates = data.data.responseObj;
                }
                self.myTemplates = self.$filter('filter')(data.data.responseObj, { 'isLocked': false }, true);
                self.myTemplatesSafe = angular.copy(self.myTemplates);
                self.myTemplatesConst = angular.copy(self.myTemplates);
                self.drafts = _.filter(self.myTemplates, { 'draft': true });
                self.draftsSafe = angular.copy(self.drafts);
                self.draftsConst = angular.copy(self.drafts);
                self.published = _.filter(self.myTemplates, { 'draft': false });
                self.publishedSafe = angular.copy(self.published);
                self.publishedConst = angular.copy(self.published);
                self.sampleTemplates = self.$filter('filter')(data.data.responseObj, { 'isLocked': true }, true);
                self.sampleTemplatesSafe = angular.copy(self.sampleTemplates);
                self.sampleTemplatesConst = angular.copy(self.sampleTemplates);
                if (self.myTemplates) {
                    self.selectedItem = self.selectedItem ? _.find(self.myTemplates, { id: self.selectedItem.id }) : self.myTemplates[0];
                }
                self.invalidTemplates = !!_.find(self.myTemplates, { isTemplateValid: false });
                self.templateCategories = [{ id: '', name: self.$translate.instant("TEMPLATES_AllCategories") }].concat(_.map(_.uniqBy(self.myTemplates, function (template) { return template.category || ''; }), function (category) { return { id: category.category, name: category.category }; }));
                self.updateArrays();
                var storedView = self.localStorageService.get('templatesTable_currentView');
                if (storedView) {
                    if (storedView === 'tileView') {
                        self.view = 'GridView';
                    }
                    else {
                        self.view = 'ListView';
                    }
                }
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            })
                .finally(function () { return d.resolve(); });
            return d.promise;
        };
        TemplatesController.prototype.updateArrays = function () {
            //this is called when category dropdown is changed or a category tile is clicked
            var self = this;
            //if last template in a category is deleted, change filterBy to be unfiltered
            self.filterBy = _.find(self.getUniqueCategories(), { id: self.filterBy }) ? self.filterBy : '';
            self.myTemplates = self.$filter('filter')(self.myTemplatesConst, { category: self.filterBy });
            self.myTemplatesSafe = angular.copy(self.myTemplates);
            self.drafts = self.$filter('filter')(self.draftsConst, { category: self.filterBy });
            self.draftsSafe = angular.copy(self.drafts);
            self.published = self.$filter('filter')(self.publishedConst, { category: self.filterBy });
            self.publishedSafe = angular.copy(self.published);
        };
        TemplatesController.prototype.editTemplate = function (template) {
            var self = this;
            self.editMode = true;
            template.inConfiguration
                ? self.createTemplateWizard(template)
                : self.$location.path("/templatebuilder/" + template.id + "/edit");
        };
        TemplatesController.prototype.viewDetails = function (template) {
            var self = this;
            template.inConfiguration
                ? self.createTemplateWizard(template)
                : self.$location.path("/templatebuilder/" + template.id + "/view");
        };
        TemplatesController.prototype.createTemplateWizard = function (template, templateInputType) {
            var self = this;
            self.clearTooltips();
            var modalTitle = '';
            if (self.editMode) {
                modalTitle = self.$translate.instant('TEMPLATES_EDIT_TEMPLATE_WIZARD_CreateTemplate');
                self.editMode = false;
            }
            else {
                modalTitle = self.$translate.instant('TEMPLATES_CREATE_TEMPLATE_WIZARD_AddaTemplate');
            }
            var createTemplateWizard = self.Modal({
                title: modalTitle,
                onHelp: function () {
                    self.GlobalServices.showHelp('addtemplate');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/templatewizard.html',
                controller: 'TemplateWizardController as templateWizardController',
                params: {
                    template: template ? angular.copy(template) : undefined,
                    templateInputType: templateInputType
                },
                onComplete: function () {
                },
                onCancel: function () {
                    self.refresh();
                    createTemplateWizard.modal.dismiss();
                }
            });
            createTemplateWizard.modal.show();
        };
        TemplatesController.prototype.getUniqueCategories = function () {
            var self = this;
            return self.templateCategories || [];
        };
        TemplatesController.prototype.exportTemplate = function () {
            var self = this;
            self.clearTooltips();
            var exportModal = self.Modal({
                title: self.$translate.instant('TEMPLATES_TEMPLATESETTINGS_MODAL_ExportTemplate'),
                onHelp: function () {
                    self.GlobalServices.showHelp('TemplateExportTemplate');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/templates/exporttemplate.html',
                controller: 'ExportTemplateController as ExportTemplateController',
                params: {
                    templateId: self.selectedItem.id
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            exportModal.modal.show();
        };
        TemplatesController.prototype.downloadAll = function () {
            var self = this;
            var deferred = self.$q.defer();
            self.GlobalServices.ClearErrors();
            self.Loading(deferred.promise);
            self.processDownloadRequests('initial', '', deferred);
        };
        TemplatesController.prototype.processDownloadRequests = function (type, id, deferred) {
            var self = this;
            var urlToCall;
            var data;
            urlToCall = self.Commands.data.downloads.status;
            data = { 'id': id };
            if (type == 'initial') {
                urlToCall = self.Commands.data.downloads.create;
                data = { 'type': 'templates' };
            }
            self.$http.post(urlToCall, { requestObj: data }).then(function (data) {
                switch (data.data.responseObj.status) {
                    case 'NOT_READY':
                        self.$timeout(function () {
                            self.processDownloadRequests('status', data.data.responseObj.id, deferred);
                        }, 5000);
                        break;
                    case 'READY':
                        self.$window.location.assign("downloads/getfile/" + data.data.responseObj.id);
                        deferred.resolve();
                        break;
                    case 'ERROR':
                        //handle error
                        var x = 0;
                        deferred.resolve();
                        self.GlobalServices.DisplayError(data.data);
                        break;
                }
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        TemplatesController.prototype.deleteTemplate = function () {
            var self = this, d = self.$q.defer();
            self.clearTooltips();
            self.dialog(('Confirm'), self.$translate.instant('TEMPLATEBUILDER_DiscardConfirm'))
                .then(function () {
                self.GlobalServices.ClearErrors();
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.templates.discardTemplate, [self.selectedItem.id.toString()])
                    .then(function () {
                    self.refresh();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        TemplatesController.prototype.uploadExternalTemplate = function () {
            var self = this;
            self.clearTooltips();
            var uploadtemplateModal = self.Modal({
                title: self.$translate.instant('TEMPLATES_UploadExternalModal_UploadExternalTemplate'),
                onHelp: function () {
                    self.GlobalServices.showHelp('Template_UploadExternalTemplate');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/templates/uploadtemplatemodal.html',
                controller: 'UploadTemplateModalController as UploadTemplateModal',
                params: {
                    templates: self.myTemplates
                },
                onComplete: function (category) {
                }
            });
            uploadtemplateModal.modal.show();
        };
        TemplatesController.prototype.addAttachment = function () {
            var self = this;
            self.clearTooltips();
            var addAttachmentModal = self.Modal({
                title: self.$translate.instant('TEMPLATES_AddAttachment'),
                onHelp: function () {
                    self.GlobalServices.showHelp('templateAddAttachment');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/templates/templateaddattachmentmodal.html',
                controller: 'AddAttachmentModalController as AddAttachmentModal',
                params: {
                    templateId: self.selectedItem.id
                },
                onComplete: function (attachments) {
                    self.refresh();
                }
            });
            addAttachmentModal.modal.show();
        };
        TemplatesController.prototype.deleteAttachment = function (attachment) {
            var self = this, d = self.$q.defer();
            self.clearTooltips();
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('TEMPLATES_DeleteAttachments')))
                .then(function () {
                self.GlobalServices.ClearErrors();
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.templates.deleteAttachment, { id: self.selectedItem.id, name: attachment.name })
                    .then(function () {
                    _.remove(self.selectedItem.attachments, { id: attachment.id });
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        TemplatesController.prototype.downloadAttachment = function (attachment) {
            var self = this;
            self.$window.open("templates/downloadattachment?name=" + attachment.name + "&templateId=" + self.selectedItem.id, '_blank');
        };
        TemplatesController.prototype.cloneTemplate = function () {
            var self = this;
            self.GlobalServices.ClearErrors();
            self.$http.post(self.Commands.data.templates.getTemplateList, {})
                .then(function (response) {
                var createTemplateModal = self.Modal({
                    title: self.$translate.instant("TEMPLATES_CREATE_TEMPLATE_WIZARD_cloneTemplate"),
                    onHelp: function () {
                        self.GlobalServices.showHelp('cloningtemplate');
                    },
                    modalSize: 'modal-lg',
                    templateUrl: 'views/createtemplate.html',
                    controller: 'CreateTemplateModalController as createTemplateModalController',
                    params: {
                        type: 'clone',
                        template: angular.copy(self.selectedItem),
                        templates: response.data.responseObj
                    },
                    onComplete: function () {
                    },
                    close: function () {
                    }
                });
                createTemplateModal.modal.show();
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        TemplatesController.prototype.getTemplateData = function (templateId) {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors();
            self.Loading(d.promise);
            //New call for data
            self.$http.post(self.Commands.data.templates.getTemplateBuilderById, { id: templateId }).then(function (data) {
                self.selectedItem = data.data.responseObj;
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        TemplatesController.prototype.deployNewService = function () {
            var self = this;
            self.clearTooltips();
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICES_NEW_SERVICE_DeployService'),
                onHelp: function () {
                    self.GlobalServices.showHelp('deployingserviceoverview');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/deployservice/deployservicewizard.html',
                controller: 'DeployServiceWizard as deployServiceWizard',
                params: {
                    templateId: self.selectedItem.id
                },
                onCancel: function () {
                    self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing'))
                        .then(function () {
                        addServiceWizard.modal.close();
                    });
                }
            });
            addServiceWizard.modal.show();
        };
        TemplatesController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$compile', '$translate', 'GlobalServices', 'Loading', 'Commands', '$location', '$filter', 'constants', '$window', '$routeParams', 'Dialog', '$rootScope', 'localStorageService'];
        return TemplatesController;
    }());
    asm.TemplatesController = TemplatesController;
    angular
        .module('app')
        .controller('TemplatesController', TemplatesController);
})(asm || (asm = {}));
//# sourceMappingURL=templates.js.map
var asm;
(function (asm) {
    var AddApplicationWizardController = (function () {
        function AddApplicationWizardController(Modal, $scope, Dialog, $http, $translate, Loading, $q, $timeout, Commands, $rootScope, globalServices, $filter) {
            this.Modal = Modal;
            this.$scope = $scope;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Commands = Commands;
            this.$rootScope = $rootScope;
            this.globalServices = globalServices;
            this.$filter = $filter;
            //this wizard is used in both template builder svg and service svg pages
            this.template = null;
            this.editComponent = null;
            this.service = null;
            this.mode = 'template';
            this.action = 'edit';
            this.id = '';
            this.targetComponents = [];
            this.safeTargetComponents = [];
            this.selectedApplication = -1;
            this.applications = [];
            this.applicationsCopy = [];
            this.addedApplications = [];
            this.errors = new Array();
            //Index offset is created for services so that we can keep install orders correct because already added applications are hidden
            this.indexOffset = 0;
            var self = this;
            if (self.$scope.modal.params.template) {
                self.template = self.$scope.modal.params.template;
            }
            else {
                self.service = angular.copy(self.$scope.modal.params.service);
                self.template = self.service;
                self.mode = "service";
                self.serviceId = self.service.id;
                //remove circular references
                angular.forEach(self.service.components, function (component) { return delete component.deviceTypeListData; });
            }
            self.action = self.$scope.modal.params.action;
            if (self.action == 'edit') {
                self.id = self.$scope.modal.params.id;
                angular.forEach(self.template.components, function (comp) {
                    if (self.id == comp.id) {
                        comp.duplicateApplication = true;
                        self.editComponent = comp;
                    }
                });
                if (self.service != null) {
                    $.each(self.editComponent.relatedcomponents, function (index, model) {
                        if (model.installOrder > 0)
                            self.indexOffset++;
                    });
                }
            }
            else {
                $.each(self.template.components, function (index, comp) {
                    if (comp.type == 'vm' || comp.type == 'server') {
                        var hasApplication = false;
                        $.each(comp.relatedcomponents, function (index, rc) {
                            if (rc.installOrder > 0) {
                                hasApplication = true;
                                return;
                            }
                        });
                        if (!hasApplication) {
                            comp.duplicateApplication = false;
                            self.targetComponents.push(comp);
                        }
                    }
                });
                self.safeTargetComponents = angular.copy(self.targetComponents);
            }
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.templates.getTemplateBuilderComponents, { id: 'application', templateId: self.template.id, serviceId: self.serviceId })
                .then(function (data) {
                self.applications = data.data.responseObj;
                self.applicationsCopy = angular.copy(self.applications);
                self.applications.unshift({
                    id: -1, name: self.$translate.instant('GENERIC_select')
                });
                if (self.action === 'edit')
                    self.filterApplications();
            })
                .catch(function (data) {
                self.globalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        }
        AddApplicationWizardController.prototype.filterApplications = function () {
            var self = this;
            if (self.service == null) {
                var apps = new Array(self.template.components.length - 1);
                $.each(self.editComponent.relatedcomponents, function (index, rc) {
                    if (rc.installOrder > 0) {
                        var r = rc;
                        $.each(self.template.components, function (index2, comp) {
                            if (rc.id == comp.id) {
                                //comp.isNew = false;
                                apps[rc.installOrder - 1] = comp;
                            }
                        });
                    }
                });
                $.each(apps, function (index, model) {
                    if (model) {
                        self.addedApplications.push(model);
                        if (model.subtype != 'type')
                            self.removeApp(model.name);
                    }
                    else {
                        return false;
                    }
                });
            }
            else {
                $.each(self.editComponent.relatedcomponents, function (index, model) {
                    if (model.installOrder > 0) {
                        var x = model;
                        $.each(self.applications, function (index2, app) {
                            if (app.name == model.name && model.subtype != 'type') {
                                self.applications.splice(index2, 1);
                                return false;
                            }
                        });
                    }
                });
            }
        };
        AddApplicationWizardController.prototype.removeApp = function (name) {
            var self = this;
            $.each(self.applications, function (index, model) {
                if (model.name == name) {
                    self.applications.splice(index, 1);
                    return false;
                }
            });
        };
        AddApplicationWizardController.prototype.getVisibleSettings = function (category, component) {
            var self = this;
            return self.$filter("addApplicationSettingsFilter")(category.settings, component);
        };
        AddApplicationWizardController.prototype.categoryVisible = function (category, component) {
            var self = this;
            return self.getVisibleSettings(category, component).length;
        };
        ;
        AddApplicationWizardController.prototype.addApplication = function () {
            var self = this;
            var app = _.findIndex(self.applications, function (o) { return o.id == self.selectedApplication; });
            var x = angular.copy(self.applications[app]);
            var componentId = x.id;
            x.id = self.$rootScope.ASM.NewGuid();
            x.componentid = componentId;
            x.isNew = true;
            self.addedApplications.push(x);
            if (x.subtype != "type") {
                self.applications.splice(app, 1);
                self.selectedApplication = -1;
            }
        };
        AddApplicationWizardController.prototype.removeApplication = function (app) {
            var self = this;
            var index = _.findIndex(self.addedApplications, function (o) { return o.id == app.id; });
            var cloneIndex = _.findIndex(self.applicationsCopy, function (o) { return o.name == app.name; });
            self.applications.push(angular.copy(self.applicationsCopy[cloneIndex]));
            self.addedApplications.splice(index, 1);
        };
        AddApplicationWizardController.prototype.moveUp = function (index) {
            var self = this;
            var x = self.addedApplications[index];
            self.addedApplications[index] = self.addedApplications[index - 1];
            self.addedApplications[index - 1] = x;
        };
        AddApplicationWizardController.prototype.moveDown = function (index) {
            var self = this;
            var x = self.addedApplications[index];
            self.addedApplications[index] = self.addedApplications[index + 1];
            self.addedApplications[index + 1] = x;
        };
        AddApplicationWizardController.prototype.identifyResourcesInvalid = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                if (self.resourceSelected()) {
                    resolve();
                    self.globalServices.ClearErrors(self.errors);
                }
                else {
                    reject();
                    self.globalServices.DisplayError({
                        severity: "critical",
                        message: self.$translate.instant("TEMPLATES_AddApplication_SelectResourcesToContinue")
                    }, self.errors);
                }
                return self.resourceSelected()
                    ? resolve()
                    : reject();
            });
        };
        AddApplicationWizardController.prototype.resourceSelected = function () {
            var self = this;
            return !!_.find(self.targetComponents, { duplicateApplication: true });
        };
        AddApplicationWizardController.prototype.resourcesToDuplicate = function () {
            var self = this;
            return _.filter(self.targetComponents, { duplicateApplication: true });
        };
        AddApplicationWizardController.prototype.requiredFieldsRemaining = function () {
            var self = this, count = 0;
            angular.forEach(self.addedApplications, function (application) {
                angular.forEach(application.categories, function (category) {
                    var visibleSettings = self.getVisibleSettings(category, application);
                    count += _.filter(category.settings, function (setting) {
                        return setting.required && !setting.value;
                    })
                        .length;
                });
            });
            self.formInvalid = !!count || self.globalServices.IsInRole('standard') || self.globalServices.IsInRole('readonly');
            return count;
        };
        AddApplicationWizardController.prototype.validateStep2 = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                self.addedApplications.length ? resolve() : reject();
            });
        };
        AddApplicationWizardController.prototype.cancelWizard = function () {
            var self = this;
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('TEMPLATES_Areyousureyouwanttocancel'))
                .then(function () { return self.$scope.modal.cancel(); });
        };
        AddApplicationWizardController.prototype.finishWizard = function () {
            var self = this;
            if (self.formInvalid) {
                self.globalServices.scrollToInvalidElement("parentAppWizard");
                self.deployApplicationForm._submitted = true;
                return;
            }
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDAPPLICATION_Areyousureyouwanttofinishconfiguration'))
                .then(function () {
                var newComponents = [];
                if (self.service == null) {
                    if (self.action == 'add') {
                        //find all components that we are relating to
                        angular.forEach(self.template.components, function (component, index) {
                            if (component.duplicateApplication) {
                                //clone each application as a new component to add to template/service
                                angular.forEach(self.addedApplications, function (application, index2) {
                                    console.log(application);
                                    var applicationCopy = angular.copy(application);
                                    applicationCopy.id = self.$rootScope.ASM.NewGuid();
                                    newComponents.push(applicationCopy);
                                    //add corresponding related component to existing component
                                    component.relatedcomponents.push({
                                        id: applicationCopy.id,
                                        name: applicationCopy.name,
                                        installOrder: index2 + 1,
                                        subtype: applicationCopy.subtype
                                    });
                                });
                                component.duplicateApplication = false;
                            }
                        });
                        $.each(newComponents, function (index, newComponent) {
                            self.template.components.push(newComponent);
                        });
                    }
                    else if (self.action == 'edit') {
                        //for edit, we will clean out all existing application objects and recreate. Existing ones should retain same id
                        var idsToDelete = [];
                        //find target ids
                        var newRelatedComponents = [];
                        $.each(self.editComponent.relatedcomponents, function (index, relatedComponent) {
                            if (relatedComponent.installOrder > 0)
                                idsToDelete.push(relatedComponent.id);
                            else
                                newRelatedComponents.push(relatedComponent);
                        });
                        //reset the related
                        self.editComponent.relatedcomponents = newRelatedComponents;
                        //delete all old components
                        var newComponents = [];
                        $.each(self.template.components, function (index, model) {
                            if (idsToDelete.indexOf(model.id) == -1)
                                newComponents.push(model);
                        });
                        //reset components
                        self.template.components = newComponents;
                        //readd correct components and relatedcomponents
                        $.each(self.addedApplications, function (index, application) {
                            if (application.isNew) {
                                application.id = self.$rootScope.ASM.NewGuid();
                            }
                            self.template.components.push(application);
                            self.editComponent.relatedcomponents.push({
                                id: application.id,
                                name: application.name,
                                installOrder: index + 1,
                                subtype: application.subtype
                            });
                        });
                    }
                    var d = self.$q.defer();
                    self.globalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.$http.post(self.Commands.data.templates.saveTemplate, self.template)
                        .then(function (data) {
                        d.resolve();
                        self.$scope.modal.close();
                    })
                        .catch(function (data) {
                        self.globalServices.DisplayError(data.data, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
                else {
                    var listOfChanged = [];
                    if (self.action == 'add') {
                        //find all components that we are relating to
                        $.each(self.template.components, function (index, component) {
                            if (component.duplicateApplication) {
                                var c = component;
                                //clone each application as a new component to add to template/service
                                $.each(self.addedApplications, function (index2, model) {
                                    var x = angular.copy(model);
                                    x.id = self.$rootScope.ASM.NewGuid();
                                    //add new app to changed items
                                    listOfChanged.push(x);
                                    //add corresponding related component to existing component
                                    c.relatedcomponents.push({
                                        id: x.id,
                                        name: x.name,
                                        installOrder: index2 + 1,
                                        subtype: x.subtype
                                    });
                                });
                                //add component as changed item
                                listOfChanged.push(c);
                            }
                        });
                    }
                    else if (self.action == 'edit') {
                        //add new related components and update original component
                        $.each(self.addedApplications, function (index, model) {
                            model.id = self.$rootScope.ASM.NewGuid();
                            self.editComponent.relatedcomponents.push({
                                id: model.id,
                                name: model.name,
                                installOrder: index + 1 + self.indexOffset,
                                subtype: model.subtype
                            });
                            listOfChanged.push(model);
                        });
                        listOfChanged.push(self.editComponent);
                    }
                    $.each(listOfChanged, function (index, model) {
                        if (model.device)
                            model.device = {};
                    });
                    var d = self.$q.defer();
                    self.globalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.$http.post(self.Commands.data.services.adjustService, {
                        serviceId: self.service.id,
                        componentId: null,
                        components: listOfChanged
                    })
                        .then(function (data) {
                        d.resolve();
                        self.$scope.modal.close();
                    })
                        .catch(function (data) {
                        d.resolve();
                        self.globalServices.DisplayError(data.data, self.errors);
                    });
                }
            });
        };
        ;
        AddApplicationWizardController.$inject = ['Modal', '$scope', 'Dialog', '$http', '$translate', 'Loading', '$q', '$timeout', 'Commands', '$rootScope', "GlobalServices", "$filter"];
        return AddApplicationWizardController;
    }());
    asm.AddApplicationWizardController = AddApplicationWizardController;
    angular
        .module('app')
        .controller('AddApplicationWizardController', AddApplicationWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=addapplicationwizard.js.map
var asm;
(function (asm) {
    var AddComponentController = (function () {
        function AddComponentController($scope, $http, $q, Loading, Commands, GlobalServices) {
            this.$scope = $scope;
            this.$http = $http;
            this.$q = $q;
            this.Loading = Loading;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = new Array();
            this.componentsLoaded = false;
            var self = this;
            self.$scope.modal.params.availableComponents = [];
            self.loadComponents();
        }
        AddComponentController.prototype.loadComponents = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            var params = {
                id: self.$scope.modal.params.type,
                templateId: self.$scope.modal.params.templateId,
                serviceId: self.$scope.modal.params.serviceId,
            };
            self.$http.post(self.Commands.data.templates.getTemplateBuilderComponents, params)
                .then(function (data) {
                self.$scope.modal.params.availableComponents = data.data.responseObj;
                self.componentsLoaded = true;
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        AddComponentController.prototype.save = function (data) {
            var self = this, 
            //operate on copy in order to prevent dom from reacting to changes made in stringify
            templateCopy = angular.copy(data.config.template);
            angular.forEach(templateCopy.components, function (component) {
                component.categories = self.GlobalServices.stringifyCategories(component.categories);
            });
            return self.$http.post(self.Commands.data.templates.saveTemplate, templateCopy);
        };
        AddComponentController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddComponentController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddComponentController.$inject = ['$scope', '$http', '$q', 'Loading', 'Commands', 'GlobalServices'];
        return AddComponentController;
    }());
    asm.AddComponentController = AddComponentController;
    angular
        .module('app')
        .controller('AddComponentController', AddComponentController);
})(asm || (asm = {}));
//# sourceMappingURL=addcomponent.js.map
var asm;
(function (asm) {
    var AddFirmwareBundleModalController = (function () {
        function AddFirmwareBundleModalController(modal, $http, $timeout, $scope, $q, $translate, loading, dialog, Commands, globalServices, $location) {
            this.modal = modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.dialog = dialog;
            this.Commands = Commands;
            this.globalServices = globalServices;
            this.$location = $location;
            this.repo = {
                fwrepo_select_actions: [],
                settingsfw_repo_select_actions: [],
                id: '',
                state: '',
                name: '',
                description: '',
                source: '',
                defaultpackage: true,
                filepath: '',
                username: '',
                password: '',
                deployed: false,
                isSelected: false,
                bundles: 0,
                customBundles: 0,
                components: 0,
                created: moment(),
                updated: moment(),
                services: [],
                firmwarebundles: [],
                userbundles: [],
                softwarebundles: [],
                packageSource: 'import',
                updateInterval: 'month',
                fwrepo_selected_action: '',
                settingsfw_repo_selected_action: ''
            };
            this.ftpSource = 'ftp.dell.com';
            this.errors = new Array();
            this.rcmList = [];
            this.disabled = false;
            var self = this;
            self.initialize();
        }
        AddFirmwareBundleModalController.prototype.initialize = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.$q.all([
                self.getGettingStarted()
                    .then(function (data) {
                    self.disabled = !data.data.responseObj.secureRemoteServicesConfigured;
                    if (!self.disabled) {
                        self.$http.post(self.Commands.data.firmwarepackages.getAvailableRCMs, {})
                            .then(function (data) {
                            self.rcmList = data.data.responseObj;
                        })
                            .catch(function (response) {
                            self.globalServices.DisplayError(response.data, self.errors);
                        })
                            .finally(function () { return d.resolve(); });
                    }
                    else {
                        d.resolve();
                    }
                })
                    .catch(function (response) {
                    self.globalServices.DisplayError(response.data, self.errors);
                    d.resolve();
                })
            ]);
        };
        AddFirmwareBundleModalController.prototype.testConnection = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.testFirmwarePackage(self.repo)
                .then(function (data) {
                self.dialog((self.$translate.instant('SETTINGS_Repositories_testconnection_success_title')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('SETTINGS_Repositories_testconnection_success_message')), true);
            })
                .catch(function (data) {
                self.globalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        AddFirmwareBundleModalController.prototype.save = function () {
            var self = this, d = self.$q.defer();
            self.cleanForms(self.repo);
            self.globalServices.ClearErrors();
            self.loading(d.promise);
            self.savePackage(self.repo)
                .then(function (response) {
                self.close();
            })
                .catch(function (response) {
                self.globalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        AddFirmwareBundleModalController.prototype.goToSettings = function () {
            var self = this;
            self.cancel();
            self.$timeout(function () {
                self.$location.path('settings/VirtualApplianceManagement');
            }, 500);
        };
        AddFirmwareBundleModalController.prototype.cleanForms = function (repo) {
            var self = this;
            if (repo.packageSource === 'network') {
                repo.source = self.ftpSource;
            }
        };
        AddFirmwareBundleModalController.prototype.testFirmwarePackage = function (repo) {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.testFirmwarePackage, repo);
        };
        AddFirmwareBundleModalController.prototype.savePackage = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.saveFirmwarePackage, update);
        };
        AddFirmwareBundleModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddFirmwareBundleModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        AddFirmwareBundleModalController.prototype.getGettingStarted = function () {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.gettingStarted, null);
        };
        AddFirmwareBundleModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$location'];
        return AddFirmwareBundleModalController;
    }());
    asm.AddFirmwareBundleModalController = AddFirmwareBundleModalController;
    angular
        .module('app')
        .controller('AddFirmwareBundleModalController', AddFirmwareBundleModalController);
})(asm || (asm = {}));
//# sourceMappingURL=addFirmwareBundle.js.map
var asm;
(function (asm) {
    var AddModuleModalController = (function () {
        function AddModuleModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.Commands = Commands;
            this.errors = new Array();
            var self = this;
            self.deferred = self.$q.defer();
            var uploader = $scope.uploader = new FileUploader({
                url: self.Commands.data.addonmodules.uploadAddOnModule,
            });
            self.$timeout(function () {
                document.getElementById('addonmodulefile').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    self.$timeout(function () { self.fileModel = element.files[0]; });
                };
            }, 500);
        }
        AddModuleModalController.prototype.save = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(self.deferred.promise);
            angular.merge(self.$scope.uploader, {
                onCompleteItem: function (fileItem, response, status, headers) {
                    self.pollingId = response.responseObj.id;
                    self.poll();
                },
                onErrorItem: function (fileItem, response, status, headers) {
                    //TODO: catch error, doesn't catch here
                    self.deferred.resolve();
                    self.GlobalServices.DisplayError(response, self.errors);
                }
            });
            self.$scope.uploader.uploadAll();
        };
        AddModuleModalController.prototype.poll = function () {
            var self = this;
            self.$http.post(self.Commands.data.addonmodules.saveAddOnModule, { id: self.pollingId }).then(function (data) {
                if (data.data.responseObj == 'COMPLETE') {
                    console.log('Module successfully added');
                    self.$scope.modal.close();
                    self.deferred.resolve();
                }
                else {
                    self.$timeout(function () {
                        self.poll();
                    }, 5000);
                }
            }).catch(function (data) {
                self.deferred.resolve();
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        AddModuleModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddModuleModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', 'Commands'];
        return AddModuleModalController;
    }());
    asm.AddModuleModalController = AddModuleModalController;
    angular
        .module('app')
        .controller('AddModuleModalController', AddModuleModalController);
})(asm || (asm = {}));
//# sourceMappingURL=addmoduleModal.js.map
var asm;
(function (asm) {
    var AddPoolWizardController = (function () {
        function AddPoolWizardController(Modal, $scope, Dialog, $http, $translate, Loading, $q, $timeout, Commands, $rootScope, GlobalServices) {
            this.Modal = Modal;
            this.$scope = $scope;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Commands = Commands;
            this.$rootScope = $rootScope;
            this.GlobalServices = GlobalServices;
            this.pool = {
                name: '',
                description: '',
                virtualMACIdentityCount: 0,
                virtualMACUserPrefixSelection: '00',
                virtualMACAutoGenerateOnDeploy: true,
                virtualIQNIdentityCount: 0,
                virtualIQNUserPrefix: '',
                virtualIQNAutoGenerateOnDeploy: true,
                virtualWWPNIdentityCount: 0,
                virtualWWPNUserPrefixSelection: '00',
                virtualWWPNAutoGenerateOnDeploy: true,
                virtualWWNNIdentityCount: 0,
                virtualWWNNUserPrefixSelection: '00',
                virtualWWNNAutoGenerateOnDeploy: true
            };
            this.errors = new Array();
            this.poolPrefixList = [];
            var self = this;
            self.refresh();
        }
        AddPoolWizardController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            // jek 3.30.2016 : ASM.old always provided id = null
            // within the Wizard
            self.$http.post(self.Commands.data.pools.getPoolPrefixList, { 'id': null })
                .then(function (data) {
                self.poolPrefixList = data.data.responseObj;
                //set these to the first item in poolPrefixList
                var x = self.poolPrefixList[0];
                if (x) {
                    self.pool.virtualMACUserPrefixSelection = x.id;
                    self.pool.virtualWWPNUserPrefixSelection = x.id;
                    self.pool.virtualWWNNUserPrefixSelection = x.id;
                }
                //// add 'Select' to the list
                //var newItem = { id: 'select', name: 'Select' };
                //self.poolPrefixList.splice(0, 0, newItem);
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        AddPoolWizardController.prototype.validatePool = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                if (self.forms.form_editpool_information.$invalid) {
                    self.forms.form_editpool_information._submitted = true;
                    return reject();
                }
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.pools.validatePool, self.pool)
                    .then(function (data) {
                    resolve();
                })
                    .catch(function (data) {
                    reject();
                    self.GlobalServices.DisplayError(data.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        AddPoolWizardController.prototype.validatePoolInfo = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                if (self.forms.form_edit_virtualmac.$invalid) {
                    self.forms.form_edit_virtualmac._submitted = true;
                    reject();
                }
                else {
                    resolve();
                }
            });
        };
        AddPoolWizardController.prototype.validateVirtualIQN = function () {
            var self = this, d = self.$q.defer();
            if (self.forms.form_edit_virtualiqn.$invalid) {
                self.forms.form_edit_virtualiqn._submitted = true;
                d.reject();
            }
            else {
                d.resolve();
            }
            return d.promise;
        };
        AddPoolWizardController.prototype.validateVirtualWWPN = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                if (self.forms.form_edit_virtualwwpn.$invalid) {
                    self.forms.form_edit_virtualwwpn._submitted = true;
                    reject();
                }
                else {
                    resolve();
                }
            });
        };
        AddPoolWizardController.prototype.validateVirtualWWNN = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                if (self.forms.form_edit_virtualwwnn.$invalid) {
                    self.forms.form_edit_virtualwwnn._submitted = true;
                    reject();
                }
                else {
                    resolve();
                }
            });
        };
        AddPoolWizardController.prototype.enterPoolInformation = function () {
            var self = this;
            self.$rootScope.helpToken = 'virtualidentitypoolcreate';
        };
        AddPoolWizardController.prototype.enterVirtualMAC = function () {
            var self = this;
            self.$rootScope.helpToken = 'virtualidentitiespooladdingMAC';
        };
        AddPoolWizardController.prototype.enterVirtualIQN = function () {
            var self = this;
            self.$rootScope.helpToken = 'virtualidentitiespooladdingIQN';
        };
        AddPoolWizardController.prototype.enterVirtualWWPN = function () {
            var self = this;
            self.$rootScope.helpToken = 'virualidentitypooladdingWWPN';
        };
        AddPoolWizardController.prototype.enterVirtualWWNN = function () {
            var self = this;
            self.$rootScope.helpToken = 'virtualidentitypooladdingWWNN';
        };
        AddPoolWizardController.prototype.enterPoolSummary = function () {
            var self = this;
            self.$rootScope.helpToken = 'virtualidentitypoolcreate';
        };
        //cancelWizard() {
        //    //THIS FUNCTION IS CALLED ON WIZARD.CANCEL, not MODAL.CANCEL, if you need this logic when clicking the X in the modal move it to the modal definition.
        //    //THE WAY THIS IS CODED WILL LEAD TO 2 CONFIRM DIALOGS, 1 for the Wizard and then another one for the Modal.
        //    //var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDPOOL_Cancel_Confirmation'));
        //    //confirm.then(function () {
        //    //    self.$scope.modal.cancel();
        //    //});
        //    var self: AddPoolWizardController = this;
        //    self.$scope.modal.cancel();
        //}
        AddPoolWizardController.prototype.finishWizard = function () {
            var self = this;
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDPOOL_Submit_Confirmation'))
                .then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.pools.createPool, self.pool)
                    .then(function () {
                    d.resolve();
                    self.$scope.modal.close();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            });
            //})
        };
        AddPoolWizardController.prototype.getVirtualMACPrefix = function () {
            var self = this;
            return "00:0E:AA:" + self.pool.virtualMACUserPrefixSelection;
        };
        AddPoolWizardController.prototype.getVirtualWWPNPrefix = function () {
            var self = this;
            return "20:01:00:0E:" + self.pool.virtualWWPNUserPrefixSelection;
        };
        AddPoolWizardController.prototype.getVirtualWWNNPrefix = function () {
            var self = this;
            return "20:00:00:0E:" + self.pool.virtualWWNNUserPrefixSelection;
        };
        AddPoolWizardController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddPoolWizardController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddPoolWizardController.$inject = ['Modal', '$scope', 'Dialog', '$http', '$translate', 'Loading', '$q', '$timeout', 'Commands', '$rootScope', 'GlobalServices'];
        return AddPoolWizardController;
    }());
    asm.AddPoolWizardController = AddPoolWizardController;
    angular
        .module('app')
        .controller('AddPoolWizardController', AddPoolWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=addpoolwizard.js.map
var asm;
(function (asm) {
    var AddUsersController = (function () {
        function AddUsersController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = new Array();
            this.allSelected = false;
            var self = this;
            self.users = $scope.modal.params.users;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.getUsers().then(function (response) {
                self.userList = _.uniqBy(_.filter(response.data.responseObj, function (user) {
                    return !_.find(self.users, { id: user.id });
                }), "id");
                self.userListSafe = angular.copy(self.userList);
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            }).finally(function () {
                d.resolve();
            });
        }
        AddUsersController.prototype.toggleAll = function () {
            var self = this;
            angular.forEach(self.userListSafe, function (device) {
                device.selected = self.allSelected;
            });
        };
        AddUsersController.prototype.getUsers = function () {
            var self = this;
            return self.$http.post(self.Commands.data.users.getUsers, {
                criteriaObj: {
                    filterObj: [
                        {
                            field: "roleId",
                            op: "=",
                            opTarget: ["standard"]
                        }]
                }
            });
        };
        AddUsersController.prototype.save = function () {
            var self = this;
            self.close(_.union(_.filter(self.userListSafe, { selected: true }), self.users));
        };
        AddUsersController.prototype.close = function (params) {
            var self = this;
            self.$scope.modal.close(params);
        };
        AddUsersController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddUsersController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return AddUsersController;
    }());
    asm.AddUsersController = AddUsersController;
    angular
        .module('app')
        .controller('AddUsersController', AddUsersController);
})(asm || (asm = {}));
//# sourceMappingURL=addUsers.js.map
var asm;
(function (asm) {
    var BackupNowModalController = (function () {
        function BackupNowModalController($scope, Modal, Dialog, $http, $translate, Commands, GlobalServices, Loading, $q) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.Loading = Loading;
            this.$q = $q;
            this.errors = new Array();
            var self = this;
            self.getBackupSettings();
        }
        BackupNowModalController.prototype.getBackupSettings = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.backupAndRestore.getBackupSettings, null)
                .then(function (data) {
                self.backupSettings = data.data.responseObj;
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        BackupNowModalController.prototype.backup = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.backupAndRestore.backupNow, self.backupSettings)
                .then(function (data) {
                d.resolve();
                self.$scope.modal.close();
            })
                .catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        BackupNowModalController.prototype.testBackupNowConnection = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.backupAndRestore.testBackupConnection, self.backupSettings)
                .then(function (data) {
                self.Dialog((self.$translate.instant('BACKUPNOW_testconnection_success_title')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('BACKUPNOW_testconnection_success_message')), true);
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        BackupNowModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        BackupNowModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        BackupNowModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$translate', 'Commands', 'GlobalServices', 'Loading', '$q'];
        return BackupNowModalController;
    }());
    asm.BackupNowModalController = BackupNowModalController;
    angular
        .module('app')
        .controller('BackupNowModalController', BackupNowModalController);
})(asm || (asm = {}));
//# sourceMappingURL=backupNowModal.js.map
var asm;
(function (asm) {
    var ConfigureReleaseCertController = (function () {
        function ConfigureReleaseCertController(Modal, Dialog, $http, Loading, $q, $timeout, $scope, GlobalServices, $translate, Commands, $rootScope) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.GlobalServices = GlobalServices;
            this.$translate = $translate;
            this.Commands = Commands;
            this.$rootScope = $rootScope;
            this.errors = new Array();
            var self = this;
        }
        ConfigureReleaseCertController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ConfigureReleaseCertController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ConfigureReleaseCertController.$inject = ['Modal', 'Dialog', '$http', 'Loading', '$q', '$timeout', '$scope', 'GlobalServices', '$translate', 'Commands', '$rootScope'];
        return ConfigureReleaseCertController;
    }());
    asm.ConfigureReleaseCertController = ConfigureReleaseCertController;
    angular
        .module('app')
        .controller('ConfigureReleaseCertController', ConfigureReleaseCertController);
})(asm || (asm = {}));
//# sourceMappingURL=configureReleaseCert.js.map
var asm;
(function (asm) {
    var ConfirmModalController = (function () {
        function ConfirmModalController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $filter, MessageBox) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.MessageBox = MessageBox;
            var self = this;
            self.confirm =
                {
                    id: '',
                    text: '',
                    html: '',
                    items: [],
                    alert: false,
                    icontype: 'warning',
                    titletext: '',
                    footnote: '',
                    alternateActionText: ''
                };
            self.confirmed = false;
            self.alternateAction = false;
            if ($scope.modal.params.confirm) {
                self.confirm = angular.copy($scope.modal.params.confirm);
            }
            self.activate();
        }
        ConfirmModalController.prototype.activate = function () {
            var self = this;
            //this.$el.addClass( 'confirmation' );
            //if ( self.selectedNetworkId )
            //{
            //    self.$http.post( 'networks/getnetworkbyid', { 'id': self.selectedNetworkId })
            //        .then( function ( data: any )
            //        {
            //            self.network = data.data.responseObj;
            //            //this must be called here so that it runs upon return from this call
            //            self.setSelectedNetworkType();                        
            //        }).catch( function ( data )
            //        {
            //            self.GlobalServices.DisplayError( data.data );
            //        });
            //}
            //else
            //{
            //    self.editMode = 'create';
            //    // new network, set some defaults
            //    self.network.ipaddressranges = [];
            //    self.network.staticipaddressdetails = [];
            //    self.network.addressPools = [];
            //    self.network.networkTemplateUsages = [];
            //}
        };
        ConfirmModalController.prototype.save = function () {
            var self = this;
            self.confirmed = true;
            self.$scope.modal.params.confirmed = self.confirmed;
            self.$scope.modal.close();
        };
        ConfirmModalController.prototype.doAlternateAction = function () {
            var self = this;
            self.alternateAction = true;
            self.$scope.modal.params.alternateAction = self.alternateAction;
            self.$scope.modal.close();
        };
        ConfirmModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ConfirmModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'loading', 'dialog',
            'Commands', 'GlobalServices', '$filter', 'messagebox'];
        return ConfirmModalController;
    }());
    asm.ConfirmModalController = ConfirmModalController;
    angular
        .module('app')
        .controller('ConfirmModalController', ConfirmModalController);
})(asm || (asm = {}));
//# sourceMappingURL=confirmModal.js.map
var asm;
(function (asm) {
    var CreateTemplateModalController = (function () {
        function CreateTemplateModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, $translate, constants, commands, $location, $filter) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.$translate = $translate;
            this.constants = constants;
            this.commands = commands;
            this.$location = $location;
            this.$filter = $filter;
            //public templates: any = this.$scope.modal.params.templates;
            this.templates = new Array();
            this.templatesDropdown = new Array();
            this.type = this.$scope.modal.params.type;
            this.template = {
                "id": null,
                "name": "",
                "description": "",
                "type": "new",
                "cloneexistingtemplateid": null,
                "category": null,
                "manageFirmware": false,
                "firmwarePackageId": null,
                "updateServerFirmware": false,
                "updateNetworkFirmware": false,
                "updateStorageFirmware": false,
                "enableApps": false,
                "enableVMs": false,
                "enableCluster": false,
                "enableServer": false,
                "enableStorage": false,
                "allStandardUsers": false,
                "assignedUsers": []
            };
            this.cloneoption = { "id": null };
            this.categories = new Array();
            this.firmwares = new Array();
            this.errors = new Array();
            this.credentials = [];
            var self = this;
            self.templates = self.$scope.modal.params.templates;
            if (self.type === "clone") {
                self.$scope.modal.params.template.name = "";
            }
            angular.extend(self.template, self.$scope.modal.params.template);
            self.activate();
        }
        CreateTemplateModalController.prototype.activate = function () {
            var self = this;
            self.templatesDropdown = self.$filter("filter")(self.templates, { 'isLocked': false }, true);
            if (self.type === "edit") {
                self.template = self.$scope.modal.params.template;
            }
            else {
                self.template.type = self.type;
            }
            if (self.type === "clone") {
                //self.getNetworkList();
                self.cloneoption = _.find(self.templates, { 'id': self.template.id });
                self.template.cloneexistingtemplateid = self.cloneoption.id;
                self.template.id = null;
            }
            self.managePermissions = (self.template.allStandardUsers || self.template.assignedUsers.length > 0);
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.getAvailableFirmwarePackages().then(function (response) {
                self.firmwares = [
                    {
                        id: 'usedefaultcatalog',
                        name: self.$translate.instant("SERVICE_DETAIL_EditService_UseASMappliancedefaultcatalog"),
                        defaultpackage: false
                    }
                ].concat(response.data.responseObj);
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            }).finally(function () { d.resolve(); });
        };
        CreateTemplateModalController.prototype.save = function (isValid, wizardFinish) {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            if (!self.template.manageFirmware) {
                self.template.firmwarePackageId = null;
            }
            if (self.template.allStandardUsers === true) {
                self.template.assignedUsers = [];
            }
            if (wizardFinish) {
                if (self.type == 'new') {
                    self.createTemplate(self.template)
                        .then(function (response) {
                        d.resolve();
                        self.goToTemplateBuilder(response.data.responseObj.id);
                        self.close();
                    })
                        .catch(function (data) {
                        d.resolve();
                        self.GlobalServices.DisplayError(data.data, self.errors);
                    });
                }
                else if (self.type === 'clone') {
                    self.saveTemplateAdditionalSettings(self.template)
                        .then(function (response) {
                        d.resolve();
                        self.goToTemplateBuilder(response.data.responseObj.id);
                        self.close();
                    })
                        .catch(function (data) {
                        d.resolve();
                        self.GlobalServices.DisplayError(data.data, self.errors);
                    });
                }
                else {
                    //edit?
                    self.saveTemplate(self.template)
                        .then(function (response) {
                        d.resolve();
                        self.goToTemplateBuilder(response.data.responseObj.id);
                        self.close();
                    })
                        .catch(function (data) {
                        d.resolve();
                        self.GlobalServices.DisplayError(data.data, self.errors);
                    });
                }
            }
            else {
                //clone
                self.createTemplate(self.template)
                    .then(function (data) {
                    self.template = data.data.responseObj;
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            }
        };
        CreateTemplateModalController.prototype.createNewTemplate = function () {
            var self = this;
            self.forms.createTemplate._submitted = true;
            if (self.forms.createTemplate.$valid) {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.createTemplate(self.template)
                    .then(function (response) {
                    d.resolve();
                    if (self.type !== 'clone') {
                        self.goToTemplateBuilder(response.data.responseObj.id);
                        self.close();
                    }
                })
                    .catch(function (data) {
                    d.resolve();
                    self.GlobalServices.DisplayError(data.data, self.errors);
                });
            }
        };
        CreateTemplateModalController.prototype.editTemplate = function () {
            var self = this;
            self.forms.createTemplate._submitted = true;
            if (self.forms.createTemplate.$valid) {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.saveTemplate(self.template)
                    .then(function (response) {
                    d.resolve();
                    self.goToTemplateBuilder(response.data.responseObj.id);
                    self.close();
                })
                    .catch(function (data) {
                    d.resolve();
                    self.GlobalServices.DisplayError(data.data, self.errors);
                });
            }
        };
        CreateTemplateModalController.prototype.enterStep1 = function () {
            var self = this;
            if (self.originalTemplate) {
                self.template = self.originalTemplate;
            }
        };
        CreateTemplateModalController.prototype.validateStep1 = function () {
            var self = this;
            self.forms.step1._submitted = true;
            return self.$q(function (resolve, reject) {
                self.forms.step1._submitted = true;
                if (self.forms.step1.$valid) {
                    var d = self.$q.defer();
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.createTemplate(self.template)
                        .then(function (data) {
                        resolve();
                        //hold on to original in case user goes back from step 2, we can resubmit it to create template
                        self.originalTemplate = angular.copy(self.template);
                        self.template = data.data.responseObj;
                    })
                        .catch(function (data) {
                        reject();
                        self.GlobalServices.DisplayError(data.data, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
                else {
                    reject();
                }
            });
        };
        CreateTemplateModalController.prototype.enterStep2 = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.getCredentialSummaryList()
                .then(function (response) {
                self.credentials = response.data.responseObj;
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
            ;
            return d.promise;
        };
        CreateTemplateModalController.prototype.addCredential = function (context, settingName) {
            var self = this;
            var theModal = self.Modal({
                title: self.$translate.instant('CREDENTIALS_CreateTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('creatingcredentials');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/credentials/editcredentials.html',
                controller: 'EditCredentialsController as editCredentialsController',
                params: {
                    editMode: false,
                    typeId: "os",
                    canChangeCredentialType: false
                },
                onComplete: function (credentialId) {
                    context[settingName] = credentialId;
                    var d = self.$q.defer();
                    self.Loading(d.promise);
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.getCredentialSummaryList()
                        .then(function (response) {
                        self.credentials = response.data.responseObj;
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
            });
            theModal.modal.show();
        };
        CreateTemplateModalController.prototype.finishWizard = function () {
            var self = this;
            self.forms.step2._submitted = true;
            if (self.forms.step2.$valid) {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.saveTemplateAdditionalSettings(self.template)
                    .then(function (response) {
                    d.resolve();
                    self.goToTemplateBuilder(response.data.responseObj);
                    self.close();
                })
                    .catch(function (data) {
                    d.resolve();
                    self.GlobalServices.DisplayError(data.data, self.errors);
                });
            }
            ;
        };
        CreateTemplateModalController.prototype.goToTemplateBuilder = function (id) {
            var self = this;
            self.$timeout(function () {
                self.$location.path("templatebuilder/" + id + "/edit");
            }, 500);
        };
        CreateTemplateModalController.prototype.viewComponents = function (selected) {
            var self = this, modal = self.Modal({
                title: self.$translate.instant("TEMPLATES_ViewComponentsModalTitle", { name: selected.name }),
                modalSize: 'modal-lg',
                templateUrl: 'views/templates/viewcomponents.html',
                controller: 'ViewComponentsController as viewComponents',
                params: {
                    selected: selected
                }
            });
            modal.modal.show();
        };
        CreateTemplateModalController.prototype.getAvailableFirmwarePackages = function () {
            var self = this;
            return self.$http.post(self.commands.data.firmwarepackages.getAvailableFirmwarePackages, {});
        };
        CreateTemplateModalController.prototype.saveTemplate = function (template) {
            var self = this;
            return self.$http.post(self.commands.data.templates.saveTemplate, template);
        };
        CreateTemplateModalController.prototype.saveTemplateAdditionalSettings = function (template) {
            var self = this;
            return self.$http.post(self.commands.data.templates.saveTemplateAdditionalSettings, template);
        };
        CreateTemplateModalController.prototype.createTemplate = function (template) {
            var self = this;
            return self.$http.post(self.commands.data.templates.createTemplate, template);
        };
        CreateTemplateModalController.prototype.getCredentialSummaryList = function () {
            var self = this;
            return self.$http.post(self.commands.data.credential.getCredentialByType, { id: 'os' });
        };
        CreateTemplateModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        CreateTemplateModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        CreateTemplateModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', '$translate', 'constants', 'Commands', '$location', '$filter'];
        return CreateTemplateModalController;
    }());
    asm.CreateTemplateModalController = CreateTemplateModalController;
    angular
        .module('app')
        .controller('CreateTemplateModalController', CreateTemplateModalController);
})(asm || (asm = {}));
//# sourceMappingURL=createtemplateModal.js.map
var asm;
(function (asm) {
    var CreateUserModalController = (function () {
        function CreateUserModalController($scope, Modal, Dialog, $http, GlobalServices, $rootScope, commands, loading, $q, $translate) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.commands = commands;
            this.loading = loading;
            this.$q = $q;
            this.$translate = $translate;
            this.errors = new Array();
            var self = this;
            self.newUser = {
                currentpassword: '',
                email: '',
                enabled: false,
                firstname: '',
                id: '',
                lastname: '',
                locale: '',
                password: '',
                phone: '',
                roleId: '',
                rolename: '',
                serverName: '',
                showdefaultpasswordprompt: false,
                state: '',
                username: '',
            };
            self.submitform = false;
            self.currentPassword = false;
            self.refresh();
        }
        CreateUserModalController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.getRoles().then(function (data) {
                self.roles = data.data.responseObj;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            }).finally(function () { d.resolve(); });
        };
        CreateUserModalController.prototype.saveUser = function () {
            var self = this;
            angular.extend(self.newUser, {
                roleId: self.userRole.id,
                rolename: self.userRole.name
            });
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.postUser(self.newUser).then(function (data) {
                d.resolve();
                self.$scope.modal.close();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            }).finally(function () { d.resolve(); });
        };
        CreateUserModalController.prototype.getRoles = function () {
            var self = this;
            return self.$http.post(self.commands.data.users.getRoles, {});
        };
        CreateUserModalController.prototype.postUser = function (user) {
            var self = this;
            return self.$http.post(self.commands.data.users.saveUser, user);
        };
        CreateUserModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        CreateUserModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', 'GlobalServices', '$rootScope', "Commands", "Loading", "$q", "$translate"];
        return CreateUserModalController;
    }());
    asm.CreateUserModalController = CreateUserModalController;
    angular
        .module('app')
        .controller('CreateUserModalController', CreateUserModalController);
})(asm || (asm = {}));
//# sourceMappingURL=createuserModal.js.map
var asm;
(function (asm) {
    var DefineNetworksController = (function () {
        function DefineNetworksController($http, $timeout, $q, Modal, Dialog, $filter, Loading, $translate, Commands, GlobalServices, constants, $scope, $window) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$filter = $filter;
            this.Loading = Loading;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$scope = $scope;
            this.$window = $window;
            this.errors = new Array();
            var self = this;
            self.networkTypes = [];
            self.currentView = "all";
            self.StaticIPAddressDetailsViews = constants.staticIPAddressDetailsViews;
            self.deferred = self.$q.defer();
            self.refresh();
        }
        DefineNetworksController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.loadNetworkTypes()
                    .then(function (data) {
                    self.networkTypes = data.data.responseObj;
                }),
                self.getNetworksList().then(function (data) {
                    //apply default sort so selecting first will work
                    var sortedData = _.sortBy(data.data.responseObj, function (n) {
                        return n.name.toLowerCase();
                    });
                    self.networkData = sortedData;
                    self.displayedNetworkData = [].concat(self.networkData);
                    var selectedNet = null;
                    if (self.selectedNetworkId != null) {
                        selectedNet = _.find(self.networkData, { id: self.selectedNetworkId });
                    }
                    if (selectedNet == null) {
                        selectedNet = self.displayedNetworkData[0];
                    }
                    self.onNetworkSelected(selectedNet);
                })
            ])
                .then(function () {
                self.networkData = self.mapNetworkNames(self.networkData, self.networkTypes);
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data, self.errors); })
                .finally(function () { return d.resolve(); });
        };
        ;
        DefineNetworksController.prototype.mapNetworkNames = function (networkData, networkTypes) {
            return angular.forEach(networkData, function (network) {
                var match = _.find(networkTypes, { id: network.typeid });
                if (match) {
                    network._networkName = match.networkType;
                }
            });
        };
        DefineNetworksController.prototype.onNetworkSelected = function (network, ipRange) {
            var self = this;
            if (network) {
                var d = self.$q.defer();
                //self.Loading(d.promise);
                //this call must be async: false
                self.getNetworkById(network.id)
                    .then(function (data) {
                    self.selectedNetwork = data.data.responseObj;
                    self.selectedNetworkId = self.selectedNetwork.id;
                    if (self.selectedNetwork.staticordhcp == 'Static') {
                        //update static ip address details counts on network selection, based on selectedNetwork
                        self.totalIPAddresses_display = self.selectedNetwork.staticipaddressdetails.length;
                        self.inUseIPAddresses_display = _.filter(self.selectedNetwork.staticipaddressdetails, { state: 'inuse' }).length;
                        self.staticipaddressdetails_copy = self.selectedNetwork.staticipaddressdetails.slice(0, self.selectedNetwork.staticipaddressdetails.length);
                        if (self.selectedElement == 'filterDetails') {
                            self.totalIPAddresses_display = ipRange.totalIPAddresses;
                            self.inUseIPAddresses_display = ipRange.inUseIPAddresses;
                            //if one of the in use links was clicked, reset filter to inuse
                            self.currentView = 'inuse';
                            self.updateClientFilter();
                        }
                        else {
                            //reset the filter to all with each network row change or same-row click that is not on a link
                            //if one of the in use links was not clicked, reset filter to all
                            self.currentView = 'all';
                            self.updateClientFilter();
                        }
                    }
                }).catch(function (response) { self.GlobalServices.DisplayError(response.data, self.errors); })
                    .finally(function () { return d.resolve(); });
            }
        };
        DefineNetworksController.prototype.updateClientFilter = function () {
            var self = this;
            var ipaddress1;
            var ipaddress2;
            if (self.staticipaddressdetails_copy.length == 0)
                return;
            self.selectedNetwork.staticipaddressdetails = [];
            self.selectedNetwork.staticipaddressdetails = self.staticipaddressdetails_copy.slice(0, self.staticipaddressdetails_copy.length);
            if (self.startingIpAddress != null && self.endingIpAddress != null) {
                ipaddress1 = self.$filter('ip2long')(self.startingIpAddress);
                ipaddress2 = self.$filter('ip2long')(self.endingIpAddress);
            }
            var filteredData = self.selectedNetwork.staticipaddressdetails.filter(function (item) {
                return (((self.currentView == 'all' && (item.state == 'available' || item.state == 'inuse')) || (item.state == self.currentView)) &&
                    ((ipaddress1 == '' && ipaddress2 == '') || (self.$filter('ip2long')(item.ipAddress) >= ipaddress1 && self.$filter('ip2long')(item.ipAddress) <= ipaddress2)));
            });
            self.selectedNetwork.staticipaddressdetails = [];
            self.selectedNetwork.staticipaddressdetails = filteredData.slice(0, filteredData.length);
            //smart table works by starting with data from st-safe-src (treating that one as safe), and then uses data from st-table for the actual display and paging of the data,
            //so another array is needed for this displayed data source
            self.selectedNetwork.staticipaddressdetails_displayed = [].concat(self.selectedNetwork.staticipaddressdetails);
        };
        DefineNetworksController.prototype.click_tableRow = function (clickedItem) {
            //click on TR
            //self.selectedNetwork = network;
            var self = this;
            var network = clickedItem;
            self.selectedElement = 'row';
            self.startingIpAddress = '';
            self.endingIpAddress = '';
            //var currentTarget = evt.target;
            //while (currentTarget.nodeName != 'TR') {
            //    //we are on a child node
            //    currentTarget = currentTarget.parentNode;
            //}
            ////we are now on the TR node so dataFor will now apply to the correct element
            //var network = ko.dataFor(currentTarget);
            self.onNetworkSelected(network);
        };
        DefineNetworksController.prototype.click_IPAddressRange = function (clickedItem1, clickedItem2) {
            //click on class filterDetails
            var self = this;
            var network = clickedItem1;
            var ipRange = clickedItem2;
            self.selectedElement = 'filterDetails';
            self.startingIpAddress = ipRange.startingIpAddress;
            self.endingIpAddress = ipRange.endingIpAddress;
            //self.Loading(self.deferred.promise);
            self.onNetworkSelected(network, ipRange);
            //self.totalIPAddresses_display = ipRange.totalIPAddresses;
            //self.inUseIPAddresses_display = ipRange.inUseIPAddresses;
        };
        DefineNetworksController.prototype.deleteNetwork = function () {
            var self = this;
            //Confirmation Dialog box that fires delete on confirmation
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('NETWORKS_ConfirmDelete'))).then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.deleteNetworkById(self.selectedNetwork.id)
                    .then(function (data) {
                    self.refresh();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        DefineNetworksController.prototype.doDownload = function (type) {
            var self = this;
            var deferred = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(deferred.promise);
            self.processDownloadRequests('initial', '', type, deferred);
        };
        DefineNetworksController.prototype.processDownloadRequests = function (call, id, type, deferred) {
            var self = this;
            var urlToCall;
            var data;
            urlToCall = self.Commands.data.downloads.status;
            data = { 'id': id };
            if (call == 'initial') {
                urlToCall = self.Commands.data.downloads.create;
                if (type == 'networkdetails') {
                    data = { 'type': type, 'id': self.selectedNetworkId };
                }
                else {
                    data = { 'type': type };
                }
            }
            self.$http.post(urlToCall, { requestObj: data })
                .then(function (data) {
                switch (data.data.responseObj.status) {
                    case 'NOT_READY':
                        self.$timeout(function () {
                            self.processDownloadRequests('status', data.data.responseObj.id, type, deferred);
                        }, 5000);
                        break;
                    case 'READY':
                        self.$window.location.assign("downloads/getfile/" + data.data.responseObj.id);
                        deferred.resolve();
                        break;
                    case 'ERROR':
                        deferred.resolve();
                        self.GlobalServices.DisplayError(data.data);
                        break;
                }
            }).catch(function (data) {
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        DefineNetworksController.prototype.doUpdates = function (updateType) {
            var self = this;
            var title;
            var helptoken;
            //add/create or edit
            switch (updateType.toUpperCase()) {
                case 'CREATE':
                    //title = 'Define Network';
                    title = self.$translate.instant('NETWORKS_Edit_CreateTitle');
                    helptoken = 'networksaddingediting';
                    self.selectedNetworkId = '';
                    break;
                case 'EDIT':
                    //title = 'Edit Network';
                    title = self.$translate.instant('NETWORKS_Edit_EditTitle');
                    helptoken = 'networksaddingediting';
                    break;
            }
            var editNetworkModal = self.Modal({
                title: title,
                onHelp: function () {
                    self.GlobalServices.showHelp(helptoken);
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/editnetwork.html',
                controller: 'EditNetworkModalController as editNetwork',
                params: {
                    editMode: updateType,
                    id: self.selectedNetworkId
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            editNetworkModal.modal.show();
        };
        DefineNetworksController.prototype.loadNetworkTypes = function () {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworkTypes, { 'scaleup': false });
        };
        DefineNetworksController.prototype.getNetworksList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworksList, {});
        };
        DefineNetworksController.prototype.getNetworkById = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworkById, { id: id });
        };
        DefineNetworksController.prototype.deleteNetworkById = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.deleteNetwork, { id: id });
        };
        DefineNetworksController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DefineNetworksController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        DefineNetworksController.$inject = ['$http', '$timeout', '$q', 'Modal', 'Dialog', '$filter',
            'Loading', '$translate', 'Commands', 'GlobalServices', 'constants', '$scope', "$window"];
        return DefineNetworksController;
    }());
    asm.DefineNetworksController = DefineNetworksController;
    angular
        .module('app')
        .controller('DefineNetworksController', DefineNetworksController);
})(asm || (asm = {}));
//# sourceMappingURL=defineNetworks.js.map
var asm;
(function (asm) {
    var DirectoryWizardController = (function () {
        function DirectoryWizardController(Modal, Dialog, $http, Loading, $q, $timeout, $scope, GlobalServices, $translate, Commands, $rootScope) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.GlobalServices = GlobalServices;
            this.$translate = $translate;
            this.Commands = Commands;
            this.$rootScope = $rootScope;
            this.directorymodalcopy = {};
            this.errors = new Array();
            var self = this;
            self.editmode = self.$scope.modal.params.editmode;
            if (self.editmode) {
                self.directory = self.$scope.modal.params.directory[0];
            }
            self.refresh();
        }
        DirectoryWizardController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.$http.post(self.Commands.data.users.getDirectoryType, null)
                    .then(function (data) {
                    self.directorytypelist = data.data.responseObj;
                    self.directorymodalcopy.directoryName = self.directorytypelist[0].directoryName;
                }),
                //Get protocol list
                self.$http.post(self.Commands.data.users.getProtocolType, null)
                    .then(function (data) {
                    self.protocollist = data.data.responseObj;
                    self.directorymodalcopy.protocolName = self.protocollist[0].protocolName;
                }),
                self.editmode &&
                    self.$http.post(self.Commands.data.users.getDirectoryById, self.directory)
                        .then(function (data) {
                        self.directory = data.data.responseObj;
                        self.directorymodalcopy = angular.copy(self.directory);
                    })
            ])
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { d.resolve(); });
        };
        DirectoryWizardController.prototype.validateConnectionSettings = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                self.forms.connectionSettingsForm._submitted = true;
                self.forms.connectionSettingsForm.$valid ? resolve() : reject();
            });
        };
        DirectoryWizardController.prototype.validateAttributeSettings = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                self.forms.directoryAttributeSettings._submitted = true;
                self.forms.directoryAttributeSettings.$valid ? resolve() : reject();
            });
        };
        DirectoryWizardController.prototype.enterConnectionSettings = function () {
            var self = this;
            self.$rootScope.helpToken = 'SetingsUsersDirectoryServicesConnectionSettings';
        };
        DirectoryWizardController.prototype.enterAttributeSettings = function () {
            var self = this;
            self.$rootScope.helpToken = 'SettingsUsersDirectoryServicesAttributeSettings';
        };
        DirectoryWizardController.prototype.enterSummary = function () {
            var self = this;
            self.$rootScope.helpToken = 'SettingsUsersDirectoryServicesSummary';
        };
        DirectoryWizardController.prototype.finishWizard = function () {
            var self = this, d = self.$q.defer(), match = _.find(self.directorytypelist, { directoryName: self.directorymodalcopy.directoryName });
            self.directorymodalcopy.typeId = match.typeId;
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_DirectorySerivcesConfirmDir')))
                .then(function () {
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.users.saveDirectory, self.directorymodalcopy)
                    .then(function (data) {
                    self.$scope.modal.close();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                })
                    .finally(function () { d.resolve(); });
            });
        };
        DirectoryWizardController.prototype.cancelWizard = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        DirectoryWizardController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DirectoryWizardController.$inject = ['Modal', 'Dialog', '$http', 'Loading', '$q', '$timeout', '$scope', 'GlobalServices', '$translate', 'Commands', '$rootScope'];
        return DirectoryWizardController;
    }());
    asm.DirectoryWizardController = DirectoryWizardController;
    angular
        .module('app')
        .controller('DirectoryWizardController', DirectoryWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=directorywizard.js.map
var asm;
(function (asm) {
    var DiscoverDevice = (function () {
        function DiscoverDevice() {
            this.id = _.uniqueId();
            this.resourcetype = '';
            this.ipaddresstype = 'single';
            this.startingIpAddress = '';
            this.endingIpAddress = '';
            this.serverCredentialId = '';
            this.chassisCredentialId = '';
            this.bladeCredentialId = '';
            this.iomCredentialId = '';
            this.storageCredentialId = '';
            this.vcenterCredentialId = '';
            this.scvmmCredentialId = '';
            this.emCredentialId = '';
            this.scaleioCredentialId = '';
            this.torCredentialId = '';
            this.deviceGroupId = '';
            this.includeServers = false;
            this.includeChassis = false;
            this.includeStorage = false;
            this.includeVCenter = false;
            this.includeSCVMM = false;
            this.includeHypervisor = false;
            this.includeTOR = false;
            this.managedstate = '';
            this.serverPoolId = '';
            this.totalIPAddresses = 0;
            this.inUseIPAddresses = 0;
        }
        return DiscoverDevice;
    }());
    asm.DiscoverDevice = DiscoverDevice;
    var DiscoveryWizardController = (function () {
        function DiscoveryWizardController(Modal, Dialog, $http, $translate, GlobalServices, $timeout, $scope, constants, $q, commands, loading, $rootScope, $interval) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.constants = constants;
            this.$q = $q;
            this.commands = commands;
            this.loading = loading;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.iresources = [];
            this.serverpools = [];
            this.credentials = {
                server: [],
                chassis: [],
                storage: [],
                vcenter: [],
                scvm: [],
                iom: [],
                em: [],
                scaleio: []
            };
            this.networks = [];
            this.hasChassis = false;
            this.hasRack = false;
            this.chassisDevices = {};
            this.rackDevices = {};
            this.configureDeviceInvalid = true;
            this.timeout = {
                chassis: undefined,
                rack: undefined
            };
            this.globalConfiguration = { configurationmode: "onboarding" };
            this.steps = {
                stepInitialChassisConfig: { invalid: true }
            };
            this.errors = {
                chassis: [],
                rack: [],
                global: [],
                identifyResources: []
            };
            var self = this;
            self.GlobalServices.ClearErrors(self.errors.global);
            self.$q.all([
                self.getNetworks()
                    .then(function (data) {
                    self.networks = data.data.responseObj;
                }),
                self.$http.post(self.commands.data.serverpools.getServerPools, null)
                    .then(function (data) {
                    self.serverpools = data.data.responseObj;
                }),
                self.getCredentials('server')
                    .then(function (data) {
                    self.credentials.server = data.data.responseObj;
                }),
                self.getCredentials('chassis')
                    .then(function (data) {
                    self.credentials.chassis = data.data.responseObj;
                }),
                self.getCredentials('storage')
                    .then(function (data) {
                    self.credentials.storage = data.data.responseObj;
                }),
                self.getCredentials('vcenter')
                    .then(function (data) {
                    self.credentials.vcenter = data.data.responseObj;
                }),
                self.getCredentials('scvmm')
                    .then(function (data) {
                    self.credentials.scvmm = data.data.responseObj;
                }),
                self.getCredentials('iom')
                    .then(function (data) {
                    self.credentials.iom = data.data.responseObj;
                }),
                self.getCredentials('em')
                    .then(function (data) {
                    self.credentials.em = data.data.responseObj;
                }),
                self.getCredentials('scaleio')
                    .then(function (data) {
                    self.credentials.scaleio = data.data.responseObj;
                })
            ])
                .catch(function (data) {
                //TODO:  handle errors object
                self.GlobalServices.DisplayError(data.data, self.errors.global);
            });
        }
        DiscoveryWizardController.prototype.getType = function (type) {
            //converts detailed type into device type
            return type === 'blade' || type === "rack"
                ? 'server'
                : type === 'switch' || type === 'tor' ? 'iom' : type;
        };
        DiscoveryWizardController.prototype.getCredentials = function (type) {
            var self = this;
            return self.$http.post(self.commands.data.credential.getCredentialByType, { id: type });
        };
        DiscoveryWizardController.prototype.getNetworks = function () {
            var self = this;
            return self.$http.post(self.commands.data.networking.networks.getHardwareManagementNetworks, null);
        };
        DiscoveryWizardController.prototype.enterWelcome = function () {
            var self = this;
            self.$rootScope.helpToken = 'discoverywizardwelcome';
        };
        DiscoveryWizardController.prototype.enterIdentifyResources = function () {
            var self = this;
            self.$rootScope.helpToken = 'discoverydiscoverresourcespage';
        };
        DiscoveryWizardController.prototype.enterInitialChassisConfig = function () {
            var self = this;
            self.$rootScope.helpToken = 'discoveryinitialchassisconfiguration';
            //disable the Next button in case the Back button was used to get here
            self.steps.stepInitialChassisConfig.invalid = false;
        };
        DiscoveryWizardController.prototype.nextButtonDisabled = function () {
            var self = this;
            return self.steps.stepInitialChassisConfig.invalid;
        };
        DiscoveryWizardController.prototype.enterSummary = function () {
            var self = this;
            self.$rootScope.helpToken = 'discoverywizardwelcome';
            self.chassisDevices.selectedArray = _.filter(self.chassisDevices.noErrorArray, { configureDevice: true });
            self.rackDevices.selectedArray = _.filter(self.rackDevices.noErrorArray, { configureDevice: true });
        };
        DiscoveryWizardController.prototype.getPlaceholder = function (row) {
            var self = this;
            switch (row.resourcetype) {
                case 'server': return self.$translate.instant('DISCOVERY_PlaceholderServer');
                case 'storage': return self.$translate.instant('DISCOVERY_PlaceholderStorage');
                case 'switch': return self.$translate.instant('DISCOVERY_PlaceholderSwitch');
                case 'vcenter': return self.$translate.instant('DISCOVERY_PlaceholderVCenter');
                case 'scvmm': return self.$translate.instant('DISCOVERY_PlaceholderSCVMM');
                case 'chassis': return self.$translate.instant('DISCOVERY_PlaceholderChassis');
                default:
                    return '';
            }
        };
        DiscoveryWizardController.prototype.getServerPoolValue = function (row) {
            var self = this, match = _.find(self.serverpools, { id: row.serverPoolId });
            return match ? match.name : '';
        };
        DiscoveryWizardController.prototype.getSelectedCredential = function (id, type) {
            var self = this;
            var match = _.find(self.credentials[self.getType(type)], { id: id });
            return match ? match.credentialsName : "";
        };
        DiscoveryWizardController.prototype.getSelectedNetwork = function (id) {
            var self = this;
            var match = _.find(self.networks, { id: id });
            return match.credentialsName;
        };
        DiscoveryWizardController.prototype.showChassisConfig = function () {
            var self = this;
            return !!(_.find(self.iresources, function (resource) {
                return (resource.resourcetype === "chassis" || resource.resourcetype === "all");
            }) ||
                _.find(self.chassisDevices.chassisConfigurations, { configureDevice: true }));
        };
        DiscoveryWizardController.prototype.configurableDevice = function (array) {
            return !!_.find(array, { configureDevice: true });
        };
        DiscoveryWizardController.prototype.checkForChassis = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors.identifyResources);
            self.GlobalServices.ClearErrors(self.errors.global);
            //On entrance of Initial Resource Configuration, check whether user has asked for chassis and/or servers or any device types at all
            //if no resources have been added, go back to Identify Resources step with a message saying to add resources
            self.hasChassis = !!_.find(self.iresources, function (resource) {
                return (resource.resourcetype === "all" || resource.resourcetype === "chassis");
            });
            self.hasRack = !!_.find(self.iresources, function (resource) {
                return (resource.resourcetype === "all" || resource.resourcetype === "server");
            });
            return self.$q(function (resolve, reject) {
                if (!self.iresources.length) {
                    self.GlobalServices.DisplayError({
                        message: self.$translate.instant("DISCOVERY_IDResourcesErrorNoResources"),
                        severity: "CRITICAL"
                    }, self.errors.identifyResources);
                    return reject();
                }
                //Check whether forms on Identify Resources step are all valid, reject if not
                angular.forEach(self.iresources, function (iresource) { return iresource._form._submitted = true; });
                //return _.find(self.iresources, (iresource: any) => { return iresource._form.$invalid }) ? reject() : resolve();
                if (_.find(self.iresources, function (iresource) { return iresource._form.$invalid; })) {
                    self.GlobalServices.DisplayError({
                        message: self.$translate.instant("DISCOVERY_IDResourcesErrorIncomplete"),
                        severity: "CRITICAL"
                    }, self.errors.identifyResources);
                    return reject();
                }
                else {
                    return resolve();
                }
            });
        };
        DiscoveryWizardController.prototype.validateInitialChassisConfig = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors.global);
            return self.$q(function (resolve, reject) {
                angular.forEach(self.configForms, function (obj) { if (obj)
                    obj._submitted = true; });
                if (_.find(self.configForms, { $invalid: true })) {
                    reject();
                    self.GlobalServices.scrollToInvalidElement("page_discoveryWizard");
                }
                else
                    resolve();
            });
        };
        DiscoveryWizardController.prototype.showUndiscovered = function (mode, list) {
            var self = this;
            var createServerPoolModal = self.Modal({
                title: self.$translate.instant('SETTINGS_DirectoryServicesWizard_ViewUndiscoveredResources'),
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/viewundiscoveredresources.html',
                controller: 'ViewUndiscoveredResources as viewUndiscoveredResources',
                params: {
                    mode: mode,
                    list: _.filter(list, { status: "error" })
                },
                onCancel: function () {
                },
                onComplete: function () {
                }
            });
            createServerPoolModal.modal.show();
        };
        DiscoveryWizardController.prototype.configureDeviceShown = function () {
            var self = this;
            //disable next button
            self.steps.stepInitialChassisConfig.invalid = true;
            self.chassisDevices = { pending: self.hasChassis };
            self.rackDevices = { pending: self.hasRack };
            self.configureDeviceInvalid = true;
            self.errors.chassis = [];
            self.errors.rack = [];
            //delete form off of each list item because it contains circular references
            var iresourcesCopy = angular.forEach(angular.copy(self.iresources), function (iresource) { return delete iresource._form; });
            var getChassisStatuses = function () {
                return self.$http.post(self.commands.data.discovery.getChassisListStatus, self.chassisDevices)
                    .then(function (data) {
                    self.chassisDevices = data.data.responseObj;
                    //find all chassis with errors
                    self.chassisDevices.noErrorArray = _.filter(self.chassisDevices.chassisConfigurations, function (chassis) { return chassis.status !== "error"; });
                    //don't display errors until all devices are resolved
                    if (self.chassisDevices.pending) {
                        return;
                    }
                    //clear error
                    self.errors.chassis = [];
                    //push chassis error if any
                    var undiscovered = self.chassisDevices.chassisConfigurations.length - self.chassisDevices.noErrorArray.length;
                    undiscovered && self.errors.chassis.push({
                        message: self.$translate.instant("SETTINGS_DirectoryServicesWizard_numResourcesUndiscovered", { num: undiscovered }),
                        action: function () { self.showUndiscovered("chassis", angular.copy(self.chassisDevices.chassisConfigurations)); }
                    });
                })
                    .catch(function (error) {
                    self.GlobalServices.DisplayError(error.data, self.errors.chassis);
                });
            };
            var getRackStatuses = function () {
                return self.$http.post(self.commands.data.discovery.getRackListStatus, self.rackDevices)
                    .then(function (data) {
                    self.rackDevices = data.data.responseObj;
                    //find all racks with errors
                    self.rackDevices.noErrorArray = _.filter(self.rackDevices.rackConfigurations, function (rack) { return rack.status !== "error"; });
                    //don't display errors until all devices are resolved
                    if (self.rackDevices.pending) {
                        return;
                    }
                    //clear error
                    self.errors.rack = [];
                    //push chassis error if any
                    var undiscovered = self.rackDevices.rackConfigurations.length - self.rackDevices.noErrorArray.length;
                    undiscovered && self.errors.rack.push({
                        message: self.$translate.instant("SETTINGS_DirectoryServicesWizard_numResourcesUndiscovered", { num: undiscovered }),
                        action: function () { self.showUndiscovered("rack", angular.copy(self.rackDevices.rackConfigurations)); }
                    });
                })
                    .catch(function (error) {
                    self.GlobalServices.DisplayError(error.data, self.errors.rack);
                });
            };
            var statuses = function () { return [
                self.hasChassis && getChassisStatuses(),
                self.hasRack && getRackStatuses()
            ]; };
            self.$q.all([
                self.hasChassis &&
                    self.$http.post(self.commands.data.discovery.getChassisList, iresourcesCopy)
                        .then(function (data) {
                        self.chassisDevices = data.data.responseObj;
                        self.chassisDevices.noErrorArray = _.filter(self.chassisDevices.chassisConfigurations, function (chassis) { return chassis.status !== "error"; });
                    })
                        .catch(function (error) {
                        self.chassisDevices.pending = false;
                        self.GlobalServices.DisplayError(error.data, self.errors.chassis);
                    }),
                self.hasRack &&
                    self.$http.post(self.commands.data.discovery.getRackList, iresourcesCopy)
                        .then(function (data) {
                        self.rackDevices = data.data.responseObj;
                        self.rackDevices.noErrorArray = _.filter(self.rackDevices.rackConfigurations, function (rack) { return rack.status !== "error"; });
                    })
                        .catch(function (error) {
                        self.rackDevices.pending = false;
                        self.GlobalServices.DisplayError(error.data, self.errors.rack);
                    })
            ])
                .then(function () {
                angular.isDefined(self.statusInterval) && self.$interval.cancel(self.statusInterval);
                self.statusInterval = self.$interval(function () {
                    //run all functions in 'statuses' array on interval
                    self.$q.all(statuses())
                        .then(function () {
                        if (!self.chassisDevices.pending && !self.rackDevices.pending) {
                            if (angular.isDefined(self.statusInterval)) {
                                self.$interval.cancel(self.statusInterval);
                            }
                            if ((self.chassisDevices.noErrorArray && self.chassisDevices.noErrorArray.length >= 1)
                                || (self.rackDevices.noErrorArray && self.rackDevices.noErrorArray.length >= 1)) {
                                //enable the Next button after configureDeviceShown is complete
                                self.steps.stepInitialChassisConfig.invalid = false;
                            }
                        }
                    });
                }, 10000);
            });
            self.$scope.$on("$destroy", function () {
                angular.isDefined(self.statusInterval) && self.$interval.cancel(self.statusInterval);
            });
        };
        DiscoveryWizardController.prototype.doCreateServerPool = function (row) {
            var self = this;
            var createServerPoolModal = self.Modal({
                title: self.$translate.instant('RESOURCE_CREATE_SERVER_POOL_CreateServerPool'),
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/newserverpoolwizard.html',
                controller: 'NewServerPoolWizardController as newServerPoolWizardController',
                params: {
                    calledFromDiscoverWizard: true
                },
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing'))
                        .then(function () {
                        createServerPoolModal.modal.close();
                    });
                },
                onComplete: function (modalScope) {
                    if (modalScope.newServerPoolWizardController.objectId) {
                        self.$http.post(self.commands.data.serverpools.getServerPools, null)
                            .then(function (data) {
                            self.serverpools = data.data.responseObj;
                            row.serverPoolId = modalScope.newServerPoolWizardController.objectId;
                        });
                    }
                }
            });
            createServerPoolModal.modal.show();
        };
        DiscoveryWizardController.prototype.getIdProperty = function (credentialType) {
            switch (credentialType) {
                case 'chassis':
                    return "chassisCredentialId";
                case 'blade':
                    return "bladeCredentialId";
                case 'iom':
                    return "iomCredentialId";
                case "tor":
                case "switch":
                    return "torCredentialId";
                case 'server':
                    return "serverCredentialId";
                case 'storage':
                    return "storageCredentialId";
                case 'scvmm':
                    return "scvmmCredentialId";
                case 'vcenter':
                    return "vcenterCredentialId";
                case 'em':
                    return "emCredentialId";
                case 'scaleio':
                    return "scaleioCredentialId";
                case 'rack':
                    return "rackCredentialId";
            }
        };
        DiscoveryWizardController.prototype.doManageCredentials = function (updateType, credentialType, row) {
            var self = this, editMode = updateType.toUpperCase() === "EDIT";
            var theModal = self.Modal({
                title: self.$translate.instant(editMode
                    ? 'CREDENTIALS_EditTitle'
                    : 'CREDENTIALS_CreateTitle'),
                modalSize: 'modal-lg',
                templateUrl: 'views/credentials/editcredentials.html',
                controller: 'EditCredentialsController as editCredentialsController',
                params: {
                    credential: editMode ? { id: row[self.getIdProperty(credentialType)] } : undefined,
                    editMode: editMode,
                    canChangeCredentialType: false,
                    //blade needs to be server
                    //switch needs to be iom
                    typeId: self.getType(credentialType)
                },
                onComplete: function (credentialId) {
                    self.getCredentials(self.getType(credentialType))
                        .then(function (data) {
                        self.credentials[self.getType(credentialType)] = data.data.responseObj;
                        row[self.getIdProperty(credentialType)] = credentialId;
                    });
                }
            });
            theModal.modal.show();
        };
        DiscoveryWizardController.prototype.chassisConfigurationSelected = function () {
            var self = this;
            return !!_.find(self.chassisDevices.chassisConfigurations, { configureDevice: true });
        };
        DiscoveryWizardController.prototype.addResourceRow = function () {
            var x = new DiscoverDevice(), self = this;
            self.iresources.push(x);
        };
        DiscoveryWizardController.prototype.selectResourceType = function (row) {
            var self = this;
            //set managedstate if not already set
            //by resourcetype, set default value for managedstate
            //console.log('before, row.resourcetype:  ' + row.resourcetype);
            //console.log('before, row.managedstate:  ' + row.managedstate);
            if (row.managedstate == null || row.managedstate == '') {
                if (row.resourcetype === 'server') {
                    row.managedstate = 'unmanaged';
                }
                else {
                    row.managedstate = 'managed';
                }
            }
        };
        DiscoveryWizardController.prototype.deleteResourceRow = function (i) {
            var self = this;
            $('.tooltip').remove();
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DISCOVERY_InitialResourceConfig_ConfirmDeleteResourceType'))
                .then(function () { return _.remove(self.iresources, i); });
        };
        DiscoveryWizardController.prototype.finishWizard = function () {
            var self = this;
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), self.$translate.instant(self.chassisConfigurationSelected()
                ? 'DISCOVERY_LongRunningNotice'
                : "DISCOVERY_LongRunningNotice_NoChassis"))
                .then(function () {
                //delete form off of each list item because it contains circular references
                var iresourcesCopy = angular.copy(angular.forEach(self.iresources, function (iresource) { return delete iresource._form; }));
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors.chassis);
                self.GlobalServices.ClearErrors(self.errors.rack);
                self.GlobalServices.ClearErrors(self.errors.global);
                self.GlobalServices.ClearErrors(self.errors.identifyResources);
                self.loading(d.promise);
                self.$http.post(self.commands.data.discovery.submitDiscovery, {
                    chassisdata: {
                        jobId: self.chassisDevices.jobId,
                        pending: self.chassisDevices.pending,
                        chassisConfigurations: _.map(self.chassisDevices.chassisConfigurations, function (chassis) {
                            return {
                                chassisConfigurationId: chassis.chassisConfigurationId,
                                deviceid: chassis.deviceid,
                                ipAddress: chassis.ipAddress,
                                configureDevice: chassis.configureDevice
                            };
                        })
                    },
                    rackdata: {
                        jobId: self.rackDevices.jobId,
                        pending: self.rackDevices.pending,
                        rackConfigurations: _.map(self.rackDevices.rackConfigurations, function (rack) {
                            return {
                                rackConfigurationId: rack.rackConfigurationId,
                                deviceid: rack.deviceid,
                                ipaddress: rack.ipaddress,
                                configureDevice: rack.configureDevice
                            };
                        })
                    },
                    ipdata: iresourcesCopy,
                    chassisconfig: self.globalConfiguration
                })
                    .then(function () {
                    self.closeWizard();
                })
                    .catch(function (data) {
                    //TODO:  handle errors object
                    self.GlobalServices.DisplayError(data.data, self.errors.chassis);
                    self.GlobalServices.DisplayError(data.data, self.errors.rack);
                    self.GlobalServices.DisplayError(data.data, self.errors.global);
                    self.GlobalServices.DisplayError(data.data, self.errors.identifyResources);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        DiscoveryWizardController.prototype.configNetworks = function (editMode, networkId) {
            var self = this;
            var editNetworkModal = self.Modal({
                title: self.$translate.instant(editMode ? "NETWORKS_Edit_EditTitle" : "NETWORKS_Edit_CreateTitle"),
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/editnetwork.html',
                controller: 'EditNetworkModalController as editNetwork',
                params: {
                    editMode: editMode ? 'edit' : 'create',
                    id: networkId,
                    calledFromDiscoverWizard: true
                },
                onComplete: function (networkId) {
                    var d = self.$q.defer();
                    self.GlobalServices.ClearErrors(self.errors.chassis);
                    self.GlobalServices.ClearErrors(self.errors.rack);
                    self.GlobalServices.ClearErrors(self.errors.global);
                    self.GlobalServices.ClearErrors(self.errors.identifyResources);
                    self.loading(d.promise);
                    self.getNetworks()
                        .then(function (data) {
                        self.networks = data.data.responseObj;
                        self.globalConfiguration.rackNetworkId = networkId;
                    })
                        .catch(function (data) {
                        //TODO:  handle errors object
                        self.GlobalServices.DisplayError(data.data, self.errors.chassis);
                        self.GlobalServices.DisplayError(data.data, self.errors.rack);
                        self.GlobalServices.DisplayError(data.data, self.errors.global);
                        self.GlobalServices.DisplayError(data.data, self.errors.identifyResources);
                    })
                        .finally(function () { return d.resolve(); });
                }
            });
            editNetworkModal.modal.show();
        };
        DiscoveryWizardController.prototype.cancelWizard = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        DiscoveryWizardController.prototype.closeWizard = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DiscoveryWizardController.$inject = [
            'Modal', 'Dialog', '$http', '$translate',
            'GlobalServices', '$timeout', '$scope', 'constants',
            '$q', 'Commands', 'Loading', '$rootScope', "$interval"];
        return DiscoveryWizardController;
    }());
    asm.DiscoveryWizardController = DiscoveryWizardController;
    angular
        .module('app')
        .controller('DiscoveryWizardController', DiscoveryWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=discoverywizard.js.map
var asm;
(function (asm) {
    var BackupSettingsAndDetailsModalController = (function () {
        function BackupSettingsAndDetailsModalController($scope, Modal, Dialog, $http, $translate, Commands, GlobalServices, loading, $q) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.loading = loading;
            this.$q = $q;
            this.errors = new Array();
            var self = this;
            self.getBackupSettings();
        }
        BackupSettingsAndDetailsModalController.prototype.getBackupSettings = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.$http.post(self.Commands.data.backupAndRestore.getBackupSettings, null)
                .then(function (data) {
                self.backupSettings = data.data.responseObj;
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        BackupSettingsAndDetailsModalController.prototype.save = function (isValid) {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.$http.post(self.Commands.data.backupAndRestore.saveBackupSettings, self.backupSettings)
                .then(function (data) {
                self.$scope.modal.close();
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        BackupSettingsAndDetailsModalController.prototype.testConnection = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.$http.post(self.Commands.data.backupAndRestore.testBackupConnection, self.backupSettings)
                .then(function (data) {
                self.Dialog((self.$translate.instant('BACKUPNOW_testconnection_title')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('The test was successful')), true);
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        BackupSettingsAndDetailsModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        BackupSettingsAndDetailsModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        BackupSettingsAndDetailsModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$translate', 'Commands', 'GlobalServices', 'Loading', '$q'];
        return BackupSettingsAndDetailsModalController;
    }());
    asm.BackupSettingsAndDetailsModalController = BackupSettingsAndDetailsModalController;
    angular
        .module('app')
        .controller('BackupSettingsAndDetailsModalController', BackupSettingsAndDetailsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editbackupsettingsanddetailsModal.js.map
var asm;
(function (asm) {
    var EditCredentialsController = (function () {
        function EditCredentialsController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.errors = new Array();
            var self = this;
            var params = self.$scope.modal.params;
            self.credential = params.credential || {
                id: null,
                typeId: params.typeId,
                credentialsName: '',
                username: 'root',
                password: '',
                confirmpassword: '',
                enableCertificateCheck: false,
                isTelnet: false,
                communityString: 'public',
                snmpVersionId: '',
                snmpUsername: '',
                authorizationProtocolId: '',
                authorizationProtocolPassword: '',
                privacyProtocolId: '',
                privacyProtocolPassword: '',
                numberOfDevices: 0,
                createdBy: '',
                creationTime: '',
                updateTime: '',
                updatedBy: '',
                credentialProtocol: 'ssh',
                domain: '',
                candelete: true,
                canedit: true,
                gatewayosusername: 'root',
                gatewayospassword: '',
                confirmgatewayospassword: ''
            };
            self.canChangeCredentialType = params.canChangeCredentialType;
            self.editMode = params.editMode;
            self.activate();
        }
        EditCredentialsController.prototype.activate = function () {
            var self = this;
            if (self.editMode) {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.getCredential(self.credential.id)
                    .then(function (data) {
                    angular.extend(self.credential, data.data.responseObj, {
                        confirmPassword: data.data.responseObj.password,
                        confirmGatewayOSPassword: data.data.responseObj.gatewayospassword
                    });
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            }
            //check if any fields need updated upon activate
            self.updateType(self.credential.typeId);
        };
        EditCredentialsController.prototype.updateType = function (newVal) {
            var self = this;
            if (newVal && (self.credential.username == '' || self.credential.username == 'root' || self.credential.username == 'administrator' || self.credential.username == 'admin')) {
                if (newVal == 'scvmm') {
                    self.credential.username = 'administrator';
                }
                else if (newVal == 'scaleio') {
                    self.credential.username = 'admin';
                    self.credential.gatewayosusername = 'root';
                }
                else {
                    self.credential.username = 'root';
                }
            }
        };
        EditCredentialsController.prototype.save = function (formHasErrors) {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.credential.saveCredential, self.credential)
                .then(function (data) {
                self.close(data.data.responseObj.id);
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        EditCredentialsController.prototype.getCredential = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.credential.getCredentialById, { id: id });
        };
        EditCredentialsController.prototype.close = function (credential) {
            var self = this;
            self.$scope.modal.close(credential);
        };
        EditCredentialsController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        EditCredentialsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants'];
        return EditCredentialsController;
    }());
    asm.EditCredentialsController = EditCredentialsController;
    angular
        .module('app')
        .controller('EditCredentialsController', EditCredentialsController);
})(asm || (asm = {}));
//# sourceMappingURL=editcredentials.js.map
var asm;
(function (asm) {
    var EditDeviceModalController = (function () {
        function EditDeviceModalController($scope, Modal, Dialog, $http, globalServices, $rootScope, commands, loading, $q, $translate, constants) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.globalServices = globalServices;
            this.$rootScope = $rootScope;
            this.commands = commands;
            this.loading = loading;
            this.$q = $q;
            this.$translate = $translate;
            this.constants = constants;
            this.options = {};
            var self = this;
            self.refresh();
        }
        EditDeviceModalController.prototype.refresh = function () {
            var self = this;
            self.type = self.$scope.modal.params.type;
            self.mode = self.$scope.modal.params.mode;
            self.user = self.$scope.modal.params.user || { enabled: true };
            angular.extend(self.options, {
                availableCMCUserRoles: self.constants.availableCMCUserRoles,
                availableLanRoles: self.constants.availableLanRoles,
                availableiDracUserRoles: self.constants.availableiDracUserRoles
            });
        };
        EditDeviceModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close(self.user);
        };
        EditDeviceModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        EditDeviceModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', 'GlobalServices',
            '$rootScope', "Commands", "Loading", "$q", "$translate", "constants"];
        return EditDeviceModalController;
    }());
    asm.EditDeviceModalController = EditDeviceModalController;
    angular
        .module('app')
        .controller('EditDeviceModalController', EditDeviceModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editDeviceUserModal.js.map
var asm;
(function (asm) {
    var EditPoolController = (function () {
        function EditPoolController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            //used in form
            this.id = '';
            this.type = '';
            this.identitycount = 0;
            this.autogenerate = false;
            this.errors = new Array();
            var self = this;
            self.id = $scope.modal.params.id;
            self.type = $scope.modal.params.type;
            self.activate();
        }
        EditPoolController.prototype.activate = function () {
            var self = this;
            if (self.id) {
                var deferred = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(deferred.promise);
                var results;
                var data;
                data = { 'id': self.id };
                self.$http.post(self.Commands.data.pools.getPoolById, { requestObj: data }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                    results = data.data.responseObj;
                    switch (self.type) {
                        case "mac":
                            self.autogenerate = results.virtualMACAutoGenerateOnDeploy;
                            break;
                        case "iqn":
                            self.autogenerate = results.virtualIQNAutoGenerateOnDeploy;
                            break;
                        case "wwpn":
                            self.autogenerate = results.virtualWWPNAutoGenerateOnDeploy;
                            break;
                        case "wwnn":
                            self.autogenerate = results.virtualWWNNAutoGenerateOnDeploy;
                            break;
                    }
                    deferred.resolve();
                })
                    .catch(function (response) {
                    //need to handle error
                    deferred.resolve();
                    //error is in data
                    self.GlobalServices.DisplayError(response.data, self.errors);
                });
            }
        };
        EditPoolController.prototype.doSave = function (formHasErrors) {
            var self = this;
            if (formHasErrors)
                return;
            var myScope = this.$scope;
            var deferred = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(deferred.promise);
            //this will do an update/create
            self.$http.post(self.Commands.data.pools.updatePool, {
                requestObj: {
                    'id': self.id,
                    'type': self.type,
                    'identitycount': self.identitycount,
                    'autogenerate': self.autogenerate
                }
            }).then(function (data) {
                //self.$http.post('bogus', { requestObj: self }).then(function (data: any) {
                deferred.resolve();
                myScope.modal.close();
            }).catch(function (response) {
                //need to handle error
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
        };
        EditPoolController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditPoolController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return EditPoolController;
    }());
    asm.EditPoolController = EditPoolController;
    angular
        .module('app')
        .controller('EditPoolController', EditPoolController);
})(asm || (asm = {}));
//# sourceMappingURL=editpool.js.map
var asm;
(function (asm) {
    var EditScheduledBackupModalController = (function () {
        function EditScheduledBackupModalController($scope, Modal, Dialog, $http, $translate, $q, $filter, loading, Commands, GlobalServices) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.$q = $q;
            this.$filter = $filter;
            this.loading = loading;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = new Array();
            this.timeOptions = [
                '00:00', '00:30', '01:00', '01:30', '02:00', '02:30', '03:00', '03:30', '04:00', '04:30', '05:00', '05:30', '06:00', '06:30', '07:00', '07:30',
                '08:00', '08:30', '09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30',
                '16:00', '16:30', '17:00', '17:30', '18:00', '18:30', '19:00', '19:30', '20:00', '20:30', '21:00', '21:30', '22:00', '22:30', '23:00', '23:30'
            ];
            var self = this;
            self.getBackupScheduleInfo();
        }
        EditScheduledBackupModalController.prototype.getBackupScheduleInfo = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.$http.post(self.Commands.data.backupAndRestore.getBackupScheduleInfo, null)
                .then(function (response) {
                self.backupScheduleInfo = response.data.responseObj;
                self.time = moment(response.data.responseObj.timeOfBackup).format("HH:mm");
                console.log(self.time);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        EditScheduledBackupModalController.prototype.timeRequired = function () {
            var self = this;
            return self.backupScheduleInfo &&
                self.backupScheduleInfo.enabled === "true" &&
                !!_.find([
                    self.backupScheduleInfo.monday,
                    self.backupScheduleInfo.tuesday,
                    self.backupScheduleInfo.wednesday,
                    self.backupScheduleInfo.thursday,
                    self.backupScheduleInfo.friday,
                    self.backupScheduleInfo.saturday,
                    self.backupScheduleInfo.sunday
                ], function (day) { return day; });
        };
        EditScheduledBackupModalController.prototype.save = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            var time = moment(moment().format('YYYY-MM-DD') + "T" + self.time, "YYYY-MM-DDTHH:mm").toDate();
            self.backupScheduleInfo.timeOfBackup = (self.backupScheduleInfo.enabled === "true" ? time.toISOString() : null);
            self.$http.post(self.Commands.data.backupAndRestore.setBackupScheduleInfo, self.backupScheduleInfo)
                .then(function () {
                self.$scope.modal.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        EditScheduledBackupModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        EditScheduledBackupModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditScheduledBackupModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$translate', '$q', '$filter', 'Loading', 'Commands', 'GlobalServices'];
        return EditScheduledBackupModalController;
    }());
    asm.EditScheduledBackupModalController = EditScheduledBackupModalController;
    angular
        .module('app')
        .controller('EditScheduledBackupModalController', EditScheduledBackupModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editscheduledbackup.js.map
var asm;
(function (asm) {
    var EditUserModalController = (function () {
        function EditUserModalController($scope, Modal, Dialog, $http, GlobalServices, $rootScope, Commands, $q, loading) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.Commands = Commands;
            this.$q = $q;
            this.loading = loading;
            this.submitform = false;
            this.roles = new Array();
            this.errors = new Array();
            var self = this;
            self.modalUser = $scope.modal.params.selecteduser[0];
            self.refresh();
        }
        EditUserModalController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.$q.all([
                self.getRoles()
                    .then(function (response) {
                    self.roles = response.data.responseObj;
                }),
                self.getUser()
                    .then(function (response) {
                    self.modalUser = response.data.responseObj;
                    self.modalUser.confirmationPassword = self.modalUser.password;
                })
            ])
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        EditUserModalController.prototype.saveUser = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.modalUser.rolename = _.find(self.roles, { id: self.modalUser.roleId }).name;
            self.$http.post(self.Commands.data.users.saveUser, self.modalUser)
                .then(function (data) {
                self.$scope.modal.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        EditUserModalController.prototype.getRoles = function () {
            var self = this;
            return self.$http.post(self.Commands.data.users.getRoles, []);
        };
        EditUserModalController.prototype.getUser = function () {
            var self = this;
            return self.$http.post(self.Commands.data.users.getUserById, self.modalUser);
        };
        EditUserModalController.prototype.cancel = function () {
            var self = this;
            self.$rootScope.$broadcast('clearErrors');
            self.$scope.modal.cancel();
        };
        EditUserModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', 'GlobalServices', '$rootScope', 'Commands', '$q', 'Loading'];
        return EditUserModalController;
    }());
    asm.EditUserModalController = EditUserModalController;
    angular
        .module('app')
        .controller('EditUserModalController', EditUserModalController);
})(asm || (asm = {}));
//# sourceMappingURL=edituserModal.js.map
var asm;
(function (asm) {
    var ExportTemplateController = (function () {
        function ExportTemplateController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.form = {
                templateId: this.$scope.modal.params.templateId,
                useEncPwdFromBackup: true,
                id: '',
                fileName: '',
                encryptionPassword: '',
                encryptionVPassword: ''
            };
            this.errors = new Array();
            this.submitForm = false;
        }
        ExportTemplateController.prototype.doExport = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.templates.validateExport, self.form)
                .then(function (data) {
                d.resolve();
                $('#form_exporttemplate').submit();
                self.close();
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ExportTemplateController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ExportTemplateController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ExportTemplateController;
    }());
    asm.ExportTemplateController = ExportTemplateController;
    angular
        .module('app')
        .controller('ExportTemplateController', ExportTemplateController);
})(asm || (asm = {}));
//# sourceMappingURL=exportTemplate.js.map
var asm;
(function (asm) {
    var GenerateTroubleshootingBundleModalController = (function () {
        function GenerateTroubleshootingBundleModalController(modal, $http, $timeout, $scope, $q, $translate, loading, dialog, Commands, globalServices, $location) {
            this.modal = modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.dialog = dialog;
            this.Commands = Commands;
            this.globalServices = globalServices;
            this.$location = $location;
            //troubleshootingBundle
            this.tsBundle = {
                id: '',
                serviceId: '',
                bundleDest: 'export',
                filepath: '',
                username: '',
                password: '',
            };
            this.addCS = {
              communityString: '',
              destinationUri: '',
            };
            this.deleteCS = {
                communityString: '',
                destinationUri: '',
            };
            this.addForwarding = {
                communityString: '',
                destinationUri: '',
            };
            this.deleteForwarding = {
                communityString: '',
                destinationUri: '',
            };
            this.errors = new Array();
            this.disabled = false;
            this.callingPage = '';
            var self = this;
            self.callingPage = self.$scope.modal.params.callingPage;
            if (self.callingPage == 'Service') {
                //Service detail page must provide the serviceId in the call to exportTroubleshootingBundle
                self.tsBundle.serviceId = self.$scope.modal.params.serviceId;
            }
            else {
                //other pages do not provide the serviceId in the call to exportTroubleshootingBundle; VirtualApplianceManagement
                self.tsBundle.serviceId = '';
            }
            self.initialize();
        }
        GenerateTroubleshootingBundleModalController.prototype.initialize = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.getGettingStarted()
                .then(function (data) {
                self.disabled = !data.data.responseObj.srsOrPhoneHomeConfigured;
                if (self.disabled) {
                    //if SRS or Phone Home is not configured, default selection to download locally (i.e. unselect 'export' and select 'network' by default for the radio buttons)
                    self.tsBundle.bundleDest = 'network';
                }
                else {
                    //if SRS or Phone Home is configured, default selection to send to configured SRS or Phone Home (i.e. unselect 'network' and select 'export' by default for the radio buttons)
                    self.tsBundle.bundleDest = 'export';
                }
            })
                .catch(function (response) {
                self.globalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        GenerateTroubleshootingBundleModalController.prototype.generateTsBundle = function () {
            var self = this;
            var d = self.$q.defer();
            //self.cleanForms(self.tsBundle);
            self.globalServices.ClearErrors();
            self.loading(d.promise);
            self.generateBundle(self.tsBundle)
                .then(function (response) {
                self.close();
            })
                .catch(function (response) {
                self.globalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        GenerateTroubleshootingBundleModalController.prototype.testConnection = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.testConn(self.tsBundle)
                .then(function (data) {
                self.dialog((self.$translate.instant('SETTINGS_GenerateTroubleshootingBundle_testconnection_success_title')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('SETTINGS_GenerateTroubleshootingBundle_testconnection_success_message')), true);
            })
                .catch(function (data) {
                self.globalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };

        // Add community String
        GenerateTroubleshootingBundleModalController.prototype.testAddCS = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.testAddCSBundle(self.addCS)
                .then(function (data) {
                    self.dialog((self.$translate.instant('SUCCESS')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('The test was successful')), true);
                })
                .catch(function (data) {
                    self.globalServices.DisplayError(data.data, self.errors);
                })
                .finally(function () { return d.resolve(); });
        };

        //Delete Commuinty String
        GenerateTroubleshootingBundleModalController.prototype.testDeleteCS = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.testDeleteCSBundle(self.addCS)
                .then(function (data) {
                    self.dialog((self.$translate.instant('SUCCESS')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('The test was successful')), true);
                })
                .catch(function (data) {
                    self.globalServices.DisplayError(data.data, self.errors);
                })
                .finally(function () { return d.resolve(); });
        };

        // Add Forwarding Details
        GenerateTroubleshootingBundleModalController.prototype.testAddFowarding = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.testAddForwardingBundle(self.addForwarding)
                .then(function (data) {
                    self.dialog((self.$translate.instant('SUCCESS')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('The test was successful')), true);
                })
                .catch(function (data) {
                    self.globalServices.DisplayError(data.data, self.errors);
                })
                .finally(function () { return d.resolve(); });
        };

        // delete Forwarding Details
        GenerateTroubleshootingBundleModalController.prototype.testDeleteFowarding = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.testDeleteForwardingBundle(self.addForwarding)
                .then(function (data) {
                    self.dialog((self.$translate.instant('SUCCESS')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('The test was successful')), true);
                })
                .catch(function (data) {
                    self.globalServices.DisplayError(data.data, self.errors);
                })
                .finally(function () { return d.resolve(); });
        };

        GenerateTroubleshootingBundleModalController.prototype.goToSettings = function () {
            var self = this;
            self.cancel();
            self.$timeout(function () {
                self.$location.path('settings/VirtualApplianceManagement');
            }, 500);
        };
        GenerateTroubleshootingBundleModalController.prototype.cleanForms = function (bundle) {
            var self = this;
            if (bundle.bundleDest === 'export') {
            }
            if (bundle.bundleDest === 'network') {
            }
        };
        GenerateTroubleshootingBundleModalController.prototype.getGettingStarted = function () {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.gettingStarted, null);
        };
        GenerateTroubleshootingBundleModalController.prototype.generateBundle = function (bundle) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.exportTroubleshootingBundle, bundle);
        };
        GenerateTroubleshootingBundleModalController.prototype.testConn = function (bundle) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.testTroubleshootingBundle, bundle);
        };
        GenerateTroubleshootingBundleModalController.prototype.testAddCSBundle = function (bundle) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.addCommunityString, bundle);
        };
        GenerateTroubleshootingBundleModalController.prototype.testDeleteCSBundle = function (bundle) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.deleteCommunityString, bundle);
        };
        GenerateTroubleshootingBundleModalController.prototype.testAddForwardingBundle = function (bundle) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.addForwardingDetails, bundle);
        };
        GenerateTroubleshootingBundleModalController.prototype.testDeleteForwardingBundle = function (bundle) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.deleteForwardingDetails, bundle);
        };
        GenerateTroubleshootingBundleModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        GenerateTroubleshootingBundleModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        GenerateTroubleshootingBundleModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$location'];
        return GenerateTroubleshootingBundleModalController;
    }());
    asm.GenerateTroubleshootingBundleModalController = GenerateTroubleshootingBundleModalController;
    angular
        .module('app')
        .controller('GenerateTroubleshootingBundleModalController', GenerateTroubleshootingBundleModalController);
})(asm || (asm = {}));
//# sourceMappingURL=generatetroubleshootingbundlemodal.js.map
var asm;
(function (asm) {
    var GenericModalController = (function () {
        function GenericModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.initialize();
        }
        GenericModalController.prototype.initialize = function () {
            var self = this;
            self.params = self.$scope.modal.params.params;
        };
        GenericModalController.prototype.ok = function () {
            var self = this;
            self.$scope.modal.close();
        };
        GenericModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        GenericModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return GenericModalController;
    }());
    asm.GenericModalController = GenericModalController;
    angular
        .module('app')
        .controller('GenericModalController', GenericModalController);
})(asm || (asm = {}));
//# sourceMappingURL=genericModalController.js.map
var asm;
(function (asm) {
    var ImportActiveDirDetailsModalController = (function () {
        function ImportActiveDirDetailsModalController($scope, Modal, Dialog, $http, GlobalServices, $rootScope, Commands, loading, $q) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.Commands = Commands;
            this.loading = loading;
            this.$q = $q;
            this.errors = new Array();
            var self = this;
            self.selectedItem = $scope.modal.params.selecteditem;
            self.isuser = $scope.modal.params.isuser;
            self.groupdetails = '';
            self.displayedgroupdetails = '';
            self.getdetails();
        }
        ImportActiveDirDetailsModalController.prototype.getdetails = function () {
            var self = this, d = self.$q.defer();
            //console.log('self.isuser:  ' + self.isuser);
            //console.log('self.selectedItem:  ' + JSON.stringify(self.selectedItem));
            //note:  the call below to getGroupDetails is only made for groups, not users
            if (!self.isuser) {
                self.GlobalServices.ClearErrors(self.errors);
                self.loading(d.promise);
                //JB TEMP:  might have to just pass in id here?  might just be the formatting of the object passed in
                //self.$http.post(self.Commands.data.users.getGroupDetails, { requestObj: self.selectedItem })
                self.$http.post(self.Commands.data.users.getGroupDetails, self.selectedItem)
                    .then(function (data) {
                    self.groupdetails = data.data.responseObj;
                    self.displayedgroupdetails = [].concat(self.groupdetails);
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            }
        };
        ;
        ImportActiveDirDetailsModalController.prototype.cancel = function () {
            var self = this;
            self.$rootScope.$broadcast('clearErrors');
            self.$scope.modal.cancel();
        };
        ImportActiveDirDetailsModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', 'GlobalServices', '$rootScope', 'Commands', 'Loading', '$q'];
        return ImportActiveDirDetailsModalController;
    }());
    asm.ImportActiveDirDetailsModalController = ImportActiveDirDetailsModalController;
    angular
        .module('app')
        .controller('ImportActiveDirDetailsModalController', ImportActiveDirDetailsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=importactivedirectoryDetailsModal.js.map
var asm;
(function (asm) {
    var ImportDirUsersModalController = (function () {
        //public showFindUserError: boolean;
        function ImportDirUsersModalController($scope, Modal, Dialog, $http, GlobalServices, $rootScope, $q, Loading, $translate, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.$q = $q;
            this.Loading = Loading;
            this.$translate = $translate;
            this.Commands = Commands;
            this.importDirectoryList = [];
            this.directoryUsers = [];
            this.importRoles = [];
            this.results = [];
            this.displayedresults = [];
            this.rightcol = [];
            this.leftcol = [];
            this.displayedleftcol = [];
            this.errors = new Array();
            var self = this;
            self.viewBy = 'usersgroups';
            //this.showFindUserError = false;
            //self.getImportDirectoryList();
            self.getImportRoles();
            self.jobRequest = { criteriaObj: { filterObj: [{ field: '', op: '', opTarget: '' }] } };
            self.updateSearch();
            self.activate();
        }
        ImportDirUsersModalController.prototype.activate = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.getDirectories()
                    .then(function (data) {
                    self.directories = data.data.responseObj;
                    var item = {
                        id: 'Select',
                        serverName: self.$translate.instant('SETTINGS_ActiveDirectorySelectARoleAlt')
                    };
                    self.directories.splice(0, 0, item);
                    self.selectedDirectory = self.directories[0].serverName;
                }),
                self.getImportRoles()
                    .then(function (data) {
                    self.importRoles = data.data.responseObj;
                    self.importRoles.unshift({
                        id: 'Select Role',
                        name: self.$translate.instant('SETTINGS_ActiveDirectorySelectARole')
                    });
                    self.selectedRoleId = self.importRoles[0].id;
                }),
            ])
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        //get directories drop down list
        ImportDirUsersModalController.prototype.getDirectories = function () {
            var self = this;
            return self.$http.post(self.Commands.data.users.getDirectoryList, null);
        };
        //get import roles dropdown list
        ImportDirUsersModalController.prototype.getImportRoles = function () {
            var self = this;
            return self.$http.post(self.Commands.data.users.getImportRoles, null);
        };
        ImportDirUsersModalController.prototype.getImportDirectoryList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.users.getImportDirectoryList, null);
        };
        ImportDirUsersModalController.prototype.updateSearch = function () {
            var self = this;
            var keyword = self.searchText;
            if (keyword && keyword.length > 2) {
                if (searchtimeout) {
                    clearTimeout(searchtimeout);
                }
                var searchtimeout = setTimeout(function () {
                    self.refresh();
                }, 200); // 200ms delay
            }
        };
        ImportDirUsersModalController.prototype.refresh = function () {
            var self = this;
            if (self.searchText.length >= 3) {
                //self.showFindUserError = false;
                self.jobRequest = { criteriaObj: { filterObj: [{ field: '', op: '', opTarget: '' }] } };
                self.directoryUsers = [];
                self.results = [];
                self.displayedresults = [];
                var qArray = [];
                var keyword = self.searchText;
                //console.log('keyword for search:  ' + keyword);
                if (keyword && keyword != '') {
                    self.jobRequest.criteriaObj.filterObj[0] = { field: 'keyword', op: '=', opTarget: [keyword] };
                }
                self.jobRequest.criteriaObj.filterObj.push({ field: 'server', op: '=', opTarget: [self.selectedDirectory] });
                //get all users and groups
                qArray.push(self.$http.post(self.Commands.data.users.getDirectoryUsers, { requestObj: null, criteriaObj: self.jobRequest.criteriaObj }).then(function (data) {
                    //console.log('sucessful call to getDirectoryUsers');
                    self.directoryUsers = data.data.responseObj;
                    if (self.viewBy == 'users') {
                        self.directoryUsers = _.filter(self.directoryUsers, { 'isGroup': false });
                    }
                    if (self.viewBy == 'groups') {
                        self.directoryUsers = _.filter(self.directoryUsers, { 'isGroup': true });
                    }
                    self.directoryUsers.forEach(function (user) {
                        if (user.roleId == null) {
                            user.roleId = self.importRoles[0].id;
                            user.rolename = self.importRoles[0].roleId;
                        }
                    });
                    //console.log('directoryUsers:');
                    //console.log(JSON.stringify(self.directoryUsers));
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                }));
                self.$q.all(qArray)
                    .then(function (respone) {
                    //console.log('successful execution of all');
                    self.leftcol = [].concat(self.directoryUsers);
                    self.displayedleftcol = [].concat(self.leftcol);
                    //console.log('displayedleftcol:');
                    //console.log(JSON.stringify(self.displayedleftcol));
                    if (self.movingLeft) {
                        self.removeRightColItems();
                    }
                    else {
                        self.removeLeftColItems();
                    }
                    self.movingLeft = false;
                });
            }
            //else
            //self.showFindUserError = true;
        };
        ImportDirUsersModalController.prototype.selectedItems = function () {
            var self = this;
            return _.filter(self.displayedleftcol, { 'isSelected': true });
        };
        ImportDirUsersModalController.prototype.selectedRightItems = function () {
            var self = this;
            return _.filter(self.rightcol, { 'isSelected': true });
        };
        ImportDirUsersModalController.prototype.noRoles = function () {
            var self = this;
            if (self.rightcol.length) {
                return _.filter(self.rightcol, { 'roleId': self.importRoles[0].id });
            }
        };
        //TODO: Need pattern for check all boxes
        ImportDirUsersModalController.prototype.leftCheckAll = function () {
            var self = this;
            this.leftcol.forEach(function (x) {
                if (self.leftCheckAllBox == true) {
                    x.isSelected = true;
                }
                else {
                    x.isSelected = false;
                }
            });
        };
        //TODO: Need pattern for check all boxes
        ImportDirUsersModalController.prototype.rightCheckAll = function () {
            var self = this;
            self.rightcol.forEach(function (x) {
                if (self.rightCheckAllBox == true) {
                    x.isSelected = true;
                }
                else {
                    x.isSelected = false;
                }
            });
        };
        ImportDirUsersModalController.prototype.removeLeftColItems = function () {
            var self = this;
            self.rightcol.forEach(function (rightitem) {
                self.leftcol.forEach(function (leftitem, index) {
                    if (rightitem.id == leftitem.id) {
                        self.leftcol.splice(index, 1);
                    }
                });
            });
            self.displayedleftcol = [].concat(self.leftcol);
            self.leftCheckAllBox = false;
            self.rightCheckAllBox = false;
        };
        ImportDirUsersModalController.prototype.removeRightColItems = function () {
            var self = this;
            self.rightcol.forEach(function (rightitem, index) {
                if (rightitem.isSelected) {
                    self.rightcol.splice(index, 1);
                }
            });
            self.removeLeftColItems();
        };
        ImportDirUsersModalController.prototype.moveRight = function () {
            var self = this;
            var items = self.selectedItems();
            items.forEach(function (x) {
                self.rightcol.push(x);
                x.isSelected = false;
            });
            this.removeLeftColItems();
        };
        ImportDirUsersModalController.prototype.moveLeft = function () {
            var self = this;
            var items = this.selectedRightItems();
            items.forEach(function (x, index) {
                self.rightcol.forEach(function (x, index) {
                    if (x.isSelected) {
                        self.rightcol.splice(index, 1);
                    }
                });
            });
            self.movingLeft = true;
            self.refresh();
        };
        ImportDirUsersModalController.prototype.changeRoles = function () {
            var self = this;
            var rightcolselected = self.selectedRightItems();
            rightcolselected.forEach(function (x) {
                x.rolename = self.selectedRoleId;
                self.importRoles.forEach(function (role) {
                    if (role.id == self.selectedRoleId) {
                        x.roleId = role.id;
                    }
                });
            });
        };
        ImportDirUsersModalController.prototype.saveUsers = function () {
            var self = this;
            var d = this.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.users.saveImportDirectoryUsers, self.rightcol)
                .then(function (data) {
                console.log('Directory User Update Success');
                self.$scope.modal.close();
                d.resolve();
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        ImportDirUsersModalController.prototype.viewdetails = function (item) {
            var self = this;
            if (item.firstname) {
                var user = true;
                var name = item.firstname;
            }
            else {
                var name = item.name;
                var user = false;
            }
            //console.log('item before viewdetails modal:');
            //console.log(JSON.stringify(item));
            var detailsModal = this.Modal({
                title: name,
                modalSize: 'modal-lg',
                templateUrl: 'views/importactivedirdetailsmodal.html',
                controller: 'ImportActiveDirDetailsModalController as detailsModal',
                params: {
                    selecteditem: item,
                    isuser: user
                },
                onComplete: function () {
                },
                close: function () {
                    var self = this;
                    self.$scope.modal.close();
                },
                cancel: function () {
                    var self = this;
                    self.$scope.modal.dismiss();
                }
            });
            detailsModal.modal.show();
        };
        ImportDirUsersModalController.prototype.getItemsFoundTranslation = function (subTotal, total) {
            var self = this;
            return self.$translate.instant("SETTINGS_ActiveDirectoryItemCount", { subTotal: subTotal, total: total });
        };
        ImportDirUsersModalController.prototype.getItemsSelectedTranslation = function (numSelectedItems) {
            var self = this;
            return self.$translate.instant("SETTINGS_ActiveDirectorySelectedItems", { numSelectedItems: numSelectedItems });
        };
        ImportDirUsersModalController.prototype.cancel = function () {
            var self = this;
            self.$rootScope.$broadcast('clearErrors');
            self.$scope.modal.cancel();
        };
        ImportDirUsersModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', 'GlobalServices', '$rootScope', '$q', 'Loading', '$translate', 'Commands'];
        return ImportDirUsersModalController;
    }());
    asm.ImportDirUsersModalController = ImportDirUsersModalController;
    angular
        .module('app')
        .controller('ImportDirUsersModalController', ImportDirUsersModalController);
})(asm || (asm = {}));
//# sourceMappingURL=importactivedirusersModal.js.map
var asm;
(function (asm) {
    var ImportTemplateModalController = (function () {
        function ImportTemplateModalController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.templateId = "";
            this.templates = null;
            this.selectedId = null;
            this.errors = new Array();
            var self = this;
            self.templateId = self.$scope.modal.params.template;
            self.getTemplateList();
        }
        ImportTemplateModalController.prototype.getTemplateList = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.templates.getTemplateList, {})
                .then(function (data) {
                self.templates = data.data.responseObj;
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ImportTemplateModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ImportTemplateModalController.prototype.import = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            var params = {
                id: self.templateId,
                importId: self.selectedId
            };
            self.$http.post(self.Commands.data.templates.importTemplate, params)
                .then(function (data) {
                self.$scope.modal.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ImportTemplateModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ImportTemplateModalController;
    }());
    asm.ImportTemplateModalController = ImportTemplateModalController;
    angular
        .module('app')
        .controller('ImportTemplateModalController', ImportTemplateModalController);
})(asm || (asm = {}));
//# sourceMappingURL=importtemplate.js.map
var asm;
(function (asm) {
    var JobsModalController = (function () {
        function JobsModalController(Modal, Dialog, $http, $timeout, $q, $translate, $rootScope, GlobalServices, commands, loading) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$rootScope = $rootScope;
            this.GlobalServices = GlobalServices;
            this.commands = commands;
            this.loading = loading;
            this.errors = new Array();
            var self = this;
            self.buttonActive = false;
            self.checkAllBox = false;
            self.refresh();
            self.activate();
        }
        JobsModalController.prototype.activate = function () {
            var self = this;
            self.selectedjobs = self.checkselected();
            var jobstimer = self.$timeout(function () {
                self.refresh();
                self.activate();
            }, 60000);
            self.$rootScope.$on('$locationChangeSuccess', function () {
                self.$timeout.cancel(jobstimer);
            });
        };
        JobsModalController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            //Get All Jobs
            self.$http.post(self.commands.data.jobs.getJobList, {}).then(function (data) {
                self.results = data.data.responseObj;
                self.displayedresults = [].concat(self.results);
                if (self.checkselected().length == 0) {
                    self.buttonActive = false;
                }
                //when finished getting jobs, reselect the selected and include elapsed time
                angular.forEach(_.filter(self.results, function (job) {
                    return job.endDate || job.status === 'running';
                }), function (job) {
                    var now = job.endDate ? moment(job.endDate) : moment(), then = moment(job.startDate), duration = moment.duration(now.diff(then)), days = Math.floor(duration.asDays()), hours = Math.floor(duration.asHours()), minutes = Math.floor(duration.asMinutes());
                    if (days === 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_aday');
                    }
                    else if (days > 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_numDays', { number: days });
                    }
                    else if (hours === 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_anhour');
                    }
                    else if (hours > 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_numHours', { number: hours });
                    }
                    else if (minutes === 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_amimute');
                    }
                    else if (minutes > 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_numMinutes', { number: minutes });
                    }
                    job.isSelected = self.selectedjobs.length >= 1 && !!_.find(self.selectedjobs, { id: job.id });
                });
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            }).finally(function () {
                d.resolve();
            });
        };
        ;
        JobsModalController.prototype.checkselected = function () {
            var self = this;
            return _.filter(self.results, { 'isSelected': true });
        };
        JobsModalController.prototype.cancelButtonActive = function () {
            var self = this, returnVal = true;
            if (self.results) {
                self.results.forEach(function (x) {
                    if (x.isSelected && x.status !== 'scheduled') {
                        returnVal = false;
                    }
                });
            }
            return returnVal;
        };
        //check all checkbox
        JobsModalController.prototype.checkAll = function () {
            var self = this;
            self.results.forEach(function (job) {
                if (self.checkAllBox) {
                    job.isSelected = true;
                }
                else {
                    job.isSelected = false;
                }
            });
        };
        ;
        //cancel job
        JobsModalController.prototype.cancelJob = function () {
            var self = this, selectedusers = _.map(self.checkselected(), 'id'), d = self.$q.defer();
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_ConfirmJobCancel')))
                .then(function () {
                self.GlobalServices.ClearErrors(self.errors);
                self.loading(d.promise);
                self.$http.post(self.commands.data.jobs.deleteJob, selectedusers)
                    .then(function (data) {
                    self.refresh();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                }).finally(function () { return d.resolve(); });
                //self.checkselected() = [];
            });
        };
        JobsModalController.prototype.modalTest = function () {
            var self = this;
            var modalJobs = [];
            //angular loop
            //Move Selected jobs into an array
            self.displayedresults.forEach(function (job) {
                if (job.isSelected) {
                    modalJobs.push(job.id);
                }
            });
            var testModal = self.Modal({
                title: 'Jobs Test Modal Title',
                modalSize: 'modal-lg',
                templateUrl: 'views/testmodal.html',
                controller: 'TestModalController as TestModal',
                params: {
                    jobs: modalJobs
                },
                close: function (modalScope) {
                    self.refresh();
                }
            });
            testModal.modal.show();
        };
        JobsModalController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$rootScope', 'GlobalServices', "Commands", "Loading"];
        return JobsModalController;
    }());
    asm.JobsModalController = JobsModalController;
    angular
        .module('app')
        .controller('JobsModalController', JobsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=jobsModal.js.map
var asm;
(function (asm) {
    var LoaderModalController = (function () {
        function LoaderModalController($scope, $rootScope, $window, $timeout, Modal, Dialog, $http, $translate, $q, $filter, loading, GlobalServices, Commands) {
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$window = $window;
            this.$timeout = $timeout;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.$q = $q;
            this.$filter = $filter;
            this.loading = loading;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            var self = this;
            self.spinnerColor = '#007db8';
            $scope.modal.params.loaderMessage = $scope.modal.params.loaderMessage || 'Loading Content...';
            self.loaderMessage = $scope.modal.params.loaderMessage;
            //the watch was necessary to update the message below the loader svg
            $scope.$watch('modal.params.loaderMessage', function (newVal, oldVal) {
                self.loaderMessage = newVal;
            });
            //self.activate();
        }
        LoaderModalController.prototype.activate = function () {
            var self = this;
        };
        LoaderModalController.prototype.setMessage = function (message) {
            var self = this;
            //$( "#loader-restore-text" ).html( message );
            self.loaderMessage = message;
        };
        LoaderModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        LoaderModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        LoaderModalController.$inject = ['$scope', '$rootScope', '$window', '$timeout', 'Modal', 'Dialog', '$http', '$translate', '$q', '$filter', 'Loading', 'GlobalServices', 'Commands'];
        return LoaderModalController;
    }());
    asm.LoaderModalController = LoaderModalController;
    angular
        .module('app')
        .controller('LoaderModalController', LoaderModalController);
})(asm || (asm = {}));
//# sourceMappingURL=loaderModal.js.map
var asm;
(function (asm) {
    var NtpEditModalController = (function () {
        function NtpEditModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            this.viewModel = { ntpTimeZoneSettings: {} };
            this.errors = new Array();
            var self = this;
            self.initialize();
        }
        NtpEditModalController.prototype.initialize = function () {
            var self = this;
            self.viewModel = self.$scope.modal.params.viewModel;
        };
        NtpEditModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.saveNtpTimeZoneSettings(self.viewModel.ntpTimeZoneSettings)
                .then(function () {
                d.resolve();
                self.close();
            })
                .catch(function (response) {
                d.resolve();
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
        };
        NtpEditModalController.prototype.saveNtpTimeZoneSettings = function (settings) {
            var self = this;
            return self.$http.post(self.Commands.data.environment.setNtpTimeZoneSettings, settings);
        };
        NtpEditModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        NtpEditModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        NtpEditModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'Commands'];
        return NtpEditModalController;
    }());
    asm.NtpEditModalController = NtpEditModalController;
    angular
        .module('app')
        .controller('NtpEditModalController', NtpEditModalController);
})(asm || (asm = {}));
//# sourceMappingURL=ntpEditModal.js.map
var asm;
(function (asm) {
    var PurgeLogsController = (function () {
        function PurgeLogsController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.olderThanDisplayIsValid = true;
            this.severityinformation = false;
            this.severitywarning = false;
            this.severitycritical = false;
            this.errors = new Array();
            this.datePicker = {
                options: {
                    format: "L",
                    maxDate: moment()
                },
                selectedDate: moment().subtract(1, 'hour')
            };
            var self = this;
            self.olderThanDisplay = moment(new Date()).format('YYYY-MM-DD');
        }
        PurgeLogsController.prototype.doPurge = function () {
            var self = this;
            var date = moment(self.olderThanDisplay).toDate();
            self.olderThan = date;
            var formattedDate = moment(self.olderThanDisplay).format('YYYY-MM-DD');
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('PURGELOGS_Confirmation'))
                .then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.logs.purgeLogs, {
                    olderThan: self.olderThan,
                    olderThanDisplay: formattedDate,
                    severityinformation: self.severityinformation,
                    severitywarning: self.severitywarning,
                    severitycritical: self.severitycritical
                })
                    .then(function (data) {
                    self.close();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        PurgeLogsController.prototype.validateForm = function () {
            var self = this;
            self.olderThanDisplayIsValid = moment(self.olderThanDisplay, ["MM/DD/YYYY", "MM-DD-YYYY", "YYYY-MM-DD"], true)
                .isValid();
        };
        PurgeLogsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        PurgeLogsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return PurgeLogsController;
    }());
    asm.PurgeLogsController = PurgeLogsController;
    angular
        .module('app')
        .controller('PurgeLogsController', PurgeLogsController);
})(asm || (asm = {}));
//# sourceMappingURL=purgelogs.js.map
var asm;
(function (asm) {
    var RestoreNowModalController = (function () {
        function RestoreNowModalController($scope, $rootScope, $window, $timeout, Modal, Dialog, $http, $translate, $q, $filter, loading, GlobalServices, Commands) {
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$window = $window;
            this.$timeout = $timeout;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.$q = $q;
            this.$filter = $filter;
            this.loading = loading;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            this.runningJobs = 0;
            this.scheduledJobs = 0;
            this.currentUsers = 0;
            this.refreshTimer = null;
            this.errors = new Array();
            var self = this;
            self.submitform = false;
            self.getBackupSettings();
            self.deferred = self.$q.defer();
            self.statusMessage = "Loading Content...";
        }
        RestoreNowModalController.prototype.$onDestroy = function () {
            var self = this;
            if (self.refreshTimer)
                self.$timeout.cancel(self.refreshTimer);
        };
        RestoreNowModalController.prototype.canDeactivate = function () {
            var self = this;
            var allow = true;
            return allow;
        };
        RestoreNowModalController.prototype.getBackupSettings = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.$http.post(self.Commands.data.backupAndRestore.getBackupSettings, null)
                .then(function (response) {
                self.backupSettings = response.data.responseObj;
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        RestoreNowModalController.prototype.getJobs = function () {
            var self = this;
            //Get jobs
            var jobs = self.$http.post('jobs/getjoblist', null)
                .then(function (response) {
                self.runningJobs = self.$filter('filter')(response.data.responseObj, { status: "running" }).length;
                self.scheduledJobs = self.$filter('filter')(response.data.responseObj, { status: "scheduled" }).length;
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
            return jobs;
        };
        RestoreNowModalController.prototype.getUsers = function () {
            var self = this;
            //Get users
            var users = self.$http.post('appliance/getcurrentusersandjobs', null)
                .then(function (response) {
                self.currentUsers = response.data.responseObj.currentusers;
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
            return users;
        };
        RestoreNowModalController.prototype.showLoader = function () {
            var self = this;
            //////var modal = self.Modal({
            //////    title: self.$translate.instant('RESTORENOW_confirm_title'),
            //////    modalSize: 'modal-lg',
            //////    templateUrl: 'views/settings/backupandrestore/restoreconfirmmodal.html',
            //////    controller: 'RestoreConfirmModalController as restoreConfirmModalController',
            //////    params: {},
            //////    onComplete() {
            //////        var d = self.$q.defer();
            //////        self.GlobalServices.ClearErrors(self.errors);
            //////        self.loading(d.promise);
            //////        self.$http.post(self.Commands.data.backupAndRestore.restore, self.backupSettings)
            //////            .then(function (data: any) {
            //////                self.restoreFailed = false;
            //////                self.getRestoreStatus();
            //////            })
            //////            .catch((response) => {
            //////                self.GlobalServices.DisplayError(response.data, self.errors);
            //////            })
            //////            .finally(() => d.resolve());
            //////    },
            //////    onCancel() {
            //////    }
            //////});
            //////modal.modal.show();
            //modal.modal.dismiss();
            self.loader_modal = self.Modal({
                //title: self.$translate.instant('CLARITY_Loading'),
                //modalSize: 'modal-lg',
                type: 'bare',
                className: 'loading',
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'views/settings/backupandrestore/loadermodal.html',
                controller: 'LoaderModalController as loaderModalController',
                params: { loaderMessage: self.statusMessage },
                onComplete: function () {
                    //var d = self.$q.defer();
                    //self.GlobalServices.ClearErrors(self.errors);
                    //self.loading(d.promise);
                    //self.$http.post(self.Commands.data.backupAndRestore.restore, self.backupSettings)
                    //    .then(function (data: any) {
                    //        self.restoreFailed = false;
                    //        self.getRestoreStatus();
                    //    })
                    //    .catch((response) => {
                    //        self.GlobalServices.DisplayError(response.data, self.errors);
                    //    })
                    //    .finally(() => d.resolve());
                },
                onCancel: function () {
                }
            });
            self.loader_modal.modal.show();
            //self.loader_modal.modal.dismiss();
        };
        RestoreNowModalController.prototype.restore = function (isValid) {
            var self = this;
            var jobs = self.getJobs();
            var users = self.getUsers();
            var promise = self.$q.all([jobs, users])
                .then(function (data) {
                var confirm = self.Dialog(self.$translate.instant('RESTORENOW_confirm_title'), self.$translate.instant('RESTORENOW_confirm_text') + '<br/><br/><ul><li>' +
                    self.$translate.instant('RESTORENOW_confirm_userinfo') + self.currentUsers + '</li><li>' +
                    self.$translate.instant('RESTORENOW_confirm_jobinfo') + self.runningJobs + '</li><li>' +
                    self.$translate.instant('RESTORENOW_confirm_scheduledjobinfo') + self.scheduledJobs + '</li></ul>' +
                    self.$translate.instant('RESTORENOW_confirm_footnote'));
                confirm.then(function () {
                    self.$http.post(self.Commands.data.backupAndRestore.restore, self.backupSettings)
                        .then(function (data) {
                        //console.log( 'restore started' );
                        //self.loading( self.deferred.promise );
                        self.statusMessage = 'Starting Restoration';
                        self.showLoader();
                        self.restoreFailed = false;
                        self.getRestoreStatus();
                    });
                });
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        RestoreNowModalController.prototype.getRestoreStatus = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.$http.post(self.Commands.data.backupAndRestore.getRestoreStatus, self.backupSettings)
                .then(function (data) {
                //console.log( 'restore status:  ' + data.data.responseObj );
                //self.statusMessage = data.data.responseObj;
                if (data.data.responseObj == "waiting_for_restart") {
                    //console.log( 'restore finished' );
                    //self.deferred.resolve();
                    self.loader_modal.modal.dismiss();
                    self.$window.location.href = 'status.html#/status';
                }
                else if (data.data.responseObj == "not_in_progress") {
                    //self.loader.setMessage('Starting Restoration');
                    self.statusMessage = 'Starting Restoration';
                }
                else if (data.data.responseObj == "preparing_for_download") {
                    //self.loader.setMessage('Downloading Archive');
                    self.statusMessage = 'Downloading Archive';
                }
                else if (data.data.responseObj == "downloading") {
                    //self.loader.setMessage('Downloading Archive');
                    self.statusMessage = 'Downloading Archive';
                }
                else if (data.data.responseObj == "unpacking") {
                    //self.loader.setMessage('Downloading Archive');
                    self.statusMessage = 'Downloading Archive';
                }
                else if (data.data.responseObj == "verifying") {
                    //self.loader.setMessage('Verifying Archive');
                    self.statusMessage = 'Verifying Archive';
                }
                else if (data.data.responseObj == "failed") {
                    //note: status of failed from the back-end is not a successful response of the status failed--it is an error that sends us to our catch to be displayed as an error
                    self.restoreFailed = true;
                    //self.loader.setMessage('Failed');
                    self.statusMessage = 'Failed';
                }
                //update the watch variable
                self.loader_modal.modal.params.loaderMessage = self.statusMessage;
                if (!self.restoreFailed) {
                    self.refreshTimer = self.$timeout(function () {
                        self.getRestoreStatus();
                    }, 5000);
                }
            })
                .catch(function (response) {
                //console.log( 'restore status:  ' + response.data.details );
                //console.log( 'restore error routine' );
                self.restoreFailed = true;
                //self.deferred.resolve();
                self.loader_modal.modal.dismiss();
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () {
                //do nothing, do not close the loader here since we call this iteratively
            });
        };
        RestoreNowModalController.prototype.testConnection = function (isValid) {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.$http.post(self.Commands.data.backupAndRestore.testRestoreConnection, self.backupSettings)
                .then(function (data) {
                self.Dialog((self.$translate.instant('RESTORENOW_testconnection_success_title')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('RESTORENOW_testconnection_success_message')), true);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        RestoreNowModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        RestoreNowModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        RestoreNowModalController.$inject = ['$scope', '$rootScope', '$window', '$timeout', 'Modal', 'Dialog', '$http', '$translate', '$q', '$filter', 'Loading', 'GlobalServices', 'Commands'];
        return RestoreNowModalController;
    }());
    asm.RestoreNowModalController = RestoreNowModalController;
    angular
        .module('app')
        .controller('RestoreNowModalController', RestoreNowModalController);
})(asm || (asm = {}));
//# sourceMappingURL=restorenowModal.js.map
var asm;
(function (asm) {
    var SetupWizardController = (function () {
        function SetupWizardController(Modal, $scope, Dialog, $http, Loading, $q, $timeout, $rootScope, Commands, $translate, GlobalServices, FileUploader) {
            this.Modal = Modal;
            this.$scope = $scope;
            this.Dialog = Dialog;
            this.$http = $http;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.$rootScope = $rootScope;
            this.Commands = Commands;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.setupData = {};
            this.aboutData = {};
            this.timeZones = new Array();
            this.ranges = {
                days: 31,
                hours: 24,
                minutes: 60,
                seconds: 60
            };
            this.testProxyRunning = false;
            this.errors = new Array();
            var self = this;
            self.refresh();
            self.uploader = self.$scope.uploader = new FileUploader({
                url: self.Commands.data.applianceManagement.verifylicense
            });
        }
        SetupWizardController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.$http.post(self.Commands.data.initialSetup.getInitialSetup, null)
                    .then(function (response) {
                    self.setupData = response.data.responseObj;
                    //console.log('refresh, self.setupData:');
                    //console.log(self.setupData);
                    self.aboutData.serviceTag = self.setupData.licenseData.softwareservicetag;
                }),
                self.$http.post(self.Commands.data.environment.getTimeZones, {})
                    .then(function (response) {
                    self.timeZones = response.data.responseObj;
                })
            ])
                .then(function () {
                //self.setWatchForFileUpload();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        SetupWizardController.prototype.enterWelcome = function () {
            var self = this;
            self.$rootScope.helpToken = 'initialsetupwelcome';
        };
        SetupWizardController.prototype.enterLicense = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.$rootScope.helpToken = 'initialsetuplicensing';
            self.setWatchForFileUpload();
            //testing code; force isValid to true in order to test scenarios where a valid license file has already been successfully uploaded
            //and we are running the wizard anyway to update something else, or the user cancelled out of the wizard and came back in
            //self.setupData.licenseData.isValid = true;
        };
        SetupWizardController.prototype.setWatchForFileUpload = function () {
            var self = this;
            document.getElementById('idLocationFileUpload').onchange = function (evt) {
                var fileInput = document.getElementById("idLocationFileUpload");
                //reset form
                self.forms.uploadLicenseForm._submitted = false;
                //if file cleared
                if (!fileInput.value) {
                    //clear form validation
                    self.setupData.licenseData.fileModel = "";
                    self.fileModel = "";
                }
                else {
                    //set file
                    var element = angular.element(evt.target)[0];
                    self.fileModel = element.files[0];
                    self.setupData.licenseData.fileModel = element.value;
                    self.$timeout(function () { self.verifyLicense(self.fileModel); }, 10); //Wrap in a timeout to trigger a digest cycle.
                }
            };
        };
        SetupWizardController.prototype.verifyLicense = function (file) {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            //using angular uploader
            self.$scope.uploader.formData = [];
            self.$scope.uploader.formData.push(file);
            //set error and success callbacks 
            angular.extend(self.uploader, {
                onErrorItem: function (fileItem, response, status, headers) {
                    self.GlobalServices.DisplayError(response ||
                        { message: self.$translate.instant("SETUPWIZARD_ErrorInUpload") }, self.errors);
                    d.reject();
                },
                onCompleteAll: function (criteriaObj, errorObj, responseObj, responseCode) {
                    d.resolve();
                },
                onBeforeUploadItem: function (item) {
                    item.formData = angular.copy(item.uploader.formData);
                },
                onSuccessItem: function (item, response, status, headers) {
                    self.setupData.licenseData = response.responseObj;
                    //console.log('verifyLicense, self.setupData.licenseData:');
                    //console.log(self.setupData.licenseData);
                    d.resolve();
                }
            });
            self.uploader.uploadAll();
            return d.promise;
        };
        SetupWizardController.prototype.updateLicense = function () {
            var self = this;
            self.forms.uploadLicenseForm._submitted = true;
            var step = self.$q.defer();
            if (self.forms.uploadLicenseForm.$invalid) {
                step.reject();
                return step.promise;
            }
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.$http.post(self.Commands.data.initialSetup.updateLicenseData, self.setupData.licenseData)
                    .then(function (response) {
                    //JIRA 1506, 1493 bug fixes:
                    //if the responseObj is null, then we must have sent the back-end a null licensefile value, and
                    //that could happen under normal/valid circumstances where we have already sent a valid license file and have
                    //restarted the setup wizard to update something else, for example (or the user never finished and cancelled out of the wizard)
                    //in this situation, we do not want to overwrite the values in setupData.licenseData with nulls so we will ignore the response
                    //if (response.data.responseObj == null) {
                    //    //this was the error scenario
                    //    console.log('response.data.responseObj is null, do not overwrite self.setupData.licenseData');
                    //}
                    if (response.data.responseObj != null) {
                        //console.log('response.data.responseObj is not null, overwriting self.setupData.licenseData');
                        self.setupData.licenseData = response.data.responseObj;
                    }
                }),
                self.aboutData.serviceTag &&
                    self.$http.post(self.Commands.data.applianceManagement.updateServiceTag, self.aboutData.serviceTag)
            ])
                .then(function () {
                step.resolve();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
                step.reject();
            })
                .finally(function () { return d.resolve(); });
            return step.promise;
        };
        SetupWizardController.prototype.enterNTP = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.$rootScope.helpToken = 'initialsetuptimezone';
        };
        SetupWizardController.prototype.updateNTP = function () {
            var self = this;
            self.forms.step3._submitted = true;
            return self.$q(function (resolve, reject) {
                if (self.forms.step3.$valid) {
                    var d = self.$q.defer();
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.$http.post(self.Commands.data.initialSetup.updateTimeData, self.setupData.timeData)
                        .then(function (response) {
                        self.setupData.timeData = response.data.responseObj;
                        resolve();
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data, self.errors);
                        reject();
                    })
                        .finally(function () { return d.resolve(); });
                }
                else {
                    reject();
                }
            });
        };
        SetupWizardController.prototype.enterVxRack = function () {
            var self = this;
            self.$rootScope.helpToken = 'InitialSetupAlertConnectorSettings';
            return self.$q(function (resolve, reject) {
                self.$http.post(self.Commands.data.applianceManagement.getVxRackSettings, {})
                    .then(function (response) {
                    self.setupData.vxRackSettings = response.data.responseObj;
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                })
                    .finally(function () { return resolve(); });
            });
        };
        SetupWizardController.prototype.saveVxRack = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                if (!self.enableAlertConnector) {
                    return resolve();
                }
                if (self.forms.step6.$valid) {
                    var d = self.$q.defer();
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.$http.post(self.Commands.data.applianceManagement.setVxRackSettingsRegister, self.setupData.vxRackSettings)
                        .then(function (data) {
                        resolve();
                    })
                        .catch(function (response) { self.GlobalServices.DisplayError(response.data, self.errors); reject(); })
                        .finally(function () { return d.resolve(); });
                }
                else {
                    reject();
                }
            });
        };
        SetupWizardController.prototype.enterProxy = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.$rootScope.helpToken = 'initialsetupproxysettings';
        };
        SetupWizardController.prototype.updateProxy = function () {
            var self = this;
            self.forms.step4._submitted = true;
            return self.$q(function (resolve, reject) {
                if (self.forms.step4.$valid) {
                    var d = self.$q.defer();
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.$http.post(self.Commands.data.initialSetup.updateProxyData, self.setupData.proxyData)
                        .then(function (response) {
                        self.setupData.proxyData = response.data.responseObj;
                        resolve();
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data, self.errors);
                        reject();
                    })
                        .finally(function () { return d.resolve(); });
                }
                else {
                    reject();
                }
            });
        };
        SetupWizardController.prototype.enterDHCP = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.$rootScope.helpToken = 'configureDHCPsettings';
        };
        SetupWizardController.prototype.updateDHCP = function () {
            var self = this;
            self.forms.step5._submitted = true;
            return self.$q(function (resolve, reject) {
                if (self.forms.step5.$valid) {
                    var d = self.$q.defer();
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.$http.post(self.Commands.data.initialSetup.updateDhcpData, self.setupData.dhcpData)
                        .then(function (response) {
                        self.setupData.dhcpData = response.data.responseObj;
                        resolve();
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data, self.errors);
                        reject();
                    })
                        .finally(function () { return d.resolve(); });
                }
                else {
                    reject();
                }
            });
        };
        SetupWizardController.prototype.getSelectedTimeZoneName = function () {
            var self = this;
            if (self.timeZones.length) {
                var match = _.find(self.timeZones, function (tz) {
                    return tz.id == self.setupData.timeData.timeZone;
                });
                return match ? match.name : "";
            }
        };
        SetupWizardController.prototype.enterSummary = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.$rootScope.helpToken = 'initialsetupsummary';
        };
        SetupWizardController.prototype.finishWizard = function () {
            var self = this;
            var d = self.$q.defer();
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETUPWIZARD_SubmitInfo')))
                .then(function () {
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.initialSetup.completeInitialSetup, self.setupData)
                    .then(function () {
                    d.resolve();
                    self.$scope.modal.close();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                    d.resolve();
                });
            });
        };
        SetupWizardController.prototype.testProxy = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.testProxyRunning = true;
            self.$http.post(self.Commands.data.initialSetup.testProxy, self.setupData.proxyData)
                .then(function (response) {
                self.Dialog(self.$translate.instant("GENERIC_Alert"), self.$translate.instant("SETUPWIZARD_ProxySettingsProxyConnectionSuccess"), true);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () {
                d.resolve();
                self.testProxyRunning = false;
            });
        };
        SetupWizardController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        SetupWizardController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        SetupWizardController.$inject = ['Modal', '$scope', 'Dialog', '$http', 'Loading', '$q', '$timeout', '$rootScope', 'Commands', '$translate', 'GlobalServices', "FileUploader"];
        return SetupWizardController;
    }());
    asm.SetupWizardController = SetupWizardController;
    angular
        .module('app')
        .controller('SetupWizardController', SetupWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=setupwizard.js.map
var asm;
(function (asm) {
    var StopManagingApplicationsModalController = (function () {
        function StopManagingApplicationsModalController($scope, Modal, Dialog, $http, $q, Loading, Commands, GlobalServices) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.Loading = Loading;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = new Array();
            var self = this;
            self.initialize();
        }
        StopManagingApplicationsModalController.prototype.initialize = function () {
            var self = this;
            self.serviceId = self.$scope.modal.params.serviceId;
            self.selectedComponent = self.$scope.modal.params.selectedComponent;
        };
        StopManagingApplicationsModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        StopManagingApplicationsModalController.prototype.getNumberOfComponents = function () {
            var self = this;
            return _.filter(self.selectedComponent.relatedcomponents, function (rc) {
                return rc.installOrder > 0;
            }).length;
        };
        StopManagingApplicationsModalController.prototype.getCheckedApplications = function () {
            var self = this;
            var checkedItems = _.filter(self.selectedComponent.relatedcomponents, function (rc) {
                return rc.rowChecked == true;
            });
            var idList = [];
            angular.forEach(checkedItems, function (item) {
                idList.push(item.id);
            });
            return idList;
        };
        StopManagingApplicationsModalController.prototype.isApplicationChecked = function () {
            var self = this;
            return self.getCheckedApplications().length > 0;
            //var self: StopManagingApplicationsModalController = this;
            //return _.filter(self.selectedComponent.relatedcomponents,
            //    function (rc: any) {
            //        return rc.rowChecked == true
            //    }
            //).length>0;
        };
        StopManagingApplicationsModalController.prototype.stopManagingApps = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.services.stopManagingApplications, {
                serviceId: self.serviceId,
                componentId: self.selectedComponent.id,
                applicationIds: self.getCheckedApplications()
            }).then(function (data) {
                d.resolve();
                self.$scope.modal.close();
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        StopManagingApplicationsModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        StopManagingApplicationsModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', 'Loading', 'Commands', 'GlobalServices'];
        return StopManagingApplicationsModalController;
    }());
    asm.StopManagingApplicationsModalController = StopManagingApplicationsModalController;
    angular
        .module('app')
        .controller('StopManagingApplicationsModalController', StopManagingApplicationsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=stopManagingApplicationsModal.js.map
var asm;
(function (asm) {
    var AddAttachmentModalController = (function () {
        function AddAttachmentModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.Commands = Commands;
            this.errors = new Array();
            this.template = {
                id: ''
            };
            this.repo = { packageSource: 'import' };
            //this.deferred = this.$q.defer();
            var self = this;
            self.template.id = $scope.modal.params.templateId;
            $scope.uploader = new FileUploader({
                url: 'templates/addattachment',
                filters: [
                    {
                        name: 'fileSize', fn: function (file) {
                            return !(self.tooBigError = file.size > 52428800);
                        }
                    }
                ]
            });
            self.$timeout(function () {
                document.getElementById('templateattachmentfile').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    self.$timeout(function () { self.repoFile = element.files[0]; }, 10); //Wrap in a timeout to trigger a digest cycle.
                };
            }, 500);
        }
        AddAttachmentModalController.prototype.save = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            //using angular uploader
            self.$scope.uploader.formData = [];
            self.$scope.uploader.formData.push(self.template);
            //set error and success callbacks 
            angular.merge(self.$scope.uploader, {
                onErrorItem: function (fileItem, response, status, headers) {
                    //self.GlobalServices.DisplayError();
                    deferred.resolve();
                    fileItem.isUploaded = false;
                },
                onCompleteAll: function (criteriaObj, errorObj, responseObj, responseCode) {
                    deferred.resolve();
                },
                onCompleteItem: function (item, response, status, headers) {
                    deferred.resolve();
                    if (response.responseCode === 0) {
                        self.$scope.modal.close();
                    }
                    else if (response.errorObj) {
                        item.isUploaded = false;
                        self.GlobalServices.DisplayError(response.errorObj, self.errors);
                    }
                },
                onBeforeUploadItem: function (item) {
                    item.formData = angular.copy(item.uploader.formData);
                }
            });
            if (self.tooBigError) {
                deferred.resolve();
            }
            else {
                self.$scope.uploader.uploadAll();
            }
        };
        AddAttachmentModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddAttachmentModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        AddAttachmentModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', 'Commands'];
        return AddAttachmentModalController;
    }());
    asm.AddAttachmentModalController = AddAttachmentModalController;
    angular
        .module('app')
        .controller('AddAttachmentModalController', AddAttachmentModalController);
})(asm || (asm = {}));
//# sourceMappingURL=templateaddattachmentModal.js.map
var asm;
(function (asm) {
    /*
     Params for editing template:
    template: any,
    templateInputType: string
     */
    var TemplateWizardController = (function () {
        function TemplateWizardController($scope, Modal, Dialog, $http, $translate, Commands, GlobalServices, Loading, $q, $timeout, FileUploader, $location, $filter, $rootScope) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.FileUploader = FileUploader;
            this.$location = $location;
            this.$filter = $filter;
            this.$rootScope = $rootScope;
            this.errors = new Array();
            this.wizardFinishText = this.$translate.instant("TEMPLATES_CREATE_TEMPLATE_WIZARD_Publish");
            var self = this;
            self.steps = {
                step1: {
                    uploadEmc: {
                        form: undefined,
                        id: "collapseOne",
                        fileModel: undefined,
                        encryptionPassword: "",
                        showSuccess: false,
                        uploader: self.$scope.uploader = self.newUploader(),
                        resetUploader: function () {
                            //clear this for validation
                            self.steps.step1.uploadEmc.fileModel = undefined;
                            //remove file name from input
                            var fileInput = document.getElementById("emcTemplatefile");
                            fileInput.value = "";
                            //reset form
                            this.form._submitted = false;
                        },
                        save: function (deferred) {
                            var uploadEmcScope = this;
                            self.GlobalServices.ClearErrors(self.errors);
                            self.Loading(deferred.promise);
                            //using angular uploader
                            self.$scope.uploader.formData = [];
                            self.$scope.uploader.formData.push({ encryptionPassword: this.encryptionPassword });
                            //set error and success callbacks 
                            var error = false;
                            angular.extend(self.$scope.uploader, {
                                onErrorItem: function (fileItem, response, status, headers) {
                                    fileItem.isUploaded = false;
                                    error = true;
                                    self.GlobalServices.DisplayError(response.data, self.errors);
                                    deferred.reject();
                                },
                                onCompleteAll: function (criteriaObj, errorObj, responseObj, responseCode) {
                                    if (!error) {
                                        deferred.resolve();
                                    }
                                },
                                onBeforeUploadItem: function (item) {
                                    item.formData = angular.copy(item.uploader.formData);
                                },
                                onSuccessItem: function (item, response, status, headers) {
                                    if (response.responseCode != 0) {
                                        item.isUploaded = false;
                                        error = true;
                                        self.GlobalServices.DisplayError(response.errorObj, self.errors);
                                        uploadEmcScope.resetUploader();
                                        self.GlobalServices.scrollTo();
                                        deferred.reject();
                                    }
                                    else {
                                        self.template = response.responseObj;
                                        //display green banner on next page
                                        self.steps.step1.uploadEmc.showSuccess = true;
                                        //copy file so we keep it after we reset uploader
                                        self.fileModel = self.steps.step1.uploadEmc.fileModel;
                                        uploadEmcScope.resetUploader();
                                    }
                                }
                            });
                            self.$scope.uploader.uploadAll();
                        }
                    },
                    clone: {
                        form: undefined,
                        id: "collapseTwo",
                        templates: [],
                        categoryOption: undefined,
                        categories: [],
                        selectedTemplate: undefined,
                        save: function () {
                            var createTemplateModal = self.Modal({
                                title: self.$translate.instant("TEMPLATES_CREATE_TEMPLATE_WIZARD_title", { templateName: this.selectedTemplate.name }),
                                onHelp: function () {
                                    self.GlobalServices.showHelp('cloningtemplate');
                                },
                                modalSize: 'modal-lg',
                                templateUrl: 'views/createtemplate.html',
                                controller: 'CreateTemplateModalController as createTemplateModalController',
                                params: {
                                    type: 'clone',
                                    template: this.selectedTemplate,
                                    templates: self.steps.step1.clone.templates
                                }
                            });
                            //need timeout for page title updates
                            self.$timeout(function () {
                                createTemplateModal.modal.show();
                            }, 500);
                            self.$timeout(function () {
                                self.$scope.modal.close();
                            }, 0);
                        },
                        init: function (templateToClone) {
                            this.categoryOption = templateToClone.category;
                            this.selectedTemplate = templateToClone;
                            this.save();
                        }
                    },
                    upload: {
                        form: {},
                        id: "collapseThree",
                        fileModel: undefined,
                        save: function (deferred) {
                            deferred.resolve();
                            var uploadtemplateModal = self.Modal({
                                title: self.$translate.instant('TEMPLATES_UploadExternalModal_UploadExternalTemplate'),
                                onHelp: function () {
                                    self.GlobalServices.showHelp('Template_UploadExternalTemplate');
                                },
                                modalSize: 'modal-lg',
                                templateUrl: 'views/templates/uploadtemplatemodal.html',
                                controller: 'UploadTemplateModalController as UploadTemplateModal',
                                params: {},
                                onComplete: function (category) {
                                }
                            });
                            //need timeout for page title updates
                            self.$timeout(function () {
                                uploadtemplateModal.modal.show();
                            }, 500);
                            self.close();
                        }
                    },
                    create: {
                        form: undefined,
                        id: "collapseFour",
                        save: function (deferred) {
                            deferred.resolve();
                            var createTemplateModal = self.Modal({
                                title: self.$translate.instant('TEMPLATES_CreateTemplate'),
                                onHelp: function () {
                                    self.GlobalServices.showHelp('creatingtemplate');
                                },
                                modalSize: 'modal-lg',
                                templateUrl: 'views/createtemplate.html',
                                controller: 'CreateTemplateModalController as createTemplateModalController',
                                params: {
                                    type: 'new',
                                    template: { name: self.template.name },
                                    templates: self.steps.step1.clone.templates
                                }
                            });
                            //need timeout for page title updates
                            self.$timeout(function () {
                                createTemplateModal.modal.show();
                            }, 500);
                            self.close();
                        }
                    },
                    validate: function () {
                        var d = self.$q.defer();
                        var section;
                        switch (self.templateInputType) {
                            case "uploadEmc":
                                section = this.uploadEmc;
                                break;
                            case "clone":
                                section = this.clone;
                                break;
                            case "upload":
                                section = this.upload;
                                break;
                            case "create":
                                section = this.create;
                                break;
                        }
                        section.form._submitted = true;
                        //if form is valid, pass deferred to section's save function and it will reject or resolve it accordingly 
                        self.GlobalServices.scrollToInvalidElement(section.id) ? d.reject() : section.save(d);
                        self.GlobalServices.ClearErrors(self.errors);
                        return d.promise;
                    },
                    hidden: false
                },
                step2A: {
                    tagId: "step2A",
                    form: undefined,
                    save: function () {
                        var _this = this;
                        var stepScope = this;
                        self.GlobalServices.ClearErrors(self.errors);
                        return self.$q(function (resolve, reject) {
                            _this.form._submitted = true;
                            self.GlobalServices.scrollToInvalidElement(stepScope.tagId);
                            return _this.form.$invalid ? reject() : resolve();
                        });
                    },
                    initialize: function () {
                        self.steps.step1.uploadEmc.showSuccess = false;
                        self.$timeout(function () { self.GlobalServices.scrollTo(); }, 500);
                    }
                },
                step2B: {
                    tagId: "step2B",
                    form: undefined,
                    save: function () {
                        var _this = this;
                        var stepScope = this;
                        self.GlobalServices.ClearErrors(self.errors);
                        return self.$q(function (resolve, reject) {
                            _this.form._submitted = true;
                            self.GlobalServices.scrollToInvalidElement(stepScope.tagId);
                            return _this.form.$invalid ? reject() : resolve();
                        });
                    },
                    initialize: function () {
                        self.GlobalServices.scrollTo(this.tagId);
                    }
                },
                step2C: {
                    tagId: "step2C",
                    form: undefined,
                    initialized: false,
                    networks: [],
                    refresh: function () {
                        var stepScope = this;
                        self.GlobalServices.ClearErrors(self.errors);
                        self.Loading(self.$http.post(self.Commands.data.networking.networks.getNetworksList, null)
                            .then(function (response) {
                            stepScope.networks = response.data.responseObj;
                        }));
                    },
                    initialize: function () {
                        self.steps.step1.uploadEmc.showSuccess = false;
                        this.refresh();
                        self.GlobalServices.scrollTo(this.tagId);
                    },
                    save: function () {
                        var _this = this;
                        var stepScope = this;
                        return self.$q(function (resolve, reject) {
                            _this.form._submitted = true;
                            self.GlobalServices.scrollToInvalidElement(stepScope.tagId);
                            //get asm::configuration::cluster_details::datacenter setting value and plug it into setting in vds with id of asm::configuration::cluster_details::datacenter
                            var dataCenter = _.find(self.template.configureTemplateConfiguration.clusterDetailsSettings, { id: "asm::configuration::cluster_details::datacenter" });
                            if (dataCenter) {
                                var vdsSetting = _.find(self.template.configureTemplateConfiguration.vdsSettings, { id: "asm::configuration::cluster_details::datacenter" });
                                if (vdsSetting) {
                                    vdsSetting.value = dataCenter.value;
                                }
                            }
                            return _this.form.$invalid ? reject() : resolve();
                        });
                    }
                },
                step3A: {
                    tagId: "step3A",
                    form: undefined,
                    initialized: false,
                    initialize: function () {
                        self.GlobalServices.scrollTo(this.tagId);
                        //only do it once
                        if (!this.initialized) {
                            this.appendOptions();
                            this.initialized = true;
                        }
                    },
                    appendOptions: function () {
                        _.forEach(self.template.configureTemplateConfiguration.vdsSettings, function (setting) {
                            return setting.portGroups = self.addNewOption(setting.portGroups, "TEMPLATES_CREATE_TEMPLATE_WIZARD_3a_Createnew");
                        });
                    },
                    save: function () {
                        var _this = this;
                        var stepScope = this;
                        self.GlobalServices.ClearErrors(self.errors);
                        return self.$q(function (resolve, reject) {
                            _this.form._submitted = true;
                            self.GlobalServices.scrollToInvalidElement(stepScope.tagId);
                            return _this.form.$invalid ? reject() : resolve();
                        });
                    }
                },
                step4A: {
                    tagId: "step4A",
                    form: undefined,
                    initialize: function () {
                        self.GlobalServices.scrollTo(this.tagId);
                    },
                    save: function () {
                        var _this = this;
                        var stepScope = this;
                        self.GlobalServices.ClearErrors(self.errors);
                        return self.$q(function (resolve, reject) {
                            _this.form._submitted = true;
                            self.GlobalServices.scrollToInvalidElement(stepScope.tagId);
                            return _this.form.$invalid ? reject() : resolve();
                        });
                    }
                },
                summary: {
                    safeNetworkTableData: undefined,
                    initialize: function () {
                        self.GlobalServices.scrollTo(this.tagId);
                        this.safeNetworkTableData = angular.copy(self.template.configureTemplateConfiguration.networkSettings);
                    }
                }
            };
            self.saveAsDraftButton = {
                click: function () {
                    self.saveAsDraft(self.template);
                },
                text: self.$translate.instant("GENERIC_SaveAsDraft"),
                disabled: function () {
                    return self.template && !self.template.category;
                }
            };
            self.activate();
        }
        TemplateWizardController.prototype.newUploader = function () {
            var self = this;
            return new self.FileUploader({
                url: self.Commands.data.configureTemplate.uploadConfigurableTemplate,
                removeAfterUpload: true
            });
        };
        TemplateWizardController.prototype.filteredoptions = function (params) {
            var self = this;
            var setting = params.setting;
            var settingsArray = params.settingsArray;
            if (!setting)
                return [];
            var returnVal = [];
            var radioGroup = self.GlobalServices.NewGuid();
            $.each(setting.options, function (optionIndex, option) {
                if (option.dependencyTarget && option.dependencyValue) {
                    var targetSetting = null;
                    var matchingSetting = _.find(settingsArray, function (s) {
                        return (s.id == option.dependencyTarget);
                    });
                    if (matchingSetting) {
                        targetSetting = matchingSetting;
                    }
                    var matchingValue = false;
                    if (targetSetting && targetSetting.value != null) {
                        var settingvalues = option.dependencyValue.split(',');
                        $.each(settingvalues, function (idx, val) {
                            if (val.toString() == targetSetting.value.toString())
                                matchingValue = true;
                        });
                    }
                    if (matchingValue) {
                        returnVal.push(option);
                    }
                }
                else {
                    returnVal.push(option);
                }
            });
            return returnVal;
        };
        TemplateWizardController.prototype.settingVisible = function (setting, settingsList) {
            var self = this;
            var targetSetting = null;
            if (setting.hidefromtemplate)
                return false;
            if (setting && settingsList && settingsList.length && setting.dependencyTarget && setting.dependencyValue) {
                targetSetting = _.find(settingsList, { id: setting.dependencyTarget }) || null;
                var matchingValue = false;
                if (targetSetting && targetSetting.value != null) {
                    var settingvalues = setting.dependencyValue.split(',');
                    matchingValue = !!_.find(settingvalues, function (val) {
                        return (val.toString() == targetSetting.value.toString());
                    });
                }
                return matchingValue && self.settingVisible(targetSetting, settingsList);
            }
            return true;
        };
        TemplateWizardController.prototype.activate = function () {
            var self = this;
            self.templateInputType = self.$scope.modal.params.templateInputType || "uploadEmc";
            switch (self.templateInputType) {
                case "uploadEmc":
                    self.editEmcTemplate(self.$scope.modal.params.template);
                    break;
                case "clone":
                    var d = self.$q.defer();
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.initStep1CloneTemplate()
                        .then(function (data) {
                        self.steps.step1.clone.init(self.$scope.modal.params.template);
                    })
                        .catch(function (error) {
                        self.GlobalServices.DisplayError(error.data, self.errors);
                    })
                        .finally(function () {
                        d.resolve();
                    });
                    break;
                case "upload":
                    //launch upload modal
                    self.steps.step1.upload.save();
                    break;
                case "create":
                    break;
            }
        };
        TemplateWizardController.prototype.editEmcTemplate = function (template) {
            var self = this;
            if (template) {
                self.getConfigureTemplateById(self.$scope.modal.params.template.id);
                self.steps.step1.hidden = true;
            }
        };
        TemplateWizardController.prototype.cloneTemplate = function (template) {
            var self = this;
            if (template) {
                self.template = self.$scope.modal.params.template;
            }
        };
        TemplateWizardController.prototype.initStep1 = function () {
            var self = this;
            //self.initEMCUploader();
            self.initUploader();
            self.initStep1CloneTemplate();
        };
        //initEMCUploader(): void {
        //    var self: TemplateWizardController = this;
        //    //set file form element to value of file (truthy or undefined)
        //    self.$timeout(() => {
        //        document.getElementById('emcTemplatefile').onchange = (evt) => {
        //            var element: any = angular.element(evt.target)[0];
        //            self.$timeout(() => { self.steps.step1.uploadEmc.fileModel = element.files[0]; });
        //        };
        //    }, 500);
        //}
        TemplateWizardController.prototype.initUploader = function () {
            var self = this;
            //set file form element to value of file (truthy or undefined)
            self.$timeout(function () {
                if (document.getElementById('templatefile')) {
                    document.getElementById('templatefile').onchange = function (evt) {
                        var element = angular.element(evt.target)[0];
                        self.$timeout(function () { self.steps.step1.upload.fileModel = element.files[0]; });
                    };
                }
            }, 500);
        };
        TemplateWizardController.prototype.initStep1CloneTemplate = function () {
            var self = this;
            return self.getTemplateList()
                .then(function (data) {
                self.steps.step1.clone.templates = data.data.responseObj;
                self.steps.step1.clone.categories = self.getCategories(self.steps.step1.clone.templates);
            });
        };
        TemplateWizardController.prototype.getCategories = function (templates, allowNewCategory) {
            var self = this;
            var categories = [];
            var cats = _.groupBy(templates, "category");
            for (var categoryName in cats) {
                if (cats.hasOwnProperty(categoryName)) {
                    categories.push({ name: categoryName, id: categoryName });
                }
            }
            if (allowNewCategory)
                categories = self.addNewOption(categories, "TEMPLATES_CreateNewCategory");
            return categories;
        };
        TemplateWizardController.prototype.addNewOption = function (array, optionText) {
            var self = this;
            return _.concat(array, [
                { name: "____________________", disabled: true, id: 1 },
                { name: self.$translate.instant(optionText), id: "new" }
            ]);
        };
        TemplateWizardController.prototype.viewNetworks = function () {
            var self = this;
            var addNetworks = self.Modal({
                title: self.$translate.instant('GENERIC_Networks'),
                onHelp: function () {
                    self.GlobalServices.showHelp('networksaddingediting');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/definenetworksmodal.html',
                controller: 'DefineNetworksController as defineNetworksController',
                params: {},
                onCancel: function () {
                    self.steps.step2C.refresh();
                    addNetworks.modal.dismiss();
                },
                onComplete: function () {
                    self.steps.step2C.refresh();
                }
            });
            addNetworks.modal.show();
        };
        TemplateWizardController.prototype.switchSettingChanged = function (switchSetting) {
            switchSetting.value = switchSetting.valueSelection === "new" ? null : switchSetting.valueSelection;
        };
        TemplateWizardController.prototype.getTemplateList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.templates.getTemplateList, {});
        };
        TemplateWizardController.prototype.getAvailableFirmwarePackages = function () {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.getAvailableFirmwarePackages, {});
        };
        TemplateWizardController.prototype.goToTemplateBuilder = function (id) {
            var self = this;
            self.$timeout(function () {
                self.$location.path("templatebuilder/" + id + "/edit");
            }, 500);
        };
        TemplateWizardController.prototype.getConfigureTemplateById = function (templateId) {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.configureTemplate.getConfigureTemplateById, {
                id: templateId
            })
                .then(function (data) {
                self.template = data.data.responseObj;
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        TemplateWizardController.prototype.saveAsDraft = function (template) {
            var self = this;
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('TEMPLATES_CREATE_TEMPLATE_WIZARD_SaveAsDraftConfirmMessage'))
                .then(function () {
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(self.$http.post(self.Commands.data.configureTemplate.saveConfigureTemplate, angular.extend(template, {
                    draft: true,
                    inConfiguration: true
                }))
                    .then(function (response) {
                    self.template = response.data.responseObj;
                    self.close();
                })
                    .catch(function (error) {
                    self.GlobalServices.DisplayError(error.data, self.errors);
                }));
            });
        };
        TemplateWizardController.prototype.finishWizard = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.configureTemplate.saveConfigureTemplate, angular.extend(self.template, { draft: false, inConfiguration: false }))
                .then(function (response) {
                self.$timeout(function () { return self.deployConfirmation(response.data.responseObj.id); }, 1000);
                self.close();
            })
                .catch(function (error) {
                self.GlobalServices.DisplayError(error.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        TemplateWizardController.prototype.deployConfirmation = function (templateId) {
            var self = this;
            var deployServiceConfirmModal = self.Modal({
                title: self.$translate.instant('TEMPLATES_CREATE_TEMPLATE_WIZARD_TemplateSuccessfullyPublished'),
                onHelp: function () {
                    self.GlobalServices.showHelp();
                },
                titleIcon: "text-success ci-health-floating-check",
                modalSize: 'modal-lg',
                templateUrl: 'views/services/deployservice/confirmdeployservicemodal.html',
                controller: 'ConfirmDeployServiceModalController as confirmDeployServiceModalController',
                params: {
                    templateId: templateId
                },
                onCancel: function () {
                    self.close();
                },
                onComplete: function () {
                    self.close();
                }
            });
            deployServiceConfirmModal.modal.show();
        };
        TemplateWizardController.prototype.cancel = function () {
            var self = this;
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('TEMPLATES_CREATE_TEMPLATE_WIZARD_Cancel'))
                .then(function () { return self.$scope.modal.cancel(); });
        };
        TemplateWizardController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        TemplateWizardController.$inject = ['$scope', 'Modal', 'Dialog', '$http',
            '$translate', 'Commands', 'GlobalServices', 'Loading', '$q', "$timeout", "FileUploader", "$location", "$filter", "$rootScope"];
        return TemplateWizardController;
    }());
    asm.TemplateWizardController = TemplateWizardController;
    angular
        .module('app')
        .controller('TemplateWizardController', TemplateWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=templateWizard.js.map
var asm;
(function (asm) {
    var TestModalController = (function () {
        function TestModalController($scope, Modal, Dialog) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.jobs = $scope.modal.params.jobs;
        }
        TestModalController.$inject = ['$scope', 'Modal', 'Dialog'];
        return TestModalController;
    }());
    asm.TestModalController = TestModalController;
    angular
        .module('app')
        .controller('TestModalController', TestModalController);
})(asm || (asm = {}));
//# sourceMappingURL=testModal.js.map
var asm;
(function (asm) {
    var UpdateDeviceFirmwareModalController = (function () {
        function UpdateDeviceFirmwareModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, $translate, constants, commands, $location, $filter) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.$translate = $translate;
            this.constants = constants;
            this.commands = commands;
            this.$location = $location;
            this.$filter = $filter;
            //public helpUrl: ASM.urlConfig.help.resourcesupdatingfirmware,
            this.scheduletype = "updatenow";
            this.updateEstimate = '';
            this.now_CancelMaintenance = false;
            this.scheduled_CancelMaintenance = false;
            this.enteredDate = moment(new Date()).format('YYYY-MM-DD');
            this.enteredHour = '01';
            this.enteredMinute = '00';
            this.enteredMeridiem = 'a';
            this.hoursList = [];
            this.minutesList = [];
            this.confirmMessage = '';
            this.confirmIsAlert = false;
            this.confirmCallbackTrue = null;
            this.confirmCallbackFalse = null;
            //public devices: new Collection([], { model: Device });
            this.devices = [];
            this.deviceType = '';
            this.isUpdated = false;
            this.id = '';
            this.datePicker = {
                options: {
                    format: "L hh:mm A",
                    minDate: moment(),
                },
                selectedDate: moment().add(1, 'hour'),
            };
            this.jobRequest = {
                requestObj: {
                    idList: [],
                    scheduleType: 'updatenow',
                    exitMaintenanceMode: false,
                    scheduleDate: moment()
                }
            };
            this.submitted = false;
            this.errors = new Array();
            var self = this;
            self.resource = $scope.modal.params.resource;
            //            self.devices = $scope.modal.params.ids != undefined ? $scope.modal.params.ids : $scope.modal.params.resource.id;
            self.devices = [];
            self.update();
        }
        UpdateDeviceFirmwareModalController.prototype.update = function () {
            var self = this;
            //Fill the "Time" arrays.
            self.hoursList = [];
            self.minutesList = [];
            for (var c = 0; c < 60; c++) {
                var value = '00' + c;
                value = value.substr(value.length - 2);
                if (c > 0 && c < 13)
                    self.hoursList.push(value);
                self.minutesList.push(value);
            }
            if (self.resource) {
                self.devices.push(self.resource.id);
            }
            if (self.resource && self.devices.length > 0) {
                if (self.GlobalServices.IsDeviceType(self.resource.deviceType, "Server")) {
                    self.deviceType = 'Server';
                }
                if (self.GlobalServices.IsDeviceType(self.resource.deviceType, "Chassis")) {
                    self.deviceType = 'Chassis';
                }
                if (self.GlobalServices.IsDeviceType(self.resource.deviceType, "Switch")) {
                    self.deviceType = 'Switch';
                }
            }
        };
        UpdateDeviceFirmwareModalController.prototype.updateScheduleDate = function () {
            var self = this;
            var dateString = self.enteredDate;
            var timeWeekly = self.enteredHour + ':' + self.enteredMinute;
            var ampm = self.enteredMeridiem;
            var isotimeWeekly = moment(dateString + 'T' + timeWeekly + ampm, "YYYY-MM-DDThh:mmA").toDate();
            var scheduleDate = moment(isotimeWeekly) != undefined ? moment(isotimeWeekly).toISOString() : '';
            self.scheduledate = scheduleDate;
        };
        UpdateDeviceFirmwareModalController.prototype.submit = function () {
            var self = this;
            var d = self.$q.defer();
            //    var valid = true;
            self.submitted = true;
            //    var request = new UpdateDeviceFirmwareRequest();
            var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('UPDATE_SERVICE_FIRMWARE_Confirmation'));
            confirm.then(function () {
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.jobRequest.requestObj.scheduleType = self.scheduletype;
                if (self.jobRequest.requestObj.scheduleType == "updatenow") {
                    self.jobRequest.requestObj.exitMaintenanceMode = true;
                }
                if (self.jobRequest.requestObj.scheduleType == "schedule") {
                    self.jobRequest.requestObj.exitMaintenanceMode = false;
                    if (self.datePicker.selectedDate) {
                        self.validDate = moment().isBefore(self.datePicker.selectedDate.toISOString());
                        if (!self.validDate) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                else {
                    //scheduleType = nextreboot
                    self.jobRequest.requestObj.exitMaintenanceMode = false;
                }
                self.jobRequest.requestObj.scheduleDate = self.jobRequest.requestObj.scheduleType === "schedule" ? self.datePicker.selectedDate.toISOString() : null;
                self.jobRequest.requestObj.idList = self.devices;
                //$.each(self.devices, function (idx, d) { selectedDevices.push(d.id); });
                self.$http.post(self.commands.data.devices.updatedevicefirmware, self.jobRequest.requestObj)
                    .then(function (data) {
                    self.$scope.modal.close();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                }).finally(function () { return d.resolve(); });
            });
        };
        UpdateDeviceFirmwareModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UpdateDeviceFirmwareModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', '$translate', 'constants', 'Commands', '$location', '$filter'];
        return UpdateDeviceFirmwareModalController;
    }());
    asm.UpdateDeviceFirmwareModalController = UpdateDeviceFirmwareModalController;
    angular
        .module('app')
        .controller('UpdateDeviceFirmwareModalController', UpdateDeviceFirmwareModalController);
})(asm || (asm = {}));
//# sourceMappingURL=updatedevicefirmwareModal.js.map
var asm;
(function (asm) {
    var UploadTemplateModalController = (function () {
        function UploadTemplateModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, Commands, $translate, constants, $location, $filter) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.Commands = Commands;
            this.$translate = $translate;
            this.constants = constants;
            this.$location = $location;
            this.$filter = $filter;
            this.forms = { step1: {}, step2: {} };
            this.template = {
                "id": null,
                "templateName": null,
                "description": "",
                "cloneexistingtemplateid": null,
                "category": null,
                "manageFirmware": false,
                "firmwarePackageId": null,
                "updateServerFirmware": false,
                "updateNetworkFirmware": false,
                "updateStorageFirmware": false,
                "enableApps": false,
                "enableVMs": false,
                "enableCluster": false,
                "enableServer": false,
                "enableStorage": false,
                "allStandardUsers": false,
                "assignedUsers": [],
                "configureTemplateConfiguration": {},
                "useEncPwdFromBackup": true,
                "encryptionPassword": "",
            };
            this.categories = new Array();
            this.firmwares = new Array();
            this.errors = new Array();
            this.useEncPwdFromBackup = true;
            this.credentials = [];
            var self = this;
            var uploader = $scope.uploader = new FileUploader({
                url: self.Commands.data.templates.uploadTemplates
            });
            self.activate();
        }
        UploadTemplateModalController.prototype.activate = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.setFileUploadWatcher();
            self.Loading(self.$http.post(self.Commands.data.templates.getTemplateList, {})
                .then(function (data) {
                self.templates = self.$filter('filter')(data.data.responseObj, { 'isLocked': false }, true);
                self.loadTemplateInfo = true;
            }));
        };
        UploadTemplateModalController.prototype.setFileUploadWatcher = function () {
            var self = this;
            //set file form element to value of file (truthy or undefined)
            self.$timeout(function () {
                if (document.getElementById('templatefile')) {
                    document.getElementById('templatefile').onchange = function (evt) {
                        var element = angular.element(evt.target)[0];
                        self.$timeout(function () { self.fileModel = element.files[0]; });
                    };
                }
                else {
                    self.setFileUploadWatcher();
                }
            }, 1000);
        };
        UploadTemplateModalController.prototype.resetUploader = function () {
            var self = this;
            //clear this for validation
            self.fileModel = undefined;
            //remove file name from input
            var fileInput = document.getElementById("templatefile");
            fileInput.value = "";
            //reset form
            self.forms.step1._submitted = false;
        };
        UploadTemplateModalController.prototype.validateStep1 = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                if (self.forms.step1.$valid) {
                    self.prepForSave();
                    var d = self.$q.defer();
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    //using angular uploader
                    self.$scope.uploader.formData = [];
                    //put encryption properties into template for upload
                    angular.extend(self.template, { encryptionPassword: self.encryptionPassword, useEncPwdFromBackup: self.useEncPwdFromBackup, templateName: self.template.name });
                    self.$scope.uploader.formData.push(self.template);
                    //set error and success callbacks 
                    var error = false;
                    angular.extend(self.$scope.uploader, {
                        onErrorItem: function (fileItem, response, status, headers) {
                            d.resolve();
                            self.GlobalServices.DisplayError(response.data);
                        },
                        onCompleteAll: function (criteriaObj, errorObj, responseObj, responseCode) {
                            d.resolve();
                            //self.close();
                        },
                        onBeforeUploadItem: function (item) {
                            item.formData = angular.copy(item.uploader.formData);
                        },
                        onSuccessItem: function (item, response, status, headers) {
                            self.$scope.uploader.formData = [];
                            d.resolve();
                            if (response.responseCode != 0) {
                                error = true;
                                item.isUploaded = false;
                                self.GlobalServices.DisplayError(response.errorObj, self.errors);
                                self.resetUploader();
                                self.GlobalServices.scrollTo();
                                reject();
                            }
                            else {
                                self.resetUploader();
                                self.template = response.responseObj;
                                //self.template = { "criteriaObj": null, "responseCode": 0, "errorObj": null, "requestObj": null, "responseObj": { "id": null, "name": "TestImport", "description": "", "createdBy": "admin", "createdDate": "2018-05-10T00:11:30.786Z", "updatedBy": "admin", "updatedDate": "2018-05-22T01:14:51.874Z", "draft": true, "components": [{ "id": "b85b70d3-33ab-4566-9d72-023eac627ecc", "name": "VMWare Cluster", "type": "cluster", "subtype": null, "componentid": "component-cluster-vcenter-1", "helptext": null, "relatedcomponents": [{ "id": "c7bd44c9-f378-4db1-92f1-b25ab7b5aebf", "name": "Server", "installOrder": null, "subtype": null }], "categories": [{ "id": "asm::cluster", "name": "Cluster Settings", "settings": [{ "id": "asm_guid", "value": "vcenter-100.68.107.66", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Target Virtual Machine Manager", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "vcenter-100.68.107.65", "name": "aer11-vcsa-mgmt.asm.delllabs.net", "dependencyTarget": null, "dependencyValue": null }, { "id": "vcenter-100.68.107.66", "name": "aer11-cvcsa.asm.delllabs.net", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "datacenter", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Data Center Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create New Datacenter...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aer11-dc2", "name": "aer11-dc2", "dependencyTarget": "asm_guid", "dependencyValue": "vcenter-100.68.107.66" }, { "id": "VXRC-Datacenter", "name": "VXRC-Datacenter", "dependencyTarget": "asm_guid", "dependencyValue": "vcenter-100.68.107.65" }], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$datacenter", "value": "aer11-dc2", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New datacenter name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "datacenter", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "cluster", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Cluster Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create New Cluster...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aer11-cluster2", "name": "aer11-cluster2", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "VXRC-Cluster", "name": "VXRC-Cluster", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$cluster", "value": "aer11-cluster2", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New cluster name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "cluster", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_enabled", "value": "distributed", "datatype": "radio", "componentid": "component-cluster-vcenter-1", "name": "Switch Type", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "distributed", "name": "Distributed", "dependencyTarget": null, "dependencyValue": null }, { "id": "standard", "name": "Standard", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ha_config", "value": "false", "datatype": "boolean", "componentid": "component-cluster-vcenter-1", "name": "Cluster HA Enabled", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "cluster", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "drs_config", "value": "false", "datatype": "boolean", "componentid": "component-cluster-vcenter-1", "name": "Cluster DRS Enabled", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "cluster", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "sdrs_config", "value": "false", "datatype": "boolean", "componentid": "component-cluster-vcenter-1", "name": "Storage DRS Enabled", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "sdrs_name", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "Storage Cluster Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "sdrs_config", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "sdrs_members", "value": null, "datatype": "list", "componentid": "component-cluster-vcenter-1", "name": "Datastores to Add to Cluster:", "tooltip": "ASM only supports creating SDRS clusters when new storage volumes are created.If you select an existing volume for one or more of your storage components you will not see those existing volumes in the Datastores to Add to Cluster field.", "required": true, "min": 0, "max": 0, "multiple": true, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "sdrs_config", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }, { "id": "asm::cluster::scaleio", "name": "ScaleIO Settings", "settings": [{ "id": "scaleio_gateway_id", "value": "scaleio-100.68.107.252", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Target ScaleIO Gateway", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "scaleio-100.68.107.252", "name": "scaleio-100.68.107.252", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "protection_domain_type", "value": "auto_generate", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Protection Domain Name", "tooltip": "This selection determines how the name will be specified for your ScaleIO protection domain.<br/><br/>Auto generate protection domain name â use variables that will produce a unique protection domain name.<br/>Possible variables include:<br/>${num} â An auto-generated unique number</br>${esxiClusterName} â Name specified for the ESXi cluster<br/><br/>Specify a new protection domain name now â User enters desired ScaleIO protection domain name.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "auto_generate", "name": "Auto generate protection domain name (Recommended)...", "dependencyTarget": null, "dependencyValue": null }, { "id": "specify", "name": "Specify a new protection domain name now...", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "protection_domain_name_template", "value": "${esxiClusterName}-PD-${num}", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "Protection Domain Name Template", "tooltip": "Use the protection domain name template field to to auto generate the protection domain name.<br/><br/>Possible variables include:<br/>${num} â An auto-generated unique number<br/>${esxiClusterName} â Name specified for the ESXi cluster<br/><br/>Use of the ${num} variable is required to ensure uniqueness.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "protection_domain_type", "dependencyValue": "auto_generate", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "protection_domain_new_name", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Protection Domain Name", "tooltip": "User enters desired ScaleIO protection domain name. ", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "protection_domain_type", "dependencyValue": "specify", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "storage_pool_name_template", "value": "${esxiClusterName}-SP-${diskType}-${num}", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "Storage Pool Name Template", "tooltip": "Use the storage pool name template field to auto-generate the names that will be used for your storage pools. Storage pools are dynamically created based on the quantity and type of drives in your servers.<br/><br/>Allowed variables are:<br/>${num} â An auto-generated unique number<br/>${esxiClusterName} â Name specified for the ESXi cluster<br/>${protectionDomainName} â Name specified for ScaleIO Protection Domain<br/>${diskType} â Type of disk used for storage pool (SSD or HDD)<br/><br/>Use of the ${num} variable is required to ensure uniqueness.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "num_of_volumes", "value": "1", "datatype": "number", "componentid": "component-cluster-vcenter-1", "name": "Number of volumes to be created", "tooltip": "Number specified will be used to create ScaleIO volumes on the protection domain previously specified in the template. These volumes will be distributed across any/all storage pools created. Additionally, ESXi datastores will be created for each of the volumes specified.", "required": true, "min": 1, "max": 32768, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "volume_name_template", "value": "${esxiClusterName}-DS-${diskType}-${num}", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "Volume Name Template", "tooltip": "Use the volume name template field to auto-generate the volume names that will be used for your volume names.  Template must contain variables that will produce a unique name.<br/><br/>Allowed variables are:<br/>${num} â An auto-generated unique number<br/>${esxiClusterName} â Name specified for the ESXi cluster<br/>${protectionDomainName} â Name specified for ScaleIO Protection Domain<br/>${storagePoolName} â Name specified for ScaleIO storage pool<br/> ${diskType} â Type of disk used for storage pool the volume/datastore is created on (SSD or HDD)<br/><br/>Use of the ${num} variable is required to ensure uniqueness.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "scaleio::generated_protection_domain_settings", "value": "", "datatype": "protectiondomainsettings", "componentid": "component-cluster-vcenter-1", "name": "Generated Protection Domain Settings", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "ip_source", "value": "automatic", "datatype": "radio", "componentid": "component-cluster-vcenter-1", "name": "VxFlex OS MDM Virtual IP Source", "tooltip": "Virtual IP addresses used for MDM communication. Virtual IP addresses will be added to each MDM Data 1 and Data 2 networks.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "automatic", "name": "VxFlex Manager Selected IP", "dependencyTarget": null, "dependencyValue": null }, { "id": "manual", "name": "User Entered IP", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "static_ip_source:vcesys-sio-data2", "value": "automatic", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-sio-data2 IP Source", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "automatic", "name": "VxFlex Manager Selected IP", "dependencyTarget": null, "dependencyValue": null }, { "id": "manual", "name": "Manual Entry", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "ip_source", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "static_ip_value:vcesys-sio-data2", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "vcesys-sio-data2 IP Address", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "static_ip_source:vcesys-sio-data2", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "static_ip_source:vcesys-sio-data1", "value": "automatic", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-sio-data1 IP Source", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "automatic", "name": "VxFlex Manager Selected IP", "dependencyTarget": null, "dependencyValue": null }, { "id": "manual", "name": "Manual Entry", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "ip_source", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "static_ip_value:vcesys-sio-data1", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "vcesys-sio-data1 IP Address", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "static_ip_source:vcesys-sio-data1", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }, { "id": "asm::cluster::vds", "name": "vSphere VDS Settings", "settings": [{ "id": "vds_name", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create VDS Name ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aer11-vds1", "name": "aer11-vds1", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "aer11-vds2", "name": "aer11-vds2", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "aer11-vds3", "name": "aer11-vds3", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "dvswitch3", "name": "dvswitch3", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch0", "name": "VXMA_dvswitch0", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch1", "name": "VXMA_dvswitch1", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch2", "name": "VXMA_dvswitch2", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_name", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_name", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aer11-esxmgmt", "name": "aer11-esxmgmt", "dependencyTarget": "vds_name", "dependencyValue": "aer11-vds2" }, { "id": "aer11-pxe", "name": "aer11-pxe", "dependencyTarget": "vds_name", "dependencyValue": "aer11-vds2" }, { "id": "aer11-siodata1", "name": "aer11-siodata1", "dependencyTarget": "vds_name", "dependencyValue": "aer11-vds3" }, { "id": "aer11-siodata2", "name": "aer11-siodata2", "dependencyTarget": "vds_name", "dependencyValue": "aer11-vds1" }, { "id": "aer11-siomgmt", "name": "aer11-siomgmt", "dependencyTarget": "vds_name", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds1-uplink-pg", "name": "aer11-vds1-uplink-pg", "dependencyTarget": "vds_name", "dependencyValue": "aer11-vds1" }, { "id": "aer11-vds2-uplink-pg", "name": "aer11-vds2-uplink-pg", "dependencyTarget": "vds_name", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds3-uplink-pg", "name": "aer11-vds3-uplink-pg", "dependencyTarget": "vds_name", "dependencyValue": "aer11-vds3" }, { "id": "aer11-vmotion", "name": "aer11-vmotion", "dependencyTarget": "vds_name", "dependencyValue": "aer11-vds2" }, { "id": "dvswitch3-DVUplinks-21", "name": "dvswitch3-DVUplinks-21", "dependencyTarget": "vds_name", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi", "name": "legacy-iscsi", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi-16", "name": "legacy-iscsi-16", "dependencyTarget": "vds_name", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi1", "name": "legacy-iscsi1", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi1-16", "name": "legacy-iscsi1-16", "dependencyTarget": "vds_name", "dependencyValue": "dvswitch3" }, { "id": "oob_mgmt", "name": "oob_mgmt", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch2" }, { "id": "vcesys-customer", "name": "vcesys-customer", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-esx-mgmt", "name": "vcesys-esx-mgmt", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-sio-data1", "name": "vcesys-sio-data1", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2", "name": "vcesys-sio-data2", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2-GS", "name": "vcesys-sio-data2-GS", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-mgmt", "name": "vcesys-sio-mgmt", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-vmotion", "name": "vcesys-vmotion", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-vsan", "name": "vcesys-vsan", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesystmp", "name": "vcesystmp", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch0-DVUplinks-7", "name": "VXMA_dvswitch0-DVUplinks-7", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch1-DVUplinks-9", "name": "VXMA_dvswitch1-DVUplinks-9", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "VXMA_dvswitch2-DVUplinks-11", "name": "VXMA_dvswitch2-DVUplinks-11", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch2" }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_name::ff8080816347538301634759d18a00cf", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create VDS Name ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aer11-vds1", "name": "aer11-vds1", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "aer11-vds2", "name": "aer11-vds2", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "aer11-vds3", "name": "aer11-vds3", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "dvswitch3", "name": "dvswitch3", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch0", "name": "VXMA_dvswitch0", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch1", "name": "VXMA_dvswitch1", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch2", "name": "VXMA_dvswitch2", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_name::ff8080816347538301634759d18a00cf", "value": "aer11-vds1", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff8080816347538301634759d18a00cf::ff8080816347538301634759d18a00cf::1", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-sio-data2 Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": null }, { "id": "aer11-esxmgmt", "name": "aer11-esxmgmt", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "aer11-vds2" }, { "id": "aer11-pxe", "name": "aer11-pxe", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "aer11-vds2" }, { "id": "aer11-siodata1", "name": "aer11-siodata1", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "aer11-vds3" }, { "id": "aer11-siodata2", "name": "aer11-siodata2", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "aer11-vds1" }, { "id": "aer11-siomgmt", "name": "aer11-siomgmt", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds1-uplink-pg", "name": "aer11-vds1-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "aer11-vds1" }, { "id": "aer11-vds2-uplink-pg", "name": "aer11-vds2-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds3-uplink-pg", "name": "aer11-vds3-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "aer11-vds3" }, { "id": "aer11-vmotion", "name": "aer11-vmotion", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "aer11-vds2" }, { "id": "dvswitch3-DVUplinks-21", "name": "dvswitch3-DVUplinks-21", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi", "name": "legacy-iscsi", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi-16", "name": "legacy-iscsi-16", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi1", "name": "legacy-iscsi1", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi1-16", "name": "legacy-iscsi1-16", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "dvswitch3" }, { "id": "oob_mgmt", "name": "oob_mgmt", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch2" }, { "id": "vcesys-customer", "name": "vcesys-customer", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-esx-mgmt", "name": "vcesys-esx-mgmt", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-sio-data1", "name": "vcesys-sio-data1", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2", "name": "vcesys-sio-data2", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2-GS", "name": "vcesys-sio-data2-GS", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-mgmt", "name": "vcesys-sio-mgmt", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-vmotion", "name": "vcesys-vmotion", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-vsan", "name": "vcesys-vsan", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesystmp", "name": "vcesystmp", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch0-DVUplinks-7", "name": "VXMA_dvswitch0-DVUplinks-7", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch1-DVUplinks-9", "name": "VXMA_dvswitch1-DVUplinks-9", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch1" }, { "id": "VXMA_dvswitch2-DVUplinks-11", "name": "VXMA_dvswitch2-DVUplinks-11", "dependencyTarget": "vds_name::ff8080816347538301634759d18a00cf", "dependencyValue": "VXMA_dvswitch2" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff8080816347538301634759d18a00cf::ff8080816347538301634759d18a00cf::1", "value": "aer11-siodata2", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff8080816347538301634759d18a00cf::ff8080816347538301634759d18a00cf::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 1", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "VDS Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create VDS Name ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aer11-vds1", "name": "aer11-vds1", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "aer11-vds2", "name": "aer11-vds2", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "aer11-vds3", "name": "aer11-vds3", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "dvswitch3", "name": "dvswitch3", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch0", "name": "VXMA_dvswitch0", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch1", "name": "VXMA_dvswitch1", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch2", "name": "VXMA_dvswitch2", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "value": "aer11-vds2", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New VDS Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff8080816347538301634757f0010023::1", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-esx-mgmt Port Group", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": null }, { "id": "aer11-esxmgmt", "name": "aer11-esxmgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-pxe", "name": "aer11-pxe", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-siodata1", "name": "aer11-siodata1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds3" }, { "id": "aer11-siodata2", "name": "aer11-siodata2", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds1" }, { "id": "aer11-siomgmt", "name": "aer11-siomgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds1-uplink-pg", "name": "aer11-vds1-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds1" }, { "id": "aer11-vds2-uplink-pg", "name": "aer11-vds2-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds3-uplink-pg", "name": "aer11-vds3-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds3" }, { "id": "aer11-vmotion", "name": "aer11-vmotion", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "dvswitch3-DVUplinks-21", "name": "dvswitch3-DVUplinks-21", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi", "name": "legacy-iscsi", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi-16", "name": "legacy-iscsi-16", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi1", "name": "legacy-iscsi1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi1-16", "name": "legacy-iscsi1-16", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "oob_mgmt", "name": "oob_mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch2" }, { "id": "vcesys-customer", "name": "vcesys-customer", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-esx-mgmt", "name": "vcesys-esx-mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-sio-data1", "name": "vcesys-sio-data1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2", "name": "vcesys-sio-data2", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2-GS", "name": "vcesys-sio-data2-GS", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-mgmt", "name": "vcesys-sio-mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-vmotion", "name": "vcesys-vmotion", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-vsan", "name": "vcesys-vsan", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesystmp", "name": "vcesystmp", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch0-DVUplinks-7", "name": "VXMA_dvswitch0-DVUplinks-7", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch1-DVUplinks-9", "name": "VXMA_dvswitch1-DVUplinks-9", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "VXMA_dvswitch2-DVUplinks-11", "name": "VXMA_dvswitch2-DVUplinks-11", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch2" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff8080816347538301634757f0010023::1", "value": "aer11-esxmgmt", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff8080816347538301634757f0010023::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff808081634753830163475851f90035::1", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-os-installation Port Group", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": null }, { "id": "aer11-esxmgmt", "name": "aer11-esxmgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-pxe", "name": "aer11-pxe", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-siodata1", "name": "aer11-siodata1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds3" }, { "id": "aer11-siodata2", "name": "aer11-siodata2", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds1" }, { "id": "aer11-siomgmt", "name": "aer11-siomgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds1-uplink-pg", "name": "aer11-vds1-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds1" }, { "id": "aer11-vds2-uplink-pg", "name": "aer11-vds2-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds3-uplink-pg", "name": "aer11-vds3-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds3" }, { "id": "aer11-vmotion", "name": "aer11-vmotion", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "dvswitch3-DVUplinks-21", "name": "dvswitch3-DVUplinks-21", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi", "name": "legacy-iscsi", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi-16", "name": "legacy-iscsi-16", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi1", "name": "legacy-iscsi1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi1-16", "name": "legacy-iscsi1-16", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "oob_mgmt", "name": "oob_mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch2" }, { "id": "vcesys-customer", "name": "vcesys-customer", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-esx-mgmt", "name": "vcesys-esx-mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-sio-data1", "name": "vcesys-sio-data1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2", "name": "vcesys-sio-data2", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2-GS", "name": "vcesys-sio-data2-GS", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-mgmt", "name": "vcesys-sio-mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-vmotion", "name": "vcesys-vmotion", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-vsan", "name": "vcesys-vsan", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesystmp", "name": "vcesystmp", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch0-DVUplinks-7", "name": "VXMA_dvswitch0-DVUplinks-7", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch1-DVUplinks-9", "name": "VXMA_dvswitch1-DVUplinks-9", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "VXMA_dvswitch2-DVUplinks-11", "name": "VXMA_dvswitch2-DVUplinks-11", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch2" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff808081634753830163475851f90035::1", "value": "aer11-pxe", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff808081634753830163475851f90035::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff808081634753830163475b17370168::1", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-sio-mgmt Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": null }, { "id": "aer11-esxmgmt", "name": "aer11-esxmgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-pxe", "name": "aer11-pxe", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-siodata1", "name": "aer11-siodata1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds3" }, { "id": "aer11-siodata2", "name": "aer11-siodata2", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds1" }, { "id": "aer11-siomgmt", "name": "aer11-siomgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds1-uplink-pg", "name": "aer11-vds1-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds1" }, { "id": "aer11-vds2-uplink-pg", "name": "aer11-vds2-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds3-uplink-pg", "name": "aer11-vds3-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds3" }, { "id": "aer11-vmotion", "name": "aer11-vmotion", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "dvswitch3-DVUplinks-21", "name": "dvswitch3-DVUplinks-21", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi", "name": "legacy-iscsi", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi-16", "name": "legacy-iscsi-16", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi1", "name": "legacy-iscsi1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi1-16", "name": "legacy-iscsi1-16", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "oob_mgmt", "name": "oob_mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch2" }, { "id": "vcesys-customer", "name": "vcesys-customer", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-esx-mgmt", "name": "vcesys-esx-mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-sio-data1", "name": "vcesys-sio-data1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2", "name": "vcesys-sio-data2", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2-GS", "name": "vcesys-sio-data2-GS", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-mgmt", "name": "vcesys-sio-mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-vmotion", "name": "vcesys-vmotion", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-vsan", "name": "vcesys-vsan", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesystmp", "name": "vcesystmp", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch0-DVUplinks-7", "name": "VXMA_dvswitch0-DVUplinks-7", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch1-DVUplinks-9", "name": "VXMA_dvswitch1-DVUplinks-9", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "VXMA_dvswitch2-DVUplinks-11", "name": "VXMA_dvswitch2-DVUplinks-11", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch2" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff808081634753830163475b17370168::1", "value": "aer11-siomgmt", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff808081634753830163475b17370168::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff808081634753830163475becf901a6::1", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-vmotion Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": null }, { "id": "aer11-esxmgmt", "name": "aer11-esxmgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-pxe", "name": "aer11-pxe", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-siodata1", "name": "aer11-siodata1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds3" }, { "id": "aer11-siodata2", "name": "aer11-siodata2", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds1" }, { "id": "aer11-siomgmt", "name": "aer11-siomgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds1-uplink-pg", "name": "aer11-vds1-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds1" }, { "id": "aer11-vds2-uplink-pg", "name": "aer11-vds2-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds3-uplink-pg", "name": "aer11-vds3-uplink-pg", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds3" }, { "id": "aer11-vmotion", "name": "aer11-vmotion", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "aer11-vds2" }, { "id": "dvswitch3-DVUplinks-21", "name": "dvswitch3-DVUplinks-21", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi", "name": "legacy-iscsi", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi-16", "name": "legacy-iscsi-16", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi1", "name": "legacy-iscsi1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi1-16", "name": "legacy-iscsi1-16", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "dvswitch3" }, { "id": "oob_mgmt", "name": "oob_mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch2" }, { "id": "vcesys-customer", "name": "vcesys-customer", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-esx-mgmt", "name": "vcesys-esx-mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-sio-data1", "name": "vcesys-sio-data1", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2", "name": "vcesys-sio-data2", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2-GS", "name": "vcesys-sio-data2-GS", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-mgmt", "name": "vcesys-sio-mgmt", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-vmotion", "name": "vcesys-vmotion", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-vsan", "name": "vcesys-vsan", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesystmp", "name": "vcesystmp", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch0-DVUplinks-7", "name": "VXMA_dvswitch0-DVUplinks-7", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch1-DVUplinks-9", "name": "VXMA_dvswitch1-DVUplinks-9", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch1" }, { "id": "VXMA_dvswitch2-DVUplinks-11", "name": "VXMA_dvswitch2-DVUplinks-11", "dependencyTarget": "vds_name::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6", "dependencyValue": "VXMA_dvswitch2" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff808081634753830163475becf901a6::1", "value": "aer11-vmotion", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff8080816347538301634757f0010023:ff808081634753830163475851f90035:ff808081634753830163475b17370168:ff808081634753830163475becf901a6::ff808081634753830163475becf901a6::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 2", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_name::ff80808163475383016347591ea30036", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create VDS Name ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aer11-vds1", "name": "aer11-vds1", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "aer11-vds2", "name": "aer11-vds2", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "aer11-vds3", "name": "aer11-vds3", "dependencyTarget": "datacenter", "dependencyValue": "aer11-dc2" }, { "id": "dvswitch3", "name": "dvswitch3", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch0", "name": "VXMA_dvswitch0", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch1", "name": "VXMA_dvswitch1", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "VXMA_dvswitch2", "name": "VXMA_dvswitch2", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 3", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_name::ff80808163475383016347591ea30036", "value": "aer11-vds3", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 3", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg::ff80808163475383016347591ea30036::ff80808163475383016347591ea30036::1", "value": "$new$", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "vcesys-sio-data1 Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": null }, { "id": "aer11-esxmgmt", "name": "aer11-esxmgmt", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "aer11-vds2" }, { "id": "aer11-pxe", "name": "aer11-pxe", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "aer11-vds2" }, { "id": "aer11-siodata1", "name": "aer11-siodata1", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "aer11-vds3" }, { "id": "aer11-siodata2", "name": "aer11-siodata2", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "aer11-vds1" }, { "id": "aer11-siomgmt", "name": "aer11-siomgmt", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds1-uplink-pg", "name": "aer11-vds1-uplink-pg", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "aer11-vds1" }, { "id": "aer11-vds2-uplink-pg", "name": "aer11-vds2-uplink-pg", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "aer11-vds2" }, { "id": "aer11-vds3-uplink-pg", "name": "aer11-vds3-uplink-pg", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "aer11-vds3" }, { "id": "aer11-vmotion", "name": "aer11-vmotion", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "aer11-vds2" }, { "id": "dvswitch3-DVUplinks-21", "name": "dvswitch3-DVUplinks-21", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi", "name": "legacy-iscsi", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi-16", "name": "legacy-iscsi-16", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "dvswitch3" }, { "id": "legacy-iscsi1", "name": "legacy-iscsi1", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-iscsi1-16", "name": "legacy-iscsi1-16", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "dvswitch3" }, { "id": "oob_mgmt", "name": "oob_mgmt", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch2" }, { "id": "vcesys-customer", "name": "vcesys-customer", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-esx-mgmt", "name": "vcesys-esx-mgmt", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-sio-data1", "name": "vcesys-sio-data1", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2", "name": "vcesys-sio-data2", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data2-GS", "name": "vcesys-sio-data2-GS", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-mgmt", "name": "vcesys-sio-mgmt", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-vmotion", "name": "vcesys-vmotion", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-vsan", "name": "vcesys-vsan", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesystmp", "name": "vcesystmp", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch0-DVUplinks-7", "name": "VXMA_dvswitch0-DVUplinks-7", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch0" }, { "id": "VXMA_dvswitch1-DVUplinks-9", "name": "VXMA_dvswitch1-DVUplinks-9", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch1" }, { "id": "VXMA_dvswitch2-DVUplinks-11", "name": "VXMA_dvswitch2-DVUplinks-11", "dependencyTarget": "vds_name::ff80808163475383016347591ea30036", "dependencyValue": "VXMA_dvswitch2" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS 3", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg::ff80808163475383016347591ea30036::ff80808163475383016347591ea30036::1", "value": "aer11-siodata1", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg::ff80808163475383016347591ea30036::ff80808163475383016347591ea30036::1", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS 3", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": null, "network": null, "newComponent": null, "cloned": false, "continueClicked": null, "AsmGUID": null, "puppetCertName": null, "clonedFromId": null, "allowClone": false, "isComponentValid": true, "raid": null, "configfilename": null, "instances": 1 }, { "id": "c7bd44c9-f378-4db1-92f1-b25ab7b5aebf", "name": "Server", "type": "server", "subtype": "HYPERVISOR", "componentid": "component-server-1", "helptext": null, "relatedcomponents": [{ "id": "b85b70d3-33ab-4566-9d72-023eac627ecc", "name": "VMWare Cluster", "installOrder": null, "subtype": null }], "categories": [{ "id": "asm::server", "name": "OS Settings", "settings": [{ "id": "generate_host_name", "value": "true", "datatype": "boolean", "componentid": "component-server-1", "name": "Auto-generate Host Name", "tooltip": "Use the Host Name Template field to auto-generate host names at deployment time. If not selected, a unique host name will be requested when the template is deployed.", "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "target_boot_device", "dependencyValue": "LOCAL_FLASH_STORAGE,HD,SD,SD_WITH_RAID_VSAN,SD_WITH_RAID,AHCI_VSAN,LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "os_host_name_template", "value": "aer11-host-c${num}", "datatype": "string", "componentid": "component-server-1", "name": "Host Name Template", "tooltip": "Template used to generate host names at deployment time. Must contain variables that will produce a unique host name. Allowed variables  are ${num} (an auto-generated unique number), ${service_tag}, ${model}, ${vendor} and ${dns} (ASM-assigned static IP will be resolved to hostname by DNS lookup).", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "generate_host_name", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "os_host_name", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Host Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "generate_host_name", "dependencyValue": "false", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "os_image_type", "value": "vmware_esxi", "datatype": "enum", "componentid": "component-server-1", "name": "OS Image Type", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "target_boot_device", "dependencyValue": "LOCAL_FLASH_STORAGE,SD,SD_WITH_RAID,SD_WITH_RAID_VSAN,HD,AHCI_VSAN,LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "razor_image", "value": "esxi-6.0", "datatype": "enum", "componentid": "component-server-1", "name": "OS Image", "tooltip": "Location of OS image installation files", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "esxi-6.0", "name": "esxi-6.0", "dependencyTarget": null, "dependencyValue": null }, { "id": "esxi-6.5", "name": "esxi-6.5", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "target_boot_device", "dependencyValue": "LOCAL_FLASH_STORAGE,SD,SD_WITH_RAID,SD_WITH_RAID_VSAN,HD,AHCI_VSAN,LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "hyperv_install", "value": "false", "datatype": "boolean", "componentid": "component-server-1", "name": "Install HyperV", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "os_image_version", "value": "", "datatype": "enum", "componentid": "component-server-1", "name": "OS Image Version", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "admin_password", "value": "", "datatype": "password", "componentid": "component-server-1", "name": "Administrator password", "tooltip": "OS administrator password set on the installed OS", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "target_boot_device", "dependencyValue": "LOCAL_FLASH_STORAGE,SD,SD_WITH_RAID,SD_WITH_RAID_VSAN,HD,AHCI_VSAN,LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "admin_confirm_password", "value": "", "datatype": "password", "componentid": "component-server-1", "name": "Confirm administrator password", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "target_boot_device", "dependencyValue": "LOCAL_FLASH_STORAGE,SD,SD_WITH_RAID,SD_WITH_RAID_VSAN,HD,AHCI_VSAN,LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "product_key", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Product Key", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "timezone", "value": "Central Standard Time", "datatype": "enum", "componentid": "component-server-1", "name": "Timezone", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "A.U.S. Central Standard Time", "name": "(GMT+09:30) Darwin", "dependencyTarget": null, "dependencyValue": null }, { "id": "A.U.S. Eastern Standard Time", "name": "(GMT+10:00) Canberra, Melbourne, Sydney", "dependencyTarget": null, "dependencyValue": null }, { "id": "Alaskan Standard Time", "name": "(GMT-09:00) Alaska", "dependencyTarget": null, "dependencyValue": null }, { "id": "Arab Standard Time", "name": "(GMT+03:00) Kuwait, Riyadh", "dependencyTarget": null, "dependencyValue": null }, { "id": "Arabian Standard Time", "name": "(GMT+04:00) Abu Dhabi, Muscat", "dependencyTarget": null, "dependencyValue": null }, { "id": "Arabic Standard Time", "name": "(GMT+03:00) Baghdad", "dependencyTarget": null, "dependencyValue": null }, { "id": "Atlantic Standard Time", "name": "(GMT-04:00) Atlantic Time (Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "Azores Standard Time", "name": "(GMT-01:00) Azores", "dependencyTarget": null, "dependencyValue": null }, { "id": "Canada Central Standard Time", "name": "(GMT-06:00) Saskatchewan", "dependencyTarget": null, "dependencyValue": null }, { "id": "Cape Verde Standard Time", "name": "(GMT-01:00) Cape Verde Islands", "dependencyTarget": null, "dependencyValue": null }, { "id": "Caucasus Standard Time", "name": "(GMT+04:00) Baku, Tbilisi, Yerevan", "dependencyTarget": null, "dependencyValue": null }, { "id": "Cen. Australia Standard Time", "name": "(GMT+09:30) Adelaide", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central America Standard Time", "name": "(GMT-06:00) Central America", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central Asia Standard Time", "name": "(GMT+06:00) Astana, Dhaka", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central Europe Standard Time", "name": "(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central European Standard Time", "name": "(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central Pacific Standard Time", "name": "(GMT+11:00) Magadan, Solomon Islands, New Caledonia", "dependencyTarget": null, "dependencyValue": null }, { "id": "Central Standard Time", "name": "(GMT-06:00) Central Time (US and Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "China Standard Time", "name": "(GMT+08:00) Beijing, Chongqing, Hong Kong SAR, Urumqi", "dependencyTarget": null, "dependencyValue": null }, { "id": "Dateline Standard Time", "name": "(GMT-12:00) International Date Line West", "dependencyTarget": null, "dependencyValue": null }, { "id": "E. Africa Standard Time", "name": "(GMT+03:00) Nairobi", "dependencyTarget": null, "dependencyValue": null }, { "id": "E. Australia Standard Time", "name": "(GMT+10:00) Brisbane", "dependencyTarget": null, "dependencyValue": null }, { "id": "E. Europe Standard Time", "name": "(GMT+02:00) Bucharest", "dependencyTarget": null, "dependencyValue": null }, { "id": "E. South America Standard Time", "name": "(GMT-03:00) Brasilia", "dependencyTarget": null, "dependencyValue": null }, { "id": "Eastern Standard Time", "name": "(GMT-05:00) Eastern Time (US and Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "Egypt Standard Time", "name": "(GMT+02:00) Cairo", "dependencyTarget": null, "dependencyValue": null }, { "id": "Ekaterinburg Standard Time", "name": "(GMT+05:00) Ekaterinburg", "dependencyTarget": null, "dependencyValue": null }, { "id": "Fiji Islands Standard Time", "name": "(GMT+12:00) Fiji Islands, Kamchatka, Marshall Islands", "dependencyTarget": null, "dependencyValue": null }, { "id": "FLE Standard Time", "name": "(GMT+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius", "dependencyTarget": null, "dependencyValue": null }, { "id": "GMT Standard Time", "name": "(GMT) Greenwich Mean Time: Dublin, Edinburgh, Lisbon, London", "dependencyTarget": null, "dependencyValue": null }, { "id": "Greenland Standard Time", "name": "(GMT-03:00) Greenland", "dependencyTarget": null, "dependencyValue": null }, { "id": "Greenwich Standard Time", "name": "(GMT) Casablanca, Monrovia", "dependencyTarget": null, "dependencyValue": null }, { "id": "GTB Standard Time", "name": "(GMT+02:00) Athens, Istanbul, Minsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "Hawaiian Standard Time", "name": "(GMT-10:00) Hawaii", "dependencyTarget": null, "dependencyValue": null }, { "id": "India Standard Time", "name": "(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi", "dependencyTarget": null, "dependencyValue": null }, { "id": "Iran Standard Time", "name": "(GMT+03:30) Tehran", "dependencyTarget": null, "dependencyValue": null }, { "id": "Israel Standard Time", "name": "(GMT+02:00) Jerusalem", "dependencyTarget": null, "dependencyValue": null }, { "id": "Korea Standard Time", "name": "(GMT+09:00) Seoul", "dependencyTarget": null, "dependencyValue": null }, { "id": "Mexico Standard Time", "name": "(GMT-06:00) Guadalajara, Mexico City, Monterrey", "dependencyTarget": null, "dependencyValue": null }, { "id": "Mexico Standard Time 2", "name": "(GMT-07:00) Chihuahua, La Paz, Mazatlan", "dependencyTarget": null, "dependencyValue": null }, { "id": "Mid-Atlantic Standard Time", "name": "(GMT-02:00) Mid-Atlantic", "dependencyTarget": null, "dependencyValue": null }, { "id": "Mountain Standard Time", "name": "(GMT-07:00) Mountain Time (US and Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "Myanmar Standard Time", "name": "(GMT+06:30) Yangon Rangoon", "dependencyTarget": null, "dependencyValue": null }, { "id": "N. Central Asia Standard Time", "name": "(GMT+06:00) Almaty, Novosibirsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "Nepal Standard Time", "name": "(GMT+05:45) Kathmandu", "dependencyTarget": null, "dependencyValue": null }, { "id": "New Zealand Standard Time", "name": "(GMT+12:00) Auckland, Wellington", "dependencyTarget": null, "dependencyValue": null }, { "id": "Newfoundland and Labrador Standard Time", "name": "(GMT-03:30) Newfoundland and Labrador", "dependencyTarget": null, "dependencyValue": null }, { "id": "North Asia East Standard Time", "name": "(GMT+08:00) Irkutsk, Ulaanbaatar", "dependencyTarget": null, "dependencyValue": null }, { "id": "North Asia Standard Time", "name": "(GMT+07:00) Krasnoyarsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "Pacific S.A. Standard Time", "name": "(GMT-04:00) Santiago", "dependencyTarget": null, "dependencyValue": null }, { "id": "Pacific Standard Time", "name": "(GMT-08:00) Pacific Time (US and Canada); Tijuana", "dependencyTarget": null, "dependencyValue": null }, { "id": "Romance Standard Time", "name": "(GMT+01:00) Brussels, Copenhagen, Madrid, Paris", "dependencyTarget": null, "dependencyValue": null }, { "id": "Russian Standard Time", "name": "(GMT+03:00) Moscow, St. Petersburg, Volgograd", "dependencyTarget": null, "dependencyValue": null }, { "id": "S.A. Eastern Standard Time", "name": "(GMT-03:00) Buenos Aires, Georgetown", "dependencyTarget": null, "dependencyValue": null }, { "id": "S.A. Pacific Standard Time", "name": "(GMT-05:00) Bogota, Lima, Quito", "dependencyTarget": null, "dependencyValue": null }, { "id": "S.A. Western Standard Time", "name": "(GMT-04:00) Caracas, La Paz", "dependencyTarget": null, "dependencyValue": null }, { "id": "S.E. Asia Standard Time", "name": "(GMT+07:00) Bangkok, Hanoi, Jakarta", "dependencyTarget": null, "dependencyValue": null }, { "id": "Samoa Standard Time", "name": "(GMT-11:00) Midway Island, Samoa", "dependencyTarget": null, "dependencyValue": null }, { "id": "Singapore Standard Time", "name": "(GMT+08:00) Kuala Lumpur, Singapore", "dependencyTarget": null, "dependencyValue": null }, { "id": "South Africa Standard Time", "name": "(GMT+02:00) Harare, Pretoria", "dependencyTarget": null, "dependencyValue": null }, { "id": "Sri Lanka Standard Time", "name": "(GMT+06:00) Sri Jayawardenepura", "dependencyTarget": null, "dependencyValue": null }, { "id": "Taipei Standard Time", "name": "(GMT+08:00) Taipei", "dependencyTarget": null, "dependencyValue": null }, { "id": "Tasmania Standard Time", "name": "(GMT+10:00) Hobart", "dependencyTarget": null, "dependencyValue": null }, { "id": "Tokyo Standard Time", "name": "(GMT+09:00) Osaka, Sapporo, Tokyo", "dependencyTarget": null, "dependencyValue": null }, { "id": "Tonga Standard Time", "name": "(GMT+13:00) Nuku'alofa", "dependencyTarget": null, "dependencyValue": null }, { "id": "Transitional Islamic State of Afghanistan Standard Time", "name": "(GMT+04:30) Kabul", "dependencyTarget": null, "dependencyValue": null }, { "id": "U.S. Eastern Standard Time", "name": "(GMT-05:00) Indiana (East)", "dependencyTarget": null, "dependencyValue": null }, { "id": "U.S. Mountain Standard Time", "name": "(GMT-07:00) Arizona", "dependencyTarget": null, "dependencyValue": null }, { "id": "Vladivostok Standard Time", "name": "(GMT+10:00) Vladivostok", "dependencyTarget": null, "dependencyValue": null }, { "id": "W. Australia Standard Time", "name": "(GMT+08:00) Perth", "dependencyTarget": null, "dependencyValue": null }, { "id": "W. Central Africa Standard Time", "name": "(GMT+01:00) West Central Africa", "dependencyTarget": null, "dependencyValue": null }, { "id": "W. Europe Standard Time", "name": "(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", "dependencyTarget": null, "dependencyValue": null }, { "id": "West Asia Standard Time", "name": "(GMT+05:00) Islamabad, Karachi, Tashkent", "dependencyTarget": null, "dependencyValue": null }, { "id": "West Pacific Standard Time", "name": "(GMT+10:00) Guam, Port Moresby", "dependencyTarget": null, "dependencyValue": null }, { "id": "Yakutsk Standard Time", "name": "(GMT+09:00) Yakutsk", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "hyperv_install", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "time_zone", "value": "11", "datatype": "enum", "componentid": "component-server-1", "name": "Timezone", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "1", "name": "(UTC-12:00) International Date Line West", "dependencyTarget": null, "dependencyValue": null }, { "id": "10", "name": "(UTC-06:00) Central America", "dependencyTarget": null, "dependencyValue": null }, { "id": "100", "name": "(UTC+13:00) Samoa", "dependencyTarget": null, "dependencyValue": null }, { "id": "11", "name": "(UTC-06:00) Central Time (US & Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "12", "name": "(UTC-06:00) Guadalajara, Mexico City, Monterrey", "dependencyTarget": null, "dependencyValue": null }, { "id": "13", "name": "(UTC-06:00) Saskatchewan", "dependencyTarget": null, "dependencyValue": null }, { "id": "14", "name": "(UTC-05:00) Bogota, Lima, Quito", "dependencyTarget": null, "dependencyValue": null }, { "id": "15", "name": "(UTC-05:00) Eastern Time (US & Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "16", "name": "(UTC-05:00) Indiana (East)", "dependencyTarget": null, "dependencyValue": null }, { "id": "17", "name": "(UTC-04:30) Caracas", "dependencyTarget": null, "dependencyValue": null }, { "id": "18", "name": "(UTC-04:00) Asuncion", "dependencyTarget": null, "dependencyValue": null }, { "id": "19", "name": "(UTC-04:00) Atlantic Time (Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "2", "name": "(UTC-11:00) Coordinated Universal Time-11", "dependencyTarget": null, "dependencyValue": null }, { "id": "20", "name": "(UTC-04:00) Cuiaba", "dependencyTarget": null, "dependencyValue": null }, { "id": "21", "name": "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan", "dependencyTarget": null, "dependencyValue": null }, { "id": "22", "name": "(UTC-04:00) Santiago", "dependencyTarget": null, "dependencyValue": null }, { "id": "23", "name": "(UTC-03:30) Newfoundland", "dependencyTarget": null, "dependencyValue": null }, { "id": "24", "name": "(UTC-03:00) Brasilia", "dependencyTarget": null, "dependencyValue": null }, { "id": "25", "name": "(UTC-03:00) Buenos Aires", "dependencyTarget": null, "dependencyValue": null }, { "id": "26", "name": "(UTC-03:00) Cayenne, Fortaleza", "dependencyTarget": null, "dependencyValue": null }, { "id": "27", "name": "(UTC-03:00) Greenland", "dependencyTarget": null, "dependencyValue": null }, { "id": "28", "name": "(UTC-03:00) Montevideo", "dependencyTarget": null, "dependencyValue": null }, { "id": "29", "name": "(UTC-03:00) Salvador", "dependencyTarget": null, "dependencyValue": null }, { "id": "3", "name": "(UTC-10:00) Hawaii", "dependencyTarget": null, "dependencyValue": null }, { "id": "30", "name": "(UTC-02:00) Coordinated Universal Time-02", "dependencyTarget": null, "dependencyValue": null }, { "id": "32", "name": "(UTC-01:00) Azores", "dependencyTarget": null, "dependencyValue": null }, { "id": "33", "name": "(UTC-01:00) Cape Verde Is.", "dependencyTarget": null, "dependencyValue": null }, { "id": "34", "name": "(UTC) Casablanca", "dependencyTarget": null, "dependencyValue": null }, { "id": "35", "name": "(UTC) Coordinated Universal Time", "dependencyTarget": null, "dependencyValue": null }, { "id": "36", "name": "(UTC) Dublin, Edinburgh, Lisbon, London", "dependencyTarget": null, "dependencyValue": null }, { "id": "37", "name": "(UTC) Monrovia, Reykjavik", "dependencyTarget": null, "dependencyValue": null }, { "id": "38", "name": "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", "dependencyTarget": null, "dependencyValue": null }, { "id": "39", "name": "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", "dependencyTarget": null, "dependencyValue": null }, { "id": "4", "name": "(UTC-09:00) Alaska", "dependencyTarget": null, "dependencyValue": null }, { "id": "40", "name": "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris", "dependencyTarget": null, "dependencyValue": null }, { "id": "41", "name": "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb", "dependencyTarget": null, "dependencyValue": null }, { "id": "42", "name": "(UTC+01:00) West Central Africa", "dependencyTarget": null, "dependencyValue": null }, { "id": "43", "name": "(UTC+01:00) Windhoek", "dependencyTarget": null, "dependencyValue": null }, { "id": "44", "name": "(UTC+02:00) Amman", "dependencyTarget": null, "dependencyValue": null }, { "id": "45", "name": "(UTC+02:00) Athens, Bucharest", "dependencyTarget": null, "dependencyValue": null }, { "id": "46", "name": "(UTC+02:00) Beirut", "dependencyTarget": null, "dependencyValue": null }, { "id": "47", "name": "(UTC+02:00) Cairo", "dependencyTarget": null, "dependencyValue": null }, { "id": "48", "name": "(UTC+02:00) Damascus", "dependencyTarget": null, "dependencyValue": null }, { "id": "49", "name": "(UTC+02:00) Harare, Pretoria", "dependencyTarget": null, "dependencyValue": null }, { "id": "5", "name": "(UTC-08:00) Baja California", "dependencyTarget": null, "dependencyValue": null }, { "id": "50", "name": "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius", "dependencyTarget": null, "dependencyValue": null }, { "id": "51", "name": "(UTC+02:00) Istanbul", "dependencyTarget": null, "dependencyValue": null }, { "id": "52", "name": "(UTC+02:00) Jerusalem", "dependencyTarget": null, "dependencyValue": null }, { "id": "53", "name": "(UTC+02:00) Nicosia", "dependencyTarget": null, "dependencyValue": null }, { "id": "54", "name": "(UTC+03:00) Baghdad", "dependencyTarget": null, "dependencyValue": null }, { "id": "55", "name": "(UTC+03:00) Kaliningrad, Minsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "56", "name": "(UTC+03:00) Kuwait, Riyadh", "dependencyTarget": null, "dependencyValue": null }, { "id": "57", "name": "(UTC+03:00) Nairobi", "dependencyTarget": null, "dependencyValue": null }, { "id": "58", "name": "(UTC+03:30) Tehran", "dependencyTarget": null, "dependencyValue": null }, { "id": "59", "name": "(UTC+04:00) Abu Dhabi, Muscat", "dependencyTarget": null, "dependencyValue": null }, { "id": "6", "name": "(UTC-08:00) Pacific Time (US & Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "60", "name": "(UTC+04:00) Baku", "dependencyTarget": null, "dependencyValue": null }, { "id": "61", "name": "(UTC+04:00) Moscow, St. Petersburg, Volgograd", "dependencyTarget": null, "dependencyValue": null }, { "id": "62", "name": "(UTC+04:00) Port Louis", "dependencyTarget": null, "dependencyValue": null }, { "id": "63", "name": "(UTC+04:00) Tbilisi", "dependencyTarget": null, "dependencyValue": null }, { "id": "64", "name": "(UTC+04:00) Yerevan", "dependencyTarget": null, "dependencyValue": null }, { "id": "65", "name": "(UTC+04:30) Kabul", "dependencyTarget": null, "dependencyValue": null }, { "id": "66", "name": "(UTC+05:00) Islamabad, Karachi", "dependencyTarget": null, "dependencyValue": null }, { "id": "67", "name": "(UTC+05:00) Tashkent", "dependencyTarget": null, "dependencyValue": null }, { "id": "68", "name": "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi", "dependencyTarget": null, "dependencyValue": null }, { "id": "69", "name": "(UTC+05:30) Sri Jayawardenepura", "dependencyTarget": null, "dependencyValue": null }, { "id": "7", "name": "(UTC-07:00) Arizona", "dependencyTarget": null, "dependencyValue": null }, { "id": "70", "name": "(UTC+05:45) Kathmandu", "dependencyTarget": null, "dependencyValue": null }, { "id": "71", "name": "(UTC+06:00) Astana", "dependencyTarget": null, "dependencyValue": null }, { "id": "72", "name": "(UTC+06:00) Dhaka", "dependencyTarget": null, "dependencyValue": null }, { "id": "73", "name": "(UTC+06:00) Ekaterinburg", "dependencyTarget": null, "dependencyValue": null }, { "id": "74", "name": "(UTC+06:30) Yangon (Rangoon)", "dependencyTarget": null, "dependencyValue": null }, { "id": "75", "name": "(UTC+07:00) Bangkok, Hanoi, Jakarta", "dependencyTarget": null, "dependencyValue": null }, { "id": "76", "name": "(UTC+07:00) Novosibirsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "77", "name": "(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi", "dependencyTarget": null, "dependencyValue": null }, { "id": "78", "name": "(UTC+08:00) Krasnoyarsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "79", "name": "(UTC+08:00) Kuala Lumpur, Singapore", "dependencyTarget": null, "dependencyValue": null }, { "id": "8", "name": "(UTC-07:00) Chihuahua, La Paz, Mazatlan", "dependencyTarget": null, "dependencyValue": null }, { "id": "80", "name": "(UTC+08:00) Perth", "dependencyTarget": null, "dependencyValue": null }, { "id": "81", "name": "(UTC+08:00) Taipei", "dependencyTarget": null, "dependencyValue": null }, { "id": "82", "name": "(UTC+08:00) Ulaanbaatar", "dependencyTarget": null, "dependencyValue": null }, { "id": "83", "name": "(UTC+09:00) Irkutsk", "dependencyTarget": null, "dependencyValue": null }, { "id": "84", "name": "(UTC+09:00) Osaka, Sapporo, Tokyo", "dependencyTarget": null, "dependencyValue": null }, { "id": "85", "name": "(UTC+09:00) Seoul", "dependencyTarget": null, "dependencyValue": null }, { "id": "86", "name": "(UTC+09:30) Adelaide", "dependencyTarget": null, "dependencyValue": null }, { "id": "87", "name": "(UTC+09:30) Darwin", "dependencyTarget": null, "dependencyValue": null }, { "id": "88", "name": "(UTC+10:00) Brisbane", "dependencyTarget": null, "dependencyValue": null }, { "id": "89", "name": "(UTC+10:00) Canberra, Melbourne, Sydney", "dependencyTarget": null, "dependencyValue": null }, { "id": "9", "name": "(UTC-07:00) Mountain Time (US & Canada)", "dependencyTarget": null, "dependencyValue": null }, { "id": "90", "name": "(UTC+10:00) Guam, Port Moresby", "dependencyTarget": null, "dependencyValue": null }, { "id": "91", "name": "(UTC+10:00) Hobart", "dependencyTarget": null, "dependencyValue": null }, { "id": "92", "name": "(UTC+10:00) Yakutsk ", "dependencyTarget": null, "dependencyValue": null }, { "id": "93", "name": "(UTC+11:00) Solomon Is., New Caledonia", "dependencyTarget": null, "dependencyValue": null }, { "id": "94", "name": "(UTC+11:00) Vladivostok", "dependencyTarget": null, "dependencyValue": null }, { "id": "95", "name": "(UTC+12:00) Auckland, Wellington", "dependencyTarget": null, "dependencyValue": null }, { "id": "96", "name": "(UTC+12:00) Coordinated Universal Time+12", "dependencyTarget": null, "dependencyValue": null }, { "id": "97", "name": "(UTC+12:00) Fiji", "dependencyTarget": null, "dependencyValue": null }, { "id": "98", "name": "(UTC+12:00) Magadan", "dependencyTarget": null, "dependencyValue": null }, { "id": "99", "name": "(UTC+13:00) Nuku'alofa", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": "CentOS7.4", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ntp_server", "value": "100.64.0.18", "datatype": "string", "componentid": "component-server-1", "name": "NTP Server", "tooltip": "Multiple NTP servers may be entered as a comma-separated list.", "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": "CentOS7.4,esxi-6.5,esxi-6.0", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "language", "value": "en-US", "datatype": "enum", "componentid": "component-server-1", "name": "Language", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "de-DE", "name": "German (Germany) ", "dependencyTarget": null, "dependencyValue": null }, { "id": "en-US", "name": "English (United States)", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "hyperv_install", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "keyboard", "value": "00000409", "datatype": "enum", "componentid": "component-server-1", "name": "Keyboard", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "00000409", "name": "U.S. English", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "hyperv_install", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "domain_name", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Domain Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "fqdn", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "FQ Domain Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "hyperv_install", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "domain_admin_user", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Domain Admin Username", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "domain_admin_password", "value": "", "datatype": "password", "componentid": "component-server-1", "name": "Domain Admin Password", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "domain_admin_password_confirm", "value": "", "datatype": "password", "componentid": "component-server-1", "name": "Domain Admin Password Confirm", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": " ", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "iscsi_initiator", "value": "", "datatype": "enum", "componentid": "component-server-1", "name": "Select iSCSI Initiator", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "hardware", "name": "Hardware Initiator", "dependencyTarget": null, "dependencyValue": null }, { "id": "software", "name": "Software Initiator", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "razor_image", "dependencyValue": "esxi-6.5,esxi-6.0", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "esx_mem", "value": "", "datatype": "enum", "componentid": "component-server-1", "name": "Install EqualLogic MEM", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "false", "name": "False", "dependencyTarget": null, "dependencyValue": null }, { "id": "true", "name": "True", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "razor_image", "dependencyValue": "esxi-6.5,esxi-6.0", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "scaleio_enabled", "value": "true", "datatype": "boolean", "componentid": "component-server-1", "name": "Use local storage for Dell EMC VxFlex OS", "tooltip": "Dell EMC VxFlex OS is based on ScaleIO software. VxFlex OS or ScaleIO values many be entered/shown in this field.", "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": "esxi-6.5,esxi-6.0", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "scaleio_role", "value": "hyperconverged", "datatype": "enum", "componentid": "component-server-1", "name": "ScaleIO Role", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "compute_only", "name": "Compute Only", "dependencyTarget": null, "dependencyValue": null }, { "id": "hyperconverged", "name": "Hyperconverged", "dependencyTarget": null, "dependencyValue": null }, { "id": "storage_only", "name": "Storage Only", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "scaleio_sdc_guid", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "ScaleIO SDC Guid", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "scaleio_mdm_role", "value": "none", "datatype": "enum", "componentid": "component-server-1", "name": "ScaleIO MDM Role", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "none", "name": "None", "dependencyTarget": null, "dependencyValue": null }, { "id": "primary_mdm", "name": "Primary MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "secondary_mdm", "name": "Secondary MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "standby_mdm", "name": "Standby MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "standby_tie_breaker", "name": "Standby Tie Breaker", "dependencyTarget": null, "dependencyValue": null }, { "id": "tie_breaker", "name": "Tie Breaker", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "mdm_data_ips", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "ScaleIO Configure MDM Data IP Addresses", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "scaleio_disk_configuration", "value": null, "datatype": "storagepooldisksconfiguration", "componentid": "component-server-1", "name": "ScaleIO Storage Pool Disks Configuration", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "scaleio_inventory_mdm_role", "value": "none", "datatype": "enum", "componentid": "component-server-1", "name": "ScaleIO Inventory MDM Role", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "none", "name": "None", "dependencyTarget": null, "dependencyValue": null }, { "id": "primary_mdm", "name": "Primary MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "secondary_mdm", "name": "Secondary MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "standby_mdm", "name": "Standby MDM", "dependencyTarget": null, "dependencyValue": null }, { "id": "standby_tie_breaker", "name": "Standby Tie Breaker", "dependencyTarget": null, "dependencyValue": null }, { "id": "tie_breaker", "name": "Tie Breaker", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "scaleio_inventory_mdm_management_ips", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "ScaleIO Inventory MDM Management IP Addresses", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "scaleio_inventory_mdm_data_ips", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "ScaleIO Inventory MDM Data IP Addresses", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "scaleio_enabled", "dependencyValue": "true", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-server-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ip_source", "value": "automatic", "datatype": "radio", "componentid": "component-server-1", "name": "IP Source", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "automatic", "name": "ASM Selected IP", "dependencyTarget": null, "dependencyValue": null }, { "id": "manual", "name": "User Entered IP", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "static_ip_source:vcesys-esx-mgmt", "value": "automatic", "datatype": "enum", "componentid": "component-server-1", "name": "vcesys-esx-mgmt IP Source", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "automatic", "name": "ASM Selected IP", "dependencyTarget": null, "dependencyValue": null }, { "id": "dns", "name": "Hostname DNS Lookup", "dependencyTarget": null, "dependencyValue": null }, { "id": "manual", "name": "Manual Entry", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "ip_source", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "static_ip_value:vcesys-esx-mgmt", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "vcesys-esx-mgmt IP Address", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "static_ip_source:vcesys-esx-mgmt", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "static_ip_source:vcesys-sio-mgmt", "value": "automatic", "datatype": "enum", "componentid": "component-server-1", "name": "vcesys-sio-mgmt IP Source", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "automatic", "name": "ASM Selected IP", "dependencyTarget": null, "dependencyValue": null }, { "id": "dns", "name": "Hostname DNS Lookup", "dependencyTarget": null, "dependencyValue": null }, { "id": "manual", "name": "Manual Entry", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "ip_source", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "static_ip_value:vcesys-sio-mgmt", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "vcesys-sio-mgmt IP Address", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "static_ip_source:vcesys-sio-mgmt", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "static_ip_source:vcesys-vmotion", "value": "automatic", "datatype": "enum", "componentid": "component-server-1", "name": "vcesys-vmotion IP Source", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "automatic", "name": "ASM Selected IP", "dependencyTarget": null, "dependencyValue": null }, { "id": "manual", "name": "Manual Entry", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "ip_source", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "static_ip_value:vcesys-vmotion", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "vcesys-vmotion IP Address", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "static_ip_source:vcesys-vmotion", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }, { "id": "asm::idrac", "name": "Hardware Settings", "settings": [{ "id": "target_boot_device", "value": "LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "datatype": "enum", "componentid": "component-server-1", "name": "Target Boot Device", "tooltip": "Local Flash Storage - Installs OS to either the SATADOM or BOSS flash storage device present in the server<br/><br/>Local Flash Storage for Dell EMC ScaleIO - Installs OS to either the SATADOM or BOSS flash storage device present in the server and configures the server to support ScaleIO", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "LOCAL_FLASH_STORAGE", "name": "Local Flash Storage", "dependencyTarget": "scaleio_enabled", "dependencyValue": "false" }, { "id": "LOCAL_FLASH_STORAGE_FOR_SCALE_IO", "name": "Local Flash Storage for DellEMC ScaleIO", "dependencyTarget": "scaleio_enabled", "dependencyValue": "true" }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": false, "isPreservedForDeployment": false }, { "id": "raid_configuration", "value": "{\"raidtype\":\"basic\",\"id\":null,\"basicraidlevel\":\"raid1\",\"enableglobalhotspares\":false,\"globalhotspares\":0,\"minimumssd\":0,\"virtualdisks\":[],\"minimumssdexternal\":0,\"enableglobalhotsparesexternal\":false,\"globalhotsparesexternal\":0,\"externalvirtualdisks\":[]}", "datatype": "raidconfiguration", "componentid": "component-server-1", "name": "RAID", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "target_boot_device", "dependencyValue": "HD", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "server_source", "value": "pool", "datatype": "enum", "componentid": "component-server-1", "name": "Server Source", "tooltip": "Method for server selection", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "manual", "name": "Manual Entry", "dependencyTarget": null, "dependencyValue": null }, { "id": "pool", "name": "Server Pool", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "server_pool", "value": "-1", "datatype": "enum", "componentid": "component-server-1", "name": "Server Pool", "tooltip": "Pool from which servers are selected during deployment", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "-1", "name": "Global", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "server_source", "dependencyValue": "pool", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "server_select", "value": "", "datatype": "enum", "componentid": "component-server-1", "name": "Choose Server", "tooltip": "Select specific server from a drop-down list", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081634753830163475ead3402ce", "name": "41TBRW1", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081634753830163475ec2460348", "name": "64BNW52", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081634753830163475ecc6c0391", "name": "64BPW52", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081634753830163475fc0ef04a9", "name": "64BQW52", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081634753830163475ffe690502", "name": "64BMW52", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "server_source", "dependencyValue": "manual", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "migrate_on_failure", "value": "true", "datatype": "boolean", "componentid": "component-server-1", "name": "Retry On Failure", "tooltip": "If selected server fails, retry on another available server", "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": true, "dependencyTarget": "server_source", "dependencyValue": "pool", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "attempted_servers", "value": null, "datatype": "string", "componentid": "component-server-1", "name": "Attempted Servers", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-server-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }, { "id": "asm::bios", "name": "BIOS Settings", "settings": [{ "id": "bios_configuration", "value": "basic", "datatype": "biosconfiguration", "componentid": "component-server-1", "name": "BIOS Settings", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "SysProfile", "value": "PerfOptimized", "datatype": "enum", "componentid": "component-server-1", "name": "System Profile", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "Custom", "name": "Custom", "dependencyTarget": null, "dependencyValue": null }, { "id": "DenseCfgOptimized", "name": "Dense Configuration", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }, { "id": "PerfOptimized", "name": "Performance", "dependencyTarget": null, "dependencyValue": null }, { "id": "PerfPerWattOptimizedDapc", "name": "Performance Per Watt (DAPC)", "dependencyTarget": null, "dependencyValue": null }, { "id": "PerfPerWattOptimizedOs", "name": "Performance Per Watt (OS)", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "UsbPorts", "value": "AllOn", "datatype": "enum", "componentid": "component-server-1", "name": "User Accessible USB Ports", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "AllOff", "name": "All Ports Off", "dependencyTarget": null, "dependencyValue": null }, { "id": "AllOn", "name": "All Ports On", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }, { "id": "OnlyBackPortsOn", "name": "Only Back Ports On", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ProcCores", "value": "All", "datatype": "enum", "componentid": "component-server-1", "name": "Number of Cores per Processor", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "1", "name": "1", "dependencyTarget": null, "dependencyValue": null }, { "id": "2", "name": "2", "dependencyTarget": null, "dependencyValue": null }, { "id": "4", "name": "4", "dependencyTarget": null, "dependencyValue": null }, { "id": "6", "name": "6", "dependencyTarget": null, "dependencyValue": null }, { "id": "All", "name": "All", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ProcVirtualization", "value": "Enabled", "datatype": "enum", "componentid": "component-server-1", "name": "Virtualization Technology", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "Disabled", "name": "Disabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "Enabled", "name": "Enabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "LogicalProc", "value": "Enabled", "datatype": "enum", "componentid": "component-server-1", "name": "Logical Processor", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "Disabled", "name": "Disabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "Enabled", "name": "Enabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ProcExecuteDisable", "value": "Enabled", "datatype": "enum", "componentid": "component-server-1", "name": "Execute Disable", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "Disabled", "name": "Disabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "Enabled", "name": "Enabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "NodeInterleave", "value": "Enabled", "datatype": "enum", "componentid": "component-server-1", "name": "Node Interleaving", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "Disabled", "name": "Disabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "Enabled", "name": "Enabled", "dependencyTarget": null, "dependencyValue": null }, { "id": "n/a", "name": "Not Applicable", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-server-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }, { "id": "asm::esxiscsiconfig", "name": "Network Settings", "settings": [{ "id": "network_configuration", "value": "{\"id\":\"7aac0987-60fb-4a6e-94e7-be8099c59212\",\"interfaces\":[{\"id\":\"0a5f5be0-87b5-443a-8927-3d8452242278\",\"name\":\"Interface\",\"interfaces\":[{\"id\":\"d850f6ce-7a4d-4723-8d4a-c8ebc59ef754\",\"name\":\"Port 1\",\"partitions\":[{\"id\":\"4364006f-b4f3-4d83-aa4d-e40894e27054\",\"name\":\"1\",\"networks\":[\"ff8080816347538301634759d18a00cf\"],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"c13696c1-e072-4bec-8b32-04496beafd83\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"913933fc-aabb-4c86-8299-713f35016808\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"cf6b0812-d265-4096-a56e-82f3b6502963\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"c5a5e37d-a14c-41da-ba18-82973d74afe8\",\"name\":\"Port 2\",\"partitions\":[{\"id\":\"84337879-6d22-4821-b7f0-b073926209cf\",\"name\":\"1\",\"networks\":[\"ff808081634753830163475851f90035\",\"ff808081634753830163475b17370168\",\"ff808081634753830163475becf901a6\",\"ff8080816347538301634757f0010023\"],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"923c393b-2fab-4592-956e-998ff0f6cc1e\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"d7cbc0db-f8e6-4d62-a9ed-6fff03229a1f\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"19335f32-3cc2-405c-a9a5-156e04de5ed7\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"174f4089-de54-4005-aedc-2c9333431743\",\"name\":\"Port 3\",\"partitions\":[{\"id\":\"3fd6595e-c46e-4978-aca9-34e1f593bbad\",\"name\":\"1\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"7843a66a-83d3-4483-82c3-acabf5d6b863\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"bcc352a8-80ca-4533-ae3d-64658ee7cd63\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"2b998962-4451-4283-88b5-01bb8a43e01c\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"8a26ab2f-33bd-4efd-ba5e-b73f203d049d\",\"name\":\"Port 4\",\"partitions\":[{\"id\":\"2372730c-7dc0-42e2-ab38-62da65cfebf4\",\"name\":\"1\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"416df6a3-0302-4383-8534-f26d12ee0da3\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"f66fdfc5-2759-4bc7-9efc-6343dafca5b8\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"1dc316d7-3f92-40a2-8562-3f8d004f20bc\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]}],\"enabled\":true,\"redundancy\":false,\"nictype\":\"2x10Gb,2x1Gb\",\"partitioned\":false,\"fabrictype\":\"ethernet\"},{\"id\":\"88c58bf0-73d5-442a-a3e2-b99d9b710cf7\",\"name\":\"Interface\",\"interfaces\":[{\"id\":\"a5e30aba-b543-42b9-b398-e1e87597ee72\",\"name\":\"Port 1\",\"partitions\":[{\"id\":\"b69079f8-1c07-43de-b5b8-843896c4e08b\",\"name\":\"1\",\"networks\":[\"ff80808163475383016347591ea30036\"],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"b3d9c4e6-26ae-461c-91d1-519411d52512\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"d0426d41-9994-4c54-92fd-684a415cfeeb\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"bfce21af-8b60-4be2-a6ae-614fb568de2d\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"7a7ba5a8-579f-4594-bbe9-1bc9a9f4aef8\",\"name\":\"Port 2\",\"partitions\":[{\"id\":\"f1d86c3c-a3a3-448e-a0c0-5abcb080e251\",\"name\":\"1\",\"networks\":[\"ff808081634753830163475851f90035\",\"ff808081634753830163475b17370168\",\"ff808081634753830163475becf901a6\",\"ff8080816347538301634757f0010023\"],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"bfdcb9a4-91c1-40e6-b07d-2b5f8be5efca\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"d2b6e34a-0f25-4519-9852-626409e4e824\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"363390c5-e9c2-428e-8ac0-de2822aa9b21\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"9880c04b-fe51-4abc-8094-e24701b6100d\",\"name\":\"Port 3\",\"partitions\":[{\"id\":\"e787acbe-5018-4d48-bef7-9242b287a121\",\"name\":\"1\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"2796cf9f-0b37-4654-ac85-7f1fbf2a8014\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"0b3b528e-a151-400b-9570-7f031f2dc568\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"595ef39b-1ddd-422f-b955-4430f738a929\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]},{\"id\":\"0f329732-a0da-45fe-a706-6b402503f609\",\"name\":\"Port 4\",\"partitions\":[{\"id\":\"b284b04b-f623-4a7c-936e-3a561840334f\",\"name\":\"1\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"6e6bd4fd-6aaa-4e6a-a386-b5e08b4acc08\",\"name\":\"2\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"8e79faa9-22fc-4285-a6d9-02488625b60c\",\"name\":\"3\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null},{\"id\":\"b968bfb5-03aa-4527-8650-856121d5ac92\",\"name\":\"4\",\"networks\":[],\"virtualidentitypool\":null,\"minimum\":0,\"maximum\":100,\"boot\":false,\"personality\":null}]}],\"enabled\":true,\"redundancy\":false,\"nictype\":\"2x10Gb\",\"partitioned\":false,\"fabrictype\":\"ethernet\"}]}", "datatype": "networkconfiguration", "componentid": "component-server-1", "name": "Network Config", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "default_gateway", "value": "dhcp_workload", "datatype": "string", "componentid": "component-server-1", "name": "Static Network Default Gateway", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "dhcp_workload", "name": "DHCP / No Gateway", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff8080816347538301634756c1fd0001", "name": "vcesys-customer", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff80808163475383016347591ea30036", "name": "vcesys-sio-data1", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff8080816347538301634759d18a00cf", "name": "vcesys-sio-data2", "dependencyTarget": null, "dependencyValue": null }, { "id": "ff808081634753830163475b17370168", "name": "vcesys-sio-mgmt", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": "CentOS7.4", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "mtu", "value": "1500", "datatype": "enum", "componentid": "component-server-1", "name": "MTU size for bonded interfaces:", "tooltip": "Allows the Maximum Transfer Unit (MTU) to be set in the server Operating System. This will only take effect on bonded interfaces.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "1500", "name": "1500", "dependencyTarget": null, "dependencyValue": null }, { "id": "9000", "name": "9000", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "razor_image", "dependencyValue": "CentOS7.4", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-server-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": true, "network": { "id": "7aac0987-60fb-4a6e-94e7-be8099c59212", "interfaces": [{ "id": "0a5f5be0-87b5-443a-8927-3d8452242278", "name": "Interface", "interfaces": [{ "id": "d850f6ce-7a4d-4723-8d4a-c8ebc59ef754", "name": "Port 1", "partitions": [{ "id": "4364006f-b4f3-4d83-aa4d-e40894e27054", "name": "1", "networks": ["ff8080816347538301634759d18a00cf"], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "c13696c1-e072-4bec-8b32-04496beafd83", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "913933fc-aabb-4c86-8299-713f35016808", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "cf6b0812-d265-4096-a56e-82f3b6502963", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "c5a5e37d-a14c-41da-ba18-82973d74afe8", "name": "Port 2", "partitions": [{ "id": "84337879-6d22-4821-b7f0-b073926209cf", "name": "1", "networks": ["ff808081634753830163475851f90035", "ff808081634753830163475b17370168", "ff808081634753830163475becf901a6", "ff8080816347538301634757f0010023"], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "923c393b-2fab-4592-956e-998ff0f6cc1e", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "d7cbc0db-f8e6-4d62-a9ed-6fff03229a1f", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "19335f32-3cc2-405c-a9a5-156e04de5ed7", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "174f4089-de54-4005-aedc-2c9333431743", "name": "Port 3", "partitions": [{ "id": "3fd6595e-c46e-4978-aca9-34e1f593bbad", "name": "1", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "7843a66a-83d3-4483-82c3-acabf5d6b863", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "bcc352a8-80ca-4533-ae3d-64658ee7cd63", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "2b998962-4451-4283-88b5-01bb8a43e01c", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "8a26ab2f-33bd-4efd-ba5e-b73f203d049d", "name": "Port 4", "partitions": [{ "id": "2372730c-7dc0-42e2-ab38-62da65cfebf4", "name": "1", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "416df6a3-0302-4383-8534-f26d12ee0da3", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "f66fdfc5-2759-4bc7-9efc-6343dafca5b8", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "1dc316d7-3f92-40a2-8562-3f8d004f20bc", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }], "enabled": true, "redundancy": false, "nictype": "2x10Gb,2x1Gb", "partitioned": false, "fabrictype": "ethernet" }, { "id": "88c58bf0-73d5-442a-a3e2-b99d9b710cf7", "name": "Interface", "interfaces": [{ "id": "a5e30aba-b543-42b9-b398-e1e87597ee72", "name": "Port 1", "partitions": [{ "id": "b69079f8-1c07-43de-b5b8-843896c4e08b", "name": "1", "networks": ["ff80808163475383016347591ea30036"], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "b3d9c4e6-26ae-461c-91d1-519411d52512", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "d0426d41-9994-4c54-92fd-684a415cfeeb", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "bfce21af-8b60-4be2-a6ae-614fb568de2d", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "7a7ba5a8-579f-4594-bbe9-1bc9a9f4aef8", "name": "Port 2", "partitions": [{ "id": "f1d86c3c-a3a3-448e-a0c0-5abcb080e251", "name": "1", "networks": ["ff808081634753830163475851f90035", "ff808081634753830163475b17370168", "ff808081634753830163475becf901a6", "ff8080816347538301634757f0010023"], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "bfdcb9a4-91c1-40e6-b07d-2b5f8be5efca", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "d2b6e34a-0f25-4519-9852-626409e4e824", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "363390c5-e9c2-428e-8ac0-de2822aa9b21", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "9880c04b-fe51-4abc-8094-e24701b6100d", "name": "Port 3", "partitions": [{ "id": "e787acbe-5018-4d48-bef7-9242b287a121", "name": "1", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "2796cf9f-0b37-4654-ac85-7f1fbf2a8014", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "0b3b528e-a151-400b-9570-7f031f2dc568", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "595ef39b-1ddd-422f-b955-4430f738a929", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }, { "id": "0f329732-a0da-45fe-a706-6b402503f609", "name": "Port 4", "partitions": [{ "id": "b284b04b-f623-4a7c-936e-3a561840334f", "name": "1", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "6e6bd4fd-6aaa-4e6a-a386-b5e08b4acc08", "name": "2", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "8e79faa9-22fc-4285-a6d9-02488625b60c", "name": "3", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }, { "id": "b968bfb5-03aa-4527-8650-856121d5ac92", "name": "4", "networks": [], "virtualidentitypool": null, "minimum": 0, "maximum": 100, "boot": false, "personality": null }] }], "enabled": true, "redundancy": false, "nictype": "2x10Gb", "partitioned": false, "fabrictype": "ethernet" }] }, "newComponent": null, "cloned": false, "continueClicked": null, "AsmGUID": null, "puppetCertName": null, "clonedFromId": null, "allowClone": true, "isComponentValid": true, "raid": { "raidtype": "basic", "id": null, "basicraidlevel": "raid1", "enableglobalhotspares": false, "globalhotspares": 0, "minimumssd": 0, "virtualdisks": [], "minimumssdexternal": 0, "enableglobalhotsparesexternal": false, "globalhotsparesexternal": 0, "externalvirtualdisks": [] }, "configfilename": null, "instances": 3 }], "attachments": [], "category": "Test", "enableApps": false, "enableVMs": false, "enableCluster": false, "enableServer": false, "enableStorage": false, "allStandardUsers": false, "assignedUsers": [], "isValid": true, "manageFirmware": false, "firmwarePackageId": null, "firmwarePackageName": null, "updateServerFirmware": false, "updateNetworkFirmware": false, "updateStorageFirmware": false, "isLocked": false, "configureTemplateConfiguration": { "networkSettings": [{ "id": "ff808081634753830163475851f90035", "name": "vcesys-os-installation", "type": "OS Installation", "value": "", "options": [{ "id": "ff808081634753830163475851f90035", "name": "vcesys-os-installation" }], "components": [{ "type": "server", "name": "Server" }], "dependencyTarget": null, "dependencyValue": null, "network": "PXE" }, { "id": "ff808081634753830163475b17370168", "name": "vcesys-sio-mgmt", "type": "ScaleIO Management", "value": "", "options": [{ "id": "ff808081634753830163475b17370168", "name": "vcesys-sio-mgmt" }], "components": [{ "type": "server", "name": "Server" }], "dependencyTarget": null, "dependencyValue": null, "network": "SCALEIO_MANAGEMENT" }, { "id": "ff808081634753830163475becf901a6", "name": "vcesys-vmotion", "type": "Hypervisor Migration", "value": "", "options": [{ "id": "ff808081634753830163475becf901a6", "name": "vcesys-vmotion" }], "components": [{ "type": "server", "name": "Server" }], "dependencyTarget": null, "dependencyValue": null, "network": "HYPERVISOR_MIGRATION" }, { "id": "ff8080816347538301634759d18a00cf", "name": "vcesys-sio-data2", "type": "ScaleIO Data", "value": "", "options": [{ "id": "ff80808163475383016347591ea30036", "name": "vcesys-sio-data1" }, { "id": "ff8080816347538301634759d18a00cf", "name": "vcesys-sio-data2" }], "components": [{ "type": "server", "name": "Server" }], "dependencyTarget": null, "dependencyValue": null, "network": "SCALEIO_DATA" }, { "id": "ff80808163475383016347591ea30036", "name": "vcesys-sio-data1", "type": "ScaleIO Data", "value": "", "options": [{ "id": "ff80808163475383016347591ea30036", "name": "vcesys-sio-data1" }, { "id": "ff8080816347538301634759d18a00cf", "name": "vcesys-sio-data2" }], "components": [{ "type": "server", "name": "Server" }], "dependencyTarget": null, "dependencyValue": null, "network": "SCALEIO_DATA" }, { "id": "ff8080816347538301634757f0010023", "name": "vcesys-esx-mgmt", "type": "Hypervisor Management", "value": "", "options": [{ "id": "ff8080816347538301634757f0010023", "name": "vcesys-esx-mgmt" }], "components": [{ "type": "server", "name": "Server" }], "dependencyTarget": null, "dependencyValue": null, "network": "HYPERVISOR_MANAGEMENT" }], "osSettings": { "adminPassword": null, "osRepositories": [{ "id": "esxi-6.0", "name": "esxi-6.0", "type": null, "value": "", "options": [{ "id": "esxi-6.5", "name": "esxi-6.5" }, { "id": "esxi-6.0", "name": "esxi-6.0" }, { "id": "CentOS7.4", "name": "CentOS7.4" }], "components": [{ "type": "server", "name": "Server" }], "dependencyTarget": null, "dependencyValue": null }] }, "serverSettings": null, "clusterSettings": [{ "id": "vcenter-100.68.107.66", "name": "aer11-cvcsa.asm.delllabs.net", "type": "vcenter", "value": "", "options": [{ "id": "vcenter-100.68.107.66", "name": "aer11-cvcsa.asm.delllabs.net" }, { "id": "vcenter-100.68.107.65", "name": "aer11-vcsa-mgmt.asm.delllabs.net" }], "components": [{ "type": "cluster", "name": "VMWare Cluster" }], "dependencyTarget": null, "dependencyValue": null }], "scaleIOSettings": [{ "id": "scaleio-100.68.107.252", "name": "scaleio-100.68.107.252", "type": "scaleio", "value": "", "options": [{ "id": "scaleio-100.68.107.252", "name": "scaleio-100.68.107.252" }], "components": [{ "type": "cluster", "name": "VMWare Cluster" }], "dependencyTarget": null, "dependencyValue": null }], "clusterDetailsSettings": [], "serverPoolSettings": [{ "id": "-1", "name": "Global", "type": null, "value": "-1", "options": [{ "id": "-1", "name": "Global" }], "components": [{ "type": "server", "name": "Server" }], "dependencyTarget": null, "dependencyValue": null }], "storageSettings": [], "vdsSettings": null }, "source": "ASM", "inConfiguration": false, "originalId": "24c348a3-b2cb-4d83-81d5-cb3d3dfd4ab9" } };
                                //self.template = self.template.responseObj;
                                self.template.templateName = response.responseObj.name;
                                resolve();
                            }
                        }
                    });
                    self.$scope.uploader.uploadAll();
                }
                else {
                    self.forms.step1._submitted = true;
                    self.GlobalServices.scrollToInvalidElement("form_uploadtemplate");
                    reject();
                }
            });
        };
        UploadTemplateModalController.prototype.enterStep2 = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.getCredentialSummaryList()
                .then(function (response) {
                self.credentials = response.data.responseObj;
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
            ;
            return d.promise;
        };
        UploadTemplateModalController.prototype.addCredential = function (context, settingName) {
            var self = this;
            var theModal = self.Modal({
                title: self.$translate.instant('CREDENTIALS_CreateTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('creatingcredentials');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/credentials/editcredentials.html',
                controller: 'EditCredentialsController as editCredentialsController',
                params: {
                    editMode: false,
                    typeId: "os",
                    canChangeCredentialType: false
                },
                onComplete: function (credentialId) {
                    context[settingName] = credentialId;
                    var d = self.$q.defer();
                    self.Loading(d.promise);
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.getCredentialSummaryList()
                        .then(function (response) {
                        self.credentials = response.data.responseObj;
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
            });
            theModal.modal.show();
        };
        UploadTemplateModalController.prototype.validateStep2 = function () {
            var self = this;
            return self.$q(function (resolve, reject) {
                if (self.forms.step2.$valid) {
                    self.prepForSave();
                    var d = self.$q.defer();
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.saveTemplateAdditionalSettings(self.template)
                        .then(function (data) {
                        self.$timeout(function () {
                            self.$location.path("templatebuilder/" + data.data.responseObj + "/edit");
                        }, 500);
                        resolve();
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data, self.errors);
                        reject();
                    })
                        .finally(function () { return d.resolve(); });
                }
                else {
                    self.forms.step2._submitted = true;
                    self.GlobalServices.scrollToInvalidElement("additionalsettingsFrom");
                    reject();
                }
            });
        };
        UploadTemplateModalController.prototype.finishWizard = function () {
            var self = this;
            self.validateStep2()
                .then(function () {
                self.close();
            });
        };
        UploadTemplateModalController.prototype.prepForSave = function () {
            var self = this;
            if (!self.template.manageFirmware) {
                self.template.firmwarePackageId = null;
            }
            if (self.template.allStandardUsers === true) {
                self.template.assignedUsers = [];
            }
        };
        UploadTemplateModalController.prototype.viewComponents = function (selected) {
            var self = this, modal = self.Modal({
                title: self.$translate.instant("TEMPLATES_ViewComponentsModalTitle", { name: selected.name }),
                modalSize: 'modal-lg',
                templateUrl: 'views/templates/viewcomponents.html',
                controller: 'ViewComponentsController as viewComponents',
                params: {
                    selected: selected
                }
            });
            modal.modal.show();
        };
        UploadTemplateModalController.prototype.getCredentialSummaryList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.credential.getCredentialByType, { id: 'os' });
        };
        UploadTemplateModalController.prototype.getAvailableFirmwarePackages = function () {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.getAvailableFirmwarePackages, {});
        };
        UploadTemplateModalController.prototype.saveTemplateAdditionalSettings = function (template) {
            var self = this;
            return self.$http.post(self.Commands.data.templates.saveTemplateAdditionalSettings, template);
        };
        UploadTemplateModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close(self.template.category);
        };
        UploadTemplateModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UploadTemplateModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q',
            '$timeout', 'Loading', 'GlobalServices',
            'FileUploader', 'Commands', '$translate', 'constants', '$location', "$filter"];
        return UploadTemplateModalController;
    }());
    asm.UploadTemplateModalController = UploadTemplateModalController;
    angular
        .module('app')
        .controller('UploadTemplateModalController', UploadTemplateModalController);
})(asm || (asm = {}));
//# sourceMappingURL=uploadtemplateModal.js.map
var asm;
(function (asm) {
    var ViewComponentsController = (function () {
        function ViewComponentsController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            var self = this;
            self.components = self.$scope.modal.params.selected.components;
            self.displayedComponents = [].concat(self.components);
            self.componentType();
            //get all unique types except for where they are undefined
            self.filterItems = [{ name: self.$translate.instant("GENERIC_All") }]
                .concat(_.map(_.filter(_.uniqBy(self.components, "basicType"), function (type) { return type.basicType; }), function (type) {
                return { name: type.basicType, id: type.basicType };
            }));
        }
        ViewComponentsController.prototype.componentType = function () {
            var self = this;
            angular.forEach(self.components, function (component) {
                if (self.GlobalServices.IsDeviceType(component.type, "Server")) {
                    component.basicType = 'Server';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "Chassis")) {
                    component.basicType = 'Chassis';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "Switch")) {
                    component.basicType = 'Switch';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "IOM")) {
                    component.basicType = 'IOM';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "RackServer")) {
                    component.basicType = 'Rack Server';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "BladeServer")) {
                    component.basicType = 'Blade Server';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "FXServer")) {
                    component.basicType = 'FX Server';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "VM")) {
                    component.basicType = 'VM';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "vCenter")) {
                    component.basicType = 'vCenter';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "SCVMM")) {
                    component.basicType = 'SCVMM';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "Storage")) {
                    component.basicType = 'Storage';
                }
            });
        };
        ViewComponentsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ViewComponentsController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ViewComponentsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', "constants"];
        return ViewComponentsController;
    }());
    asm.ViewComponentsController = ViewComponentsController;
    angular
        .module('app')
        .controller('ViewComponentsController', ViewComponentsController);
})(asm || (asm = {}));
//# sourceMappingURL=viewcomponentsModal.js.map
var asm;
(function (asm) {
    var ConfigureChassisWizardController = (function () {
        function ConfigureChassisWizardController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, commands, GlobalServices, constants, $filter, $anchorScroll, filteredDevicesFilter, $rootScope, fileUploader) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$filter = $filter;
            this.$anchorScroll = $anchorScroll;
            this.filteredDevicesFilter = filteredDevicesFilter;
            this.$rootScope = $rootScope;
            this.fileUploader = fileUploader;
            this.mode = "resource";
            this.chassisDevices = this.$scope.modal.params.devices;
            this.deviceConfigEditMode1 = true;
            this.deviceConfigEditMode2 = false;
            this.summary_display_row_firmwareCompliance = true;
            this.allFirmwareSelected = false;
            this.vltObj = {
                uplinkName: "VLT",
                uplinkId: "VLT",
                portChannel: '',
                networks: [],
                networkNames: []
            };
            this.errors = new Array();
            this.displayedDevices = [];
            this.chassisFound = false;
            this.selectedFirmwarePackage = null;
            this.isIOMconfigurable = true;
            this.steps = {
                ioModuleSettings: { invalid: false }
            };
            this.forms = {};
            this.view = {};
            var self = this;
            self.mode = self.$scope.modal.params.mode;
            self.view = {
                //see deviceConfig.ts version of this for what this is used for
                editMode: function () {
                    return self.deviceConfigEditMode1 ? "edit_" : "view_";
                }
            };
            self.validRedundancyPolicies = angular.copy(constants.availableRedundancyPolicies);
            self.refresh();
            var uploader = $scope.uploader = new fileUploader({
                url: self.commands.data.configureChassis.uploadPortConfiguration,
            });
        }
        ConfigureChassisWizardController.prototype.updatePowerSettings = function () {
            var self = this;
            var fxcount = 0;
            var m1000count = 0;
            var policies = [];
            policies = angular.copy(self.constants.availableRedundancyPolicies);
            angular.forEach(self.filteredconfigureResources, function (device) {
                if (device.chassisConfiguration && device.chassisConfiguration.configChassis === true) {
                    if (device.resourceType === 'ChassisFX') {
                        fxcount++;
                    }
                    else {
                        m1000count++;
                    }
                }
            });
            if (fxcount > 0 && m1000count > 0) {
                policies = angular.copy(self.constants.availableRedundancyPolicies);
            }
            else if (fxcount > 0) {
                policies.splice(2, 1);
            }
            else {
                policies.splice(3, 1);
            }
            self.validRedundancyPolicies = angular.copy(policies);
        };
        ConfigureChassisWizardController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loadingResources = true;
            self.Loading(d.promise);
            self.$q.all([
                self.getConfigurableResources(true, self.chassisDevices &&
                    {
                        filterObj: [
                            {
                                field: "id",
                                op: "=",
                                opTarget: self.chassisDevices
                            }
                        ]
                    })
                    .then(function (data) {
                    self.configureResources = data.data.responseObj;
                    self.markChassis();
                    //sort devices
                    self.configureResources.devices = self.$filter("sortConfigureDevices")(self.configureResources.devices);
                    //set compliance of devices
                    $.each(self.configureResources.devices, function (index, device) {
                        $.each(device.firmwarecomponents, function (index2, fc) {
                            //ASM-6731 UI - Block users from configuring FN-IOA uplinks with firmware less than 9.9
                            if (!fc.compliant || (device.fnioa && device.fnioaUpdateRequired)) {
                                device.compliant = false;
                                device.rowChecked = false;
                            }
                        });
                    });
                    self.displayedDevices = angular.copy(self.configureResources.devices);
                    //set table for Firmware Compliance
                    self.firmwareComplianceDevices = _.filter(self.configureResources.devices, function (resource) { return resource.complianceDetails !== "compliant"; });
                    self.firmwareComplianceDevicesSafe = angular.copy(self.firmwareComplianceDevices);
                    //filter for chassis
                    self.filteredconfigureResources = self.$filter('filteredDevices')(self.configureResources.devices);
                    self.configureResources.configIOMMode = (self.filteredconfigureResources.length &&
                        self.configureResources.canConfigAllIOM == true)
                        ? "all"
                        : "independent";
                }),
                self.getFirmwarePackages()
                    .then(function (response) {
                    self.firmwarePackages = response.data.responseObj;
                    if (self.selectedFirmwarePackage == null)
                        self.selectedFirmwarePackage = self.firmwarePackages[0];
                })
            ])
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () {
                self.loadingResources = false;
                d.resolve();
            });
            return d;
        };
        ConfigureChassisWizardController.prototype.enterWelcome = function () {
            var self = this;
            self.$rootScope.helpToken = 'configuringchassis';
        };
        ConfigureChassisWizardController.prototype.enterDiscoveredResources = function () {
            var self = this;
            self.$rootScope.helpToken = 'configurechassisdiscoveredresources';
        };
        ConfigureChassisWizardController.prototype.enterDefaultFirmwareRepository = function () {
            var self = this;
            self.$rootScope.helpToken = 'configurechassisconfiguredefaultrepository';
        };
        ConfigureChassisWizardController.prototype.enterFirmwareCompliance = function () {
            var self = this;
            self.$rootScope.helpToken = 'configurechassisfirmwarecompliance';
        };
        ConfigureChassisWizardController.prototype.enterChassisConfiguration = function () {
            var self = this;
            self.$rootScope.helpToken = 'configurechassischassisglobal';
            self.updatePowerSettings();
        };
        ConfigureChassisWizardController.prototype.enterUniqueChassisSettings = function () {
            var self = this;
            self.$rootScope.helpToken = 'configurechassisconfigurechassis';
            //in new asm code, these are no longer individual wizard steps, they are child accordions on the unique chassis settings wizard step
            //self.$rootScope.helpToken = 'configurechassisconfigureserver';
            //self.$rootScope.helpToken = 'configurechassisconfigureIOmodules';
        };
        ConfigureChassisWizardController.prototype.enterIOModuleConfiguration = function () {
            var self = this;
            self.$rootScope.helpToken = 'configurechassiconfigureuplinks';
        };
        ConfigureChassisWizardController.prototype.enterSummary = function () {
            var self = this;
            self.$rootScope.helpToken = 'ConfigureChassisSummary';
        };
        ConfigureChassisWizardController.prototype.finishWizard = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.configureChassis(self.configureResources)
                .then(function () {
                self.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ConfigureChassisWizardController.prototype.goToIndex = function (x) {
            var self = this;
            if (self.mode == 'resource') {
                self.$scope.$root.$broadcast("wizard:goto", 3);
            }
            else {
                self.$scope.$root.$broadcast("wizard:goto", 1);
            }
        };
        ConfigureChassisWizardController.prototype.uplinkPortConfigurationShown = function () {
            var self = this;
            //Check for FNIOA and if they are configurable (ASM-6731 UI - Block users from configuring FN-IOA uplinks with firmware less than 9.9)
            self.isIOMconfigurable = _.filter(self.configureResources.devices, function (device) {
                return device.isFNioa && device.fnioaUpdateRequired && !device.updateFW;
            }).length === 0;
        };
        ConfigureChassisWizardController.prototype.getUplinkList = function (arr, vltenabled) {
            var self = this;
            var x = angular.copy(arr);
            if (vltenabled)
                x.unshift(self.vltObj);
            return x;
        };
        ConfigureChassisWizardController.prototype.getUplinksLength = function (options) {
            var self = this;
            return !!_.find(options, { id: self.vltObj.id }) ? options.length - 1 : options.length;
        };
        ConfigureChassisWizardController.prototype.getUplinks = function (options, vltEnabled) {
            var self = this;
            var hasVltObj = !!_.find(options, { id: self.vltObj.id });
            if (vltEnabled) {
                return hasVltObj ? options : [self.vltObj].concat(options);
            }
            else {
                return hasVltObj ? _.pull(options, self.vltObj) : options;
            }
        };
        ConfigureChassisWizardController.prototype.sortConfigureDevices = function (devices) {
            var self = this;
            //sorts into 1. Chassis, 2. Servers, 3. Other 
            var devicesCopy = angular.copy(devices);
            var chassis = _.remove(devicesCopy, function (device) { return (device.chassisId || device.id) && self.$filter("isTypeChassis")(device); });
            var servers = _.remove(devicesCopy, function (device) { return device.resourceType.indexOf('Server') >= 0; });
            var other = devicesCopy;
            return _.concat(chassis, servers, other);
        };
        ConfigureChassisWizardController.prototype.getAllFirmwareSelected = function () {
            var self = this;
            return self.allFirmwareSelected = !_.find(self.configureResources.devices, { updateFW: false });
        };
        ConfigureChassisWizardController.prototype.getCheckedChassis = function () {
            var self = this;
            return _.filter(self.configureResources.devices, function (device) {
                return device.isChecked === true && self.isTypeChassis(device.deviceType);
            }).map(function (chassis) { return chassis.id; });
        };
        ConfigureChassisWizardController.prototype.selectAllFirmware = function () {
            var self = this, selectAll = !self.getAllFirmwareSelected();
            self.configureResources.devices = _.map(self.configureResources.devices, function (device) {
                device.updateFW = selectAll;
                return device;
            });
            self.getAllFirmwareSelected();
        };
        ConfigureChassisWizardController.prototype.getSelectedFirmware = function (devices) {
            var self = this;
            return _.filter(angular.isDefined(devices) ? devices : self.configureResources.devices, { updateFW: true });
        };
        ConfigureChassisWizardController.prototype.getNonCompliantFirmware = function () {
            var self = this;
            return _.filter(self.configureResources.devices, { complianceDetails: "noncompliant" });
        };
        ConfigureChassisWizardController.prototype.getChassisNonCompliantValues = function () {
            var self = this;
            return {
                numIdentified: self.getNonCompliantFirmware().length,
                numSelected: self.getSelectedFirmware(self.getNonCompliantFirmware()).length
            };
        };
        ConfigureChassisWizardController.prototype.getUpdateRequiredFirmware = function () {
            var self = this;
            return _.filter(self.configureResources.devices, { complianceDetails: "updaterequired" });
        };
        ConfigureChassisWizardController.prototype.getChassisRequiredUpdateValues = function () {
            var self = this;
            return {
                numIdentified: self.getUpdateRequiredFirmware().length,
                numSelected: self.getSelectedFirmware(self.getUpdateRequiredFirmware()).length
            };
        };
        ConfigureChassisWizardController.prototype.isTypeChassis = function (type) {
            return !!_.find(["ChassisM1000e", "ChassisVRTX", "ChassisFX"], function (val) { return val === type; });
        };
        ConfigureChassisWizardController.prototype.markChassis = function () {
            var self = this;
            self.chassisFound = false;
            angular.forEach(self.configureResources.devices, function (resource) {
                if (self.isTypeChassis(resource.resourceType)) {
                    resource.isChassis =
                        resource.chassisConfiguration.configChassis =
                            self.chassisFound = true;
                    resource.chassisId = resource.id;
                }
                ;
            });
        };
        ConfigureChassisWizardController.prototype.topLevelDevice = function (device) {
            var self = this;
            if (self.isTypeChassis(device.resourceType))
                return true;
            if (device.chassisId)
                return false;
            return true;
        };
        ConfigureChassisWizardController.prototype.modularDevice = function (device) {
            var self = this;
            if (self.isTypeChassis(device.resourceType))
                return false;
            if (device.chassisId)
                return true;
            return false;
        };
        ConfigureChassisWizardController.prototype.removeDevice = function (id) {
            var self = this;
            var confirm = self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('CONFIGURECHASSIS_DeleteConfirm')));
            confirm.then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.commands.data.devices.remove, [id])
                    .then(function (data) {
                    self.refresh();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        ConfigureChassisWizardController.prototype.validateUniqueChassisSettings = function () {
            var self = this;
            self.forms.uniqueChassisSettingsForm._submitted = true;
            return self.$q(function (resolve, reject) {
                if (_.find(self.forms.uniqueChassisSettingsForm, { $invalid: true })) {
                    angular.forEach(self.forms.uniqueChassisSettingsForm, function (form) { return form._submitted = true; });
                    self.GlobalServices.scrollToInvalidElement("form_chassisconfiguration_uniquechassisconfig");
                    reject();
                }
                else
                    resolve();
            });
        };
        ConfigureChassisWizardController.prototype.validateChassisConfig = function () {
            var self = this, forms = [
                self.forms.cmc,
                self.forms.alerts,
                self.forms.ntpForm,
                self.forms.redundancy,
                self.forms.dns
            ];
            return self.$q(function (resolve, reject) {
                if (_.find(forms, { $invalid: true })) {
                    angular.forEach(forms, function (form) { return form._submitted = true; });
                    self.GlobalServices.scrollToInvalidElement(self.view.editMode() + "deviceConfigOnboarding");
                    reject();
                }
                else
                    resolve();
            });
        };
        //Modals
        ConfigureChassisWizardController.prototype.viewBundles = function (selectedFirmware) {
            var self = this;
            var theModal = self.Modal({
                title: selectedFirmware.name,
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/viewbundles.html',
                controller: 'ViewBundlesController as vb',
                params: {
                    id: selectedFirmware.id
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            theModal.modal.show();
        };
        ConfigureChassisWizardController.prototype.defineUplinks = function (chassisConfig) {
            //passing in chassisConfig instead of uplinks so that on save the reference is changed and not just value
            var self = this;
            var theModal = self.Modal({
                title: self.$translate.instant("DEFINE_UPLINKS_DefineUplinks"),
                onHelp: function () {
                    self.GlobalServices.showHelp('configuechassisDefineuplinkdialog');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/defineuplinksmodal.html',
                controller: 'DefineUplinksController as defineUplinksController',
                params: {
                    uplinks: angular.copy(chassisConfig.uplinks),
                    vltModel: self.vltObj
                },
                onComplete: function (uplinks) {
                    chassisConfig.uplinks = uplinks;
                }
            });
            theModal.modal.show();
        };
        ConfigureChassisWizardController.prototype.ioModuleConfiguration = function () {
            var self = this;
            switch (self.configureResources.configIOMMode) {
                case "all":
                case "independent":
                    return self.validateUplinks();
                case "upload":
                    self.validateIoModuleUpload();
                    return;
            }
        };
        ConfigureChassisWizardController.prototype.initFileWatcher = function () {
            var self = this;
            self.$timeout(function () {
                document.getElementById('configFile').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    self.$timeout(function () { self.ioModuleFileModel = element.files[0]; });
                };
            }, 500);
        };
        ConfigureChassisWizardController.prototype.validateIoModuleUpload = function () {
            var self = this;
            var d = self.$q.defer();
            self.forms.configIoModuleUpload._submitted = true; //triggers form-validation directive to light up the form
            if (self.ioModuleFileModel) {
                return self.uploadPortConfiguration();
            }
            else {
                d.reject();
                return d.promise;
            }
        };
        ConfigureChassisWizardController.prototype.uploadPortConfiguration = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            var fileName = "";
            //using angular uploader
            //set error and success callbacks 
            angular.extend(self.$scope.uploader, {
                onBeforeUploadItem: function (item) {
                    fileName = item.file.name;
                },
                onErrorItem: function (fileItem, response, status, headers) {
                    d.resolve();
                    self.GlobalServices.DisplayError(response.data);
                },
                onCompleteAll: function (fileItem, response, status, headers) {
                    self.configureResources.configIOMXMLSettingsFileName = fileName;
                    d.resolve();
                }
            });
            self.$scope.uploader.uploadAll();
            return d.promise;
        };
        ConfigureChassisWizardController.prototype.portVisible = function (index, slotNum, context, configureAll, multiFabric) {
            var self = this, slot = {
                hasSlot: "hasSlot" + slotNum,
                slotPorts: "slot" + slotNum + "Ports",
                slotQuadPortSupported: "slot" + slotNum + "QuadPortSupported",
                slotFCModule: "slot" + slotNum + "FCModule",
                slotConfig: "slot" + slotNum + "Config"
            };
            if (configureAll) {
                if (multiFabric) {
                    return (context[slot.hasSlot] &&
                        context.iomconfigurable &&
                        context.iompresent &&
                        context[slot.slotPorts] === 2 &&
                        context[slot.slotQuadPortSupported] &&
                        (index === 3 || index === 7) ||
                        (!context[slot.slotQuadPortSupported] && index < context[slot.slotPorts]) ||
                        (context.quadPortMode && context[slot.slotQuadPortSupported])) &&
                        context[slot.slotConfig].portType !== 'Fc';
                }
                else {
                    return context[slot.hasSlot] &&
                        context.iomconfigurable &&
                        context.iompresent &&
                        context[slot.slotPorts] === 2 &&
                        context[slot.slotQuadPortSupported] &&
                        (index === 3 || index === 7) ||
                        (!context[slot.slotQuadPortSupported] && index < context[slot.slotPorts]) ||
                        (context.quadPortMode && context[slot.slotQuadPortSupported]);
                }
            }
            else {
                if (multiFabric) {
                    return (context[slot.hasSlot] &&
                        context.iomconfigurable &&
                        context.iompresent &&
                        (context[slot.slotPorts] === 2 &&
                            context[slot.slotQuadPortSupported] &&
                            (index === 3 || index === 7)) ||
                        (!context[slot.slotQuadPortSupported] && index < context[slot.slotPorts]) ||
                        (context.quadPortMode && context[slot.slotQuadPortSupported])) &&
                        context[slot.slotConfig].portType !== 'Fc';
                }
                else {
                    return (context[slot.hasSlot] &&
                        context.iomconfigurable &&
                        context.iompresent &&
                        (context[slot.slotPorts] === 2 &&
                            context[slot.slotQuadPortSupported] &&
                            (index === 3 || index === 7)) ||
                        (!context[slot.slotQuadPortSupported] && index < context[slot.slotPorts]) ||
                        (context.quadPortMode && context[slot.slotQuadPortSupported]));
                }
            }
        };
        ConfigureChassisWizardController.prototype.validateUplinks = function () {
            var self = this, chassisToCheck = [], chassis = [], slotNum, 
            //standardizes formatting for validating below
            format = function (arrayOfSwitches, configureAll, multiFabric, chassisId) {
                chassis = [];
                //for each fabric
                angular.forEach(_.filter(arrayOfSwitches, function (slot) { return slot.iompresent && slot.iomconfigurable; }), function (_switch) {
                    chassis.push({});
                    var slots = angular.copy([
                        _switch.slot1Config,
                        _switch.slot2Config,
                        _switch.slot3Config
                    ]);
                    angular.forEach(slots, function (slotConfig, slotConfigIndex) {
                        //remove ports that aren't visible
                        _.pullAll(slotConfig, _.filter(slotConfig, function (port, portIndex) {
                            return !self.portVisible(portIndex, slotConfigIndex + 1, _switch, configureAll, multiFabric);
                        }));
                        //set speeds of remaining ports
                        angular.forEach(slotConfig, function (port) {
                            port._speed = self
                                .getPortType(port.portType, chassis.indexOf(port), _switch.quadPortSupported, _switch["slot" + (slotConfigIndex + 1) + "Ports"], _switch.quadPortMode)
                                .id;
                        });
                    });
                    angular.extend(chassis[multiFabric ? arrayOfSwitches.indexOf(_switch) : 0], {
                        ports: _.flatten(_.filter(slots, function (slotConfig) {
                            return slotConfig.length;
                        })),
                        multiFabric: multiFabric,
                        id: angular.isDefined(chassisId) ? chassisId : undefined
                    });
                });
                chassisToCheck.push(chassis);
            };
            if (self.configureResources.configUplinks) {
                if (self.configureResources.configIOMMode === "all") {
                    if (!self.configureResources.configAllIOM) {
                        // Configure All Chassis the Same / Configure All IOMs (Switches) the Same
                        format([self.configureResources.commonIOMConfiguration], true, false);
                    }
                    else {
                        // Configure All Chassis the Same / Configure All IOMs (Switches) Independently
                        format(self.configureResources.iomConfiguration, false, true);
                    }
                }
                if (self.configureResources.configIOMMode === "independent") {
                    var filteredDevices = self.$filter("filteredDevices")(self.configureResources.devices);
                    angular.forEach(filteredDevices, function (chassis) {
                        // Configure All Chassis Independently / Configure All IOMs (Switches) the Same
                        if (!chassis.chassisConfiguration.configAllIOM) {
                            format([chassis.chassisConfiguration.commonIOMConfiguration], false, false, chassis.id);
                        }
                        else {
                            // Configure All Chassis Independently / Configure All IOMs (Switches) Independently
                            format(chassis.chassisConfiguration.iomConfiguration, true, true, chassis.id);
                        }
                    });
                }
                var mismatchPortSpeed = undefined, vltFabricSpeed;
                //look for invalid chassis
                /*chassisToCheck looks like this :

                [
                    *chassis*,
                    [
                        *switches*,
                        [
                            *switch*,
                            {
                                multiFabric: boolean
                                ports: []
                            }
                        ]
                    ]
                ]
                */
                self.steps.ioModuleSettings.invalidChassis = _.find(chassisToCheck, function (chassis) {
                    //filter for valid fabrics
                    return mismatchPortSpeed ||
                        _.find(_.filter(chassis, function (_switch) {
                            return chassis.indexOf(_switch) % 2 === 0;
                        }), function (_switch) {
                            vltFabricSpeed = 0;
                            var fabricSwitches = [_switch];
                            if (_switch.multiFabric) {
                                fabricSwitches.push(chassis[chassis.indexOf(_switch) + 1]);
                            }
                            var portsWithUplinks = function (switchPorts) { return _.filter(switchPorts, function (port) {
                                return port.uplinkId;
                            }); }, hasUplinkNoVLT = function (switchPorts) { return _.filter(switchPorts, function (port) {
                                return port.uplinkId && port.uplinkId !== self.vltObj.uplinkId;
                            }); }, noUplinksFound = _.find(fabricSwitches, function (_switch) {
                                return _switch.ports.length > 0 && !_.find(_switch.ports, function (port) {
                                    return port.uplinkId && port.uplinkId !== self.vltObj.uplinkId;
                                });
                            });
                            //filter for invalid slots
                            var slotConflicts = _.find(fabricSwitches, function (_switch) {
                                return _.find(portsWithUplinks(_switch.ports), function (port) {
                                    //An uplink cannot have two different speeds on a single switch within a fabric
                                    var intraSwitchSpeedConflict = _.find(hasUplinkNoVLT(_switch.ports), function (portToSearch) {
                                        if (port.uplinkId === portToSearch.uplinkId && port._speed !== portToSearch._speed) {
                                            console.log("uplink issue");
                                            return mismatchPortSpeed = true;
                                        }
                                    });
                                    //VLT cannot be different speeds across switches within a fabric
                                    var crossSlotVLTPortSpeedConflict = function () {
                                        if (port.uplinkId === self.vltObj.uplinkId) {
                                            if (vltFabricSpeed === 0) {
                                                vltFabricSpeed = port._speed;
                                            }
                                            else if (vltFabricSpeed !== port._speed) {
                                                console.log("vlt issue");
                                                return mismatchPortSpeed = true;
                                            }
                                        }
                                    };
                                    return intraSwitchSpeedConflict || crossSlotVLTPortSpeedConflict();
                                });
                            });
                            return noUplinksFound || slotConflicts;
                        });
                });
                self.GlobalServices.ClearErrors(self.errors);
                if (self.steps.ioModuleSettings.invalidChassis) {
                    self.GlobalServices.DisplayError({
                        severity: "critical",
                        message: mismatchPortSpeed
                            ? self.$translate.instant("DEFINE_UPLINKS_mismatchPortSpeed")
                            : self.$translate.instant("DEFINE_UPLINKS_ErrorMessage")
                    }, self.errors);
                    $.each(self.filteredconfigureResources, function (index, resource) {
                        var element = $("#collapseIo" + index), elementTitle = $("#headIo" + index);
                        if (resource.id === self.steps.ioModuleSettings.invalidChassis[0].id) {
                            element.collapse("show");
                        }
                        else {
                            element.collapse("hide");
                            elementTitle.removeClass("text-danger");
                        }
                    });
                    self.$anchorScroll("page_configureChassisWizard");
                }
                else {
                    $.each(self.filteredconfigureResources, function (index, resource) {
                        $("#headIo" + index).removeClass("text-danger");
                    });
                }
            }
            //create promise to return to wizard step
            var d = self.$q.defer();
            if (self.steps.ioModuleSettings.invalidChassis && self.configureResources.configUplinks) {
                d.reject();
            }
            else {
                d.resolve();
            }
            return d.promise;
        };
        ConfigureChassisWizardController.prototype.getPortType = function (portType, index, quadPortSupported, slot, quadPortMode) {
            var self = this, fourty = { id: 40, name: self.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_40Gb") }, ten = { id: 10, name: self.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_10Gb") };
            if (slot === 2 &&
                quadPortSupported &&
                (index === 3 || index === 7)) {
                return quadPortMode === false ? fourty : ten;
            }
            else {
                return portType === "Fo" ? fourty : ten;
            }
        };
        ConfigureChassisWizardController.prototype.viewPackageBundleDetails = function (selectedItem, packageId) {
            var self = this;
            var theModal = self.Modal({
                title: selectedItem.bundleName,
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/viewbundledetails.html',
                controller: 'ViewBundleDetailsController as vbd',
                params: {
                    firmwarePackageId: packageId,
                    firmwareBundleId: selectedItem.id
                },
                onComplete: function (modalScope) {
                    self.refresh();
                }
            });
            theModal.modal.show();
        };
        ConfigureChassisWizardController.prototype.addRepo = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_ResyncOSRepo'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/editrepomodal.html',
                controller: 'EditRepoModalController as editRepoModalController',
                params: {
                    repo: {},
                    type: 'add'
                },
                onComplete: function () {
                    self.refresh();
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        ConfigureChassisWizardController.prototype.clearErrors = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
        };
        ConfigureChassisWizardController.prototype.deleteRepo = function (repo) {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_Confirm'),
                modalSize: 'modal-md',
                templateUrl: 'views/settings/repositories/confirmdeleterepo.html',
                controller: 'GenericModalController as c',
                params: {},
                onComplete: function () {
                    var d = self.$q.defer();
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.$http.post(self.commands.data.repository.deleteRepository, { id: repo.id })
                        .then(function () { self.refresh(); })
                        .catch(function (response) { return self.GlobalServices.DisplayError(response.data, self.errors); })
                        .finally(function () { return d.resolve(); });
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        //APIs
        ConfigureChassisWizardController.prototype.getHardwareManagementNetworks = function () {
            var self = this;
            return self.$http.post(self.commands.data.networking.networks.getHardwareManagementNetworks, []);
        };
        ConfigureChassisWizardController.prototype.getFirmwarePackages = function (array) {
            var self = this;
            //dunno where this array is coming from
            return self.$http.post(self.commands.data.firmwarepackages.getFirmwarePackages, null);
        };
        ConfigureChassisWizardController.prototype.getCredentialList = function (array) {
            var self = this;
            //dunno where this array is coming from
            return self.$http.post(self.commands.data.credential.getCredentialList, array);
        };
        ConfigureChassisWizardController.prototype.getConfigurableResources = function (requireComplianceCheck, criteriaObj) {
            var self = this;
            return self.$http.post(self.commands.data.configureChassis.getConfigurableResources, {
                requireComplianceCheck: requireComplianceCheck,
                criteriaObj: criteriaObj
            });
        };
        ConfigureChassisWizardController.prototype.setDefaultFirmwarePackage = function (id) {
            var self = this;
            return self.$http.post(self.commands.data.firmwarepackages.setDefaultFirmwarePackage, id);
        };
        ConfigureChassisWizardController.prototype.getTimeZones = function () {
            var self = this;
            return self.$http.post(self.commands.data.environment.getTimeZones, []);
        };
        ConfigureChassisWizardController.prototype.configureChassis = function (chassis) {
            var self = this;
            return self.$http.post(self.commands.data.configureChassis.configureResources, chassis);
        };
        ConfigureChassisWizardController.prototype.saveBundle = function (form) {
            var self = this;
            self.config = {
                directPost: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            };
            return self.$http.post(self.commands.data.firmwarepackages.saveFirmwareBundle, form, self.config);
        };
        ConfigureChassisWizardController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ConfigureChassisWizardController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ConfigureChassisWizardController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal',
            'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants', '$filter', '$anchorScroll', 'filteredDevicesFilter', '$rootScope', "FileUploader"];
        return ConfigureChassisWizardController;
    }());
    asm.ConfigureChassisWizardController = ConfigureChassisWizardController;
    angular
        .module("app")
        .controller("ConfigureChassisWizardController", ConfigureChassisWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=configureChassisWizard.js.map
var asm;
(function (asm) {
    var DefineUplinksController = (function () {
        function DefineUplinksController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, constants, $rootScope) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$rootScope = $rootScope;
            this.rangeDropdown = function () {
                var array = [], i = 1;
                for (i; i <= 128; i++) {
                    array.push(i);
                }
                return array;
            };
            this.errors = new Array();
            var self = this;
            self.refresh();
            self.rangeDropdown = self.initRangeDropdown();
        }
        DefineUplinksController.prototype.refresh = function () {
            var self = this;
            self.localUplinks = self.localUplinks || self.$scope.modal.params.uplinks || [];
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.getNetworks().then(function (response) {
                self.networks = response.data.responseObj;
                angular.forEach(self.localUplinks, function (uplink) {
                    if (uplink.networks.length && !uplink._networkTypes) {
                        //if modal just opened and network is already associated with networks, push them into the uplink's _networkTypes array
                        uplink._networkTypes = angular.copy(self.networks);
                        angular.forEach(uplink._networkTypes, function (network) {
                            network.included = _.indexOf(uplink.networks, network.id) >= 0;
                        });
                    }
                    else {
                        //if modal has not just opened 
                        uplink._networkTypes = uplink._networkTypes
                            ? uplink._networkTypes.concat(_.filter(angular.copy(self.networks), function (network) { return !_.find(uplink._networkTypes, network.id); }))
                            : angular.copy(self.networks);
                    }
                });
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            }).finally(function () { d.resolve(); });
        };
        DefineUplinksController.prototype.initRangeDropdown = function () {
            var array = [], i = 1;
            for (i; i <= 128; i++) {
                array.push(i);
            }
            return array;
        };
        ;
        DefineUplinksController.prototype.newUplink = function () {
            var self = this;
            self.localUplinks.push({
                uplinkName: 'Uplink ' + (self.localUplinks.length + 1),
                _networkTypes: angular.copy(self.networks),
                networkNames: [],
                networks: [],
                portChannel: 1,
                uplinkId: self.$rootScope.ASM.NewGuid()
            });
        };
        DefineUplinksController.prototype.getSelectedNetworks = function (networkTypes) {
            return _.filter(networkTypes, { included: true });
        };
        DefineUplinksController.prototype.addNetwork = function () {
            var self = this;
            var editNetworkModal = self.Modal({
                title: self.$translate.instant('NETWORKS_Edit_CreateTitle'),
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/editnetwork.html',
                controller: 'EditNetworkModalController as editNetwork',
                params: {
                    editMode: "CREATE",
                    id: ""
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            editNetworkModal.modal.show();
        };
        DefineUplinksController.prototype.checkForm = function () {
            var self = this;
            return !self.localUplinks || !!_.find(self.localUplinks, function (uplink) {
                return (!uplink._networkTypes
                    || uplink._networkTypes.length === 0
                    || !self.getSelectedNetworks(uplink._networkTypes).length)
                    || _.find(self.localUplinks, function (searchUplink) {
                        return searchUplink.portChannel === uplink.portChannel &&
                            searchUplink.uplinkId !== uplink.uplinkId;
                    });
            });
        };
        DefineUplinksController.prototype.getRealUplinksLength = function () {
            var self = this;
            return _.filter(self.localUplinks, function (uplink) { return uplink.uplinkId !== self.$scope.modal.params.vltModel.uplinkId; }).length;
        };
        DefineUplinksController.prototype.getNetworks = function () {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getUplinkNetworksList, []);
        };
        DefineUplinksController.prototype.close = function () {
            var self = this;
            angular.forEach(self.localUplinks, function (uplink) {
                uplink.networks = _.map(self.getSelectedNetworks(uplink._networkTypes), "id");
                delete uplink._networkTypes;
            });
            self.$scope.modal.close(self.localUplinks);
        };
        DefineUplinksController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        DefineUplinksController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants', '$rootScope'];
        return DefineUplinksController;
    }());
    asm.DefineUplinksController = DefineUplinksController;
    angular
        .module("app")
        .controller("DefineUplinksController", DefineUplinksController);
})(asm || (asm = {}));
//# sourceMappingURL=defineUplinks.js.map
var asm;
(function (asm) {
    var NewServerPoolWizardController = (function () {
        function NewServerPoolWizardController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.GlobalServices = GlobalServices;
            this.pool = {
                canDelete: false,
                canEdit: false,
                createdby: "",
                createDate: moment(),
                description: "",
                id: null,
                isSelected: false,
                name: "",
                servers: [],
                users: [],
            };
            this.errors = new Array();
            this.allServersSelected = false;
            this.serverSelected = false;
            this.calledFromDiscoverWizard = false;
            this.editMode = false;
            this.allUsersSelected = false;
            this.smartTableOptions = {
                itemsPerPage: 20,
                pagesShown: 7
            };
            var self = this;
            self.calledFromDiscoverWizard = self.$scope.modal.params.calledFromDiscoverWizard;
            self.pool = self.$scope.modal.params.pool || self.pool;
            self.editMode = !!self.$scope.modal.params.editMode;
            self.refresh();
        }
        NewServerPoolWizardController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.getDeviceList().then(function (response) {
                    self.devices = response.data.responseObj;
                    self.safeSource = angular.copy(response.data.responseObj);
                }),
                self.getUsers().then(function (response) {
                    self.users = response.data.responseObj;
                    self.safeUsers = angular.copy(response.data.responseObj);
                }),
                self.getCurrentUser().then(function (response) {
                    self.pool.createdby = response.data.responseObj.username;
                })
            ]).then(function () {
                //if editing a pool, loop through servers and users and mark matching ones as being selected already
                if (self.editMode) {
                    self.safeUsers = _.map(self.safeUsers, function (user) {
                        return angular.extend(user, {
                            selected: !!_.find(self.pool.users, function (poolUser) {
                                return poolUser.id === user.id;
                            })
                        });
                    });
                    self.safeSource = _.map(self.safeSource, function (device) {
                        return angular.extend(device, {
                            selected: !!_.find(self.pool.servers, function (poolDevice) {
                                return poolDevice.id === device.id;
                            })
                        });
                    });
                }
            }).catch(function (response) { self.GlobalServices.DisplayError(response.data, self.errors); })
                .finally(function () { d.resolve(); });
        };
        NewServerPoolWizardController.prototype.validatePoolInfo = function () {
            var self = this;
            self.forms.poolInfoForm._submitted = true;
            return self.$q(function (resolve, reject) {
                self.forms.poolInfoForm.$valid ? resolve() : reject();
            });
        };
        NewServerPoolWizardController.prototype.selectAllServers = function () {
            var self = this;
            var allSelected = self.pool.servers.length === self.safeSource.length;
            self.selectAll(self.safeSource, !allSelected);
            if (!allSelected) {
                self.pool.servers = angular.copy(self.safeSource);
            }
            else {
                self.pool.servers = [];
            }
        };
        NewServerPoolWizardController.prototype.selectAllUsers = function () {
            var self = this;
            var allSelected = self.pool.users.length === self.safeUsers.length;
            self.selectAll(self.safeUsers, !allSelected);
            if (!allSelected) {
                self.pool.users = angular.copy(self.safeUsers);
            }
            else {
                self.pool.users = [];
            }
        };
        NewServerPoolWizardController.prototype.selectAll = function (safeSource, selectAll) {
            angular.forEach(safeSource, function (device) {
                device.selected = selectAll;
            });
        };
        NewServerPoolWizardController.prototype.finishWizard = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.GlobalServices.ClearErrors(self.errors);
            self.saveServerPool(self.pool).then(function (data) {
                self.objectId = data.data.responseObj.id;
                d.resolve();
                self.close();
            }).catch(function (response) {
                d.resolve();
                self.GlobalServices.DisplayError(response.data, self.errors);
            });
        };
        NewServerPoolWizardController.prototype.updateServers = function () {
            var self = this;
            self.pool.servers = _.filter(self.safeSource, { selected: true });
        };
        NewServerPoolWizardController.prototype.updateUsers = function () {
            var self = this;
            self.pool.users = _.filter(self.safeUsers, { selected: true });
        };
        NewServerPoolWizardController.prototype.getUsers = function () {
            var self = this;
            return self.$http.post(self.commands.data.users.getUsers, {
                requestObj: [],
                criteriaObj: {
                    filterObj: [
                        {
                            field: "roleId",
                            op: "<>",
                            opTarget: ["readonly"]
                        }]
                }
            });
        };
        NewServerPoolWizardController.prototype.getDeviceList = function () {
            var self = this;
            return self.$http.post(self.commands.data.devices.getDeviceList, {
                requestObj: [],
                criteriaObj: {
                    filterObj: [
                        {
                            field: "deviceType",
                            op: "=",
                            opTarget: ["RackServer", "BladeServer", "Server", "FXServer"]
                        }]
                }
            });
        };
        NewServerPoolWizardController.prototype.getCurrentUser = function () {
            var self = this;
            return self.$http.post(self.commands.data.users.getCurrentUser, null);
        };
        NewServerPoolWizardController.prototype.saveServerPool = function (pool) {
            var self = this;
            return self.$http.post(self.commands.data.serverpools.saveServerPool, pool);
        };
        NewServerPoolWizardController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        NewServerPoolWizardController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        NewServerPoolWizardController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return NewServerPoolWizardController;
    }());
    asm.NewServerPoolWizardController = NewServerPoolWizardController;
    angular
        .module("app")
        .controller("NewServerPoolWizardController", NewServerPoolWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=newServerPoolWizard.js.map
var asm;
(function (asm) {
    var ResourceComplianceReportController = (function () {
        function ResourceComplianceReportController($http, $timeout, $scope, $q, $translate, modal, Loading, Dialog, commands, globalServices, FileUploader, constants, $filter, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.FileUploader = FileUploader;
            this.constants = constants;
            this.$filter = $filter;
            this.GlobalServices = GlobalServices;
            this.compliant = "green";
            this.errors = new Array();
            var self = this;
            self.activate();
        }
        ResourceComplianceReportController.prototype.activate = function () {
            var self = this, d = self.$q.defer(), firmwareCompliant, softwareCompliant;
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.getFirmwareReport(self.$scope.modal.params.id, "resource")
                    .then(function (response) {
                    self.report = response.data.responseObj;
                    self.reportObj = response.data.responseObj.devices[0];
                    self.reportObj.firmwareComponents = _.orderBy(self.reportObj.firmwareComponents, ["compliant"]);
                    self.reportObj.softwareComponents = _.orderBy(self.reportObj.softwareComponents, ["compliant"]);
                    firmwareCompliant = !_.find(self.reportObj.firmwareComponents, { compliant: false }),
                        softwareCompliant = !_.find(self.reportObj.softwareComponents, { compliant: false });
                    //logic to determine radio button default view selection of firmware or software
                    //default to firmware, unless there is a reson to view software due to greater importance/criticality
                    //possible compliance values, in increasting order of importance, are unknown (n/a), compliant (success), noncompliant (warning), updaterequired (critical)
                    //note:  this only applies to resources (not services) because there would have to be a way to determine which firmware reports mattered with the results of the tests below
                    angular.extend(self.reportObj, {
                        softwareComponentsSafe: angular.copy(self.reportObj.softwareComponents),
                        firmwareComponentsSafe: angular.copy(self.reportObj.firmwareComponents)
                    });
                    self.componentSelection = (firmwareCompliant && !softwareCompliant) ? "sw" : "fw";
                }),
                self.getDeviceById(self.$scope.modal.params.id)
                    .then(function (data) {
                    self.resource = data.data.responseObj;
                })
            ])
                .catch(function (data) {
                self.globalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () {
                if (!firmwareCompliant || !softwareCompliant) {
                    self.compliant = "yellow";
                }
                if (self.resource.compliant === "noncompliant") {
                    self.compliant = "yellow";
                }
                self.updateDisabled = self.disableUpdate();
                d.resolve();
            });
        };
        ResourceComplianceReportController.prototype.isServer = function (device) {
            return (device.deviceType === 'RackServer' || device.deviceType === 'TowerServer' || device.deviceType === 'BladeServer' || device.deviceType === 'FXServer' || device.deviceType === 'Server');
        };
        ResourceComplianceReportController.prototype.isDellSwitch = function (device) {
            return (device.deviceType === 'dellswitch' || device.deviceType === 'genericswitch');
        };
        ResourceComplianceReportController.prototype.isCiscoSwitch = function (device) {
            return (device.deviceType === 'ciscoswitch');
        };
        ResourceComplianceReportController.prototype.canUpdateFirmware = function (device) {
            return !(device.deviceType === 'genericswitch' || device.deviceType === 'scaleio' || device.deviceType === 'vcenter' || device.deviceType === 'em');
        };
        ResourceComplianceReportController.prototype.disableUpdate = function () {
            var self = this;
            if (!self.GlobalServices.IsInRole('administrator')) {
                return true;
            }
            if (!self.resource) {
                return true;
            }
            if (!self.canUpdateFirmware(self.resource)) {
                return true;
            }
            if (self.resource.availability != 'notinuse' && self.resource.status != 'ready') {
                return true;
            }
            if (self.$filter("isTypeChassis")(self.resource) && self.resource.availability == 'inuse') {
                return true;
            }
            if (self.resource.availability === 'inuse' && self.isServer(self.resource)) {
                return true;
            }
            if (self.resource.compliant == 'compliant' || self.resource.compliant == 'updating') {
                return true;
            }
            if (self.resource.state === 'unmanaged') {
                return true;
            }
            if (self.isStorage(self.resource)) {
                return true;
            }
            if (angular.isDefined(self.reportObj.status) && self.reportObj.status === "pendingupdates" || self.reportObj.status === "pendingdelete") {
                return true;
            }
            return false;
        };
        ResourceComplianceReportController.prototype.updateResource = function () {
            var self = this;
            ;
            var updatedeviceModal = self.modal({
                title: self.$translate.instant('SERVICE_APPLY_RESOURCE_UPDATES_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('updatefirmwarewizard');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/updatedevicefirmware.html',
                controller: 'UpdateDeviceFirmwareModalController as updatedeviceFirmware',
                params: {
                    resource: self.resource
                },
                onComplete: function () {
                    self.$scope.modal.close();
                }
            });
            updatedeviceModal.modal.show();
        };
        ResourceComplianceReportController.prototype.isStorage = function (device) {
            return device.deviceType == 'storage' || device.deviceType == 'compellent' || device.deviceType == 'equallogic' || device.deviceType == 'netapp' || device.deviceType == 'emcvnx' || device.deviceType == 'emcunity';
        };
        ResourceComplianceReportController.prototype.getDeviceById = function (id) {
            var self = this;
            return self.$http.post(self.commands.data.devices.getDeviceById, { id: id });
        };
        ResourceComplianceReportController.prototype.getFirmwareReport = function (id, type) {
            var self = this;
            return self.$http.post(self.commands.data.firmwareReport.getfirmwarereport, { id: id, type: type });
        };
        ResourceComplianceReportController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ResourceComplianceReportController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ResourceComplianceReportController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal',
            'Loading', 'Dialog', 'Commands', 'GlobalServices', 'FileUploader', 'constants', '$filter', 'GlobalServices'];
        return ResourceComplianceReportController;
    }());
    asm.ResourceComplianceReportController = ResourceComplianceReportController;
    angular
        .module("app")
        .controller("ResourceComplianceReportController", ResourceComplianceReportController);
})(asm || (asm = {}));
//# sourceMappingURL=resourceComplianceReport.js.map
var asm;
(function (asm) {
    var ResourceLogsController = (function () {
        function ResourceLogsController($http, $timeout, $q, $translate, modal, loading, commands, globalServices, $scope, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.loading = loading;
            this.commands = commands;
            this.globalServices = globalServices;
            this.$scope = $scope;
            this.constants = constants;
            this.logs = [];
            this.logsSafe = [];
            this.errors = new Array();
            var self = this;
            self.refresh();
        }
        ResourceLogsController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            var componentId = self.$scope.modal.params.componentid;
            var deploymentId = self.$scope.modal.params.deploymentid;
            var request = { componentId: componentId, deploymentId: deploymentId };
            self.$http.post(self.commands.data.services.getPuppetLogs, request).then(function (data) {
                self.logs = data.data.responseObj;
                self.logsSafe = angular.copy(self.logs);
            }).catch(function (response) {
                self.globalServices.DisplayError(response.data, self.errors);
            }).finally(function () { return d.resolve(); });
        };
        ResourceLogsController.prototype.exportLogs = function () {
            var self = this;
            var componentId = self.$scope.modal.params.componentid;
            var deploymentId = self.$scope.modal.params.deploymentid;
            window.location.href = self.commands.data.services.exportPuppetLogs + '?componentId=' + componentId + '&deploymentId=' + deploymentId;
        };
        ResourceLogsController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Commands', 'GlobalServices', '$scope', 'constants'];
        return ResourceLogsController;
    }());
    asm.ResourceLogsController = ResourceLogsController;
    angular
        .module('app')
        .controller('ResourceLogsController', ResourceLogsController);
})(asm || (asm = {}));
//# sourceMappingURL=resourceLogs.js.map
var asm;
(function (asm) {
    var ViewPhysicalDisksController = (function () {
        function ViewPhysicalDisksController($scope) {
            this.$scope = $scope;
        }
        ViewPhysicalDisksController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ViewPhysicalDisksController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        ViewPhysicalDisksController.$inject = ["$scope"];
        return ViewPhysicalDisksController;
    }());
    asm.ViewPhysicalDisksController = ViewPhysicalDisksController;
    angular
        .module("app")
        .controller("ViewPhysicalDisksController", ViewPhysicalDisksController);
})(asm || (asm = {}));
//# sourceMappingURL=viewPhysicalDisksModal.js.map
var asm;
(function (asm) {
    var ViewUndiscoveredResources = (function () {
        function ViewUndiscoveredResources($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, constants, $rootScope) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$rootScope = $rootScope;
            this.no = false;
            var self = this;
        }
        ViewUndiscoveredResources.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ViewUndiscoveredResources.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ViewUndiscoveredResources.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants', '$rootScope'];
        return ViewUndiscoveredResources;
    }());
    asm.ViewUndiscoveredResources = ViewUndiscoveredResources;
    angular
        .module("app")
        .controller("ViewUndiscoveredResources", ViewUndiscoveredResources);
})(asm || (asm = {}));
//# sourceMappingURL=viewUndiscoveredResources.js.map
var asm;
(function (asm) {
    var AddExistingServiceController = (function () {
        function AddExistingServiceController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, constants, $anchorScroll, $filter, $location) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$anchorScroll = $anchorScroll;
            this.$filter = $filter;
            this.$location = $location;
            this.errors = [];
            this.serviceCreator = {
                "id": null,
                "name": null,
                "description": '',
                "type": '',
                "cloneexistingtemplateid": null,
                "category": '',
                "manageFirmware": true,
                "firmwarePackageId": null,
                "serviceName": '',
                "serviceDescription": '',
                "numberOfDeployments": '1',
                "scheduleType": 'deploynow',
                "scheduleDate": '',
                "emaillist": '',
                "sendnotification": false,
                "notificationtext": '',
                "updateServerFirmware": false,
                "updateNetworkFirmware": false,
                "updateStorageFirmware": false,
                "enableApps": false,
                "enableVMs": false,
                "enableCluster": false,
                "enableServer": false,
                "enableStorage": false,
                "allStandardUsers": false,
                "assignedUsers": [],
                "_allStandardUsers": "admins",
                "template": {
                    "id": null,
                    "name": '',
                    "description": '',
                    "draft": true,
                    "category": '',
                    "manageFirmware": false,
                    "firmwarePackageId": '',
                    "firmwarePackageName": '',
                    "updateServerFirmware": true,
                    "updateNetworkFirmware": false,
                    "updateStorageFirmware": false,
                    "enableApps": false,
                    "enableVMs": false,
                    "enableCluster": false,
                    "enableServer": false,
                    "enableStorage": false,
                    "isTemplateValid": true,
                    "isLocked": false,
                    "components": [],
                    "attachments": [],
                    "allStandardUsers": false,
                    "assignedUsers": [],
                    "templateAdditionalSetting": null
                }
            };
            this.warning = 'warning';
            this.types = [];
            this.osCredentials = [];
            this.vSwitches = [];
            this.credentials = [];
            this.networks = [];
            this.serviceNetworks = [];
            var self = this;
            self.refresh();
            self.types = constants.serviceTypes;
        }
        AddExistingServiceController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.getFirmwarePackages()
                .then(function (response) {
                self.firmwares = [
                    {
                        id: 'usedefaultcatalog',
                        name: self.$translate.instant('SERVICE_DETAIL_EditService_UseASMappliancedefaultcatalog'),
                        defaultpackage: false
                    }
                ].concat(response.data.responseObj);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        AddExistingServiceController.prototype.step1Complete = function () {
            var self = this, d = self.$q.defer();
            return self.$q(function (resolve, reject) {
                if (self.forms.step1.$valid) {
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.getExistingServiceComponent()
                        .then(function (response) {
                        self.serviceCreator.template = response.data.responseObj;
                        resolve();
                        self.$timeout(function () { return $('#collapse0').collapse('show'); }, 500);
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data, self.errors);
                        reject();
                    })
                        .finally(function () { return d.resolve(); });
                }
                else {
                    self.forms.step1._submitted = true;
                    self.GlobalServices.scrollToInvalidElement('step1');
                    reject();
                }
            });
        };
        AddExistingServiceController.prototype.enterInventorySummary = function () {
            var self = this, d = self.$q.defer();
            return self.$q(function (resolve, reject) {
                if (self.forms.step2.$valid) {
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.getExistingService({
                        deploy: self.serviceCreator,
                        osCredentials: self.osCredentials,
                        vSwitches: self.vSwitches
                    })
                        .then(function (response) {
                        self.existingService = response.data.responseObj;
                        self.existingServiceCopy = angular.copy(self.existingService);
                        //testing code
                        //will have to force the creationg of scaleiolist since it would take too long to create it 'the right way' elsewhere in the code
                        //borrow serverlist to force the creation of scaleiolist since they share enough of the same data
                        //angular.copy(self.existingService.serverlist, self.existingService.scaleiolist);
                        angular.extend(self.existingService, {
                            available: {
                                clusters: _.filter(self.existingService.clusterlist, function (cluster) { return self.availableInventory(cluster.state); })
                                    .length,
                                servers: _.filter(self.existingService.serverlist, function (server) { return self.availableInventory(server.state); })
                                    .length,
                                storages: _.filter(self.existingService.storagelist, function (storage) { return self.availableInventory(storage.state); })
                                    .length,
                                scaleios: _.filter(self.existingService.scaleiolist, function (scaleio) { return self.availableInventory(scaleio.state); })
                                    .length
                            }
                        });
                        resolve();
                    })
                        .catch(function (response) {
                        self.GlobalServices.DisplayError(response.data, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
                else {
                    self.forms.step2._submitted = true;
                    self.GlobalServices.scrollToInvalidElement('step2');
                    reject();
                }
            });
        };
        AddExistingServiceController.prototype.enterOsCredentials = function () {
            var self = this;
            self.credentialsRequestObj = self.getCredentialsRequestObj();
            //on first pass, directive will refresh. On subsequent passes, this will manually trigger one in OSCredentials
            if (!self.hasEnteredCredentialsStep) {
                self.hasEnteredCredentialsStep = true;
            }
            else {
                self.refreshService = !self.refreshService;
            }
        };
        AddExistingServiceController.prototype.validateosCredentials = function () {
            var self = this, d = self.$q.defer();
            self.forms.osCredentials._submitted = true;
            self.forms.osCredentials.$invalid ? d.reject() : d.resolve();
            return d.promise;
        };
        AddExistingServiceController.prototype.getCredentialsRequestObj = function () {
            var self = this;
            return self.isStorageOnly() ? { template: self.serviceCreator.template } : { service: self.existingService };
        };
        AddExistingServiceController.prototype.isStorageOnly = function () {
            var self = this;
            return self.serviceCreator.type === 'storageonly';
        };
        AddExistingServiceController.prototype.enterNetworkMapping = function () {
            var self = this;
            if (self.vSwitches.length > 0)
                return false;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.getExistingServiceSwitches()
                .then(function (response) {
                self.vSwitches = response.data.responseObj;
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        AddExistingServiceController.prototype.addNetwork = function () {
            var self = this;
            var editNetworkModal = self.Modal({
                title: self.$translate.instant('NETWORKS_Edit_CreateTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('networksaddingediting');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/editnetwork.html',
                controller: 'EditNetworkModalController as editNetwork',
                params: {},
                onComplete: function () {
                    var serviceNetworksCopy = angular.copy(self.serviceNetworks);
                    self.enterStorageNetworkMapping()
                        .then(function () {
                        //fill in the form with what was there originally
                        angular.forEach(serviceNetworksCopy, function (networkCopy) {
                            var match = _.find(self.serviceNetworks, { id: networkCopy.id });
                            if (match) {
                                match.networkId = networkCopy.networkId;
                            }
                        });
                    });
                }
            });
            editNetworkModal.modal.show();
        };
        AddExistingServiceController.prototype.enterStorageNetworkMapping = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.getNetworks()
                    .then(function (response) {
                    self.networks = response.data.responseObj;
                }),
                self.getExistingServiceNetworks()
                    .then(function (response) {
                    self.serviceNetworks = response.data.responseObj;
                })
            ])
                .then(function () {
                _.forEach(self.serviceNetworks, function (serviceNetwork) {
                    serviceNetwork._networks = _.filter(self.networks, function (network) {
                        return serviceNetwork.type === network.typeid;
                    });
                });
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
            return d.promise;
        };
        AddExistingServiceController.prototype.finishWizard = function () {
            var self = this, d = self.$q.defer();
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_ExistingServiceConfirmationMessage'), false)
                .then(function () {
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.serviceCreator.template.components = self.existingService.components;
                self.addExistingService({
                    deploy: self.serviceCreator,
                    osCredentials: self.osCredentials,
                    vSwitches: !self.isStorageOnly() ? self.vSwitches : null,
                    existingServiceNetworks: self.isStorageOnly() ? self.serviceNetworks : null
                })
                    .then(function (response) {
                    self.close();
                    self.$location.path("service/" + response.data.responseObj + "/details");
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        AddExistingServiceController.prototype.updateAllStandardUsersProp = function (context) {
            switch (context._allStandardUsers) {
                case "admins":
                    context.assignedUsers = [];
                    context.allStandardUsers = false;
                    break;
                case "specific":
                    context.allStandardUsers = false;
                    break;
                case "allStandard":
                    context.assignedUsers = [];
                    context.allStandardUsers = true;
                    break;
            }
        };
        AddExistingServiceController.prototype.get_allStandardusers = function (context) {
            return context.allStandardUsers
                ? "allStandard"
                : (context.assignedUsers && context.assignedUsers.length ? "specific" : "admins");
        };
        AddExistingServiceController.prototype.categoryVisible = function (category, component) {
            var self = this;
            var filteredSettings = self.$filter("settingVisible")(category.settings, component);
            var settingsShown = self.$filter("templatesettings")(filteredSettings, component);
            return settingsShown.length;
        };
        ;
        AddExistingServiceController.prototype.availableInventory = function (state) {
            return !(state === 'unmanaged' || state === 'updating');
        };
        AddExistingServiceController.prototype.getExistingServiceSwitches = function () {
            var self = this;
            return self.$http.post(self.Commands.data.services.getExistingServiceSwitches, { service: self.existingService });
        };
        AddExistingServiceController.prototype.getExistingServiceNetworks = function () {
            var self = this;
            return self.$http.post(self.Commands.data.services.getExistingServiceNetworks, { service: self.existingService });
        };
        AddExistingServiceController.prototype.getNetworks = function () {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworksList, null);
        };
        AddExistingServiceController.prototype.getFirmwarePackages = function () {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.getAvailableFirmwarePackages, {});
        };
        AddExistingServiceController.prototype.getExistingServiceComponent = function () {
            var self = this;
            return self.$http.post(self.Commands.data.services.getExistingServiceComponent, { type: self.serviceCreator.type }); //returns templatebuildercomponent
        };
        AddExistingServiceController.prototype.getExistingService = function (deployObject) {
            var self = this;
            return self.$http.post(self.Commands.data.services.getExistingService, deployObject); //returns service object that needs to be converted to deploy object
        };
        AddExistingServiceController.prototype.addExistingService = function (deployObject) {
            var self = this;
            return self.$http.post(self.Commands.data.services.addExistingService, deployObject); //returns success
        };
        AddExistingServiceController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddExistingServiceController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddExistingServiceController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants', '$anchorScroll', "$filter", "$location"];
        return AddExistingServiceController;
    }());
    asm.AddExistingServiceController = AddExistingServiceController;
    angular
        .module('app')
        .controller('AddExistingServiceController', AddExistingServiceController);
})(asm || (asm = {}));
//# sourceMappingURL=addExistingService.js.map
var asm;
(function (asm) {
    var CancelDeploymentModalController = (function () {
        function CancelDeploymentModalController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, $location) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$location = $location;
            this.deleteRequest = {};
            this.deleteServiceBool = false;
            this.errors = new Array();
            var self = this;
            self.refresh();
        }
        CancelDeploymentModalController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.services.getServiceById, {
                id: self.$scope.modal.params.serviceId,
                scaleup: true
            })
                .then(function (data) {
                self.service = data.data.responseObj;
                self.markComponentsForDeletion();
                self.deleteServiceBool = self.pending();
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        CancelDeploymentModalController.prototype.markComponentsForDeletion = function () {
            var self = this;
            angular.forEach((self.service.components), function (component) { return component.isSelected = true; });
            self.deleteRequest.deleteClusters =
                self.deleteRequest.deleteServers =
                    self.deleteRequest.deleteStorageVolumes =
                        self.deleteRequest.deleteVMs = true;
        };
        CancelDeploymentModalController.prototype.pending = function () {
            var self = this;
            return angular.isDefined(self.service) && self.service.health === 'pending';
        };
        CancelDeploymentModalController.prototype.cancelDeployment = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            if (self.pending()) {
                self.deleteService()
                    .then(function () {
                    self.close();
                    self.goToServices();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            }
            else {
                if (self.deleteServiceBool) {
                    self.deleteService()
                        .then(function () {
                        self.close();
                        self.goToServices();
                    })
                        .catch(function (data) {
                        self.GlobalServices.DisplayError(data.data, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
                else {
                    self.cancelService(self.service.id)
                        .then(function () { return self.close(); })
                        .catch(function (data) {
                        self.GlobalServices.DisplayError(data.data, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
            }
        };
        CancelDeploymentModalController.prototype.deleteService = function () {
            var self = this;
            //filter for each device type and where selected
            var deviceLists = {
                serverList: _.filter(self.service.components, { isSelected: true, type: "server" }),
                vmList: _.filter(self.service.components, { isSelected: true, type: "vm" }),
                clusterList: _.filter(self.service.components, { isSelected: true, type: "cluster" }),
                volumeList: _.filter(self.service.components, { isSelected: true, type: "storage" }),
                scaleioList: _.filter(self.service.components, { isSelected: true, type: "scaleio" })
            };
            //if not deleting, empty deletion array
            if (!self.deleteRequest.deleteServers)
                deviceLists.serverList = [];
            if (!self.deleteRequest.deleteVMs)
                deviceLists.vmList = [];
            if (!self.deleteRequest.deleteClusters)
                deviceLists.clusterList = [];
            if (!self.deleteRequest.deleteStorageVolumes)
                deviceLists.volumeList = [];
            if (!self.deleteRequest.deleteScaleios)
                deviceLists.scaleioList = [];
            // take only ids from each list
            deviceLists.serverList = _.map(deviceLists.serverList, "id");
            deviceLists.vmList = _.map(deviceLists.vmList, "id");
            deviceLists.clusterList = _.map(deviceLists.clusterList, "id");
            deviceLists.volumeList = _.map(deviceLists.volumeList, "id");
            deviceLists.scaleioList = _.map(deviceLists.scaleioList, "id");
            self.deleteRequest.serviceId = self.service.id;
            //add deviceLists properties to delete request
            angular.extend(self.deleteRequest, deviceLists);
            return self.$http.post(self.Commands.data.services.deleteService, self.deleteRequest);
        };
        CancelDeploymentModalController.prototype.goToServices = function () {
            var self = this;
            self.$timeout(function () {
                self.$location.path('services/');
            }, 1000);
        };
        CancelDeploymentModalController.prototype.cancelService = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.services.cancelService, { id: id });
        };
        CancelDeploymentModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        CancelDeploymentModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        CancelDeploymentModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', "$location"];
        return CancelDeploymentModalController;
    }());
    asm.CancelDeploymentModalController = CancelDeploymentModalController;
    angular
        .module("app")
        .controller("CancelDeploymentModalController", CancelDeploymentModalController);
})(asm || (asm = {}));
//# sourceMappingURL=cancelDeploymentModal.js.map
var asm;
(function (asm) {
    var ConfirmDeployServiceModalController = (function () {
        function ConfirmDeployServiceModalController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $filter, MessageBox, Modal, $location) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.MessageBox = MessageBox;
            this.Modal = Modal;
            this.$location = $location;
            var self = this;
            self.activate();
        }
        ConfirmDeployServiceModalController.prototype.activate = function () {
            var self = this;
        };
        ConfirmDeployServiceModalController.prototype.deployServiceWizard = function () {
            var self = this;
            self.close();
            var deployServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICES_NEW_SERVICE_DeployService'),
                onHelp: function () {
                    self.GlobalServices.showHelp();
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/deployservice/deployservicewizard.html',
                controller: 'DeployServiceWizard as deployServiceWizard',
                params: {
                    templateId: self.$scope.modal.params.templateId
                }
            });
            self.$timeout(function () { return deployServiceWizard.modal.show(); }, 500);
        };
        ConfirmDeployServiceModalController.prototype.no = function () {
            var self = this;
            self.goToTemplateBuilder(self.$scope.modal.params.templateId);
            self.close();
        };
        ConfirmDeployServiceModalController.prototype.goToTemplateBuilder = function (id) {
            var self = this;
            self.$timeout(function () {
                self.$location.path("templatebuilder/" + id + "/view");
            }, 500);
        };
        ConfirmDeployServiceModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ConfirmDeployServiceModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ConfirmDeployServiceModalController.$inject = [
            '$http', '$timeout',
            '$scope', '$q', '$translate', 'Loading',
            'Dialog', 'Commands', 'GlobalServices',
            '$filter', 'Messagebox', 'Modal', "$location"];
        return ConfirmDeployServiceModalController;
    }());
    asm.ConfirmDeployServiceModalController = ConfirmDeployServiceModalController;
    angular
        .module('app')
        .controller('ConfirmDeployServiceModalController', ConfirmDeployServiceModalController);
})(asm || (asm = {}));
//# sourceMappingURL=confirmDeployServiceModal.js.map
var asm;
(function (asm) {
    var DeleteResourcesController = (function () {
        function DeleteResourcesController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.serviceId = '';
            this.errors = new Array();
            var self = this;
            self.serviceId = $scope.modal.params.serviceId,
                self.refresh();
        }
        DeleteResourcesController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.services.getServiceById, {
                id: self.$scope.modal.params.serviceId,
                scaleup: true
            })
                .then(function (data) {
                self.viewModel = data.data.responseObj;
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        DeleteResourcesController.prototype.doDeleteResources = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            var deleteRequest = {
                serviceId: self.$scope.modal.params.serviceId,
                applicationList: _.map(self.getSelectedItems(self.viewModel.applicationlist), 'id'),
                serverList: _.map(self.getSelectedItems(self.viewModel.serverlist), 'id'),
                vmList: _.map(self.getSelectedItems(self.viewModel.vmlist), 'id'),
                clusterList: _.map(self.getSelectedItems(self.viewModel.clusterlist), 'id'),
                volumeList: _.map(self.getSelectedItems(self.viewModel.storagelist), 'id'),
                scaleioList: _.map(self.getSelectedItems(self.viewModel.scaleiolist), 'id')
            };
            angular.forEach(deleteRequest.serverList, function (id) {
                var c = _.find(self.viewModel.components, { id: id });
                if (c) {
                    angular.forEach(c.relatedcomponents, function (rcItem) {
                        if (rcItem.installOrder > 0) {
                            deleteRequest.applicationList.push(rcItem.id);
                        }
                    });
                }
            });
            angular.forEach(deleteRequest.vmList, function (id) {
                var c = _.find(self.viewModel.components, { id: id });
                if (c) {
                    angular.forEach(c.relatedcomponents, function (rcItem) {
                        if (rcItem.installOrder > 0) {
                            deleteRequest.applicationList.push(rcItem.id);
                        }
                    });
                }
            });
            self.$http.post(self.Commands.data.services.deleteResources, deleteRequest)
                .then(function (data) {
                d.resolve();
                self.$scope.modal.close();
            })
                .catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        DeleteResourcesController.prototype.getSelectedItems = function (items) {
            return _.filter(items, { 'isSelected': true });
        };
        DeleteResourcesController.prototype.setSelectedServer = function (servers) {
            var self = this;
            if (self.viewModel.selectedServer && self.viewModel.selectedServer != null) {
                angular.forEach(servers, function (server) {
                    if (server.id == self.viewModel.selectedServer) {
                        server.isSelected = true;
                    }
                    else {
                        server.isSelected = false;
                    }
                });
            }
            return servers;
        };
        DeleteResourcesController.prototype.disableDeleteButton = function () {
            var self = this;
            if (self.getSelectedItems(self.viewModel.applicationlist).length +
                self.getSelectedItems(self.setSelectedServer(self.viewModel.serverlist)).length +
                self.getSelectedItems(self.viewModel.vmlist).length +
                self.getSelectedItems(self.viewModel.clusterlist).length +
                self.getSelectedItems(self.viewModel.storagelist).length +
                self.getSelectedItems(self.viewModel.scaleiolist).length <= 0)
                return true;
            else
                return false;
        };
        DeleteResourcesController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        DeleteResourcesController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return DeleteResourcesController;
    }());
    asm.DeleteResourcesController = DeleteResourcesController;
    angular
        .module("app")
        .controller("DeleteResourcesController", DeleteResourcesController);
})(asm || (asm = {}));
//# sourceMappingURL=deleteresources.js.map
var asm;
(function (asm) {
    var DeleteServiceModalController = (function () {
        function DeleteServiceModalController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $filter, MessageBox, $location, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.MessageBox = MessageBox;
            this.$location = $location;
            this.constants = constants;
            this.serverlist = [];
            this.vmlist = [];
            this.clusterlist = [];
            this.storagelist = [];
            this.scaleiolist = [];
            this.errors = [];
            this.removalTypeOptions = [];
            this.removalType = null;
            this.serversInInventory = "keep";
            this.resourceState = null;
            var self = this;
            self.service = $scope.modal.params.service;
            self.deleteRequest = {
                serviceId: '',
                deleteServers: true,
                serverList: [],
                deleteVMs: true,
                vmList: [],
                deleteClusters: false,
                clusterList: [],
                deleteStorageVolumes: false,
                volumeList: [],
                deleteScaleios: false,
                scaleioList: []
            };
            self.submitForm = false;
            self.removalTypeOptions = [
                { id: "delete", name: self.$translate.instant("SERVICE_DETAIL_DELETE_SERVICE_DeleteService") },
                { id: "remove", name: self.$translate.instant("SERVICE_DETAIL_RemoveService") }
            ];
            self.activate();
        }
        DeleteServiceModalController.prototype.setRemovalType = function () {
            var self = this;
            if (self.removalType == 'delete') {
                self.$scope.modal.title = self.$translate.instant('SERVICE_DETAIL_DELETE_SERVICE_DeleteService');
            }
            else {
                self.$scope.modal.title = self.$translate.instant('SERVICE_DETAIL_RemoveService');
            }
        };
        DeleteServiceModalController.prototype.activate = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.services.getServiceById, {
                id: self.$scope.modal.params.service.id,
                scaleup: true
            })
                .then(function (data) {
                self.service = data.data.responseObj;
                if (self.service != undefined) {
                    self.serviceId = self.service.id;
                    self.deleteRequest.serviceId = self.service.id;
                    self.deleteRequest.deleteServers = true;
                    $.each(self.service.components, function (idx, cmp) {
                        if (cmp.type == "server") {
                            self.serverlist.push(cmp);
                        }
                        if (cmp.type == "vm") {
                            self.vmlist.push(cmp);
                        }
                        if (cmp.type == "cluster") {
                            self.clusterlist.push(cmp);
                        }
                        if (cmp.type == "storage") {
                            self.storagelist.push(cmp);
                        }
                        if (cmp.type == "scaleio") {
                            self.scaleiolist.push(cmp);
                        }
                    });
                }
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        DeleteServiceModalController.prototype.pending = function () {
            var self = this;
            return angular.isDefined(self.service) && self.service.health === 'pending';
        };
        DeleteServiceModalController.prototype.delete = function (formHasErrors) {
            var self = this;
            if (formHasErrors) {
                self.submitForm = true;
                return;
            }
            var confirm = this.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SERVICE_DELETE_SERVICE')));
            confirm.then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.deleteRequest.serverList = [];
                self.deleteRequest.vmList = [];
                self.deleteRequest.clusterList = [];
                self.deleteRequest.volumeList = [];
                self.deleteRequest.scaleioList = [];
                $.each(self.serverlist, function (idx, cmp) { if (cmp.isSelected) {
                    self.deleteRequest.serverList.push(cmp.id);
                } });
                $.each(self.vmlist, function (idx, cmp) { self.deleteRequest.vmList.push(cmp.id); });
                $.each(self.clusterlist, function (idx, cmp) { if (cmp.isSelected) {
                    self.deleteRequest.clusterList.push(cmp.id);
                } });
                $.each(self.storagelist, function (idx, cmp) { if (cmp.isSelected) {
                    self.deleteRequest.volumeList.push(cmp.id);
                } });
                $.each(self.scaleiolist, function (idx, cmp) { if (cmp.isSelected) {
                    self.deleteRequest.scaleioList.push(cmp.id);
                } });
                var request = self.deleteRequest;
                if (!self.deleteRequest.deleteServers) {
                    self.deleteRequest.serverList = [];
                }
                if (!self.deleteRequest.deleteVMs) {
                    self.deleteRequest.vmList = [];
                }
                if (!self.deleteRequest.deleteClusters) {
                    self.deleteRequest.clusterList = [];
                }
                if (!self.deleteRequest.deleteStorageVolumes) {
                    self.deleteRequest.volumeList = [];
                }
                if (!self.deleteRequest.deleteScaleios) {
                    self.deleteRequest.scaleioList = [];
                }
                self.$http.post(self.Commands.data.services.deleteService, request)
                    .then(function (data) {
                    d.resolve();
                    self.$scope.modal.close();
                    self.$timeout(function () {
                        self.$location.path('services/');
                    }, 1000);
                }).catch(function (data) {
                    d.resolve();
                    self.GlobalServices.DisplayError(data.data, self.errors);
                });
            });
        };
        DeleteServiceModalController.prototype.remove = function (formHasErrors) {
            var self = this;
            if (formHasErrors) {
                self.submitForm = true;
                return;
            }
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.services.removeService, { serviceId: self.serviceId, serversInInventory: self.serversInInventory, resourceState: self.resourceState })
                .then(function (data) {
                d.resolve();
                self.$scope.modal.close();
                self.$timeout(function () {
                    self.$location.path('services/');
                }, 1000);
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        DeleteServiceModalController.prototype.close = function () {
            var self = this;
            //self.$scope.modal.dismiss();
            self.$scope.modal.cancel();
        };
        DeleteServiceModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog',
            'Commands', 'GlobalServices', '$filter', 'Messagebox', '$location', 'constants'];
        return DeleteServiceModalController;
    }());
    asm.DeleteServiceModalController = DeleteServiceModalController;
    angular
        .module('app')
        .controller('DeleteServiceModalController', DeleteServiceModalController);
})(asm || (asm = {}));
//# sourceMappingURL=deleteserviceModal.js.map
var asm;
(function (asm) {
    var EditServiceModalController = (function () {
        function EditServiceModalController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $filter, MessageBox, Modal) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.MessageBox = MessageBox;
            this.Modal = Modal;
            this.service = {};
            this.firmwarepackages = [];
            this.errors = new Array();
            var self = this;
            self.serviceId = $scope.modal.params.id || '';
            self.activate();
        }
        EditServiceModalController.prototype.activate = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            if (self.serviceId) {
                self.$q.all([
                    self.$http.post(self.Commands.data.firmwarepackages.getAvailableFirmwarePackages, null)
                        .then(function (data) {
                        self.firmwarepackages = [
                            {
                                id: 'usedefaultcatalog',
                                name: self.$translate
                                    .instant("SERVICE_DETAIL_EditService_UseASMappliancedefaultcatalog"),
                                defaultpackage: false
                            }
                        ].concat(data.data.responseObj);
                    }),
                    self.$http.post(self.Commands.data.services.getServiceById, { id: self.serviceId, scaleup: true })
                        .then(function (data) {
                        self.service = data.data.responseObj;
                        self.service._allStandardUsers = self.get_allStandardusers(self.service);
                    })
                ])
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                })
                    .finally(function () { return d.resolve(); });
            }
        };
        EditServiceModalController.prototype.setDefaultFirmware = function () {
            var self = this;
            if (self.service && !self.service.firmwarePackageId) {
                if (self.service.manageFirmware) {
                    var pkg = _.find(self.firmwarepackages, { defaultpackage: true });
                    if (pkg) {
                        self.service.firmwarePackageId = pkg.id;
                    }
                }
                else {
                    self.service.firmwarePackageId = "";
                }
            }
        };
        EditServiceModalController.prototype.submit = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            if (self.get_allStandardusers(self.service) === "admins") {
                //if not managing permissions, clear out the settings
                self.service.assignedUsers = [];
            }
            angular.forEach(self.service.components, function (component) {
                angular.forEach(component.settings, function (setting) {
                    if (setting.value != null && typeof setting.value != 'string') {
                        setting.value = JSON.stringify(setting.value);
                    }
                });
            });
            self.$http.post(self.Commands.data.services.updateService, self.service)
                .then(function (data) {
                //wait for loading spinner clears because a new one is going to go up as soon as this closes
                self.$timeout(function () { self.$scope.modal.close(); }, 500);
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        EditServiceModalController.prototype.updateAllStandardUsersProp = function (context) {
            switch (context._allStandardUsers) {
                case "admins":
                    context.assignedUsers = [];
                    context.allStandardUsers = false;
                    break;
                case "specific":
                    context.allStandardUsers = false;
                    break;
                case "allStandard":
                    context.assignedUsers = [];
                    context.allStandardUsers = true;
                    break;
            }
        };
        EditServiceModalController.prototype.get_allStandardusers = function (context) {
            return context.allStandardUsers
                ? "allStandard"
                : (context.assignedUsers && context.assignedUsers.length ? "specific" : "admins");
        };
        EditServiceModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditServiceModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog',
            'Commands', 'GlobalServices', '$filter', 'Messagebox', 'Modal'];
        return EditServiceModalController;
    }());
    asm.EditServiceModalController = EditServiceModalController;
    angular
        .module('app')
        .controller('EditServiceModalController', EditServiceModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editServiceModal.js.map
var asm;
(function (asm) {
    var MigrateController = (function () {
        function MigrateController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = new Array();
            var self = this;
            self.refresh();
        }
        MigrateController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$q.all([
                self.$http.post(self.Commands.data.services.getServiceById, { id: self.$scope.modal.params.serviceId })
                    .then(function (data) {
                    self.viewModel = data.data.responseObj.serverlist;
                    self.displayedData = angular.copy(self.viewModel);
                }),
                self.$http.post(self.Commands.data.serverpools.getServerPools, null)
                    .then(function (data) {
                    self.serverPools = data.data.responseObj;
                })
            ])
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        MigrateController.prototype.doMigrate = function () {
            var self = this;
            console.log(self.selectedServer);
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('MIGRATE_SERVER_Confirm') +
                ("<br /><ul><li>\n                " + self.selectedServer.ipAddress + " - " + self.selectedServer._newServerPool.name + "\n                </li></ul>"))
                .then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.services.migrate, {
                    serviceId: self.$scope.modal.params.serviceId,
                    migrateAllServers: false,
                    targetServerPool: "",
                    migrateServers: [
                        {
                            id: self.selectedServer.id,
                            name: self.selectedServer._newServerPool.id
                        }
                    ]
                })
                    .then(function (data) {
                    d.resolve();
                    self.Dialog(self.$translate.instant('MIGRATE_SERVER_Submitted'), null, true);
                    self.$scope.modal.close();
                })
                    .catch(function (data) {
                    d.resolve();
                    self.GlobalServices.DisplayError(data.data, self.errors);
                });
            });
        };
        MigrateController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        MigrateController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        MigrateController.$inject = ["$http", "$timeout", "$scope", "$q", "$translate", "Modal", "Loading", "Dialog", "Commands", "GlobalServices"];
        return MigrateController;
    }());
    asm.MigrateController = MigrateController;
    angular
        .module("app")
        .controller("MigrateController", MigrateController);
})(asm || (asm = {}));
//# sourceMappingURL=migrate.js.map
var asm;
(function (asm) {
    var RetryServiceController = (function () {
        function RetryServiceController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = [];
            this.doAltAction = false;
            this.showAltAction = false;
            var self = this;
            if ($scope.modal.params.service) {
                self.service = $scope.modal.params.service;
                self.serviceId = self.service.id;
            }
            if ($scope.modal.params.showAlternateAction) {
                self.showAltAction = angular.copy($scope.modal.params.showAlternateAction);
            }
            self.initialize();
        }
        RetryServiceController.prototype.initialize = function () {
            var self = this;
        };
        RetryServiceController.prototype.retryService = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.httpRetry()
                .then(function (data) {
                self.close();
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        RetryServiceController.prototype.openFirmwareReport = function () {
            var self = this;
            var firmwareReportModal = self.Modal({
                title: self.$translate.instant('SERVICES_SERVICE_FirmwareReportTitle'),
                onHelp: function () {
                    self.GlobalServices.showHelp('viewfirmwarecomplianceservice');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/servicecompliancereport.html',
                controller: 'ServiceComplianceReportController as serviceComplianceReportController',
                params: {
                    type: "service",
                    id: self.serviceId
                },
                onComplete: function () {
                },
                onCancel: function () {
                    firmwareReportModal.modal.dismiss();
                }
            });
            firmwareReportModal.modal.show();
        };
        RetryServiceController.prototype.showAlternateAction = function () {
            var self = this;
            return self.showAltAction;
        };
        RetryServiceController.prototype.doAlternateAction = function () {
            var self = this;
            //set a return value, check it on return, call doUpdateFirmware() in parent as necessary/true
            self.doAltAction = true;
            self.$scope.modal.close(self.doAltAction);
        };
        RetryServiceController.prototype.httpRetry = function () {
            var self = this;
            return self.$http.post(self.Commands.data.services.retryService, { id: self.serviceId });
        };
        RetryServiceController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        RetryServiceController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        RetryServiceController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return RetryServiceController;
    }());
    asm.RetryServiceController = RetryServiceController;
    angular
        .module('app')
        .controller('RetryServiceController', RetryServiceController);
})(asm || (asm = {}));
//# sourceMappingURL=retryService.js.map
var asm;
(function (asm) {
    var ServiceComplianceReportController = (function () {
        function ServiceComplianceReportController($http, $timeout, $scope, $q, $translate, modal, Loading, Dialog, commands, globalServices, constants, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.constants = constants;
            this.GlobalServices = GlobalServices;
            this.tableView = 'firmware';
            this.errors = new Array();
            var self = this;
            self.id = $scope.modal.params.id || "";
            self.activate();
        }
        ServiceComplianceReportController.prototype.activate = function () {
            var self = this;
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(self.$q.all([
                self.getFirmwareReport(self.id, self.$scope.modal.params.type || "")
                    .then(function (response) {
                    self.complianceReport = response.data.responseObj;
                    //filter devices so that we only have devices that have either firmwareComponents or softwareComponents
                    self.complianceReport.devices = _.filter(self.complianceReport.devices, function (device) {
                        return (device.firmwareComponents.length > 0 || device.softwareComponents.length > 0);
                    });
                    //fw and sw compliant determined by looking at each firmwarereport and each component therein
                    //if any one component is not compliant, that fr is noncompliant; and even one noncompliant fr will show the messages on the html page
                    //old code:  fwComponents_compcode, swComponents_compcode value of 2 is compliant, value of 1 is not compliant
                    angular.forEach(self.complianceReport.devices, function (report) {
                        angular.extend(report, {
                            firmwareComponents: _.orderBy(report.firmwareComponents, ["type", "compliant"]),
                            softwareComponents: _.orderBy(report.softwareComponents, ["type", "compliant"]),
                            fwComponents_compcode: !!_.find([report.firmwareComponents], function (array) {
                                return _.find(array, function (comp) { return comp.compliant === false; });
                            }) ? "yellow" : "green",
                            swComponents_compcode: !!_.find([report.softwareComponents], function (array) {
                                return _.find(array, function (comp) { return comp.compliant === false; });
                            }) ? "yellow" : "green"
                        });
                    });
                    self.reportsSafe = angular.copy(self.complianceReport.devices);
                    //self.compliant = _.find(self.complianceReport.devices,
                    //        (report: any) => {
                    //            return !!_.find([report.firmwareComponents, report.softwareComponents],
                    //                (array: Array<any>) => _
                    //                .find(array, (report: any) => report.compliant === false));
                    //        })
                    //    ? "yellow"
                    //    : "green";
                }),
                self.getServiceById(self.id, true)
                    .then(function (data) {
                    self.service = data.data.responseObj;
                })
            ])
                .catch(function (data) {
                self.globalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () {
                self.updateDisabled = self.disableUpdate();
            }));
        };
        ServiceComplianceReportController.prototype.disableUpdate = function () {
            var self = this;
            if (!self.GlobalServices.IsInRole('administrator')) {
                return true;
            }
            if (self.service.firmwareCompliant === "compliant") {
                return true;
            }
            if (self.service.health === "unknown" || self.service.health === "servicemode") {
                return true;
            }
            if (_.find(self.complianceReport.devices, function (device) {
                return device.status === "pendingupdates" || device.status === "pendingdelete";
            })) {
                return true;
            }
            return false;
        };
        ServiceComplianceReportController.prototype.updateServiceResource = function () {
            var self = this;
            var updateserviceModal = self.modal({
                title: self.$translate.instant('SERVICE_APPLY_RESOURCE_UPDATES_Title'),
                onHelp: function () {
                    self.GlobalServices.showHelp('updatefirmwarewizard');
                },
                modalSize: 'modal-lg',
                templateUrl: 'views/services/updateservicefirmware.html',
                controller: 'UpdateServiceFirmwareController as UpdateServiceFirmware',
                params: {
                    id: self.id,
                    mode: 'service'
                },
                onComplete: function () {
                }
            });
            updateserviceModal.modal.show();
            self.$scope.modal.close();
        };
        ServiceComplianceReportController.prototype.getFirmwareReport = function (id, type) {
            var self = this;
            return self.$http.post(self.commands.data.firmwareReport.getfirmwarereport, { id: id, type: type });
        };
        ServiceComplianceReportController.prototype.getServiceById = function (id, scaleup) {
            var self = this;
            return self.$http.post(self.commands.data.services.getServiceById, { id: id, scaleup: scaleup });
        };
        ServiceComplianceReportController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ServiceComplianceReportController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ServiceComplianceReportController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants', 'GlobalServices'];
        return ServiceComplianceReportController;
    }());
    asm.ServiceComplianceReportController = ServiceComplianceReportController;
    angular
        .module("app")
        .controller("ServiceComplianceReportController", ServiceComplianceReportController);
})(asm || (asm = {}));
//# sourceMappingURL=serviceComplianceReport.js.map
var asm;
(function (asm) {
    var ServiceComponentModalController = (function () {
        function ServiceComponentModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, $translate, constants, commands, $location, $filter, $anchorScroll) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.$translate = $translate;
            this.constants = constants;
            this.commands = commands;
            this.$location = $location;
            this.$filter = $filter;
            this.$anchorScroll = $anchorScroll;
            this.settings = {
                newSetting: false,
                numInstances: 1,
                serviceToDuplicate: undefined
            };
            this.readOnlyMode = false;
            this.invalidFormElements = [];
            this.errors = new Array();
            var self = this;
            self.refresh();
        }
        ServiceComponentModalController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.readOnlyMode = self.$scope.modal.params.mode !== "edit";
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.availableComponents = _.filter(self.$scope.modal.params.service.components, { type: self.$scope.modal.params.type });
            //self.settings.newSetting =
            //    (
            //        self.$scope.modal.params.type !== "storage"
            //        || self.$scope.modal.params.type !== "cluster"
            //    )
            //    || !self.availableComponents.length;
            self.$http.post(self.commands.data.templates.getTemplateBuilderComponents, {
                id: self.$scope.modal.params.type,
                templateId: self.$scope.modal.params.templateId,
                serviceId: self.$scope.modal.params.serviceId
            })
                .then(function (data) {
                if (self.$scope.modal.params.type === "storage") {
                    self.hideChooseForm = true;
                    //compute only cannot create volumes here, so show message directing user on what to do
                    if (data.data.responseObj === null) {
                        self.showComputeOnlyMessage = true;
                    }
                    self.newComponents = [data.data.responseObj[0]];
                    self.settings.serviceToDuplicate = self.newComponents[0];
                    self.linkStorageToAllServers(self.settings.serviceToDuplicate);
                    self.settings.newSetting = false;
                }
                else {
                    self.$scope.modal.params.availableComponents = data.data.responseObj;
                }
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ServiceComponentModalController.prototype.continue = function () {
            var self = this, d = self.$q.defer();
            if (self.forms.choose.$invalid) {
                self.forms.choose._submitted = false;
                self.forms.choose._showValidation = true;
                return;
            }
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.getAdjustServiceComponents(self.settings.serviceToDuplicate.id, self.settings.numInstances, self.$scope.modal.params.serviceId)
                .then(function (response) {
                self.newComponents = response.data.responseObj;
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ServiceComponentModalController.prototype.prepForSave = function (components) {
            return angular.forEach(components, function (component) {
                angular.forEach(component.categories, function (category) {
                    angular.forEach(category.settings, function (setting) {
                        if (setting.value != null && typeof setting.value != 'string') {
                            setting.value = JSON.stringify(setting.value);
                        }
                    });
                });
            });
        };
        ServiceComponentModalController.prototype.adjustService = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.GlobalServices.scrollToInvalidElement("page_service_component_wrapper");
            if (self.requiredFieldsRemaining(self.newComponents))
                return d.reject();
            self.adjustServiceCall(self.settings.serviceToDuplicate.id, self.prepForSave(angular.copy(self.newComponents)), self.$scope.modal.params.serviceId)
                .then(function () {
                self.close();
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ServiceComponentModalController.prototype.requiredFieldsRemaining = function (componentArray) {
            var self = this, count = 0, numInvalidCustomFormElements = self.numInvalidCustomComponents(self.invalidFormElements);
            angular.forEach(componentArray, function (component) {
                angular.forEach(_.filter(component.categories, function (category) { return self.categoryVisible(category, component); }), function (category) {
                    var filteredSettings = self.$filter("serviceComponentFilter")(category.settings, component);
                    angular.forEach(filteredSettings, function (setting) {
                        if (!setting.value && setting.required) {
                            count += 1;
                        }
                    });
                });
            });
            return count + numInvalidCustomFormElements;
        };
        ServiceComponentModalController.prototype.categoryVisible = function (category, component) {
            var self = this;
            var filteredSettings = self.$filter("serviceComponentFilter")(category.settings, component);
            return filteredSettings.length;
        };
        ServiceComponentModalController.prototype.scrollTo = function (id) {
            var self = this;
            //wait for collapsing row to close, then only scroll to it if it's opening and not closing
            self.$timeout(function () {
                $("#" + id).find(".collapsed")[0] || self.$anchorScroll("" + id);
            }, 500);
        };
        ServiceComponentModalController.prototype.numInvalidCustomComponents = function (invalidFormElementsArray) {
            return _.filter(invalidFormElementsArray, { invalid: true }).length;
        };
        ServiceComponentModalController.prototype.linkStorageToAllServers = function (storage) {
            var self = this;
            var servers = _.filter(self.$scope.modal.params.service.components, { type: "server" });
            angular.forEach(servers, function (server) { return self.linkComponents(storage, server, true); });
        };
        ServiceComponentModalController.prototype.linkComponents = function (component1, component2, oneWay) {
            component1.relatedcomponents = angular.isUndefined(component1.relatedcomponents) ? [] : component1.relatedcomponents;
            component2.relatedcomponents = angular.isUndefined(component2.relatedcomponents) ? [] : component2.relatedcomponents;
            component1.relatedcomponents.push({ id: component2.id, name: component2.name, instances: component2.instances });
            oneWay || component2.relatedcomponents.push({ id: component1.id, name: component1.name, instances: component1.instances });
            var comp1 = _.map(component1.relatedcomponents);
            component1.relatedcomponents = _.uniq(comp1);
            var comp2 = _.map(component2.relatedcomponents);
            component2.relatedcomponents = _.uniq(comp2);
        };
        ServiceComponentModalController.prototype.getAdjustServiceComponents = function (componentId, instances, serviceId) {
            var self = this;
            return self.$http.post(self.commands.data.services.getAdjustServiceComponents, { source: 'duplicate', componentId: componentId, instances: instances, serviceId: serviceId });
        };
        ServiceComponentModalController.prototype.adjustServiceCall = function (componentId, components, serviceId) {
            var self = this;
            return self.$http.post(self.commands.data.services.adjustService, { componentId: componentId, components: components, serviceId: serviceId });
        };
        ServiceComponentModalController.prototype.saveService = function (data) {
            var self = this, newComponentCopy = angular.copy(data.newComponent);
            newComponentCopy.categories = self.GlobalServices.stringifyCategories(newComponentCopy.categories);
            var components = [];
            components.push(newComponentCopy);
            components.push(data.scaleIOComponent);
            return self.adjustServiceCall(data.newComponent.id, components, data.config.service.id);
        };
        ServiceComponentModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ServiceComponentModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ServiceComponentModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader',
            '$translate', 'constants', 'Commands', '$location', '$filter', "$anchorScroll"];
        return ServiceComponentModalController;
    }());
    asm.ServiceComponentModalController = ServiceComponentModalController;
    angular
        .module('app')
        .controller('ServiceComponentModalController', ServiceComponentModalController);
})(asm || (asm = {}));
//# sourceMappingURL=serviceComponentWrapper.js.map
var asm;
(function (asm) {
    var UpdateComponentsController = (function () {
        function UpdateComponentsController($http, $timeout, $scope, $q, $translate, Modal, loading, Dialog, Commands, GlobalServices, constants, $filter) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.loading = loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$filter = $filter;
            this.serviceId = this.$scope.modal.params.serviceId;
            this.mode = "edit";
            this.errors = new Array();
            var self = this;
            self.refresh();
        }
        UpdateComponentsController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.getUpdatableService(self.serviceId)
                .then(function (response) {
                self.serviceSettings = response.data.responseObj;
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        UpdateComponentsController.prototype.save = function (forceRetry) {
            var self = this, d = self.$q.defer();
            self.form._submitted = true;
            self.serviceSettings.forceRetry = forceRetry;
            self.GlobalServices.ClearErrors(self.errors);
            self.loading(d.promise);
            self.saveService(self.serviceSettings)
                .then(function () {
                d.resolve();
                self.close();
            })
                .catch(function (response) { return self.GlobalServices.DisplayError(response.data, self.errors); })
                .finally(function () { return d.resolve(); });
        };
        UpdateComponentsController.prototype.categoryVisible = function (category, component) {
            var self = this;
            return self.$filter("updateComponents")(category.settings, component).length;
        };
        ;
        UpdateComponentsController.prototype.componentVisible = function (component) {
            var self = this;
            return _.find(component.categories, function (category) { return self.categoryVisible(category, component); });
        };
        UpdateComponentsController.prototype.remainingFields = function () {
            var self = this, count = 0;
            angular.forEach(self.serviceSettings.components, function (component) {
                angular.forEach(component.categories, function (category) {
                    //filter for dependencies
                    var settingsVisible = self.$filter("updateComponents")(category.settings, component);
                    var blankFields = _.filter(settingsVisible, function (s) { return s.required && !s.value; });
                    count += blankFields.length;
                });
            });
            return count;
        };
        UpdateComponentsController.prototype.getUpdatableService = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.services.getUpdatableServiceSettingsById, { id: id });
        };
        UpdateComponentsController.prototype.saveService = function (service) {
            var self = this;
            return self.$http.post(self.Commands.data.services.updateComponents, service);
        };
        UpdateComponentsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        UpdateComponentsController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        UpdateComponentsController.$inject = [
            '$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands',
            'GlobalServices', 'constants', "$filter"
        ];
        return UpdateComponentsController;
    }());
    asm.UpdateComponentsController = UpdateComponentsController;
    angular
        .module("app")
        .controller("UpdateComponentsController", UpdateComponentsController);
})(asm || (asm = {}));
//# sourceMappingURL=updateComponents.js.map
var asm;
(function (asm) {
    var UpdateInventoryModalController = (function () {
        function UpdateInventoryModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $filter, constants) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.constants = constants;
            this.errors = new Array();
            this.types = [];
            this.osCredentials = [];
            this.inventoryUpdateDisabled = false;
            var self = this;
            self.types = self.constants.serviceTypes;
            self.initialize();
        }
        UpdateInventoryModalController.prototype.initialize = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.updateServiceInventory(self.$scope.modal.params.service.id)
                .then(function (response) {
                //make copy for resource tables to use because it mutates it
                self.serviceCopy = angular.copy(response.data.responseObj);
                self.service = response.data.responseObj;
                //self.service = { "id": null, "name": "", "template": "Generated Existing Service Template", "health": "pending", "deployedBy": null, "deployedOn": null, "description": null, "errors": null, "firmwareCompliant": "unknown", "firmwarePackageName": null, "brownField": true, "count_application": 0, "count_cluster": 2, "count_server": 0, "count_storage": 0, "count_switch": 0, "count_vm": 0, "count_scaleio": 1, "components": [{ "id": "4fdfeed4-9ebe-46db-b85d-61bdf8389c6e", "name": "aer1-cvcsa65.asm.delllabs.net", "type": "cluster", "subtype": "HYPERCONVERGED", "componentid": "component-cluster-vcenter-1", "identifier": null, "helptext": null, "relatedcomponents": [{ "id": "cd524098-0b7c-4b9d-ac10-2c2180dc25af", "name": "aer1-host-c04.asm.delllabs.net", "installOrder": null, "subtype": null }, { "id": "4d029081-26f9-4ddb-9a9f-750c6307e9b3", "name": "aer1-host-c06.asm.delllabs.net", "installOrder": null, "subtype": null }, { "id": "eaa611cb-43e8-4860-b2f8-bd9cdfc3eda7", "name": "aer1-host-c05.asm.delllabs.net", "installOrder": null, "subtype": null }, { "id": "7cd66d19-b96d-4794-97ef-15d7fa9dc03e", "name": "aer1-vxflexos-gw-2", "installOrder": null, "subtype": null }], "categories": [{ "id": "asm::cluster", "name": "Cluster Settings", "settings": [{ "id": "asm_guid", "value": "vcenter-100.68.97.72", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Target Virtual Machine Manager", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "vcenter-100.68.97.65", "name": "aer1-vcsa-mgmt.asm.delllabs.net", "dependencyTarget": null, "dependencyValue": null }, { "id": "vcenter-100.68.97.72", "name": "aer1-cvcsa65.asm.delllabs.net", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "datacenter", "value": "aer1-dc-1", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Data Center Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create New Datacenter...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aer1-dc-1", "name": "aer1-dc-1", "dependencyTarget": "asm_guid", "dependencyValue": "vcenter-100.68.97.72" }, { "id": "VXRC-Datacenter", "name": "VXRC-Datacenter", "dependencyTarget": "asm_guid", "dependencyValue": "vcenter-100.68.97.65" }], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$datacenter", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New datacenter name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "datacenter", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "cluster", "value": "aer1-cluster-1", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Cluster Name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create New Cluster...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aer1-cluster-1", "name": "aer1-cluster-1", "dependencyTarget": "datacenter", "dependencyValue": "aer1-dc-1" }, { "id": "VXRC-Cluster", "name": "VXRC-Cluster", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$cluster", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New cluster name", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "cluster", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_enabled", "value": "distributed", "datatype": "radio", "componentid": "component-cluster-vcenter-1", "name": "Switch Type", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "standard", "name": "Standard", "dependencyTarget": null, "dependencyValue": null }, { "id": "distributed", "name": "Distributed", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ha_config", "value": "true", "datatype": "boolean", "componentid": "component-cluster-vcenter-1", "name": "Cluster HA Enabled", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "cluster", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "drs_config", "value": "true", "datatype": "boolean", "componentid": "component-cluster-vcenter-1", "name": "Cluster DRS Enabled", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "cluster", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }, { "id": "asm::cluster::vds", "name": "vSphere VDS Settings", "settings": [{ "id": "vds_name", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create VDS Name ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "VXMA_dvswitch1", "name": "VXMA_dvswitch1", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "aer1-vds0", "name": "aer1-vds0", "dependencyTarget": "datacenter", "dependencyValue": "aer1-dc-1" }, { "id": "VXMA_dvswitch2", "name": "VXMA_dvswitch2", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "aer1-vds2", "name": "aer1-vds2", "dependencyTarget": "datacenter", "dependencyValue": "aer1-dc-1" }, { "id": "VXMA_dvswitch0", "name": "VXMA_dvswitch0", "dependencyTarget": "datacenter", "dependencyValue": "VXRC-Datacenter" }, { "id": "aer1-vds1", "name": "aer1-vds1", "dependencyTarget": "datacenter", "dependencyValue": "aer1-dc-1" }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_name", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New VDS Name", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_name", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "vds_pg", "value": "", "datatype": "enum", "componentid": "component-cluster-vcenter-1", "name": "Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "$new$", "name": "Create Port Group ...", "dependencyTarget": null, "dependencyValue": null }, { "id": "VXMA_dvswitch0-DVUplinks-47", "name": "VXMA_dvswitch0-DVUplinks-47", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch0" }, { "id": "legacy-pxe-27", "name": "legacy-pxe-27", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-esx-mgmt", "name": "vcesys-esx-mgmt", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-sio-data2", "name": "vcesys-sio-data2", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "VMXA_dvswitch1-DVUplinks-49", "name": "VMXA_dvswitch1-DVUplinks-49", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "aer1-sio-mgmt", "name": "aer1-sio-mgmt", "dependencyTarget": "vds_name", "dependencyValue": "aer1-vds0" }, { "id": "aer1-pxe", "name": "aer1-pxe", "dependencyTarget": "vds_name", "dependencyValue": "aer1-vds0" }, { "id": "legacy-pxe-25", "name": "legacy-pxe-25", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-sio-data1", "name": "vcesys-sio-data1", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "aer1-vds0-uplink-pg", "name": "aer1-vds0-uplink-pg", "dependencyTarget": "vds_name", "dependencyValue": "aer1-vds0" }, { "id": "vcesys-customer", "name": "vcesys-customer", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-sio-data1-157", "name": "vcesys-sio-data1-157", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "VMXA_dvswitch2-DVUplinks-51", "name": "VMXA_dvswitch2-DVUplinks-51", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch2" }, { "id": "aer1-esx-mgmt", "name": "aer1-esx-mgmt", "dependencyTarget": "vds_name", "dependencyValue": "aer1-vds0" }, { "id": "vcesys-sio-data2-158", "name": "vcesys-sio-data2-158", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "aer1-vmotion", "name": "aer1-vmotion", "dependencyTarget": "vds_name", "dependencyValue": "aer1-vds0" }, { "id": "vcesysephemtmp", "name": "vcesysephemtmp", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-sio-data2-JDK", "name": "vcesys-sio-data2-JDK", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "vcesys-vmotion", "name": "vcesys-vmotion", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "legacy-pxe-18", "name": "legacy-pxe-18", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "aer1-vds1-uplink-pg", "name": "aer1-vds1-uplink-pg", "dependencyTarget": "vds_name", "dependencyValue": "aer1-vds1" }, { "id": "workload_pg_503", "name": "workload_pg_503", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch0" }, { "id": "aer1-workload", "name": "aer1-workload", "dependencyTarget": "vds_name", "dependencyValue": "aer1-vds0" }, { "id": "aer1-vds2-uplink-pg", "name": "aer1-vds2-uplink-pg", "dependencyTarget": "vds_name", "dependencyValue": "aer1-vds2" }, { "id": "vcesys-sio-data2-Arun", "name": "vcesys-sio-data2-Arun", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "aer1-data1", "name": "aer1-data1", "dependencyTarget": "vds_name", "dependencyValue": "aer1-vds1" }, { "id": "vcesys-vsan", "name": "vcesys-vsan", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }, { "id": "aer1-data2", "name": "aer1-data2", "dependencyTarget": "vds_name", "dependencyValue": "aer1-vds2" }, { "id": "vcesys-sio-mgmt", "name": "vcesys-sio-mgmt", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch0" }, { "id": "vcesys-oobmgmt", "name": "vcesys-oobmgmt", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch2" }, { "id": "vxflex-installation-244", "name": "vxflex-installation-244", "dependencyTarget": "vds_name", "dependencyValue": "VXMA_dvswitch1" }], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": "vds_enabled", "dependencyValue": "distributed", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "$new$vds_pg", "value": null, "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": "New Port Group", "tooltip": null, "required": false, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": "vds_pg", "dependencyValue": "$new$", "addAction": null, "readOnly": false, "group": "VDS", "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-cluster-vcenter-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": null, "network": null, "newComponent": null, "cloned": false, "continueClicked": null, "AsmGUID": "vcenter-100.68.97.72", "puppetCertName": "vcenter-aer1-cvcsa65.asm.delllabs.net", "clonedFromId": null, "allowClone": false, "isComponentValid": true, "raid": null, "configfilename": null, "instances": 1, "errorObj": null }, { "id": "7cd66d19-b96d-4794-97ef-15d7fa9dc03e", "name": "aer1-vxflexos-gw-2", "type": "scaleio", "subtype": "HYPERCONVERGED", "componentid": "component-scaleio-gateway-1", "identifier": null, "helptext": null, "relatedcomponents": [{ "id": "4fdfeed4-9ebe-46db-b85d-61bdf8389c6e", "name": "aer1-cvcsa65.asm.delllabs.net", "installOrder": null, "subtype": null }], "categories": [{ "id": "asm::scaleio", "name": "VxFlex OS Settings", "settings": [{ "id": "asm_guid", "value": "scaleio-100.68.97.252", "datatype": "enum", "componentid": "component-scaleio-gateway-1", "name": "Target VxFlex OS Gateway", "tooltip": "Dell EMC VxFlex OS is based on ScaleIO software. VxFlex OS values may be entered/shown in this field.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "", "name": "Select...", "dependencyTarget": null, "dependencyValue": null }, { "id": "scaleio-100.68.97.252", "name": "aer1-vxflexos-gw-2", "dependencyTarget": null, "dependencyValue": null }], "requireatdeployment": false, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "protection_domain_type", "value": "auto_generate", "datatype": "enum", "componentid": "component-scaleio-gateway-1", "name": "Protection Domain Name", "tooltip": "This selection determines how the name will be specified for your VxFlex OS protection domain.<br/><br/>Select an existing protection domain - Names for protection domains from your selected Target VxFlex OS gateway will be displayed, if available.<br/>Auto generate protection domain name and use variables that will produce a unique protection domain name.<br/>Possible variables include:<br/>${num} An auto-generated unique number</br>${esxiClusterName} - Name specified for the ESXi cluster<br/><br/>Specify a new protection domain name now User enters desired VxFlex OS protection domain name.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "auto_generate", "name": "Auto generate protection domain name (Recommended)...", "dependencyTarget": null, "dependencyValue": null }, { "id": "specify", "name": "Specify a new protection domain name now...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aer1-pd-1", "name": "aer1-pd-1", "dependencyTarget": "asm_guid", "dependencyValue": "scaleio-100.68.97.252" }], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": false, "isPreservedForDeployment": false }, { "id": "protection_domain_name_template", "value": "${esxiClusterName}-PD-${num}", "datatype": "string", "componentid": "component-scaleio-gateway-1", "name": "Protection Domain Name Template", "tooltip": "Use the protection domain name template field to to auto generate the protection domain name.<br/><br/>Possible variables include:<br/>${num} â An auto-generated unique number<br/>${esxiClusterName} â Name specified for the ESXi cluster<br/><br/>Use of the ${num} variable is required to ensure uniqueness.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "protection_domain_type", "dependencyValue": "auto_generate", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "protection_domain_new_name", "value": null, "datatype": "string", "componentid": "component-scaleio-gateway-1", "name": "New Protection Domain Name", "tooltip": "User enters desired VxFlex OS protection domain name. ", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "protection_domain_type", "dependencyValue": "specify", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "storage_pool_name", "value": "pool_auto_generate", "datatype": "enum", "componentid": "component-scaleio-gateway-1", "name": "Storage Pool Name", "tooltip": "This selection determines how the name will be specified for your VxFlex OS storage pool.<br/><br/>Select an existing storage pool - Names for storage pools from your selected protection domain will be displayed, if available.<br/>Auto generate storage pool name use variables that will produce a unique storage pool name.<br/>Possible variables include:<br/>${num} An auto-generated unique number</br>${esxiClusterName} - Name specified for the ESXi cluster<br/>${protectionDomainName} - Name specified for the Protection Domain Name<br/>${diskType} - Type of disks used in the Storage Pool (SSD or HDD)<br/><br/>Specify a new storage pool name now User enters desired VxFlex OS storage pool name.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [{ "id": "pool_auto_generate", "name": "Auto generate storage pool name (Recommended)...", "dependencyTarget": null, "dependencyValue": null }, { "id": "aer1-pool-SSD-1", "name": "aer1-pool-SSD-1", "dependencyTarget": "protection_domain_type", "dependencyValue": "aer1-pd-1" }, { "id": "aer1-pool-HDD-1", "name": "aer1-pool-HDD-1", "dependencyTarget": "protection_domain_type", "dependencyValue": "aer1-pd-1" }], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": false, "isPreservedForDeployment": false }, { "id": "storage_pool_name_template", "value": "${esxiClusterName}-SP-${diskType}-${num}", "datatype": "string", "componentid": "component-scaleio-gateway-1", "name": "Storage Pool Name Template", "tooltip": "Use the storage pool name template field to auto-generate the names that will be used for your storage pools. Storage pools are dynamically created based on the quantity and type of drives in your nodes.<br/><br/>Allowed variables are:<br/>${num} â An auto-generated unique number<br/>${esxiClusterName} â Name specified for the ESXi cluster<br/>${protectionDomainName} â Name specified for VxFlex OS Protection Domain<br/>${diskType} â Type of disk used for storage pool (SSD or HDD)<br/><br/>Use of the ${num} variable is required to ensure uniqueness.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": true, "hidefromtemplate": false, "dependencyTarget": "storage_pool_name", "dependencyValue": "pool_auto_generate", "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "generated_protection_domain_settings", "value": "[]", "datatype": "protectiondomainsettings", "componentid": "component-scaleio-gateway-1", "name": "Generated Protection Domain Settings", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": true, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "virtual_network_interfaces", "value": "", "datatype": "list", "componentid": "component-scaleio-gateway-1", "name": "VxFlex OS MDM Virtual IP Networks", "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": true, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }, { "id": "storage_pool_spare_capacity", "value": null, "datatype": "radio", "componentid": "component-scaleio-gateway-1", "name": "VxFlex OS Storage Pool Spare Capacity", "tooltip": "VxRack FLEX recommends a spare capacity of 1/N, where N is the number of nodes in the storage pool.<br/><br/>When adding aditional nodes to a storage pool, the recommendation is to have VxFlex Manager update the spare capacity based on the updated total number nodes.<br/><br/>If appropriate, the spare capacity can remain at the current value by selecting âCurrent Spare Capacityâ option.", "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": null, "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": true }, { "id": "ensure", "value": "present", "datatype": "string", "componentid": "component-scaleio-gateway-1", "name": null, "tooltip": null, "required": true, "min": 0, "max": 0, "multiple": false, "options": [], "requireatdeployment": false, "hidefromtemplate": true, "dependencyTarget": null, "dependencyValue": null, "addAction": null, "readOnly": false, "group": "none", "generated": false, "useinfotooltip": false, "maxlength": 256, "step": 1, "isOptionsSortable": true, "isPreservedForDeployment": false }] }], "referenceid": null, "referenceip": null, "referenceipurl": "https://null", "showNetworkInfo": null, "network": null, "newComponent": null, "cloned": false, "continueClicked": null, "AsmGUID": "scaleio-100.68.97.252", "puppetCertName": "scaleio-aer1-vxflexos-gw-2", "clonedFromId": null, "allowClone": false, "isComponentValid": true, "raid": null, "configfilename": null, "instances": 1, "errorObj": null }], "expires": null, "servers": 0, "ram": 0, "processors": 0, "arrays": 0, "volumes": 0, "vlans": 0, "networktype": null, "vms": 0, "clusters": 0, "type": null, "state": "Pending", "createddate": null, "createdBy": null, "priority": null, "compute": 0, "storage": 0, "network": 0, "serverlist": [{ "id": "ff80808166e5fd260166e6080d5d0bd9", "health": "green", "healthmessage": "This component is in use by another VxFM service", "ipAddress": "100.68.97.18", "serviceTag": "3FXVJB2", "deviceType": "RackServer", "compliant": "unknown", "state": "unmanaged", "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.97.18", "deviceid": "3FXVJB2", "hostname": null, "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": "Hybrid Servers", "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [], "serverpool": "Hybrid Servers", "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": null, "clustername": null, "asmGUID": "ff80808166e5fd260166e6080d5d0bd9", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": null, "mdmRole": null, "vxflexosmanagementipaddress": null, "primarymdmipaddress": null }, { "id": "ff80808166e5fd260166e60b981c0fe5", "health": "green", "healthmessage": "This component is in use by another VxFM service", "ipAddress": "100.68.97.14", "serviceTag": "3FXZJB2", "deviceType": "RackServer", "compliant": "unknown", "state": "unmanaged", "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.97.14", "deviceid": "3FXZJB2", "hostname": null, "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": "Hybrid Servers", "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [], "serverpool": "Hybrid Servers", "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": null, "clustername": null, "asmGUID": "ff80808166e5fd260166e60b981c0fe5", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": null, "mdmRole": null, "vxflexosmanagementipaddress": null, "primarymdmipaddress": null }, { "id": "ff80808166e5fd260166e60aa2a40e4a", "health": "green", "healthmessage": "This component is in use by another VxFM service", "ipAddress": "100.68.97.19", "serviceTag": "3FXTJB2", "deviceType": "RackServer", "compliant": "unknown", "state": "unmanaged", "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.97.19", "deviceid": "3FXTJB2", "hostname": null, "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": "Hybrid Servers", "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [], "serverpool": "Hybrid Servers", "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": null, "clustername": null, "asmGUID": "ff80808166e5fd260166e60aa2a40e4a", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": null, "mdmRole": null, "vxflexosmanagementipaddress": null, "primarymdmipaddress": null }], "storagelist": [], "networklist": [], "clusterlist": [{ "id": "4fdfeed4-9ebe-46db-b85d-61bdf8389c6e", "health": "unknown", "healthmessage": "", "ipAddress": "100.68.97.72", "serviceTag": "aer1-cvcsa65.asm.delllabs.net", "deviceType": "vcenter", "compliant": "unknown", "state": "managed", "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.97.72", "deviceid": "aer1-cvcsa65.asm.delllabs.net", "hostname": null, "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": null, "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [], "serverpool": null, "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": "aer1-dc-1", "clustername": "aer1-cluster-1", "asmGUID": "vcenter-100.68.97.72", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": null, "mdmRole": null, "vxflexosmanagementipaddress": null, "primarymdmipaddress": null }], "applicationlist": [], "vmlist": [], "activityLogs": [], "profile": null, "componentstatus": [{ "componentid": "4fdfeed4-9ebe-46db-b85d-61bdf8389c6e", "deviceid": "4fdfeed4-9ebe-46db-b85d-61bdf8389c6e", "devicetype": "cluster", "status": "complete", "statustime": null, "statusmessage": null, "resourcestate": "complete" }, { "componentid": "7cd66d19-b96d-4794-97ef-15d7fa9dc03e", "deviceid": "7cd66d19-b96d-4794-97ef-15d7fa9dc03e", "devicetype": "scaleio", "status": "complete", "statustime": null, "statusmessage": null, "resourcestate": "complete" }], "canMigrate": false, "canScaleupStorage": true, "canScaleupServer": true, "canScaleupVM": false, "canScaleupCluster": false, "canScaleupApplication": false, "forceRetry": false, "allStandardUsers": false, "assignedUsers": [], "owner": null, "canEdit": true, "canDelete": true, "canCancel": true, "canRetry": true, "canDeleteResources": true, "manageFirmware": true, "firmwarePackageId": null, "updateServerFirmware": false, "updateNetworkFirmware": false, "updateStorageFirmware": false, "componentUpdateRequired": false, "canScaleupNetwork": true, "templateId": "b4029167-f143-4314-918a-45a7547cc3f7", "resourceHealth": "green", "isHyperV": false, "hasVDS": false, "cancelInprogress": false, "scaleiolist": [{ "id": "7cd66d19-b96d-4794-97ef-15d7fa9dc03e", "health": "unknown", "healthmessage": "", "ipAddress": "100.68.97.252", "serviceTag": "aer1-vxflexos-gw-2", "deviceType": "scaleio", "compliant": "unknown", "state": "managed", "model": null, "displayserverpools": null, "manufacturer": null, "processorcount": -1, "processor": null, "memory": "N/A", "ipaddressurl": "https://100.68.97.252", "deviceid": "aer1-vxflexos-gw-2", "hostname": "aer1-vxflexos-gw-2", "chassisname": null, "groupname": null, "dnsdracname": null, "storagecentername": null, "replayprofile": null, "newserverpool": null, "availability": null, "status": "complete", "nics": 0, "servicelist": [], "name": null, "resourcename": null, "partitions": null, "profile": null, "statusText": null, "firmwareName": null, "template": null, "lastInventory": null, "lastComplianceCheck": null, "discoveredOn": null, "blades": 0, "canpoweron": false, "canpoweroff": false, "candelete": true, "os": null, "storage": null, "ipaddresses": null, "ipaddresstype": "management", "powerstate": null, "location": null, "systemstatus": null, "groupmembers": null, "volumes": null, "volumesup": null, "deviceidtype": "servicetag", "snapshots": null, "freegroupspace": null, "serialnumber": null, "datacenters": null, "networks": [], "clusters": null, "hosts": null, "virtualmachines": null, "dnsname": null, "cpu": null, "freediskspace": null, "online": null, "luns": null, "hostgroups": null, "volumelist": [], "serverpool": null, "hypervisorIPAddress": null, "aggregates": null, "disks": null, "vm_hostname": "", "vm_ostype": "", "vm_cpus": "", "vm_disksize": "", "vm_memory": "", "ipaddresslist": [], "firmwarecomponents": [], "showcompliancereport": false, "spaipaddress": null, "spaipaddressurl": null, "spbipaddress": null, "spbipaddressurl": null, "datacentername": null, "clustername": null, "asmGUID": "scaleio-100.68.97.252", "deviceDetails": null, "protectionDomain": null, "storagePools": [], "osMode": null, "mdmRole": null, "vxflexosmanagementipaddress": null, "primarymdmipaddress": "100.68.97.200" }], "enableServiceMode": false, "canUpdateInventory": true };
                //self.serviceCopy = angular.copy(self.service);
                self.inventoryUpdateDisabled = false;
                angular.extend(self.service, {
                    available: {
                        clusters: _.filter(self.service.clusterlist, function (cluster) { return self.availableInventory(cluster.state); })
                            .length,
                        servers: _.filter(self.service.serverlist, function (server) { return self.availableInventory(server.state); })
                            .length,
                        storages: _.filter(self.service.storagelist, function (storage) { return self.availableInventory(storage.state); })
                            .length,
                        scaleios: _.filter(self.service.scaleiolist, function (scaleio) { return self.availableInventory(scaleio.state); })
                            .length
                    },
                    newThings: {
                        clusters: self.getNewComponents(self.service.clusterlist).length,
                        servers: self.getNewComponents(self.service.serverlist).length,
                        storages: self.getNewComponents(self.service.storagelist).length,
                        scaleios: self.getNewComponents(self.service.scaleiolist).length
                    }
                });
            })
                .catch(function (data) {
                self.inventoryUpdateDisabled = true;
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () {
                d.resolve();
            });
        };
        UpdateInventoryModalController.prototype.isNew = function (component) {
            var self = this;
            var matchingComponent = _.find(self.service.components, { id: component.id });
            return matchingComponent ? _.startsWith(matchingComponent.name, '*') : null;
        };
        UpdateInventoryModalController.prototype.getNewComponents = function (componentsArray) {
            var self = this;
            return _.filter(componentsArray, function (component) { return self.isNew(component); });
        };
        UpdateInventoryModalController.prototype.isAnythingNew = function () {
            var self = this;
            return self.service && _.find(self.service.components, function (component) { return self.isNew(component); });
        };
        UpdateInventoryModalController.prototype.validateOsCredentials = function () {
            var self = this;
            var d = self.$q.defer();
            self.forms.osCredentials._submitted = true;
            self.forms.osCredentials.$invalid ? d.reject() : d.resolve();
            return d.promise;
        };
        UpdateInventoryModalController.prototype.availableInventory = function (state) {
            return !(state === 'unmanaged' || state === 'updating');
        };
        UpdateInventoryModalController.prototype.finishWizard = function () {
            var self = this;
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_SERVICE_UpdateInventory_ConfirmUpdateInventory'))
                .then(function () {
                var d = self.$q.defer();
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                //strip the * added to indicate new component before sending
                angular.forEach(self.service.components, function (comp) {
                    //comp.name = comp.name.replace('*', '');
                    if (_.startsWith(comp.name, '*')) {
                        comp.name = comp.name.substring(1);
                    }
                });
                self.updateExistingService(self.service.id, self.service.components)
                    .then(function (data) {
                    //console.log('success response:  ' + data.data.responseObj);
                    self.$scope.modal.close();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data, self.errors);
                })
                    .finally(function () {
                    d.resolve();
                });
            });
        };
        UpdateInventoryModalController.prototype.updateServiceInventory = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.services.updateServiceInventory, { id: id });
        };
        UpdateInventoryModalController.prototype.updateExistingService = function (id, comps) {
            var self = this;
            return self.$http.post(self.Commands.data.services.updateExistingService, { serviceId: id, osCredentials: self.osCredentials });
        };
        UpdateInventoryModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UpdateInventoryModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        UpdateInventoryModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', "$filter", "constants"];
        return UpdateInventoryModalController;
    }());
    asm.UpdateInventoryModalController = UpdateInventoryModalController;
    angular
        .module('app')
        .controller('UpdateInventoryModalController', UpdateInventoryModalController);
})(asm || (asm = {}));
//# sourceMappingURL=updateInventoryModal.js.map
var asm;
(function (asm) {
    /*
    Parameters:
    id : string
     */
    var UpdateServiceFirmwareController = (function () {
        function UpdateServiceFirmwareController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, modal) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.modal = modal;
            this.datePicker = {
                options: {
                    format: "L hh:mm A",
                    minDate: moment(),
                },
                selectedDate: null,
            };
            this.update = {
                idList: [],
                scheduleType: 'updatenow',
                exitMaintenanceMode: false,
                scheduleDate: null
            };
            this.id = [];
            this.devices = [];
            this.errors = new Array();
            var self = this;
            self.mode = self.$scope.modal.params.mode;
            self.devices = $scope.modal.params.ids;
            self.id = $scope.modal.params.id;
            if (self.mode == "device") {
                self.update.idList = self.devices;
            }
            else {
                self.update.idList = [self.id];
            }
        }
        UpdateServiceFirmwareController.prototype.doSave = function () {
            var self = this, d = self.$q.defer();
            if (self.update.scheduleType === "schedule") {
                self.update.scheduleDate = self.datePicker.selectedDate.toISOString();
            }
            var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('UPDATE_SERVICE_FIRMWARE_Confirmation'));
            confirm.then(function () {
                self.GlobalServices.ClearErrors(self.errors);
                self.Loading(d.promise);
                if (self.mode == 'device') {
                    self.$http.post(self.Commands.data.devices.updatedevicefirmware, self.update)
                        .then(function (data) {
                        self.$scope.modal.close();
                    })
                        .catch(function (data) {
                        self.GlobalServices.DisplayError(data.data, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
                if (self.mode == 'service') {
                    self.$http.post(self.Commands.data.services.updateservicefirmware, self.update)
                        .then(function (data) {
                        self.$scope.modal.close();
                    })
                        .catch(function (data) {
                        self.GlobalServices.DisplayError(data.data, self.errors);
                    })
                        .finally(function () { return d.resolve(); });
                }
                if (self.mode == 'undefined') {
                    console.log('mode is undefined');
                }
            })
                .catch(function () { self.form._submitted = false; });
        };
        UpdateServiceFirmwareController.prototype.dateIsValid = function () {
            var self = this;
            return self.update.scheduleType === "updatenow" || (self.datePicker.selectedDate && moment().isBefore(self.datePicker.selectedDate.toISOString()));
        };
        UpdateServiceFirmwareController.prototype.formIsValid = function () {
            var self = this;
            return self.form.$valid && self.dateIsValid();
        };
        UpdateServiceFirmwareController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UpdateServiceFirmwareController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', "Modal"];
        return UpdateServiceFirmwareController;
    }());
    asm.UpdateServiceFirmwareController = UpdateServiceFirmwareController;
    angular
        .module('app')
        .controller('UpdateServiceFirmwareController', UpdateServiceFirmwareController);
})(asm || (asm = {}));
//# sourceMappingURL=updateservicefirmware.js.map
var asm;
(function (asm) {
    var ValidateSettingsController = (function () {
        function ValidateSettingsController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.GlobalServices = GlobalServices;
            this.errors = new Array();
            var self = this;
            self.activate();
        }
        ValidateSettingsController.prototype.activate = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.stringifyCategories(self.$scope.modal.params.component.categories);
            self.testSettingsValidity(self.$scope.modal.params.component)
                .then(function (response) {
                self.devices = response.data.responseObj.devices;
                self.devicesSafe = angular.copy(self.devices);
                self.totalServers = response.data.responseObj.totalservers;
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ValidateSettingsController.prototype.stringifyCategories = function (categories) {
            return angular.forEach(categories, function (category) {
                angular.forEach(category.settings, function (setting) {
                    if (setting.value != null && typeof setting.value != 'string') {
                        setting.value = JSON.stringify(setting.value);
                    }
                });
            });
        };
        ValidateSettingsController.prototype.testSettingsValidity = function (template) {
            var self = this;
            return self.$http.post(self.commands.data.templates.validateSettings, template);
        };
        ValidateSettingsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        ValidateSettingsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ValidateSettingsController;
    }());
    asm.ValidateSettingsController = ValidateSettingsController;
    angular
        .module("app")
        .controller("ValidateSettingsController", ValidateSettingsController);
})(asm || (asm = {}));
//# sourceMappingURL=validateSettings.js.map
var asm;
(function (asm) {
    var CloneController = (function () {
        function CloneController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.errors = new Array();
            var self = this;
            self.initialize();
        }
        CloneController.prototype.initialize = function () {
            var self = this, d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.devices.getAvailableCloneDeviceList, null)
                .then(function (data) {
                self.devices = data.data.responseObj;
                self.displayedData = angular.copy(self.devices);
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        CloneController.prototype.save = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.getReferenceComponent(self.GlobalServices.NewGuid(), self.$scope.modal.params.newComponentId, self.selectedDevice.id)
                .then(function (data) {
                self.close(data.data.responseObj);
            })
                .catch(function (error) {
                self.GlobalServices.DisplayError(error.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        CloneController.prototype.getReferenceComponent = function (id, componentId, referenceId) {
            var self = this;
            return self.$http.post(self.Commands.data.templates.getReferenceComponent, { id: id, componentId: componentId, referenceId: referenceId });
        };
        CloneController.prototype.onSelectedDevice = function (selectedDevice) {
            var self = this;
            self.selectedDevice = selectedDevice;
        };
        CloneController.prototype.close = function (data) {
            var self = this;
            self.$scope.modal.close(data);
        };
        CloneController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        CloneController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return CloneController;
    }());
    asm.CloneController = CloneController;
    angular
        .module('app')
        .controller('CloneController', CloneController);
})(asm || (asm = {}));
//# sourceMappingURL=Clone.js.map
var asm;
(function (asm) {
    var ImportFromTemplateController = (function () {
        function ImportFromTemplateController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.loading = true;
            this.errors = new Array();
            var self = this;
            self.initialize();
        }
        ImportFromTemplateController.prototype.initialize = function () {
            var self = this;
            var d = self.$q.defer();
            self.GlobalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.templates.getTemplateBuilderList, null)
                .then(function (data) {
                //remove all templates without server components
                self.templates = _.filter(data.data.responseObj, function (template) {
                    //remove all non-server components
                    _.remove(template.components, function (component) { return component.type !== "server"; });
                    return template.components.length;
                });
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data, self.errors);
            })
                .finally(function () { d.resolve(); self.loading = false; });
        };
        ImportFromTemplateController.prototype.save = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.getClonedComponentFromTemplate(self.GlobalServices.NewGuid(), self.selectedComponent.id, self.selectedTemplate.id)
                .then(function (data) {
                self.close(data.data.responseObj);
            })
                .catch(function (error) {
                self.GlobalServices.DisplayError(error.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        ImportFromTemplateController.prototype.getClonedComponentFromTemplate = function (id, componentId, referenceId) {
            var self = this;
            return self.$http.post(self.Commands.data.templates.getClonedComponentFromTemplate, { id: id, componentId: componentId, referenceId: referenceId });
        };
        ImportFromTemplateController.prototype.close = function (data) {
            var self = this;
            self.$scope.modal.close(data);
        };
        ImportFromTemplateController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ImportFromTemplateController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ImportFromTemplateController;
    }());
    asm.ImportFromTemplateController = ImportFromTemplateController;
    angular
        .module('app')
        .controller('ImportFromTemplateController', ImportFromTemplateController);
})(asm || (asm = {}));
//# sourceMappingURL=ImportFromTemplate.js.map
var asm;
(function (asm) {
    var UploadConfigController = (function () {
        function UploadConfigController(Modal, $scope, Dialog, $http, Loading, $q, $timeout, globalServices, FileUploader, Commands) {
            this.Modal = Modal;
            this.$scope = $scope;
            this.Dialog = Dialog;
            this.$http = $http;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.globalServices = globalServices;
            this.FileUploader = FileUploader;
            this.Commands = Commands;
            this.errors = new Array();
            var self = this;
            var uploader = $scope.uploader = new FileUploader({
                url: self.Commands.data.templates.uploadConfigFile,
            });
        }
        UploadConfigController.prototype.isFileSelected = function () {
            return !!document.getElementById("configFile").value;
        };
        UploadConfigController.prototype.uploadConfigFile = function () {
            var self = this;
            var d = self.$q.defer();
            self.globalServices.ClearErrors(self.errors);
            self.Loading(d.promise);
            //using angular uploader
            //set error and success callbacks 
            angular.extend(self.$scope.uploader, {
                onErrorItem: function (fileItem, response, status, headers) {
                    d.resolve();
                    self.globalServices.DisplayError(response);
                },
                onSuccessItem: function (item, response, status, headers) {
                    self.getParsedConfig(response.responseObj);
                    d.resolve();
                }
            });
            self.$scope.uploader.uploadAll();
        };
        UploadConfigController.prototype.getParsedConfig = function (referenceId) {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.getParsedConfigFile(self.globalServices.NewGuid(), referenceId, self.$scope.modal.params.componentid)
                .then(function (response) {
                self.close(response.data.responseObj);
            })
                .catch(function (error) {
                self.globalServices.DisplayError(error.data, self.errors);
            })
                .finally(function () { return d.resolve(); });
        };
        UploadConfigController.prototype.getParsedConfigFile = function (newId, refrenceId, componentId) {
            var self = this;
            return self.$http.post(self.Commands.data.templates.getParsedConfigFile, {
                id: newId,
                referenceId: refrenceId,
                componentId: componentId
            });
        };
        UploadConfigController.prototype.close = function (component) {
            var self = this;
            self.$scope.modal.close(component);
        };
        UploadConfigController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        UploadConfigController.$inject = ['Modal', '$scope', 'Dialog', '$http', 'Loading', '$q', '$timeout', 'GlobalServices', 'FileUploader', "Commands"];
        return UploadConfigController;
    }());
    asm.UploadConfigController = UploadConfigController;
    angular
        .module('app')
        .controller('UploadConfigController', UploadConfigController);
})(asm || (asm = {}));
//# sourceMappingURL=UploadConfig.js.map
var asm;
(function (asm) {
    var ViewTemplateDetailsModalController = (function () {
        function ViewTemplateDetailsModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $filter) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.readOnly = true;
            this.errors = new Array();
            var self = this;
            self.initialize();
        }
        ViewTemplateDetailsModalController.prototype.initialize = function () {
            var self = this;
            self.$scope.modal.params.getTemplate = true;
            self.getTemplate()
                .then(function (template) {
                self.template = template;
            });
        };
        ViewTemplateDetailsModalController.prototype.getTemplate = function () {
            var self = this;
            //if template is passed in, use that, otherwise check if it is a service
            return self.$q(function (resolve, reject) {
                if (!!self.$scope.modal.params.template) {
                    return resolve(angular.copy(self.$scope.modal.params.template));
                }
                else if (self.$scope.modal.params.service) {
                    var d = self.$q.defer();
                    self.GlobalServices.ClearErrors(self.errors);
                    self.Loading(d.promise);
                    self.loadServiceSettings(self.$scope.modal.params.service.id)
                        .then(function (response) {
                        resolve(response.data.responseObj);
                    })
                        .catch(function (data) {
                        self.GlobalServices.DisplayError(data.data, self.errors);
                        reject();
                    })
                        .finally(function () { return d.resolve(); });
                }
            });
        };
        ViewTemplateDetailsModalController.prototype.componentVisible = function (component) {
            var self = this;
            return _.find(component.categories, function (category) {
                return self.categoryVisible(category, component);
            });
        };
        ViewTemplateDetailsModalController.prototype.categoryVisible = function (category, component) {
            var self = this;
            var templateSettings = self.$filter("templatesettings")(category.settings);
            var filteredDependentSettings = self.$filter("viewTemplateDetailsFilter")(templateSettings, component);
            return filteredDependentSettings.length;
        };
        ViewTemplateDetailsModalController.prototype.loadTemplateDetails = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.templates.loadTemplateDetails, { id: id });
        };
        ViewTemplateDetailsModalController.prototype.loadServiceSettings = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.services.getServiceSettingsById, { id: id });
        };
        ViewTemplateDetailsModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ViewTemplateDetailsModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        ViewTemplateDetailsModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', "$filter"];
        return ViewTemplateDetailsModalController;
    }());
    asm.ViewTemplateDetailsModalController = ViewTemplateDetailsModalController;
    angular
        .module('app')
        .controller('ViewTemplateDetailsModalController', ViewTemplateDetailsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=ViewTemplateDetails.js.map
