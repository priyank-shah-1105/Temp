window.__clarity = { version: "1.0.0", major: "1", minor: "0", patch: "0", full: "1.0.0" }, angular.module("Clarity.services", []), angular.module("Clarity.localizations", []), angular.module("Clarity.directives", ["Clarity.services"]), angular.module("Clarity", ["ngRoute", "ngResource", "pascalprecht.translate", "ngSanitize", "angularFileUpload", "highcharts-ng", "smart-table", "ngCookies", "perfect_scrollbar", "ngAnimate", "Clarity.directives", "Clarity.services", "Clarity.localizations"]).config(["$translateProvider", "ClarityTranslations", function (e, t) { angular.forEach(t, function (t, a) { angular.extend({}, t), e.translations(a, t), e.useSanitizeValueStrategy("sanitizeParameters") }), void 0 != t.en ? e.preferredLanguage("en") : e.preferredLanguage(Object.keys(t)[0]) }]), function (e, t) { "use strict"; e.module("smart-table", []).run(["$templateCache", function (e) { e.put("template/smart-table/pagination.html", '<nav><ul class="list-unstyled list-inline"><li class="pull-left"><p><span ng-if="itemCount != totalItems">{{itemCount}} of {{totalItems}}</span><span ng-if="itemCount == totalItems">{{itemCount}}</span> items found. <span ng-if="itemCount > 0">Displaying items {{(currentPage - 1) * stItemsByPage + 1 }} - {{ currentPage == numPages ? itemCount : currentPage * stItemsByPage }}.</span></p></li><li ng-if="numPages >= 2" ng-disabled="currentPage == numPages" class="pull-right"><a style="position: relative; top: 3px;" ng-disabled="currentPage == numPages" ng-click="selectPage(numPages)"><i ng-class="{\'text-muted\': currentPage == numPages}" class="glyphicon glyphicon-step-forward"></i></a></li><li ng-if="numPages >= 2" ng-disabled="currentPage == numPages" class="pull-right"><a style="position: relative; top: 3px;" ng-disabled="currentPage == numPages" ng-click="selectPage(currentPage+1)"><i ng-class="{\'text-muted\': currentPage == numPages}" class="glyphicon glyphicon-forward"></i></a></li><li ng-if="numPages >= 2" class="pull-right"><span style="margin-left: 5px; margin-right: 5px;">Page <input type="text" class="input-xs text-center" style="width: 40px;" ng-model="pageState.txtPage" ng-change="updatePage()" ng-blur="updatePage(true)"  ng-model-options="{ updateOn: \'default\', debounce: {\'default\': 500, \'blur\': 0} }" /> of {{numPages}}</span></li><li ng-if="numPages >= 2" ng-disabled="currentPage == 1" class="pull-right"><a style="position: relative; top: 3px;" ng-disabled="currentPage == 1" ng-click="selectPage(currentPage-1)"><i ng-class="{\'text-muted\': currentPage == 1}" class="glyphicon glyphicon-backward"></i></a></li><li ng-if="numPages >= 2" ng-disabled="currentPage == 1" class="pull-right"><a style="position: relative; top: 3px;" ng-disabled="currentPage == 1" ng-click="selectPage(1)"><i ng-class="{\'text-muted\': currentPage == 1}" class="glyphicon glyphicon-step-backward"></i></a></li></ul></nav>'), e.put("template/smart-table/stSelectMultiple.html", '<div class="dropdown dropdown-filter">  <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">  {{dropdownLabel}}&nbsp;<span class="caret"></span>  </button>  <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">    <li ng-repeat="item in distinctItems">      <label>        <input type="checkbox" ng-model="item.selected" style="margin-left: 3px; margin-right: 3px;">{{item.label}}</label>    </li>  </ul></div>') }]), e.module("smart-table").controller("stTableController", ["$scope", "$parse", "$filter", "$attrs", function (a, n, i, r) { function o(e) { return e ? [].concat(e) : [] } var s, l, c = n(r.stTable), d = c.assign, u = i("orderBy"), p = i("filter"), m = o(c(a)), g = { sort: {}, search: {}, pagination: { start: 0 } }, f = !0, h = this; function C() { m = o(s(a)), !0 === f && h.pipe() } r.stSafeSrc && (s = n(r.stSafeSrc), a.$watch(function () { var e = s(a); return e ? e.length : 0 }, function (e) { e !== m.length && C() }), a.$watch(function () { return s(a) }, function (e, t) { e !== t && C() })), this.sortBy = function (t, a) { return g.sort.predicate = t, g.sort.reverse = !0 === a, e.isFunction(t) ? g.sort.functionName = t.name : delete g.sort.functionName, g.pagination.start = 0, this.pipe() }, this.search = function (t, a, n) { var i = g.search.predicateObject || {}, r = a || "$"; return t = e.isString(t) ? t.trim() : t, i[r] = t, t || delete i[r], g.search.predicateObject = i, g.pagination.start = 0, g.search.strict = n, this.pipe() }, this.pipe = function () { var e = g.pagination, n = g.search.predicateObject ? p(m, g.search.predicateObject, g.search.strict) : m; g.sort.predicate && (n = u(n, g.sort.predicate, g.sort.reverse)), e.number !== t && (e.numberOfPages = n.length > 0 ? Math.ceil(n.length / e.number) : 1, e.start = e.start >= n.length ? (e.numberOfPages - 1) * e.number : e.start, e.itemCount = n.length, e.totalItems = m.length, n = n.slice(e.start, e.start + parseInt(e.number))), d(a, n) }, this.select = function (e, a) { var n = m, i = n.indexOf(e); -1 !== i && ("single" === a ? (e.isSelected = !0 !== e.isSelected, l && (l.isSelected = !1), l = !0 === e.isSelected ? e : t) : n[i].isSelected = !n[i].isSelected) }, this.slice = function (e, t) { return g.pagination.start = e, g.pagination.number = t, this.pipe() }, this.tableState = function () { return g }, this.setFilterFunction = function (e) { p = i(e) }, this.setSortFunction = function (e) { u = i(e) }, this.preventPipeOnWatch = function () { f = !1 } }]).directive("stTable", function () { return { restrict: "A", controller: "stTableController", link: function (e, t, a, n) { a.stSetFilter && n.setFilterFunction(a.stSetFilter), a.stSetSort && n.setSortFunction(a.stSetSort) } } }), e.module("smart-table").directive("stSearch", ["$timeout", function (e) { return { require: "^stTable", scope: { predicate: "=?stSearch" }, link: function (t, a, n, i) { var r = i, o = null, s = n.stDelay || 400; t.$watch("predicate", function (e, t) { e !== t && (i.tableState().search = {}, r.search(a[0].value || "", e)) }), t.$watch(function () { return i.tableState().search }, function (e) { var n = t.predicate || "$"; e.predicateObject && e.predicateObject[n] !== a[0].value && (a[0].value = e.predicateObject[n] || "") }, !0); var l = "input" === a[0].tagName.toLowerCase() ? "keydown" : "change"; a.bind(l, function (a) { var n = (a = a.originalEvent || a || window.event).target || a.srcElement; null !== o && e.cancel(o), o = e(function () { r.search(n.value, t.predicate || ""), o = null }, s) }) } } }]), e.module("smart-table").directive("stSelectRow", function () { return { restrict: "A", require: "^stTable", scope: { row: "=stSelectRow" }, link: function (e, t, a, n) { var i = a.stSelectMode || "single"; t.bind("click", function () { e.$apply(function () { n.select(e.row, i) }) }), e.$watch("row.isSelected", function (e) { !0 === e ? t.addClass("st-selected") : t.removeClass("st-selected") }) } } }), e.module("smart-table").directive("stSort", ["$parse", function (a) { return { restrict: "A", require: "^stTable", link: function (n, i, r, o) { var s, l = r.stSort, c = a(l), d = 0, u = r.stClassAscent || "st-sort-ascent", p = r.stClassDescent || "st-sort-descent", m = [u, p]; function g() { d++, l = e.isFunction(c(n)) ? c(n) : r.stSort, d % 3 == 0 && r.stSkipNatural === t ? (d = 0, o.tableState().sort = {}, o.tableState().pagination.start = 0, o.pipe()) : o.sortBy(l, d % 2 == 0) } r.stSortDefault && (s = n.$eval(r.stSortDefault) !== t ? n.$eval(r.stSortDefault) : r.stSortDefault), i.bind("click", function () { l && n.$apply(g) }), s && (d = "reverse" === r.stSortDefault ? 1 : 0, g()), n.$watch(function () { return o.tableState().sort }, function (e) { e.predicate !== l ? (d = 0, i.removeClass(u).removeClass(p)) : (d = !0 === e.reverse ? 2 : 1, i.removeClass(m[d % 2]).addClass(m[d - 1])) }, !0) } } }]), e.module("smart-table").directive("stPagination", function () { return { restrict: "EA", require: "^stTable", scope: { stItemsByPage: "=?", stDisplayedPages: "=?", stPageChange: "&", txtPage: "=?" }, templateUrl: function (e, t) { return t.stTemplate ? t.stTemplate : "template/smart-table/pagination.html" }, link: function (e, t, a, n) { function i() { var t, a, i = n.tableState().pagination, r = 1, o = e.currentPage; for (e.currentPage = Math.floor(i.start / i.number) + 1, e.itemCount = i.itemCount, e.totalItems = i.totalItems, (t = (r = Math.max(r, e.currentPage - Math.abs(Math.floor(e.stDisplayedPages / 2)))) + e.stDisplayedPages) > i.numberOfPages && (t = i.numberOfPages + 1, r = Math.max(1, t - e.stDisplayedPages)), e.pages = [], e.numPages = i.numberOfPages, a = r; a < t; a++) e.pages.push(a); o !== e.currentPage && (e.stPageChange({ newPage: e.currentPage }), e.pageState.txtPage = e.currentPage) } e.stItemsByPage = e.stItemsByPage ? +e.stItemsByPage : 10, e.stDisplayedPages = e.stDisplayedPages ? +e.stDisplayedPages : 5, e.pageState = { txtPage: 1 }, e.currentPage = 1, e.pages = [], e.itemCount = 0, e.totalItems = 0, e.updatePage = function (t) { if (t && "" === e.pageState.txtPage && (e.pageState.txtPage = e.currentPage), "" !== e.pageState.txtPage) { var a = +e.pageState.txtPage; isNaN(a) || a < 1 ? e.pageState.txtPage = e.currentPage : (a > e.numPages && (a = e.pageState.txtPage = e.numPages), a !== e.currentPage && e.selectPage(a)) } }, e.$watch(function () { return n.tableState().pagination }, i, !0), e.$watch("stItemsByPage", function (t, a) { t !== a && (e.selectPage(1), e.pageState.txtPage = 1) }), e.$watch("stDisplayedPages", i), e.selectPage = function (t) { t > 0 && t <= e.numPages && (n.slice((t - 1) * e.stItemsByPage, e.stItemsByPage), e.pageState.txtPage = t) }, n.tableState().pagination.number || n.slice(0, e.stItemsByPage) } } }), e.module("smart-table").directive("stPipe", function () { return { require: "stTable", scope: { stPipe: "=" }, link: { pre: function (t, a, n, i) { e.isFunction(t.stPipe) && (i.preventPipeOnWatch(), i.pipe = function () { return t.stPipe(i.tableState(), i) }) }, post: function (e, t, a, n) { n.pipe() } } } }), e.module("smart-table").directive("csSelect", function () { return { require: "^stTable", template: "", scope: { row: "=csSelect" }, link: function (e, t, a, n) { t.bind("change", function () { e.$apply(function () { n.select(e.row, "multiple") }) }), e.$watch("row.isSelected", function (e) { !0 === e ? t.parent().addClass("st-selected") : t.parent().removeClass("st-selected") }) } } }), e.module("smart-table").directive("csSelectAll", function () { return { require: "^stTable", template: "", scope: { rows: "=csSelectAll" }, link: function (e, t, a, n) { t.bind("change", function (t) { e.globalInputState = t.target.checked, e.$apply(function () { $.each(e.rows, function (e, a) { a.isSelected !== t.target.checked && n.select(a, "multiple") }) }) }), e.$watch("row.isSelected", function (e) { !0 === e ? t.parent().addClass("st-selected") : t.parent().removeClass("st-selected") }) } } }), e.module("smart-table").directive("csCheckAll", function () { return { require: "^stTable", template: "", scope: { rows: "=csCheckAll" }, link: function (e, t) { t.bind("change", function (t) { e.globalInputState = t.target.checked, e.$apply(function () { $.each(e.rows, function (e, a) { a.isChecked = t.target.checked }) }) }) } } }), e.module("smart-table").directive("stSearchOptions", function () { return { require: "^stTable", scope: { stSearchOptions: "=" }, link: function (e, t, a, n) { e.$watch("stSearchOptions.model", function (t) { n.search(t, e.stSearchOptions.field, e.stSearchOptions.strict) }), e.$watch("stSearchOptions.range", function (e) { e && n.search(e, e.field) }) } } }), e.module("smart-table").directive("stSelectDistinct", [function () { return { restrict: "E", require: "^stTable", scope: { collection: "=", predicate: "@", predicateExpression: "=" }, template: '<select ng-model="selectedOption" ng-change="optionChanged(selectedOption)" ng-options="opt for opt in distinctItems"></select>', link: function (e, t, a, n) { var i = function () { var t = e.predicate; return !t && e.predicateExpression && (t = e.predicateExpression), t }; e.$watch("collection", function (t) { var a = i(); if (t) { var n = []; e.distinctItems = ["All"], angular.forEach(e.collection, function (e) { var t = e[a]; t && t.trim().length > 0 && -1 === n.indexOf(t) && n.push(t) }), n.sort(), e.distinctItems = e.distinctItems.concat(n), e.selectedOption = e.distinctItems[0], e.optionChanged(e.selectedOption) } }, !0), e.optionChanged = function (e) { var t = i(), a = {}; a.distinct = e, "All" === a.distinct && (a.distinct = ""), n.search(a, t) } } } }]).directive("stSelectMultiple", [function () { return { restrict: "E", require: "^stTable", scope: { collection: "=", items: "=", predicate: "@", predicateExpression: "=", title: "=", selectedOptions: "=" }, templateUrl: function (e, t) { return t.stTemplate ? t.stTemplate : "template/smart-table/stSelectMultiple.html" }, link: function (e, t, a, n) { function i() { var t = e.predicate; return !t && e.predicateExpression && (t = e.predicateExpression), t } function r() { var t, a = e.distinctItems.length, n = (t = [], angular.forEach(e.distinctItems, function (e) { e.selected && t.push(e) }), e.selectedOptions = t, t); return a === n.length || 0 === n.length ? e.title || "All" : 1 === n.length ? n[0].label || n[0].value : n.length + " items" } function o() { e.dropdownLabel = r(); var t, a = i(), o = { matchAny: {} }; o.matchAny.items = (t = [], angular.forEach(e.distinctItems, function (e) { e.selected && t.push(e.value) }), t); var s = o.matchAny.items.length; 0 === s || s === e.distinctItems.length ? o.matchAny.all = !0 : o.matchAny.all = !1, n.search(o, a) } function s(e, t) { if (e && e.trim().length > 0 && (n = t, i = e, !_.find(n, function (e) { return e.value === i }))) { var a = { label: e, value: e, selected: !0 }; t.push(a) } var n, i } var l, c, d, u; e.dropdownLabel = "", e.filterChanged = o, l = e.collection, c = e.items, d = i(), u = [], c && c.length > 0 ? u = c : angular.forEach(l, function (e) { s(e[d], u) }), u.sort(function (e, t) { return e.value > t.value ? 1 : e.value < t.value ? -1 : 0 }), e.distinctItems = u, e.$watch("distinctItems", function (e, t) { o() }, !0), o() } } }]).filter("customFilter", ["$filter", function (t) { var a = t("filter"), n = function (e, t) { return t = ("" + t).toLowerCase(), ("" + e).toLowerCase().indexOf(t) > -1 }; return function (t, i) { return a(t, i, function (t, a) { var i, r, o = a.before, s = a.after, l = a.lower, c = a.higher; if (e.isObject(a)) { if (a.distinct) return !(!t || t.toLowerCase() !== a.distinct.toLowerCase()); if (a.matchAny) { if (a.matchAny.all) return !0; if (!t) return !1; for (var d = 0; d < a.matchAny.items.length; d++) if (t.toLowerCase() === a.matchAny.items[d].toLowerCase()) return !0; return !1 } if (a.before || a.after) try { return !(o && (i = a.before, new Date(t) > new Date(i)) || s && (r = a.after, new Date(t) < new Date(r))) } catch (e) { return !1 } else if (l || c) return !(l && t > (i = a.lower) || c && t < (r = a.higher)); return !0 } return n(t, a) }) } }]) }(angular), angular.module("Clarity.directives").provider("About", [function () { return this.$get = ["Modal", "$timeout", "$q", "ClarityServices", function (e, t, a, n) { return function (t, i, r, o, s, l) { var c, d = a.defer(), u = d.promise; return (c = e({ icon: t, applicationTitle: i, version: r, patents: o, trademarks: s, copyright: l, title: null, templateUrl: n.Settings.BaseTemplatePath + "modal-about.html", className: "modal-about", modalSize: "", backdrop: "static", static: !0, keyboard: !1 })).ok = function () { return c.modal.dismiss(!1), d.resolve.apply(null, arguments) }, c.$on("modal:cancelled", function () { return d.resolve.apply(null, arguments) }), c.modal.show(), u } }], this }]), angular.module("Clarity.directives").directive("alert", ["$timeout", "$q", "ClarityServices", function (e, t, a) { var n; return n = function (e) { switch (e) { case "danger": return ["ci-action-circle-remove", "Danger Icon"]; case "warning": return ["ci-health-warning-tri-bang", "Warning Icon"]; case "unknown": return ["", "Unknown Icon"]; case "success": return ["ci-health-floating-check", "Success Icon"]; case "info": return ["ci-info-circle-info", "Info Icon"]; default: return ["", ""] } }, { templateUrl: a.Settings.BaseTemplatePath + "alerts.html", restrict: "EA", transclude: !0, scope: { type: "@", destroyAfter: "@", dismissable: "=?", icon: "@", label: "@" }, link: function (t, a, i) { var r; return t.isClosed = !1, null !== t.dismissable && void 0 !== t.dismissable || (t.dismissable = !0), r = n(t.type), t._icon = t.icon || r[0], t._label = t.label || r[1], angular.isNumber(parseInt(t.destroyAfter)) && t.destroyAfter > 0 && e(function () { return t.close() }, t.destroyAfter), t.$on("alert:dismiss", function () { return t.close() }), a.find(".alert").on("closed.bs.alert", function () { t.$emit("alert:dismissed"), a.remove() }), t.close = function () { a.find(".alert").alert("close"), t.isClosed = !0 } } } }]).factory("Alert", ["$document", "$timeout", "$q", "$rootScope", "$sce", "$compile", "$templateCache", function (e, t, a, n, i, r, o) { var s, l, c, d; return c = function (e, n) { var i; return i = a.defer(), t(function () { return d(e, n, i) }, 0), i.promise }, (s = function () { return c(arguments) }).danger = function () { return c(arguments, "danger") }, s.warning = function () { return c(arguments, "warning") }, s.unknown = function () { return c(arguments, "unknown") }, s.success = function () { return c(arguments, "success") }, s.flush = function (e) { var t; return t = l(e), angular.forEach(t.children(), function (e) { return angular.element(e).isolateScope().$broadcast("alert:dismiss") }) }, l = function (e) { return e || (e = "global-alerts"), angular.element(document.getElementById(e)) }, d = function (e, t, a) { var s, c, d, u; return s = { type: t }, angular.isString(e[0]) ? (s.content = e[0], angular.isObject(e[1]) ? s = angular.extend(s, e[1]) : angular.isString(e[1]) && (s.location = e[1], null !== e[2] && (s = angular.extend(s, e[2])))) : angular.isObject(e[0]) && (s = e[0]), d = o.get("alertService.html"), c = angular.element(d), (u = n.$new()).content = i.trustAsHtml(s.content), u.dismissable = s.dismissable, u.label = s.label, u.id = s.id, u.type = s.type, u.icon = s.icon, u.dismissable = s.dismissable, u.destroyAfter = s.destroyAfter, c = r(c)(u), u.$digest(), l(s.location).append(c), u.$on("alert:dismissed", function () { return a.resolve(s.id) }) }, s }]), angular.module("Clarity.directives").directive("datetimeDisplay", [function () { return { restrict: "E", template: "<span>{{displayTime}}</span>", scope: { time: "=?", timeFormat: "=?", fromDate: "=?" }, transclude: !1, replace: !0, link: function (e) { function t() { var t, a = "", n = null; e.time && moment(e.time).isValid() ? (t = e.time, e.timeFormat && (a = e.timeFormat), e.fromDate && (n = e.fromDate), moment(t).isValid() && ("" !== a ? e.displayTime = moment(t).format(a) : (void 0 !== n && "" !== n || (n = new Date), e.displayTime = moment(t).from(n, !1)))) : e.displayTime = "" } e.$watch("time", function (e) { t() }), e.$watch("timeFormat", function (e) { t() }), t() } } }]), angular.module("Clarity.directives").directive("datetimepicker", ["$timeout", "$translate", function (e, t) { return { require: "?ngModel", restrict: "EA", scope: { datetimepickerOptions: "@", onDateChangeFunction: "&", onDateClickFunction: "&" }, link: function (a, n, i, r) { n.on("dp.change", function () { e(function () { var e = n.data("DateTimePicker"); r.$setViewValue(e.date()), a.onDateChangeFunction() }) }), n.on("click", function () { a.onDateClickFunction() }), n.on("dp.show", function () { $("li.picker-switch a span").remove(), $("li.picker-switch a").append("<p>" + t.instant("CLARITY_ToggleDateTime") + "</p>") }), r.$render = function () { if (r && r.$viewValue) { var e = r.$viewValue; n.data("DateTimePicker").date(e) } }, n.datetimepicker(a.$eval(i.datetimepickerOptions)) } } }]), angular.module("Clarity.directives").provider("Dialog", [function () { return this.$get = ["Modal", "$timeout", "$q", "$translate", "ClarityServices", function (e, t, a, n, i) { return function (t, r, o) { var s = a.defer(), l = s.promise, c = e({ title: t, bodyText: r, templateUrl: i.Settings.BaseTemplatePath + "modal-confirm.html", className: "modal-confirm", modalSize: "modal-sm", backdrop: "static", static: !0, keyboard: !1, okText: n.instant("CLARITY_Yes"), cancelText: !0 === o ? n.instant("CLARITY_Close") : n.instant("CLARITY_No"), hideOkButton: o, allowResize: !1 }); return c.ok = function () { return c.modal.dismiss(!1), s.resolve.apply(null, arguments) }, c.cancel = function () { return c.modal.dismiss(!0), s.reject.apply(null, arguments) }, c.$on("modal:cancelled", function () { return s.reject.apply(null, arguments) }), c.modal.show(), l } }], this }]), angular.module("Clarity.directives").filter("htmlSafe", ["$sce", function (e) { return function (t) { return e.trustAsHtml(t) } }]).directive("errorDisplay", ["$rootScope", "$location", "$timeout", "ClarityServices", "$anchorScroll", function (e, t, a, n, i) { return { restrict: "E", templateUrl: n.Settings.BaseTemplatePath + "errorDisplay.html", scope: { errors: "<", onClick: "&", onExpandCollapse: "&", disableScrollTo: "<?", scrollToTop: "<" }, transclude: !1, replace: !0, link: function (e, t, n) { e._generatedId = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) { var t = 16 * Math.random() | 0; return ("x" === e ? t : 3 & t | 8).toString(16) }), e.actions = { errorClicked: function (t) { void 0 != e.onClick && "function" == typeof e.onClick && e.onClick({ error: t }) }, detailsClicked: function () { void 0 != e.onExpandCollapse && "function" == typeof e.onClick && e.onExpandCollapse() } }, e.$watch("errors", function (t, n) { t && (t.length > n.length && a(function () { e.scrollToTop ? window.scrollTo(0, 0) : !e.disableScrollTo && i(e._generatedId) }, 10), angular.forEach(t, function (e) { e.errors || (e.errors = []) })) }, !0) } } }]), angular.module("Clarity.directives").directive("showValidation", [function () { return { restrict: "A", require: "form", link: function (e, t, a, n) { e.$watch(function () { return n.$invalid }, function () { t.find(".form-group").each(function () { var e = $(this), t = e.find("input[ng-model],textarea[ng-model],select[ng-model]"); if (t.length > 0) { var a = !1; angular.forEach(t, function (e, t) { if (n[e.id]) { var i = n[e.id].$invalid; a = a || i } }), e.toggleClass("has-error", a) } }) }) } } }]), angular.module("Clarity.directives").directive("ipurlValidator", [function () { return { restrict: "A", require: "ngModel", link: function (e, t, a, n) { var i = /\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/, r = new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$", "i"); n.$validators.ipurlValidator = function (e) { return !e || !!e.match(i) || !!r.test(e) } } } }]), angular.module("Clarity.directives").directive("ipValidator", [function () { return { restrict: "A", require: "ngModel", link: function (e, t, a, n) { var i = /\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/; n.$validators.ipValidator = function (e) { return !e || !!e.match(i) } } } }]), angular.module("Clarity.directives").directive("list", ["$timeout", "$q", "ClarityServices", function (e, t, a) { return { templateUrl: a.Settings.BaseTemplatePath + "list.html", restrict: "E", transclude: !0, scope: {}, link: function (e, t, a) { } } }]).directive("listLabel", ["$timeout", "$q", "ClarityServices", function (e, t, a) { return { templateUrl: a.Settings.BaseTemplatePath + "list-label.html", restrict: "E", transclude: !0, scope: {}, link: function (e, t, a) { } } }]).directive("listValue", ["$timeout", "$q", "ClarityServices", function (e, t, a) { return { templateUrl: a.Settings.BaseTemplatePath + "list-value.html", restrict: "E", transclude: !0, scope: {}, link: function (e, t, a) { } } }]), angular.module("Clarity.directives").provider("Loading", [function () { var e = this; return this.spinnerColor = "#007db8", { $get: ["Modal", "LoadingPromise", "$timeout", "$q", "ClarityServices", "$rootScope", function (t, a, n, i, r, o) { var s = t({ type: "bare", templateUrl: r.Settings.BaseTemplatePath + "loading.html", className: "loading", backdrop: "static", keyboard: !1 }); s.spinnerColor = e.spinnerColor; var l = a(function () { return s.modal.close() }); return function (e) { l(e); var t = n(function () { s.modal.show(), $(".modal-backdrop").last().addClass("loading") }); return i.all(angular.isArray(e) ? e : [e]).finally(function () { return n.cancel(t) }) } }] } }]).factory("LoadingPromise", ["$q", function (e) { var t; return t = [], function (a) { var n, i; return n = function (e) { if (t.splice(t.indexOf(e), 1), 0 === t.length) return a() }, i = function (a) { return a = e.when(a).then(function () { return n(a) }, function () { return n(a) }), t.push(a) }, function (e) { return angular.isArray(e) ? e.forEach(function (e) { return i(e) }) : i(e) } } }]), angular.module("Clarity.directives").directive("login", ["$filter", "$timeout", "$translate", "ClarityServices", function (e, t, a, n) { return { templateUrl: n.Settings.BaseTemplatePath + "startScreen.html", restrict: "EA", transclude: !0, scope: { config: "=?", onSignIn: "&" }, controller: ["$scope", function (e) { return null == e.config && (e.config = {}), this.defaults = { applicationName: a.instant("ApplicationTitle"), applicationLogo: "", appIcon: "icon-ui-dell", copyrightIcon: "ci-logo-dell-halo-o", showDomain: !1, showRememberMe: !1, rememberMe: !1, usernameParser: function (t) { var a; return t = t || "", e.config.showDomain ? t.indexOf("\\") > -1 ? { domain: (a = t.split("\\"))[0], username: a[1] } : t.indexOf("@") > -1 ? { username: (a = t.split("@"))[0], domain: a[1] } : { username: null, domain: null } : { username: null, domain: null } } }, e.config = angular.extend({}, this.defaults, e.config), this }], link: function (e, a, n) { var i; return t(function () { return a[0].querySelector("#loginUsername").focus() }), i = angular.element(a[0].querySelector(".start-screen-message")), e.$watch("config.showMessage", function (e) { return i.css("display", e ? "" : "none") }), e.$watch("config.username", function (t) { var a, n; if (n = "function" == typeof (a = e.config).usernameParser ? a.usernameParser(t) : void 0, e.parsedUsername = n.username, e.parsedDomain = n.domain, e.parsedDomain) return e.config.domain = e.parsedDomain }), e.signIn = function () { var t, a; if (t = { username: e.parsedUsername || e.config.username, password: e.config.password, domain: e.config.domain, rememberMe: e.config.rememberMe }, e.$emit("startScreen:signIn", t), null != (null != (a = e.onSignIn({ userData: t })) ? a.finally : void 0)) return e.config.isSpinning = !0, a.finally(function () { return e.config.isSpinning = !1 }) } } } }]), angular.module("Clarity.directives").directive("lookup", ["$filter", function (e) { return { restrict: "E", template: "<span>{{displayText}}</span>", scope: { property: "=property", label: "=label", lookupvalue: "=lookupvalue", list: "=list" }, transclude: !0, replace: !0, link: function (t, a, n) { void 0 == t.lookupvalue && (t.lookupvalue = ""), void 0 == t.list && (t.list = []), void 0 == t.property && (t.property = ""), void 0 == t.label && (t.label = ""), t.displayText = "", t.updateText = function () { var a = t.lookupvalue; "" != t.property && ((a = {})[t.property] = t.lookupvalue); var n = e("filter")(t.list, a, !0); n.length > 0 && "" != t.label && void 0 != n[0][t.label] ? t.displayText = n[0][t.label] : t.displayText = "" }, t.$watch("lookupvalue", function (e, a) { t.updateText() }), t.$watch("list", function (e, a) { t.updateText() }), t.$watch("property", function (e, a) { t.updateText() }), t.$watch("label", function (e, a) { t.updateText() }) } } }]), angular.module("Clarity.directives").directive("masthead", ["$rootScope", "$location", "$window", "$http", "ClarityServices", function (e, t, a, n, i) { return { restrict: "E", templateUrl: i.Settings.BaseTemplatePath + "masthead.html", scope: { applicationTitle: "=", menuItems: "=", hideTopNav: "=", hideSearch: "=", hideAlerts: "=", currentUserName: "=", onHome: "&", onLogout: "&", onHelp: "&", onMenuItem: "&", iconClass: "=?", pinMenu: "=?" }, transclude: { menu: "?mastheadMenu", menuleft: "?mastheadMenuLeft", header: "?mastheadHeader", pinnedmenu: "?mastheadPinnedMenu" }, replace: !0, link: function (t, a, n) { t.iconClass ? t.iconClass = t.iconClass : t.iconClass = "ci-logo-dell-halo-o", t.data = { showNavigation: !1, pinnav: !1, showPinNavigation: new Boolean, showTopMenuButton: new Boolean, showpinnednav: "dontshow" }, !0 === t.pinMenu ? (t.data.showpinnednav = "show", t.data.showPinNavigation = !0, t.data.showTopMenuButton = !1) : (t.data.showpinnednav = "dontshow", t.data.showPinNavigation = !1, t.data.showTopMenuButton = !0), t.actions = { refresh: function () { }, home: function () { void 0 != t.onHome && "function" == typeof t.onHome && t.onHome() }, menuClick: function (e) { void 0 != t.onMenuItem && "function" == typeof t.onMenuItem && t.onMenuItem() }, logout: function () { void 0 != t.onLogout && "function" == typeof t.onLogout && t.onLogout() }, help: function () { void 0 != t.onHelp && "function" == typeof t.onHelp && t.onHelp() }, pinnav: function () { t.data.pinnav = !1 } }, t.clearPopovers = function () { $(".popover.in").remove() }, $(".userButton").on("click", function (t) { e.$emit("MenuTop::Hide"), e.$emit("AlertMenu::Hide") }), t.$watch("menuItems", t.actions.refresh, !0), e.$on("$locationChangeStart", function () { t.data.showNavigation = !1 }), e.$on("$routeChangeSuccess", function () { t.clearPopovers() }), t.initialize = function () { }, t.initialize() } } }]), angular.module("Clarity.directives").directive("mastheadAlerts", ["$rootScope", "$location", "$timeout", "ClarityServices", "$interval", "$q", function (e, t, a, n, i, r) { return { restrict: "E", templateUrl: n.Settings.BaseTemplatePath + "mastheadAlerts.html", scope: { alerts: "=", showAlerts: "=?", firstLoad: "=?" }, transclude: { alertsmenu: "?alertsMenu" }, replace: !0, link: function (t, n, i) { t.data = { errors: 0, showAlerts: t.showAlerts || !1, firstLoad: t.firstLoad || !0, alerts: t.alerts }, t.actions = { hideAlertDetails: function () { t.$evalAsync(function () { t.data.showAlerts = !1 }) }, hideNav: function () { e.$emit("MenuTop::Hide") }, redAlertAnimate: function () { $(".alertButton").addClass("criticalAlert"), $(".alertButton").removeClass("criticalAlertFade"), a(function () { $(".alertButton").addClass("criticalAlertFade"), $(".alertButton").removeClass("criticalAlert"), t.data.showbadge = !0 }, 4e3) }, yellowAlertAnimate: function () { $(".alertButton").addClass("warningAlert"), $(".alertButton").removeClass("warningAlertFade"), a(function () { $(".alertButton").addClass("warningAlertFade"), $(".alertButton").removeClass("warningAlert"), t.data.showbadge = !0 }, 4e3) } }, t.refreshAlerts = function (e, a) { t.data.errors = 0, e.forEach(function (e, a) { "CRITICAL" !== e.severity && "WARNING" !== e.severity || t.data.errors++ }), $(".alertButton").removeClass("criticalAlertFade"), $(".alertButton").removeClass("warningAlertFade"); var n = []; if (t.data.firstLoad) { t.data.firstLoad = !1; var i = 0, r = 0;[].push(e.forEach(function (e, t) { "CRITICAL" === e.severity && i++, "WARNING" === e.severity && r++ })), 0 !== i && t.actions.redAlertAnimate(), 0 === i && 0 !== r && t.actions.yellowAlertAnimate() } else e.forEach(function (e, t) { a.forEach(function (t, a) { e.id == t.id && n.push(e) }) }), n.forEach(function (t, a) { e.forEach(function (a, n) { t.id == a.id && e.splice(n, 1) }) }), i = 0, r = 0, e.forEach(function (e, t) { "CRITICAL" === e.severity && i++, "WARNING" === e.severity && r++ }), i >= 1 && t.actions.redAlertAnimate(), 0 === i && r >= 1 && t.actions.yellowAlertAnimate() }, t.$watchCollection("alerts", function (e, a) { var n, i; n = angular.copy(e), i = angular.copy(a), t.refreshAlerts(n, i) }), e.$on("AlertMenu::Hide", function () { t.actions.hideAlertDetails() }), t.initialize = function () { t.refreshAlerts(t.data.alerts) }, t.initialize(), e.$on("$locationChangeStart", function () { t.data.showAlerts = !1 }) } } }]), angular.module("Clarity.directives").directive("mastheadSearch", ["$rootScope", "$location", "$timeout", "$resource", "ClarityServices", function (e, t, a, n, i) { return { restrict: "E", templateUrl: i.Settings.BaseTemplatePath + "mastheadSearch.html", scope: { onSearch: "&" }, transclude: { searchresults: "?searchResults" }, replace: !0, link: function (t, n, i) { var r; t.data = { showResults: !1, noResults: !1, searchTerm: "" }, t.actions = { clearSearch: function (e) { t.$evalAsync(function () { e && (t.data.showResults = !1, t.data.searchTerm = "", t.data.noResults = !1, $("#searchBar").removeClass("on"), $("#searchicon").css("display", "inline"), $("#searchiconfocus").css("display", "none"), $("#searchBar").blur()) }) }, searchChange: function () { a.cancel(r), r = a(function () { t.actions.executeSearch() }, 650) }, executeSearch: function () { var e = t.data.searchTerm.trim(); void 0 === e || "" === e ? (t.actions.clearSearch(!0), t.data.showResults = !1, t.data.noResults = !1) : (t.onSearch({ searchTerm: e }), t.data.showResults = !0, t.data.noResults = !1) } }, $(".searchField").on("click", function (t) { e.$emit("MenuTop::Hide") }), t.initialize = function () { $("#searchicon").css("display", "inline"), $("#searchiconfocus").css("display", "none"), $("#searchBar").focus(function () { $("#searchBar").addClass("on"), $("#searchicon").css("display", "none"), $("#searchiconfocus").css("display", "inline") }), $("#searchBar").focusout(function () { t.data.searchTerm && 0 != t.data.searchTerm.length || ($("#searchBar").removeClass("on"), $("#searchicon").css("display", "inline"), $("#searchiconfocus").css("display", "none")) }) }, t.initialize(), t.$watch("data.searchTerm", t.actions.searchChange), e.$on("$locationChangeStart", function () { t.actions.clearSearch(!0) }), $("body").on("click", function (e) { $(e.target).parents(".globalSearch").length || t.actions.clearSearch(!0) }) } } }]), angular.module("Clarity.directives").directive("mastheadTopMenu", ["$rootScope", "$log", "$compile", "$location", "$window", "$http", "$route", "Alert", "ClarityServices", function (e, t, a, n, i, r, o, s, l) { return { restrict: "E", templateUrl: l.Settings.BaseTemplatePath + "mastheadTopMenu.html", transclude: { extraleft: "?menuButtonsLeft", extra: "?menuButtons", extrapinned: "?menuPinnedButtons" }, replace: !0, link: function (t, a, i) { t.actions = { hideMenus: function () { e.$emit("AlertMenu::Hide") }, hideNav: function () { t.$evalAsync(function () { t.data.showNavigation = !1, t.data.showPinNavigation = "show" == t.data.showpinnednav, $("#pinned-nav").find('[aria-expanded="true"]').collapse("hide") }) }, toggleNav: function () { t.data.showNavigation = !t.data.showNavigation, t.data.showPinNavigation = !1 }, pinNav: function () { t.data.showpinnednav = "show", s.flush(), t.actions.setMenuPosition(), t.data.pinnav = !0 }, unpinNav: function () { t.data.showpinnednav = "dontshow", s.flush(), t.actions.setMenuPosition(), t.data.pinnav = !1 }, setMenuPosition: function () { "show" === t.data.showpinnednav ? (t.data.showPinNavigation = !0, e.pinnav = !0, t.data.showNavigation = !1, t.data.showTopMenuButton = !1, e.$broadcast("pin")) : (t.data.showPinNavigation = !1, e.pinnav = !1, t.data.showTopMenuButton = !0, e.$broadcast("unpin")) }, go: function (e) { n.path(e) }, refresh: function () { } }, e.$on("MenuTop::Hide", function () { t.actions.hideNav() }), e.$on("$locationChangeSuccess", function () { t.actions.hideNav() }), e.$on("modalOpen", function () { t.actions.hideNav() }), t.$watch("menuItems", function () { t.actions.refresh() }, !0), t.initialize = function () { s.flush(), t.actions.setMenuPosition() }, t.initialize() } } }]), angular.module("Clarity.directives").directive("mastheadUser", ["$rootScope", "ClarityServices", function (e, t) { return { restrict: "E", templateUrl: t.Settings.BaseTemplatePath + "mastheadUser.html", scope: { userAvatar: "=", userName: "=" }, transclude: !0, replace: !0, link: function (e, t, a) { } } }]), angular.module("Clarity.directives").directive("ngMatch", ["$rootScope", function (e) { return { require: "ngModel", link: function (e, t, a, n) { var i = a.ngModel, r = a.ngMatch; e.$watchGroup([i, r], function (e) { var t = e[0] === e[1]; n.$setValidity("ngmatch", t) }) } } }]), angular.module("Clarity.directives").provider("Messagebox", [function () { return this.$get = ["Modal", "$timeout", "$q", "ClarityServices", function (e, t, a, n) { return function (t, i) { var r, o = a.defer(), s = o.promise; return (r = e({ title: t, bodyText: i, templateUrl: n.Settings.BaseTemplatePath + "modal-messagebox.html", className: "modal-messagebox", modalSize: "modal-sm", backdrop: "static", static: !0, keyboard: !1 })).ok = function () { return r.modal.dismiss(!1), o.resolve.apply(null, arguments) }, r.$on("modal:cancelled", function () { return o.resolve.apply(null, arguments) }), r.modal.show(), s } }], this }]), angular.module("Clarity.directives").provider("Modal", [function () { return this.$get = ["$rootScope", "$compile", "$document", "$templateCache", "$log", "$timeout", "$controller", "$sce", "ClarityServices", function (e, t, a, n, i, r, o, s, l) { return function (a) { var i, r, c, d, u; null == a && (a = {}), r = { backdrop: "static", visible: !1, keyboard: !0, show: !0, fullscreen: !1, allowResize: !0 }, a.templateUrl && (a.body = ""), a.id || (a.id = l.NewGuid()), (i = angular.extend({}, r, a)).className || (i.className = ""), i.modalSize || (i.modalSize = ""), i.classes = []; var p = l.Settings.BaseTemplatePath + "modal.html"; return c = n.get(p), u = angular.extend((i.scope || e).$new(), { modal: i }), i.controller && o(i.controller, { $scope: u }), d = t(c)(u), u.modal.show = function () { e.$broadcast("modalOpen", a.title), d[0].id = "myModal-" + i.id, $("#modalArea").append(d), $("#myModal-" + i.id).modal(u.modal), window.setTimeout(function () { $(window).trigger("resize") }, 500) }, !0 === u.modal.visible && (u.modal.visible = !1, u.modal.show()), u.renderHTML = function (e) { return s.trustAsHtml(e) }, u._onComplete = function (e) { e && u.modal.onComplete ? u.modal.onComplete(e, u.modal) : u.modal.onComplete && u.modal.onComplete(u) }, u._onCancel = function () { u.modal.onCancel ? u.modal.onCancel(u.modal) : u.modal.dismiss() }, u._onHelp = function () { u.modal.onHelp && u.modal.onHelp(u.modal) }, u.modal.dismiss = function () { e.$broadcast("modalClose", a.title), $("#myModal-" + i.id).off("hide.bs.modal"), $("#myModal-" + i.id).on("hidden.bs.modal", function () { $("#myModal-" + i.id).removeData(), $("#myModal-" + i.id).remove(), $(".modal.fade").length > 0 ? $("body").addClass("modal-open") : $(".modal-backdrop").remove() }), $("#myModal-" + i.id).modal("hide"), u.$destroy() }, u.modal.cancel = function () { u._onCancel() }, u.modal.close = function (e) { u._onComplete(e), u.modal.dismiss() }, u } }], this }]).directive("draggable", ["$document", function (e) { return function (t, a, n) { var i = 0, r = 0, o = 0, s = 0; function l(e) { s = e.screenY - r, o = e.screenX - i, a.css({ top: s + "px", left: o + "px" }) } function c() { e.off("mousemove", l), e.off("mouseup", c) } a.css({ position: "relative", cursor: "pointer", display: "block" }), a.on("mousedown", function (t) { t.preventDefault(), i = t.screenX - o, r = t.screenY - s, e.on("mousemove", l), e.on("mouseup", c) }) } }]), angular.module("Clarity.directives").directive("popover", ["$compile", "$timeout", "$templateCache", function (e, t, a) { return { restrict: "A", transclude: !1, replace: !1, link: function (n, i, r, o) { t(function () { var t = r.popoverClass || "", o = r.delayShow || "0", s = r.delayHide || "0"; n.$on("$destroy", function () { i.popover("destroy") }), i.popover({ trigger: r.trigger || "click", container: r.container || "body", placement: r.placement || "auto right", title: r.title || "&nbsp;", html: !0, content: function () { var t, i = ""; if (r.content && (i = r.content, t = e(i)(n)), r.contentTemplate) { i = r.contentTemplate; var o = a.get(i); t = e(o)(n) } if ("" === i || !t) throw new Error("Unable to locate content or content template for Popover."); return n.$apply(), t }, template: '<div class="popover ' + (r.trigger || "click") + " " + t + '" role="tooltip"><div class="arrow"></div><div class="popover-header" style="position: absolute; top: 10px; right: 5px; z-index: 1;"><button type="button" id="close" class="close">&times;</button></div><div class="popover-title"></div><div class="popover-content"></div></div>', delay: { hide: s, show: o } }).on("show.bs.popover", function () { return "true" !== r.disablePopover }) }, 250) } } }]), function (e) { var t = e.module("Clarity.directives"); function a(t, a, n) { return { restrict: "A", transclude: !0, scope: { progressButton: "&", pbStyle: "@", pbDirection: "@", pbProfile: "@", indeterminate: "@", successTimeout: "@" }, template: '<span class="content" ng-transclude></span><span class="progress"><span class="progress-inner" ng-style="progressStyles" ng-class="{ notransition: !allowProgressTransition }"></span></span>', controller: function () { }, link: function (i, r, o) { var s; s = a.getProfile(i.pbProfile), i.pbStyle = i.pbStyle || s.style || "fill", "lateral-lines" != i.pbStyle ? i.pbDirection = i.pbDirection || s.direction || "horizontal" : i.pbDirection = "vertical", i.pbPerspective = 0 == i.pbStyle.indexOf("rotate") || 0 == i.pbStyle.indexOf("flip-open"), i.pbRandomProgress = o.pbRandomProgress ? "false" !== o.pbRandomProgress : s.randomProgress || !0; var l = function (e) { var t = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" }; for (var a in t) if (void 0 !== e.style[a]) return t[a] }(r[0]), c = "vertical" == i.pbDirection ? "height" : "width"; if (i.pbPerspective) { var d = e.element('<span class="progress-wrap"></span>'); d.append(r.children()), r.append(d), r.addClass("progress-button-perspective") } function u(e) { i.progressStyles[c] = 100 * e + "%" } function p() { i.$apply(function () { i.disabled = !1 }) } function m(e) { if (l && (i.progressStyles.opacity = 0, r.on(l, function e(t) { ("opacity" === t.propertyName || t.originalEvent && "opacity" === t.originalEvent.propertyName) && (r.off(l, e), i.$apply(function () { i.allowProgressTransition = !1, u(0), i.progressStyles.opacity = 1 })) })), "number" == typeof e) { var t = e >= 0 ? "state-success" : "state-error"; r.addClass(t), setTimeout(function () { r.removeClass(t), p() }, i.successTimeout) } else p(); r.removeClass("state-loading") } i.progressStyles = {}, i.disabled = !1, i.allowProgressTransition = !1, r.addClass("progress-button"), r.addClass("progress-button-dir-" + i.pbDirection), r.addClass("progress-button-style-" + i.pbStyle), i.$watch("disabled", function (e) { r.toggleClass("disabled", e) }), r.on("click", function () { i.$apply(function () { if (!i.disabled) { i.disabled = !0, r.addClass("state-loading"), i.allowProgressTransition = !0; var e, a, o = null; t.when(i.progressButton()).then(function () { u(1), o && n.cancel(o), m(1) }, function () { o && n.cancel(o), m(-1) }, function (e) { !i.pbRandomProgress && !i.indeterminate && u(e) }), i.pbRandomProgress && !i.indeterminate ? (a = 0, o = n(function () { u(a += (1 - a) * Math.random() * .5) }, 200)) : i.indeterminate && (e = 0, o = n(function () { e >= 1 ? e = -.25 : e += .01, u(e) }, 20)) } }) }) } } } t.provider("progressButtonConfig", function () { var e = {}, t = null, a = { style: "fill", direction: "horizontal", randomProgress: !0 }; this.profile = function (a, n) { if (1 == arguments.length) { if (t) throw Error("Default profile already set."); t = a } else { if (e[a]) throw Error("Profile [" + a + "] aready set."); e[a] = n } }, this.$get = function () { return { getProfile: function (n) { return n && e[n] ? e[n] : t || a } } } }), t.directive("progressButton", a), a.$inject = ["$q", "progressButtonConfig", "$interval"] }(angular), angular.module("Clarity.directives").directive("spinner", ["ClarityServices", function (e) { return { restrict: "EA", templateUrl: e.Settings.BaseTemplatePath + "spinner.html", scope: { size: "@", color: "@" }, link: function (e, t) { null == e.color && (e.color = "#007db8"), null == e.size && (e.size = "10px"), t.css({ height: e.size, width: e.size }) } } }]), angular.module("Clarity.directives").directive("statusicon", [function () { return { restrict: "E", template: '<span><span ng-class="{\'ci-stack\': iconClassOverlay !== null }"><i ng-if="iconClassOverlay !== null" class="ci-stack-1x {{iconClass}}"></i><i ng-if="iconClassOverlay === null" class="{{iconClass}}"></i><i ng-if="iconClassOverlay" class="ci-stack-1x {{iconClassOverlay}}"></i><span class="sr-only">{{state}}</span></span><span ng-transclude></span></span>', scope: { state: "=value" }, transclude: !0, replace: !0, link: function (e, t, a) { e.$watch("state", function (t) { t && function () { switch (e.iconClass = null, e.iconClassOverlay = null, e.state = e.state || "", e.state.toUpperCase()) { case "SUCCESS": case "OK": case "GREEN": case "HEALTHY": e.iconClass = "text-white ci-state-shape-blank-square", e.iconClassOverlay = "text-success ci-health-square-check"; break; case "CRITICAL": case "RED": e.iconClass = "text-white ci-state-shape-blank-circle", e.iconClassOverlay = "text-danger ci-action-circle-remove"; break; case "WARNING": case "YELLOW": e.iconClass = "text-black ci-state-shape-blank-tri", e.iconClassOverlay = "text-warning ci-health-warning-tri-bang"; break; case "INFO": case "BLUE": e.iconClass = "text-white ci-state-shape-blank-circle", e.iconClassOverlay = "text-primary ci-info-circle-info"; break; case "INPROGRESS": case "IN PROGRESS": e.iconClass = "text-white ci-state-shape-blank-circle", e.iconClassOverlay = "text-primary ci-state-standby-clock"; break; case "STANDBY": case "PENDING": e.iconClassOverlay = "text-light-gray ci-state-standby-clock"; break; case "CANCELLED": case "CANCELED": e.iconClass = "text-light-gray ci-action-circle-remove-slash-o"; break; case "MAINTENANCE": e.iconClass = "text-dark-gray ci-state-shape-blank-circle", e.iconClassOverlay = "text-gray ci-action-circle-wrench"; break; case "UNKNOWN": e.iconClass = "text-dark-gray ci-state-shape-blank-square", e.iconClassOverlay = "text-gray ci-state-unknown-slash"; break; case "": e.iconClass = null, e.iconClassOverlay = null } }() }) } } }]), angular.module("Clarity.directives").directive("topology", ["$timeout", "$filter", "ClarityServices", function (e, t, a) { return { templateUrl: a.Settings.BaseTemplatePath + "topologyTemplate.html", restrict: "E", transclude: !0, scope: { config: "=" }, link: function (a, n, i) { var r = 0; a.data = { svgwidth: 0, svgheight: 0, totalSVGs: 0, svgTotalWidth: 0, containerWidth: 0, svgRowWidth: 0, maxRow: 1, maxColumns: 1, wrapIncrement: 1, directiveZoom: 1, portList: [], displayErrors: !1, originalConnections: [], hifi: !1, layout: "wrap", zoom: 1, columnWidth: 0, rowHeight: 0, shapeClick: null, connectionClick: null, shapeHover: null, connectionHover: null, flowPadding: 100, flowMarginRightSVG: 100, wrapPadding: 100, wrapMarginRightSVG: 100, wrapSpaceBetweenRows: 100, gridContainerHeight: 800, gridPadding: 100, lineShape1Distance: 25, lineShape2Distance: 15, lineIncrement: 3, lineSegments: "direct" }, a.timeout = null, a.draw = function (t, n) { a.timeout && e.cancel(a.timeout), a.timeout = e(function () { a.init(), t && n && t.layout != n.layout && $("svg text").hide().show() }, 500) }, a.init = function () { if (a.config.topologyTemplates && 0 != a.config.topologyTemplates.length && a.config.topologyShapes && 0 != a.config.topologyShapes.length) { a.data = angular.extend(a.data, a.config), 1 != a.data.zoom && (a.data.directiveZoom = a.data.zoom), a.config.zoomIn = function () { var e = $("#svg-canvas"), t = $("#svg-container"); if ("grid" == a.data.layout) { document.getElementById("svg-canvas").getAttribute("viewBox").split(" "); var n = parseInt(e.css("height").split("p")[0]), i = parseInt(e.css("width").split("p")[0]), r = parseInt(t.css("width").split("p")[0]), o = parseInt(t.css("height").split("p")[0]); e.css("height", n + .25 * n + "px"), e.css("width", i + .25 * i + "px"), t.css("width", r + .25 * r + "px"), t.css("height", o + .25 * o + "px") } "flow" == a.data.layout && (a.data.directiveZoom = a.data.directiveZoom + .15, a.draw()), "wrap" == a.data.layout && (a.data.directiveZoom = a.data.directiveZoom + .15, a.draw()) }, a.config.zoomOut = function () { var e = $("#svg-canvas"), t = $("#svg-container"); if ("grid" == a.data.layout) { document.getElementById("svg-canvas").getAttribute("viewBox").split(" "); var n = parseInt(e.css("height").split("p")[0]), i = parseInt(e.css("width").split("p")[0]), r = parseInt(t.css("width").split("p")[0]), o = parseInt(t.css("height").split("p")[0]); e.css("height", n - .25 * n + "px"), e.css("width", i - .25 * i + "px"), t.css("width", r - .25 * r + "px"), t.css("height", o - .25 * o + "px") } "flow" == a.data.layout && (a.data.directiveZoom = a.data.directiveZoom - .15, a.draw()), "wrap" == a.data.layout && (a.data.directiveZoom = a.data.directiveZoom - .15, a.draw()) }, a.config.zoomReset = function () { var e = $("#svg-canvas"), t = $("#svg-container"); "grid" == a.data.layout && (a.data.scaledtoFit = !1, document.getElementById("svg-canvas").removeAttribute("viewBox"), e.css("height", ""), e.css("width", ""), t.css("height", ""), t.css("overflow", ""), t.css("width", ""), a.draw()), "flow" != a.data.layout && "wrap" != a.data.layout || (a.data.directiveZoom = a.data.zoom, a.draw()) }; var t = angular.copy(a.data.topologyShapes); a.data.totalSVGs = 0, a.data.maxColumns = 0, a.data.maxRow = 0, r = 0; var n = $("#svg-wrapper"), i = $("#svg-view"), o = $("#svg-canvas"), s = $("#svg-container"); if (i.empty(), angular.forEach(t, function (e) { e.row >= a.data.maxRow && (a.data.maxRow = e.row), e.column >= a.data.maxColumns && (a.data.maxColumns = e.column), a.drawShape(e, null), r++ }), n.css("overflow-x", ""), n.css("height", ""), "grid" == a.data.layout && (a.data.directiveZoom = 1, a.data.svgTotalWidth = a.data.maxColumns * a.data.columnWidth + a.data.gridPadding, a.data.svgTotalHeight = a.data.maxRow * a.data.rowHeight + a.data.gridPadding, a.data.scaledtoFit || (o.css("height", (a.data.gridContainerHeight - 20) / a.data.svgTotalHeight * (a.data.gridContainerHeight - 20) + "px"), o.css("width", (a.data.containerWidth - 20) / a.data.svgTotalWidth * (a.data.containerWidth - 20) + "px"), document.getElementById("svg-canvas").setAttribute("viewBox", "0 0 " + (a.data.containerWidth - 20) + " " + (a.data.gridContainerHeight - 20)), s.css("height", a.data.gridContainerHeight - 20 + "px"), s.css("overflow", "hidden"), s.css("width", a.data.containerWidth - 20 + "px"), a.data.scaledtoFit = !0), n.css("overflow-x", "scroll"), n.css("height", a.data.gridContainerHeight + "px")), "flow" == a.data.layout && (a.data.scaledtoFit = !1, document.getElementById("svg-canvas") && document.getElementById("svg-canvas").removeAttribute("viewBox"), o.css("height", ""), o.css("width", ""), s.css("height", ""), s.css("overflow", ""), s.css("width", ""), a.data.svgTotalWidth = a.data.totalSVGs * a.data.svgwidth + a.data.totalSVGs * a.data.flowMarginRightSVG, o.css("width", a.data.svgTotalWidth * a.data.directiveZoom + a.data.flowPadding + "px"), n.css("overflow-x", "scroll"), o.css("height", a.data.flowPadding * a.data.directiveZoom * 2 + a.data.svgheight * a.data.directiveZoom + "px")), "wrap" == a.data.layout) { a.data.scaledtoFit = !1, document.getElementById("svg-canvas") && document.getElementById("svg-canvas").removeAttribute("viewBox"), o.css("height", ""), o.css("width", ""), s.css("height", ""), s.css("overflow", ""), s.css("width", ""); var l = a.data.topologyShapes[a.data.topologyShapes.length - 1].nodeId; farY = parseInt($("svg[data-node-id='" + l + "']").attr("y")), a.data.zoom >= 1 && o.css("height", (farY + a.data.svgheight) * a.data.directiveZoom + a.data.wrapSpaceBetweenRows + "px"), a.data.zoom < 1 && o.css("height", (farY + a.data.svgheight) / a.data.directiveZoom + "px"), $(window).resize(function () { self.pollwindowtimer && e.cancel(self.pollwindowtimer), self.pollwindowtimer = e(function () { a.draw() }, 1) }) } a.deleteLines(); var c = $("<svg style='overflow: visible;' class='staticLines'></svg>"); i.append(c), a.drawLines() } }, a.calculateWidth = function () { a.windowtimer = e(function () { a.deleteLines(); var e = $("#svg-view"); e.empty(), a.data.containerWidth = $("#svg-container").width(), a.data.totalSVGs = 0, r = 0, a.data.svgRowWidth = 0, angular.forEach(a.topologyShapes, function (e) { a.drawShape(e, null), r++ }); var t = $("<svg style='overflow: visible;' class='staticLines'></svg>"); e.append(t), a.drawLines() }, 1e3) }, a.defineSvgWidth = function () { var e = $("#svg-view svg").attr("id"); e ? (a.data.svgwidth = parseInt(document.getElementById(e).getBBox().width), a.data.svgheight = parseInt(document.getElementById(e).getBBox().height)) : $(window).off("resize") }, a.getShapeData = function (e) { return t("filter")(a.data.topologyData, { id: e })[0] }, a.drawShape = function (e, n) { var i = t("filter")(a.data.topologyTemplates, { templateId: e.templateId })[0], o = a.getShapeData(e.nodeId); i.template = i.template.replace(/%(\w*)%/g, function (e, t) { return o && o[t] ? o[t] : "" }); var s = $(i.template); s.attr("data-node-id", e.nodeId), n ? ($('#svg-view [data-node-id="' + n.nodeId + '"] #' + e.targetElementId).append(s), a.defineSvgWidth()) : (a.data.totalSVGs++, a.data.containerWidth = $("#svg-container").width(), "grid" == a.data.layout && (s.attr("x", parseInt(e.column) * parseInt(a.data.columnWidth) - parseInt(a.data.columnWidth) + a.data.gridPadding), s.attr("y", parseInt(e.row) * parseInt(a.data.rowHeight) - parseInt(a.data.columnWidth) + a.data.gridPadding)), "flow" == a.data.layout && (s.attr("x", r * (a.data.svgwidth + a.data.flowMarginRightSVG) + a.data.flowPadding), s.attr("y", a.data.flowPadding)), "wrap" == a.data.layout && (a.data.svgRowWidth > a.data.containerWidth - a.data.svgwidth * a.data.directiveZoom - a.data.wrapMarginRightSVG - 2 * a.data.wrapPadding * a.data.directiveZoom ? (a.data.svgRowWidth = 0, a.data.wrapIncrement = 0, a.data.previousRowHeight = a.data.previousRowHeight + a.data.svgheight + a.data.wrapSpaceBetweenRows, a.data.svgRowWidth = a.data.wrapIncrement * ((a.data.svgwidth + a.data.wrapMarginRightSVG) * a.data.directiveZoom) + a.data.svgwidth * a.data.directiveZoom * 2, s.attr("x", a.data.wrapIncrement * (a.data.svgwidth + a.data.wrapMarginRightSVG) + a.data.wrapPadding), s.attr("y", a.data.previousRowHeight), a.data.wrapIncrement++) : (a.data.svgRowWidth = a.data.wrapIncrement * ((a.data.svgwidth + a.data.wrapMarginRightSVG) * a.data.directiveZoom) + a.data.svgwidth * a.data.directiveZoom * 2, s.attr("x", a.data.wrapIncrement * (a.data.svgwidth + a.data.wrapMarginRightSVG) + a.data.wrapPadding), s.attr("y", a.data.previousRowHeight), a.data.wrapIncrement++), 0 == r && (a.data.previousRowHeight = a.data.wrapPadding, a.data.wrapIncrement = 0, s.attr("x", a.data.wrapPadding), s.attr("y", a.data.previousRowHeight), a.data.wrapIncrement++, a.data.svgRowWidth = 0, a.data.svgRowWidth = a.data.wrapIncrement * ((a.data.svgwidth + a.data.wrapMarginRightSVG) * a.data.directiveZoom) + a.data.svgwidth * a.data.directiveZoom)), $("#svg-view").append(s), a.defineSvgWidth()), e.isClickable && a.data.shapeClick && s.on("click", function () { a.data.shapeClick && a.data.shapeClick(e.nodeId) }), e.class = e.class || "", e.connectionGroups = e.connectionGroups || [], a.setupHover(s, e, a.data.shapeHover), angular.forEach(e.childShapes, function (t) { a.drawShape(t, e) }) }, a.deleteLines = function () { $("#svg-view svg.staticLines").remove() }, a.drawLines = function () { var e = {}; angular.forEach(a.data.topologyConnections, function (t, n) { if (t.fromId && t.toId) { e[t.fromId] = e[t.fromId] || 0, e[t.toId] = e[t.toId] || 0, e[t.fromId]++, e[t.toId]++; var i, r, o = 0, s = 0, l = 0, c = 0, d = $("svg[data-node-id='" + t.fromId + "']"), u = $("svg[data-node-id='" + t.toId + "']"); if (!d[0] || !u[0]) return void $(window).off("resize"); o += parseInt(d.attr("x")), s += parseInt(d.attr("y")), l += parseInt(u.attr("x")), c += parseInt(u.attr("y")), i = parseInt(d[0].getBBox().width), shape1Height = parseInt(d[0].getBBox().height), r = parseInt(u[0].getBBox().width), shape2Height = parseInt(u[0].getBBox().height), o && s || (o = 0, s = 0), l && c || (l = 0, c = 0), angular.forEach(d.parents(), function (e) { angular.forEach(e.attributes, function (e) { "id" == e.nodeName && "svg-view" == e.nodeValue || ("x" == e.nodeName && (o += parseInt(e.nodeValue)), "y" == e.nodeName && (s += parseInt(e.nodeValue))) }) }), angular.forEach(u.parents(), function (e) { angular.forEach(e.attributes, function (e) { "id" == e.nodeName && "svg-view" == e.nodeValue || ("x" == e.nodeName && (l += parseInt(e.nodeValue)), "y" == e.nodeName && (c += parseInt(e.nodeValue))) }) }); var p = 0, m = 0, g = 0, f = 0; p = o, m = s, g = l, f = c, p = parseInt(p), m = parseInt(m), g = parseInt(g), f = parseInt(f); var h = 0, C = 0, v = 0, I = 0, A = 0, T = 0, R = 0, S = 0, w = 0, L = 0, y = 0, _ = 0, Y = 0; "top" == t.fromPosition && (v = i / 2, I = a.data.lineShape1Distance + a.data.lineIncrement * e[t.fromId], h = p - a.data.lineShape1Distance - a.data.lineIncrement * e[t.fromId], C = p + a.data.lineShape1Distance + a.data.lineIncrement * e[t.fromId], T = m, R = A = p + v, S = m - I), "top" == t.toPosition && (w = r / 2, L = a.data.lineShape2Distance + a.data.lineIncrement * e[t.toId], a.data.lineShape2Distance, a.data.lineIncrement, e[t.fromId], a.data.lineShape2Distance, a.data.lineIncrement, e[t.fromId], _ = f, y = g + w, Y = f - L), "bottom" == t.fromPosition && (v = i / 2, I = a.data.lineShape1Distance + a.data.lineIncrement * e[t.fromId], h = p - a.data.lineShape1Distance - a.data.lineIncrement * e[t.fromId], C = p + a.data.lineShape1Distance + a.data.lineIncrement * e[t.fromId], T = m, R = A = p + v, S = m + shape1Height + I), "bottom" == t.toPosition && (w = r / 2, L = a.data.lineShape2Distance + a.data.lineIncrement * e[t.toId], a.data.lineShape2Distance, a.data.lineIncrement, e[t.fromId], a.data.lineShape2Distance, a.data.lineIncrement, e[t.fromId], _ = f, y = g + w, Y = f + shape2Height + L), "left" == t.fromPosition && (v = parseInt($("svg[data-node-id='" + t.fromId + "']")[0].getBBox().height) / 2, I = a.data.lineShape1Distance + a.data.lineIncrement * e[t.fromId], h = p - a.data.lineShape1Distance - a.data.lineIncrement * e[t.fromId], C = p + a.data.lineShape1Distance + a.data.lineIncrement * e[t.fromId], R = A = p, S = T = m + v), "left" == t.toPosition && (w = parseInt($("svg[data-node-id='" + t.toId + "']")[0].getBBox().height) / 2, L = a.data.lineShape2Distance + a.data.lineIncrement * e[t.toId], a.data.lineShape2Distance, a.data.lineIncrement, e[t.fromId], a.data.lineShape2Distance, a.data.lineIncrement, e[t.fromId], y = g, Y = _ = f + w), "right" == t.fromPosition && (v = parseInt($("svg[data-node-id='" + t.fromId + "']")[0].getBBox().height) / 2, I = a.data.lineShape1Distance + a.data.lineIncrement * e[t.fromId], h = p - a.data.lineShape1Distance - a.data.lineIncrement * e[t.fromId], C = p + a.data.lineShape1Distance + a.data.lineIncrement * e[t.fromId], R = (A = p + i) + I, S = T = m + v), "right" == t.toPosition && (w = parseInt($("svg[data-node-id='" + t.toId + "']")[0].getBBox().height) / 2, L = a.data.lineShape2Distance + a.data.lineIncrement * e[t.toId], a.data.lineShape2Distance, a.data.lineIncrement, e[t.fromId], a.data.lineShape1Distance, a.data.lineIncrement, e[t.fromId], y = g + r, Y = _ = f + w); var b = ""; g >= p && (b = "M " + A + " " + T, "simple" == a.data.lineSegments && (b += " L " + A + " " + _), "complex" == a.data.lineSegments && (b += " L " + R + " " + S, b += " L " + h + " " + S, b += " L " + h + " " + Y, b += " L " + y + " " + Y), b += " L " + y + " " + _), g < p && (b = "M " + A + " " + T, "simple" == a.data.lineSegments && (b += " L " + y + " " + T), "complex" == a.data.lineSegments && (b += " L " + R + " " + S, b += " L " + C + " " + S, b += " L " + C + " " + Y, b += " L " + y + " " + Y), b += " L " + y + " " + _), t.class = t.class || "", t.connectionGroups = t.connectionGroups || []; var x = document.createElementNS("http://www.w3.org/2000/svg", "path"); x.setAttribute("d", b), x.setAttribute("fill", "none"), a.setupHover(x, t, a.data.connectionHover), $("#svg-view svg.staticLines").append(x) } }) }, a.setupHover = function (e, t, n) { (e = e[0] || e).className.baseVal = t.class + " " + t.connectionGroups.join(" "), n && n(e, t), $(e).hover(function () { a.hoverLogic(t) }, function () { a.resetHover(t) }) }, a.resetHover = function (e) { e.connectionGroups && angular.forEach(e.connectionGroups, function (e) { var t = $("." + e); angular.forEach(t, function (e) { e.className.baseVal = e.className.baseVal.replace(" hover ", "") }) }) }, a.hoverLogic = function (e) { e.connectionGroups && angular.forEach(e.connectionGroups, function (e) { var t = $("." + e); angular.forEach(t, function (e) { e.className.baseVal = e.className.baseVal + " hover " }) }) }, a.$watch("config", a.draw, !0) } } }]), angular.module("Clarity.directives").directive("wizard", ["$q", "$translate", "ClarityServices", function (e, t, a) { return { templateUrl: a.Settings.BaseTemplatePath + "wizard.html", restrict: "E", require: "^?modal", transclude: !0, scope: { editMode: "=?", onFinish: "&", onCancel: "&", currentStep: "=?", currentStepIndex: "=?", finishButtonText: "=?" }, controller: ["$scope", "$element", "$rootScope", function (a, n, i) { var r, o, s, l, c, d, u, p, m, g, f, h; return i.$broadcast("modalOpen"), null == a.editMode && (a.editMode = !1), a.currentStepIndex = 0, s = this.steps = a.steps = [], a.finishButtonText || (a.finishButtonText = a.editMode ? t.instant("CLARITY_Save") : t.instant("CLARITY_Finish")), a.stepCount = function () { return { current: a.currentStepIndex + 1, total: a.steps.length } }, this.updateSteps = (l = this, function () { var e, t, i, r, o, c, d; for (t = s[a.currentStepIndex], o = n[0].querySelectorAll("wizard-step"), s = l.steps = a.steps = [], c = 0, d = o.length; c < d; c++) r = o[c], null != (i = angular.element(r).isolateScope()) && s.push(i); a.currentStepIndex >= s.length && (a.currentStepIndex = s.length - 1, -1 === a.currentStepIndex && (a.currentStepIndex = 0)), t !== (e = s[a.currentStepIndex]) && l.updateStepShown(e, t, a.currentStepIndex) }), this.updateStepShown = function (e, t, n) { return null != e && (e.touched = !0), a.currentStep = (null != e ? e.stepTitle : void 0) || (null != e ? e.stepTitle : void 0), null != e && e.onEnter(), a.$emit("wizard:stepChanged", { index: a.currentStepIndex, title: (null != e ? e.stepTitle : void 0) || (null != e ? e.stepTitle : void 0) }, { index: n, title: (null != t ? t.stepTitle : void 0) || (null != t ? t.stepTitle : void 0) }) }, this.onStep = function (e) { return s[a.currentStepIndex] === e }, r = function (e) { return a.editMode || e <= a.currentStepIndex }, this.updateForwards = function () { var e, t, i, r, o; for (t = -1, e = r = 0, o = s.length; r < o; e = ++r) (i = s[e]).invalid && -1 === t && (t = e), e < a.currentStepIndex ? i.forward = !0 : i.forward = -1 === t || t === e; n.scrollTop(0), window.setTimeout(function () { $(window).trigger("resize") }, 500) }, a.$watch("currentStepIndex", this.updateForwards), o = function (t) { var n; return n = s[a.currentStepIndex].onNext, s[a.currentStepIndex].onNextFailed = !1, s[a.currentStepIndex].onNextExists() ? (n = n(), e.when(n).then(function () { return t() }, function () { return s[a.currentStepIndex].onNextFailed = !0 })) : t() }, a.isStepDisabled = function (e) { return !(a.editMode || r(e) && s[e].forward) }, a.canFinish = function () { var e, t, n; return a.editMode ? (null != (e = s[s.length - 1]) ? e.forward : void 0) && !(null != (t = s[s.length - 1]) ? t.invalid : void 0) : !(null != (n = s[a.currentStepIndex]) ? n.invalid : void 0) && a.currentStepIndex === s.length - 1 }, a.selectStepIndex = (c = this, function (e) { return a.editMode ? c.goto(e) : r(e) && s[e].forward ? e > a.currentStepIndex ? o(function () { return c.goto(e) }) : c.goto(e) : void 0 }), this.goto = (d = this, function (e) { var t, n, i, r; if (n = a.currentStepIndex, angular.isString(e)) { for (t = i = 0, r = s.length; i < r; t = ++i) if (s[t].stepTitle === e) return void (a.currentStepIndex = t); throw new Error("wizard: Couldn't find step '" + e + "'") } if (!angular.isNumber(e)) throw new Error("wizard: Identifier not valid"); if (e < 0 || e >= s.length) throw new Error("wizard: Step " + e + " not in index range 0-" + (s.length - 1)); return a.currentStepIndex = e, d.updateStepShown(s[a.currentStepIndex], s[n], n) }), a.$on("wizard:goto", (u = this, function (e, t) { return u.goto(t) })), a.goto = this.goto, this.previous = (p = this, function () { if (a.currentStepIndex <= 0) throw new Error("wizard: At beginning of wizard steps"); return a.currentStepIndex--, p.updateStepShown(s[a.currentStepIndex], s[a.currentStepIndex + 1], a.currentStepIndex + 1) }), a.$on("wizard:previous", this.previous), a.previous = this.previous, this.next = (m = this, function () { if (a.currentStepIndex >= s.length - 1) throw new Error("wizard: At end of wizard steps"); return a.currentStepIndex++, m.updateStepShown(s[a.currentStepIndex], s[a.currentStepIndex - 1], a.currentStepIndex - 1) }), a.$on("wizard:next", this.next), a.next = (g = this, function () { return o(g.next) }), this.first = (f = this, function () { var e; return e = a.currentStepIndex, a.currentStepIndex = 0, f.updateStepShown(s[a.currentStepIndex], s[e], e) }), a.$on("wizard:first", this.first), this.last = (h = this, function () { var e; return e = a.currentStepIndex, a.currentStepIndex = s.length - 1, h.updateStepShown(s[a.currentStepIndex], s[e], e) }), a.$on("wizard:last", this.last), this.cancel = function (t) { var n; if ((n = a.onCancel) && "function" == typeof n) return n = n({ $event: t }), e.when(n) }, a.$on("wizard:cancel", this.cancel), a.cancel = this.cancel, this.finish = function (t) { var n; if ((n = a.onFinish) && "function" == typeof n) return n = n({ $event: t }), e.when(n) }, a.$on("wizard:finish", this.finish), a.finish = this.finish, this }], link: function (e, t, a, n) { } } }]), angular.module("Clarity.directives").directive("wizardStep", ["$timeout", "$translate", "ClarityServices", function (e, t, a) { return { templateUrl: a.Settings.BaseTemplatePath + "wizardStep.html", restrict: "E", transclude: !0, require: "^wizard", scope: { stepTitle: "@", invalid: "=?", onNext: "&", onEnter: "&", nextButtonTitle: "@", extraButton: "<?" }, link: function (a, n, i, r) { return null == a.invalid && (a.invalid = !1), a.nextButtonTitle || (a.nextButtonTitle = t.instant("CLARITY_Next")), a.touched = !1, a.onNextExists = function () { return angular.isDefined(i.onNext) }, a.isCurrentStep = function () { return r.onStep(a) }, r.updateSteps(), a.$on("$destroy", function () { return e(function () { return r.updateSteps() }) }), a.$watch("invalid", function () { return r.updateForwards() }) } } }]), angular.module("Clarity.services").filter("unique", function (e) { return function (t, a) { if (angular.isArray(t)) { var n = e(a); return _.uniqBy(t, function (e) { return n(e) }) } return t } }).filter("lookup", [function () { return function (e, t) { return e[t] } }]).filter("ip2long", [function () { return function (e) { var t = e.split("."), a = 0; return a += parseInt(t[0], 10) << 24 >>> 0, a += parseInt(t[1], 10) << 16 >>> 0, a += parseInt(t[2], 10) << 8 >>> 0, a += parseInt(t[3], 10) >>> 0 } }]).filter("ip2link", [function () { return function (e) { var t = e; return void 0 != t && "" !== t && 0 !== t.indexOf("http") && (t = "http://" + t), t } }]).filter("toclassname", [function () { return function (e) { return e ? e.replace(/[^a-z0-9]/g, function (e) { var t = e.charCodeAt(0); return 32 === t ? "-" : t >= 65 && t <= 90 ? "_" + e.toLowerCase() : "__" + ("000" + t.toString(16)).slice(-4) }) : "" } }]).filter("sum", [function () { return function (e, t) { return e.reduce(function (e, a) { return e + a[t] }, 0) } }]).filter("ellipsis", ["ClarityServices", function (e) { return function (t, a) { var n = t; return void 0 === a && void 0 != e.Settings.TextOverflowLength && (a = e.Settings.TextOverflowLength), t.length > a && (n = t.substring(0, a) + "..."), n } }]).factory("ClarityServices", ["$rootScope", function (e) { return e.Clarity = this, e.Clarity.Settings = { BaseTemplatePath: "__clarity/", TextOverflowLength: null }, e.Clarity.SetTextOverflowLength = function (t) { e.Clarity.Settings.TextOverflowLength = t }, e.Clarity.NewGuid = function () { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) { var t = 16 * Math.random() | 0; return ("x" === e ? t : 3 & t | 8).toString(16) }) }, e.Clarity.MergeObjects = function (e, t) { var a = angular.copy({}, e); return a = angular.copy(a, t) }, e.Clarity }]), angular.module("Clarity.localizations").constant("ClarityTranslations", { en: { CLARITY_Acknowledge: "Acknowledge", CLARITY_Action: "Action", CLARITY_Actions: "Actions", CLARITY_Active: "Active", CLARITY_Activity: "Activity", CLARITY_Add: "Add", CLARITY_Address: "Address", CLARITY_Address1: "Address Line 1", CLARITY_Address2: "Address Line 2", CLARITY_Address3: "Address Line 3", CLARITY_AnotherAction: "Another Action", CLARITY_Aisle: "Aisle", CLARITY_alert: "alert", CLARITY_Alert: "Alert", CLARITY_Alerts: "Alerts", CLARITY_All: "All", CLARITY_AlternateEmail: "Alternate Email", CLARITY_Amps: "Amps", CLARITY_Apply: "Apply", CLARITY_Array: "Array", CLARITY_Arrays: "Arrays", CLARITY_AssetTag: "Asset Tag", CLARITY_Assign: "Assign", CLARITY_Assigned: "Assigned", CLARITY_Attribute: "Attribute", CLARITY_AvailableMemory: "Available Memory", CLARITY_Available: "Available", CLARITY_Average: "Average", CLARITY_Back: "Back", CLARITY_Backplane: "Backplane", CLARITY_Bandwidth: "Bandwidth", CLARITY_Baseline: "Baseline", CLARITY_Baselines: "Baselines", CLARITY_BiWeekly: "Bi-Weekly", CLARITY_Bottom: "Bottom", CLARITY_Browse: "Browse", CLARITY_Cancel: "Cancel", CLARITY_Capacity: "Capacity", CLARITY_Category: "Category", CLARITY_Chassis: "Chassis", CLARITY_CheckUpdates: "Check for Updates", CLARITY_CityTown: "City/Town", CLARITY_Clear: "Clear", CLARITY_ClearLogs: "Clear Logs", CLARITY_Close: "Close", CLARITY_Command: "Command", CLARITY_Community: "Community", CLARITY_Compliance: "Compliance", CLARITY_Component: "Component", CLARITY_Compute: "Compute", CLARITY_Configuration: "Configuration", CLARITY_ConfigureDeploy: "Configure and Deploy", CLARITY_Configure: "Configure", CLARITY_Confirm: "Confirm", CLARITY_confirm: "confirm", CLARITY_Console: "Console", CLARITY_Connect: "Connect", CLARITY_Connections: "Connections", CLARITY_Consistent: "Consistent", CLARITY_ContactInfo: "Contact Info", CLARITY_Controller: "Controller", CLARITY_CPU: "CPU", CLARITY_cpus: "CPUs", CLARITY_create: "create", CLARITY_Create: "Create", CLARITY_Created: "Created", CLARITY_CreatedBy: "Created By", CLARITY_CreatedDate: "Created Date", CLARITY_CreatedOn: "Created On", CLARITY_Critical: "Critical", CLARITY_Criticality: "Criticality", CLARITY_CriticalErrors: "Critical Errors", CLARITY_Country: "Country", CLARITY_CountryTerritory: "Country or Territory", CLARITY_Current: "Current", CLARITY_CurrentVersion: "Current Version", CLARITY_CurrentUpdateStatus: "Current Update Status", CLARITY_Daily: "Daily", CLARITY_Database: "Database", CLARITY_DataCenter: "Data Center", CLARITY_Datastore: "Datastore", CLARITY_Date: "Date", CLARITY_DateInstalled: "Date Installed", CLARITY_DateUpdated: "Date Updated", CLARITY_DateTime: "Date and Time", CLARITY_Day_: "day", CLARITY_Days_: "days", CLARITY_DayOfWeek_Sunday: "Sunday", CLARITY_DayOfWeek_Monday: "Monday", CLARITY_DayOfWeek_Tuesday: "Tuesday", CLARITY_DayOfWeek_Wednesday: "Wednesday", CLARITY_DayOfWeek_Thursday: "Thursday", CLARITY_DayOfWeek_Friday: "Friday", CLARITY_DayOfWeek_Saturday: "Saturday", CLARITY_Debug: "Debug", CLARITY_Default: "Default", CLARITY_Delete: "Delete", CLARITY_delete: "delete", CLARITY_DellCopyright: "© 2016 Dell Technologies. ALL RIGHTS RESERVED", CLARITY_DellNews: "Dell News", CLARITY_Deploy: "Deploy", CLARITY_Deployed: "Deployed", CLARITY_DeployedBy: "Deployed By", CLARITY_DeployedOn: "Deployed On", CLARITY_Device: "Device", CLARITY_Devices: "Devices", CLARITY_Description: "Description", CLARITY_Destination: "Destination", CLARITY_Detail: "Detail", CLARITY_Details: "Details", CLARITY_Disable: "Disable", CLARITY_Disabled: "Disabled", CLARITY_Discover: "Discover", CLARITY_Discovered: "Discovered", CLARITY_Disk: "Disk", CLARITY_Disks: "Disks", CLARITY_Discovering: "Discovering", CLARITY_Display: "Display", CLARITY_Domain: "Domain", CLARITY_Drives: "Drives", CLARITY_Edit: "Edit", CLARITY_Email: "Email", CLARITY_EmailAddress: "Email Address", CLARITY_EmptyTable: "There are no items to display.", CLARITY_Enable: "Enable", CLARITY_Enabled: "Enabled", CLARITY_Enclosures: "Enclosures", CLARITY_Enclosure: "Enclosure", CLARITY_EndTime: "End Time", CLARITY_Environmental: "Environmental", CLARITY_Errors_Multiple: "Multiple Errors", CLARITY_Errors_Details: "Details", CLARITY_estimatedtime: "estimated time:", CLARITY_Events: "Events", CLARITY_Expand: "Expand", CLARITY_Expire: "Expire", CLARITY_Expires: "Expires", CLARITY_Export: "Export", CLARITY_Fabric: "Fabric", CLARITY_Facility: "Facility", CLARITY_Failed: "Failed", CLARITY_FileName: "File Name", CLARITY_ClearFilter: "Clear All", CLARITY_Filter: "Filter", CLARITY_FilterResults: "Filter Results", CLARITY_Finish: "Finish", CLARITY_FirstName: "First Name", CLARITY_FirmwareVersion: "Firmware Version", CLARITY_FirmwareStatus: "Firmware Status", CLARITY_Free: "Free", CLARITY_GB: "GB", CLARITY_Gateway: "Gateway", CLARITY_General: "General", CLARITY_GeneralInfo: "General Info", CLARITY_Growth: "Growth", CLARITY_Good: "Good", CLARITY_Health: "Health", CLARITY_HideDetails: "Hide Details", CLARITY_Host: "Host", CLARITY_Hosts: "Hosts", CLARITY_HostName: "Host Name", CLARITY_Hours: "Hours", CLARITY_ID: "ID", CLARITY_Identify: "Identify", CLARITY_Immediate: "Immediate", CLARITY_Index: "Index", CLARITY_Information: "Information", CLARITY_Informational: "Informational", CLARITY_Install: "Install", CLARITY_InstallOptions: "Install Options", CLARITY_InService: "In Service", CLARITY_Interconnects: "Interconnects", CLARITY_IO: "I/O", CLARITY_IpAddress: "IP Address", CLARITY_IPMI: "IPMI", CLARITY_IssuedTo: "Issued To", CLARITY_IssuedBy: "Issued By", CLARITY_Job: "Job", CLARITY_Jobs: "Jobs", CLARITY_Last: "Last", CLARITY_LastName: "Last Name", CLARITY_Leader: "Leader", CLARITY_Learn: "Learn", CLARITY_LearnMore: "Learn More", CLARITY_LicensedFor: "Licensed for", CLARITY_List: "List", CLARITY_Loading: "Loading... Please Wait.", CLARITY_location: "Location", CLARITY_Login: "Log In", CLARITY_LoginDateTime: "Login Date and Time", CLARITY_LoginFailed: "The specified username and/or password is incorrect. Reenter the login ID and password.", CLARITY_Logout: "Logout", CLARITY_Logs: "Logs", CLARITY_Major: "Major", CLARITY_Mappings: "Mappings", CLARITY_Mbps: "Mbps", CLARITY_memory: "Memory", CLARITY_Message: "Message", CLARITY_Min: "Min", CLARITY_Model: "Model", CLARITY_Monthly: "Monthly", CLARITY_More: "More", CLARITY_MoreActions: "More Actions", CLARITY_Name: "Name", CLARITY_Network: "Network", CLARITY_Networking: "Networking", CLARITY_Networks: "Networks", CLARITY_New: "New", CLARITY_New_: "New...", CLARITY_Next: "Next", CLARITY_No: "No", CLARITY_None: "None", CLARITY_Note: "Note", CLARITY_Notes: "Notes", CLARITY_FeatureNotImplemented: "This feature is not yet implemented.", CLARITY_Offline: "Offline", CLARITY_OK: "OK", CLARITY_on: "on", CLARITY_On_: "On", CLARITY_Online: "Online", CLARITY_Onboarding: "Onboarding", CLARITY_optional_: "(optional)", CLARITY_OperatingSystem: "Operating System", CLARITY_DellSupportAssistTickets: "Dell Support Assist Tickets", CLARITY_RecentDellSupportAssistTickets: "Recent Dell Support Assist Tickets", CLARITY_Overview: "Overview", CLARITY_Password: "Password", CLARITY_Path: "Path", CLARITY_Peak: "Peak", CLARITY_Phone: "Phone", CLARITY_PhoneNumber: "Phone Number", CLARITY_Port: "Port", CLARITY_Ports: "Ports", CLARITY_Power: "Power", CLARITY_Present: "Present", CLARITY_Print: "Print", CLARITY_Product: "Product", CLARITY_Progress: "Progress", CLARITY_Protocol: "Protocol", CLARITY_Proxy: "Proxy", CLARITY_Purpose: "Purpose", CLARITY_Rack: "Rack", CLARITY_Reading: "Reading", CLARITY_Recheck: "Recheck", CLARITY_Rediscover: "Rediscover", CLARITY_ReleaseNotes: "Release Notes", CLARITY_Relevancy: "Relevancy", CLARITY_Refresh: "Refresh", CLARITY_RememberMe: "Remember Me", CLARITY_Remove: "Remove", CLARITY_RepositoryName: "Repository Name", CLARITY_Repositories: "Repositories", CLARITY_Repository: "Repository", CLARITY_Required_: "REQUIRED", CLARITY_Restart: "Restart", CLARITY_Retry: "Retry", CLARITY_Role: "Role", CLARITY_Roles: "Roles", CLARITY_Room: "Room", CLARITY_RunReport: "Run Report", CLARITY_Save: "Save", CLARITY_SaveSettings: "Save Settings", CLARITY_Search: "Search", CLARITY_SearchResults: "Results for ", CLARITY_Secured: "Secured", CLARITY_select: "Select", CLARITY_Select_: "--Select--", CLARITY_Server: "Server", CLARITY_Servers: "Servers", CLARITY_ServerInformation: "Server Information", CLARITY_ServerName: "Server Name", CLARITY_Service: "Service", CLARITY_Services: "Services", CLARITY_ServiceHealth: "Service Health", CLARITY_ServiceInformation: "Service Information", CLARITY_ServiceName: "Service Name", CLARITY_ServiceSettings: "Service Settings", CLARITY_ServiceTag: "Service Tag", CLARITY_Settings: "Settings", CLARITY_Severity: "Severity", CLARITY_SignIn: "Log In", CLARITY_Shutdown: "Shutdown", CLARITY_Size: "Size", CLARITY_Slot: "Slot", CLARITY_Source: "Source", CLARITY_Speed: "Speed", CLARITY_stars: "********", CLARITY_State: "State", CLARITY_StartTime: "Start Time", CLARITY_StateProvinceRegion: "State / Province / Region", CLARITY_Statistic: "Statistic", CLARITY_Status: "Status", CLARITY_Storage: "Storage", CLARITY_StorageInformation: "Storage Information", CLARITY_Submit: "Submit", CLARITY_Subnet: "Subnet", CLARITY_Success: "Success", CLARITY_Summary: "Summary", CLARITY_Support: "Support", CLARITY_SupportAssist: "Support Assist", CLARITY_Switches: "Switches", CLARITY_SystemVersion: "System Version", CLARITY_TB: "TB", CLARITY_Tags: "Tags", CLARITY_Temperature: "Temperature", CLARITY_Test: "Test", CLARITY_Time: "Time", CLARITY_TimeZone: "Time Zone", CLARITY_ToggleDropdown: "Toggle Dropdown", CLARITY_ToggleDateTime: "Toggle Date/Time", CLARITY_Top: "Top", CLARITY_TopOffenders: "Top Offenders", CLARITY_Total: "Total", CLARITY_TotalUsage: "Total Usage", CLARITY_Troubleshoot: "Troubleshoot", CLARITY_Type: "Type", CLARITY_Unknown: "Unknown", CLARITY_unmanage: "Unmanage", CLARITY_Unallocated: "Unallocated", CLARITY_Unsuccessful: "Unsuccessful", CLARITY_UpdatedBy: "Updated By", CLARITY_UpdatedDate: "Updated Date", CLARITY_UpdatedOn: "Updated On", CLARITY_Update: "Update", CLARITY_Updated: "Updated", CLARITY_UpdateStatus: "Update Status", CLARITY_UpdateFirmware: "Update Firmware", CLARITY_Upload: "Upload", CLARITY_UploadConfigure: "Upload and Configure", CLARITY_Urgent: "Urgent", CLARITY_Used: "Used", CLARITY_User: "User", CLARITY_UserDetails: "User Details", CLARITY_Users: "Users", CLARITY_UserRoles: "User and Roles", CLARITY_UsersRolesDirectoryService: "Users, Roles, and Directory Service", CLARITY_UserName: "User Name", CLARITY_Utilization: "Utilization", CLARITY_Value: "Value", CLARITY_ValidFrom: "Valid From", CLARITY_ValidTo: "Valid To", CLARITY_Validate: "Validate", CLARITY_Vendor: "Vendor", CLARITY_Version: "Version", CLARITY_Version_: "version", CLARITY_ViewAll: "View All", CLARITY_ViewLess: "View Less", CLARITY_ViewBy: "View By", CLARITY_View_By: "View By:", CLARITY_ViewDetails: "View Details", CLARITY_VLANS: "VLANS", CLARITY_Volts: "Volts", CLARITY_Volume: "Volume", CLARITY_Volumes: "Volumes", CLARITY_Warning: "Warning", CLARITY_WarningAt: "Warning at", CLARITY_Warnings: "Warnings", CLARITY_Watts: "Watts", CLARITY_Welcome: "Welcome", CLARITY_Weekly: "Weekly", CLARITY_Yes: "Yes", CLARITY_ZipPostalCode: "Zip/Postal Code", CLARITYNAVIGATION_Home: "Home", CLARITYMESSAGES_creditcard: "Please enter a valid credit card number.", CLARITYMESSAGES_date: "Please enter a valid date.", CLARITYMESSAGES_dateISO: "Please enter a valid date (ISO).", CLARITYMESSAGES_digits: "Please enter only digits.", CLARITYMESSAGES_email: "Please enter a valid email address.", CLARITYMESSAGES_equalTo: "Please enter the same value again.", CLARITYMESSAGES_ipaddress: "Please enter a valid IP Address.", CLARITYMESSAGES_max: "Please enter a value less than or equal to {0}.", CLARITYMESSAGES_maxlength: "Please enter no more than {0} characters.", CLARITYMESSAGES_min: "Please enter a value greater than or equal to {0}.", CLARITYMESSAGES_minlength: "Please enter at least {0} characters.", CLARITYMESSAGES_number: "Please enter a valid number.", CLARITYMESSAGES_range: "Please enter a value between {0} and {1}.", CLARITYMESSAGES_rangelength: "Please enter a value between {0} and {1} characters long.", CLARITYMESSAGES_remote: "Please fix this field.", CLARITYMESSAGES_required: "This field is required.", CLARITYMESSAGES_url: "Please enter a valid URL.", WIZARD_Step_Count: "Step {{current}} of {{total}}", WIZARD_SAVE_AND_NEXT: "Save and Next" } });
