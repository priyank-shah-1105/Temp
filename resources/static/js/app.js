angular.module('app', ['ngNewRouter', 'ASM.constants', 'ASM.directives', 'ASM.dataservices', 'LocalStorageModule', 'Enums', 'Clarity'])
    //Route Configuration now in AppController definition.
    .config(['$componentLoaderProvider', function ($componentLoaderProvider) {
        $componentLoaderProvider.setTemplateMapping(function (name) {
            // name is component name.  We can replace them all with Template Cache here.
            return 'views/' + name + '.html';
        });
    }])
    .run(['$router', function ($router) {
        $router.config([
            { name: 'ASM', path: '/', redirectTo: '/home', data: { pageTemplate: 'gray' } }, //, pageTemplate: 'gray'
            { name: 'Home', path: '/home', component: 'home', useAsDefault: true, data: { pageTemplate: 'gray' } },
            //{ name: 'Logs', path: '/logs', component: 'logs' },
            { name: 'Devices', path: '/devices', component: 'devices' },
            { name: 'DevicesAndServerPools', path: '/devices/:resourceType', component: 'devices' },
            { name: 'DevicesByTypeAndHealth', path: '/devices/:resourceType/:health', component: 'devices' },
            { name: 'DeviceDetails', path: '/device/:id/:resourceType', component: 'device' },
            { name: 'GettingStarted', path: '/gettingstarted', component: 'gettingstarted' },
            { name: 'GettingStarted', path: '/gettingstarted/:foo', component: 'gettingstarted' },
            { name: 'Settings', path: '/settings', component: ('settingslist') },
            { name: 'Settings', path: '/settings/:settingType', component: ('settingslist') },
            { name: 'Templates', path: '/templates', component: ('templates') },
            { name: 'TemplatesByCategory', path: '/templates/:category', component: ('templates') },
            { name: 'TemplateBuilder', path: '/templatebuilder/:id/:mode', component: 'templatebuilder' },
            { name: 'ServiceDetails', path: '/service/:id/:firmwarereport', component: ('service') },
            { name: 'ServicesByHealth', path: '/services/:health', component: ('services') },
            { name: 'Services', path: '/services', component: ('services') }
        ]);

    }])
    .config([
        '$translateProvider', 'CoreTranslations', 'AppTranslations', function ($translateProvider, CoreTranslations, AppTranslations) {
            var translations = {};
            angular.extend(translations, CoreTranslations.en);
            angular.extend(translations, AppTranslations.en);
            $translateProvider.translations('en', translations);
            $translateProvider.preferredLanguage('en');
            $translateProvider.useSanitizeValueStrategy('sanitizeParameters');
        }
    ])
    .config([
        'localStorageServiceProvider', function (localStorageServiceProvider) {
            localStorageServiceProvider.prefix = 'ASM';
            localStorageServiceProvider.setStorageType('sessionStorage');
        }
    ])
    .config([
        '$httpProvider', function ($httpProvider) {

            if (!$httpProvider.defaults.headers.get) {
                $httpProvider.defaults.headers.common = {};
            }
            $httpProvider.defaults.headers.common["Cache-Control"] = "no-cache";
            $httpProvider.defaults.headers.common.Pragma = "no-cache";

            $httpProvider.interceptors.push([
                '$q', '$window', '$translate', function ($q, $window, $translate) {
                    return {
                        'request': function (config) {

                            if ($window.sessionStorage.token) {

                                //Configure defaults for global variables that don't change... use interceptors to change headers on a call by call basis
                                //$httpProvider.defaults.headers.common['JSESSIONID'] = $window.sessionStorage.token;
                                config.headers['JSESSIONID'] = $window.sessionStorage.token;
                            }

                            //if (!config.data) return config;
                            if (config.method == "GET" || config.directPost) return config;

                            config.data = config.data || { requestObj: null, criteriaObj: null };

                            var __appendRequestOptions = function (jobRequest) {
                                /// <summary>This is a private DellClarity API function.  DO NOT USE IT IN YOUR APPLICATION!</summary>
                                //$(DellClarity.Ajax.requestOptions).each(function(index, item) {
                                //    jobRequest[item.name] = item.value;
                                //});
                            };

                            var __buildJobRequest = function (requestObj, criteriaObj) {
                                var jobRequest;

                                if (requestObj) {
                                    jobRequest = { requestObj: requestObj };
                                } else {
                                    jobRequest = { requestObj: null };
                                }

                                if (criteriaObj)
                                    jobRequest.criteriaObj = criteriaObj;

                                __appendRequestOptions(jobRequest);

                                return jobRequest;
                            };


                            var data;
                            var requestObjData;

                            //if we send in explicit object to post use that, otherwise use the associated model                
                            if (config.data && config.data.requestObj) {
                                requestObjData = config.data.requestObj;
                            } else {
                                requestObjData = config.data;
                            }


                            var jobRequestObj = __buildJobRequest(requestObjData, config.data.criteriaObj);

                            config.data = JSON.stringify(jobRequestObj, function (key, value) {

                                if (config.options && config.options.customstringify) {
                                    var newValue = config.options.customstringify(this, key, value);
                                    if (newValue !== false)
                                        return newValue;
                                }

                                if (typeof value === 'function') {
                                    return value.toString();
                                } else {
                                    return value;
                                }

                            });

                            return config;
                        },
                        'response': function (response) {

                            if (response && (response.status === 403 || response.status === 401)) {
                                $window.location.href = '/login.html';
                                return null;
                            }

                            if (response && response.data['responseCode'] != null && response.data['responseCode'] !== 0) {

                                var e = {
                                    error: {
                                        refId: '',
                                        code: response.data['responseCode'],
                                        severity: 'CRITICAL',
                                        message: $translate.instant('GENERIC_UnknownError'),
                                        details: ''
                                    }
                                };

                                if (response.data.errorObj) {

                                    if (response.data.errorObj.errorMessage) {
                                        e.error.message = response.data.errorObj.errorMessage;
                                    }

                                    if (response.data.errorObj.errorDetails) {
                                        e.error.details = response.data.errorObj.errorDetails;
                                    }

                                    e.error.Message = '' + e.error.code + ': ' + e.error.message;
                                    e.error.refId = '' + response.config.url;
                                    response.data = e.error;
                                }

                                return $q.reject(response);
                            }

                            window.setTimeout(function () {
                                $(window).trigger('resize');
                            }, 500);


                            return response;
                        },
                        'responseError': function (rejection) {


                            if (rejection && (rejection.status === 403 || rejection.status === 401)) {
                                $window.location.href = '/login.html';
                            }

                            //convert all ajax errors to common error format
                            var e = {
                                error: {
                                    refId: '',
                                    code: '',
                                    severity: 'CRITICAL',
                                    message: $translate.instant('GENERIC_UnknownError'),
                                    details: ''
                                }
                            };

                            if (rejection) {

                                //if no EEMI error returned
                                if (rejection.status)
                                    e.error.code = rejection.status;
                                if (rejection.statusText)
                                    e.error.message = rejection.statusText;

                                if (rejection.data && rejection.data.ExceptionMessage) {
                                    e.error.message = rejection.data.ExceptionMessage;
                                }

                                if (rejection.data && rejection.data.Message) {
                                    e.error.message = rejection.data.Message;
                                }

                                if (rejection.data && rejection.data.MessageDetail) {
                                    e.error.details = rejection.data.MessageDetail;
                                }

                                if (rejection.data && rejection.data.error) {
                                    e.error = rejection.data.error;
                                }

                                e.error.Message = '' + e.error.code + ': ' + e.error.message;
                                e.error.refId = '' + rejection.config.url;
                                rejection.data = e.error;
                            }


                            return $q.reject(rejection);
                        }
                    };
                }
            ]);

        }
    ])
    .run([
        '$rootScope', '$location', 'localStorageService', function ($rootScope, $location, localStorageService) {

            var updatePageTemplate = function () {
                var pageTemplate = $location.url().indexOf('gettingstarted') > 0 ? 'gray' : '';

                if ($location.url().indexOf('device') > 0 && $location.url().indexOf('devices') < 0) {
                    pageTemplate = 'gray';
                }
                $rootScope.pageTemplate = pageTemplate;
            }

            $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {
                if (previous && current.originalPath !== previous.originalPath) {
                    localStorageService.set('tabstate', {});
                }
                updatePageTemplate();

                $('.tooltip').remove();

            });

            $rootScope.$on('$locationChangeSuccess', function () {
                updatePageTemplate();

                $('.tooltip').remove();
            });

        }
    ])
    //Allow you to include HTML in your translations (Add ng-bind-html="'TOKEN'|translate|htmlSafe" to your element).
    .filter("htmlSafe", ['$sce', function ($sce) { return function (htmlCode) { return $sce.trustAsHtml(htmlCode); }; }])
;


angular.module('app-login', ['ASM.constants', 'ASM.directives', 'ASM.dataservices', 'LocalStorageModule', 'Enums', 'Clarity'])
    .config([
        '$routeProvider', function ($routeProvider) {
            $routeProvider.
                otherwise({ templateUrl: '', controller: '' });
        }
    ]).config([
        'localStorageServiceProvider', function (localStorageServiceProvider) {
            localStorageServiceProvider.prefix = 'ASM';
        }
    ])
    .config([
        '$translateProvider', 'CoreTranslations', 'AppTranslations', function ($translateProvider, CoreTranslations, AppTranslations) {
            var translations = {};
            angular.extend(translations, CoreTranslations.en);
            angular.extend(translations, AppTranslations.en);
            $translateProvider.translations('en', translations);
            $translateProvider.preferredLanguage('en');
            $translateProvider.useSanitizeValueStrategy('sanitizeParameters');
        }
    ])
   .config([
        '$httpProvider', function ($httpProvider) {

            if (!$httpProvider.defaults.headers.get) {
                $httpProvider.defaults.headers.common = {};
            }
            $httpProvider.defaults.headers.common["Cache-Control"] = "no-cache";
            $httpProvider.defaults.headers.common.Pragma = "no-cache";

            $httpProvider.interceptors.push([
                '$q', '$window', '$translate', function ($q, $window, $translate) {
                    return {
                        'request': function (config) {

                            if ($window.sessionStorage.token) {

                                //Configure defaults for global variables that don't change... use interceptors to change headers on a call by call basis
                                //$httpProvider.defaults.headers.common['JSESSIONID'] = $window.sessionStorage.token;
                                config.headers['JSESSIONID'] = $window.sessionStorage.token;
                            }

                            if (!config.data) return config;

                            var __appendRequestOptions = function (jobRequest) {
                                /// <summary>This is a private DellClarity API function.  DO NOT USE IT IN YOUR APPLICATION!</summary>
                                //$(DellClarity.Ajax.requestOptions).each(function(index, item) {
                                //    jobRequest[item.name] = item.value;
                                //});
                            };

                            var __buildJobRequest = function (requestObj, criteriaObj) {
                                var jobRequest;

                                if (requestObj) {
                                    jobRequest = { requestObj: requestObj };
                                } else {
                                    jobRequest = { requestObj: null };
                                }

                                if (criteriaObj)
                                    jobRequest.criteriaObj = criteriaObj;

                                __appendRequestOptions(jobRequest);

                                return jobRequest;
                            };


                            var data;
                            var requestObjData;

                            //if we send in explicit object to post use that, otherwise use the associated model                
                            if (config.data.requestObj) {
                                requestObjData = config.data.requestObj;
                            } else {
                                requestObjData = config.data;
                            }


                            var jobRequestObj = __buildJobRequest(requestObjData, config.data.criteriaObj);

                            config.data = JSON.stringify(jobRequestObj, function (key, value) {

                                if (config.options && config.options.customstringify) {
                                    var newValue = config.options.customstringify(this, key, value);
                                    if (newValue !== false)
                                        return newValue;
                                }

                                if (typeof value === 'function') {
                                    return value.toString();
                                } else {
                                    return value;
                                }

                            });

                            return config;
                        },
                        'response': function (response) {

                            if (response && (response.status === 403 || response.status === 401)) {
                                $window.location.href = '/login.html';
                                return null;
                            }

                            //if (response && response.data['return-code'] != null && response.data['return-code'] != 0) {
                            //    response.config.response = response.data;
                            //    return $q.reject(response.data['return-msg']);
                            //}

                            window.setTimeout(function () {
                                $(window).trigger('resize');
                            }, 500);


                            return response;
                        },
                        'responseError': function (rejection) {


                            if (rejection && (rejection.status === 403 || rejection.status === 401)) {
                                $window.location.href = '/login.html';
                            }

                            //convert all ajax errors to common error format
                            var e = {
                                error: {
                                    refId: '',
                                    code: '',
                                    severity: 'CRITICAL',
                                    message: $translate.instant('GENERIC_UnknownError'),
                                    details: ''
                                }
                            };

                            if (rejection) {

                                //if no EEMI error returned
                                if (rejection.status)
                                    e.error.code = rejection.status;
                                if (rejection.statusText)
                                    e.error.message = rejection.statusText;

                                if (rejection.data && rejection.data.ExceptionMessage) {
                                    e.error.message = rejection.data.ExceptionMessage;
                                }

                                if (rejection.data && rejection.data.Message) {
                                    e.error.message = rejection.data.Message;
                                }

                                if (rejection.data && rejection.data.MessageDetail) {
                                    e.error.details = rejection.data.MessageDetail;
                                }

                                if (rejection.data && rejection.data.error) {
                                    e.error = rejection.data.error;
                                }

                                e.error.Message = '' + e.error.code + ': ' + e.error.message;
                                e.error.refId = '' + rejection.config.url;
                                rejection.data = e.error;
                            }


                            return $q.reject(rejection);
                        }
                    };
                }
            ]);
        }
   ])
    .run([
        '$rootScope', '$route', function ($rootScope, $route) {

            var updatePageTemplate = function () {
                var pageTemplate = $route.current ? $route.current.pageTemplate || '' : '';
                $rootScope.pageTemplate = pageTemplate;
            }

            $rootScope.$on('$routeChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                updatePageTemplate();
            });

            $rootScope.$on('$locationChangeSuccess', function () {
                updatePageTemplate();
            });

        }
    ])




;

angular.module('ASM.constants', []);
    

var asm;
(function (asm) {
    var ConstantsFactory = (function () {
        function ConstantsFactory($translate) {
            this.$translate = $translate;
            this.genericSelectOption = { name: this.$translate.instant("GENERIC_select"), id: undefined };
            this.addableComponents = [
                { id: "application", name: this.$translate.instant("SERVICE_DETAIL_Add_Application") },
                { id: "vm", name: this.$translate.instant("SERVICE_DETAIL_Add_VM") },
                { id: "cluster", name: this.$translate.instant("SERVICE_DETAIL_Add_Cluster") },
                { id: "server", name: this.$translate.instant("SERVICE_DETAIL_Add_Server") },
                { id: "storage", name: this.$translate.instant("SERVICE_DETAIL_Add_Storage") },
                { id: "network", name: this.$translate.instant("SERVICE_DETAIL_Add_Network") }
            ];
            this.availableCMCUserRoles = [
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_Administrator"), id: "Administrator" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_PowerUser"), id: "PowerUser" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_GuestUser"), id: "GuestUser" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_None"), id: "None" }
            ];
            this.availableDeviceViews = [
                { name: this.$translate.instant('GENERIC_All'), id: '' },
                { name: this.$translate.instant('DEVICES_DellChassis'), id: 'chassis' },
                { name: this.$translate.instant('DEVICES_ElementManager'), id: 'em' },
                { name: this.$translate.instant('GENERIC_Servers'), id: 'server' },
                { name: this.$translate.instant('GENERIC_Switches'), id: 'switch' },
                { name: this.$translate.instant('GENERIC_Storage'), id: 'storage' },
                { name: this.$translate.instant('DEVICES_VMManager'), id: 'vmm' }
            ];
            this.availableDeviceHealthViews = [
                { name: this.$translate.instant('GENERIC_All'), id: '' },
                { name: this.$translate.instant('GENERIC_Healthy'), id: 'green' },
                { name: this.$translate.instant('GENERIC_Warning'), id: 'yellow' },
                { name: this.$translate.instant('GENERIC_Critical'), id: 'red' },
                { name: this.$translate.instant('GENERIC_Unknown'), id: 'unknown' }
            ];
            this.availableiDracUserRoles = [
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_Administrator"), id: "Administrator" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_Operator"), id: "Operator" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_ReadOnly"), id: "ReadOnly" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_None"), id: "None" }
            ];
            this.availableLanRoles = [
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_User"), id: "User" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_Operator"), id: "Operator" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_Administrator"), id: "Administrator" },
                { name: this.$translate.instant("CREATE_EDIT_DEVICE_USERS_NoAccess"), id: "No Access" }
            ];
            this.availableLogCategories = [
                { name: this.$translate.instant('SERVICES_Logs_Security') },
                { name: this.$translate.instant('SERVICES_Logs_Appliance_Configuration') },
                { name: this.$translate.instant('SERVICES_Logs_Template_Configuration') },
                { name: this.$translate.instant('SERVICES_Logs_Network_Configuration') },
                { name: this.$translate.instant('SERVICES_Logs_Hardware_Configuration') },
                { name: this.$translate.instant('SERVICES_Logs_Monitoring') },
                { name: this.$translate.instant('SERVICES_Logs_Deployment') },
                { name: this.$translate.instant('SERVICES_Logs_Licensing') },
                { name: this.$translate.instant('SERVICES_Logs_Miscellaneous') }
            ];
            this.availableManagedStates = [
                { name: this.$translate.instant('DEVICES_Managed'), id: "managed" },
                { name: this.$translate.instant('DEVICES_Unmanaged'), id: "unmanaged" },
                { name: this.$translate.instant('DEVICES_Reserved'), id: "reserved" }
            ];
            this.availableNicTypes = [
                { name: this.$translate.instant('NICTYPE_2port'), id: "2x10Gb" },
                { name: this.$translate.instant('NICTYPE_4port'), id: "4x10Gb" },
                { name: this.$translate.instant('NICTYPE_2x1Gb2x10Gb'), id: "2x10Gb,2x1Gb" }
            ];
            this.availablePowercapMeasurementTypes = [
                { name: this.$translate.instant("GENERIC_Watts"), id: "watts" },
                { name: this.$translate.instant("GENERIC_BtuHour"), id: "btuh" },
                { name: this.$translate.instant("GENERIC_PercentSymbol"), id: "percentage" }
            ];
            this.availableRedundancyPolicies = [
                { name: this.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_NoRedundancy"), id: "none" },
                { name: this.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_GridRedundancy"), id: "grid" },
                { name: this.$translate.instant("Power Supply Redundancy"), id: "powersupply" },
                { name: this.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_RedundancyAlertingOnly"), id: "alertonly" }
            ];
            this.availableResourceTypes = [
                { name: this.$translate.instant('GENERIC_All'), id: "all" },
                { name: this.$translate.instant('GENERIC_Chassis'), id: "chassis" },
                { name: this.$translate.instant('GENERIC_Server'), id: "server" },
                { name: this.$translate.instant('GENERIC_Storage'), id: "storage" },
                //{ name: this.$translate.instant('GENERIC_Switch'), id: "switch" },
                { name: this.$translate.instant('GENERIC_Switch'), id: "iom" },
                { name: this.$translate.instant('GENERIC_SCVMM'), id: "scvmm" },
                { name: this.$translate.instant('GENERIC_VCenter'), id: "vcenter" },
                { name: this.$translate.instant('GENERIC_ElementManager'), id: "em" },
            ];
            this.availableStorageModeOptions = [
                { name: this.$translate.instant("CONFIGURECHASSIS_StorageOption_Single"), id: "single" },
                { name: this.$translate.instant("CONFIGURECHASSIS_StorageOption_Dual"), id: "dual" },
                { name: this.$translate.instant("CONFIGURECHASSIS_StorageOption_Joined"), id: "joined" }
            ];
            this.basicRaidOptions = [
                { name: this.$translate.instant('RAIDCONFIGURATION_raid0'), id: "raid0" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid1'), id: "raid1" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid5'), id: "raid5" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid6'), id: "raid6" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid10'), id: "raid10" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid50'), id: "raid50" },
                { name: this.$translate.instant('RAIDCONFIGURATION_raid60'), id: "raid60" }
            ];
            this.comparators = [
                { name: this.$translate.instant('COMPARATOR_Minimum'), id: "minimum" },
                { name: this.$translate.instant('COMPARATOR_Exactly'), id: "exact" }
            ];
            this.componentStatus = [
                { name: this.$translate.instant('SERVICE_DETAIL_Ready'), id: "deployed", icon: "success ci-health-square-check" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_InProgress'), id: "inprogress", icon: "info ci-schedule-clock-o" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Pending'), id: "pending", icon: "" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Warning'), id: "warning", icon: "ci-health-warning-tri-bang text-warning" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Error'), id: "error", icon: "critical ci-action-circle-remove" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Cancelled'), id: "cancelled", icon: "danger ci-action-circle-remove-slash-o" }
            ];
            this.deviceTypes = [
                { id: 'ChassisM1000e', name: this.$translate.instant('DEVICETYPE_Chassis') },
                { id: 'ChassisVRTX', name: this.$translate.instant('DEVICETYPE_VRTX') },
                { id: 'ChassisFX', name: this.$translate.instant('DEVICETYPE_ChassisFX') },
                { id: 'FXServer', name: this.$translate.instant('DEVICETYPE_FXServer') },
                { id: 'BladeServer', name: this.$translate.instant('DEVICETYPE_BladeServer') },
                { id: 'RackServer', name: this.$translate.instant('DEVICETYPE_RackServer') },
                { id: 'TowerServer', name: this.$translate.instant('DEVICETYPE_TowerServer') },
                { id: 'AggregatorIOM', name: this.$translate.instant('DEVICETYPE_AggregatorIOM') },
                { id: 'MXLIOM', name: this.$translate.instant('DEVICETYPE_MXLIOM') },
                { id: 'FXIOM', name: this.$translate.instant('DEVICETYPE_FXIOM') },
                { id: 'unknown', name: this.$translate.instant('DEVICETYPE_Unknown') },
                { id: 'vm', name: this.$translate.instant('DEVICETYPE_VM') },
                { id: 'em', name: this.$translate.instant('DEVICETYPE_EM') },
                { id: 'Server', name: this.$translate.instant('DEVICETYPE_Server') },
                { id: 'genericswitch', name: this.$translate.instant('DEVICETYPE_GenericSwitch') },
                { id: 'dellswitch', name: this.$translate.instant('DEVICETYPE_DellSwitch') },
                { id: 'compellent', name: this.$translate.instant('DEVICETYPE_Compellent') },
                { id: 'equallogic', name: this.$translate.instant('DEVICETYPE_Equallogic') },
                { id: 'netapp', name: this.$translate.instant('DEVICETYPE_NetApp') },
                { id: 'vcenter', name: this.$translate.instant('DEVICETYPE_VCenter') },
                { id: 'scvmm', name: this.$translate.instant('DEVICETYPE_SCVMM') },
                { id: 'storage', name: this.$translate.instant('DEVICETYPE_Storage') }
            ];
            this.deviceState = [
                { id: 'available', name: this.$translate.instant('DEVICESTATE_Available') },
                { id: 'deployed', name: this.$translate.instant('DEVICESTATE_Deployed') },
                { id: 'unknown', name: this.$translate.instant('DEVICESTATE_Unknown') },
                { id: 'copying', name: this.$translate.instant('DEVICESTATE_Copying') },
                { id: 'error', name: this.$translate.instant('DEVICESTATE_Error') },
                { id: 'pending', name: this.$translate.instant('DEVICESTATE_Pending') },
                { id: 'updating', name: this.$translate.instant('DEVICESTATE_Updating') },
                { id: 'deploying', name: this.$translate.instant('DEVICESTATE_Deploying') },
                { id: 'poweringoff', name: this.$translate.instant('DEVICESTATE_PoweringOff') },
                { id: 'poweringon', name: this.$translate.instant('DEVICESTATE_PoweringOn') },
                { id: 'reserved', name: this.$translate.instant('DEVICESTATE_Reserved') },
                { id: 'unmanaged', name: this.$translate.instant('DEVICESTATE_Unmanaged') },
                { id: 'online', name: this.$translate.instant('DEVICESTATE_Online') }
            ];
            this.diskTypes = [
                { name: this.$translate.instant('DISKTYPES_Any'), id: "any" },
                { name: this.$translate.instant('DISKTYPES_First'), id: "first" },
                { name: this.$translate.instant('DISKTYPES_Last'), id: "last" },
                { name: this.$translate.instant('DISKTYPES_Hdd'), id: "requirehdd" },
                { name: this.$translate.instant('DISKTYPES_Ssd'), id: "requiressd" }
            ];
            this.firmwareCriticality = [
                this.genericSelectOption,
                { name: this.$translate.instant('SETTINGS_Repositories_Urgent'), id: "urgent" },
                { name: this.$translate.instant('SETTINGS_Repositories_Recommended'), id: "recommended" },
                { name: this.$translate.instant('SETTINGS_Repositories_Optional'), id: "optional" }
            ];
            this.firmwareStatus = [
                { id: 'unknown', name: this.$translate.instant('DEVICES_CompliantStatus_Unknown') },
                { id: 'updaterequired', name: this.$translate.instant('DEVICES_CompliantStatus_UpdateRequired') },
                { id: 'compliant', name: this.$translate.instant('DEVICES_CompliantStatus_Compliant') },
                { id: 'noncompliant', name: this.$translate.instant('DEVICES_CompliantStatus_NonCompliant') },
                { id: 'updating', name: this.$translate.instant('DEVICES_Updating') },
                { id: 'updatefailed', name: this.$translate.instant('DEVICES_UpdateFailed') },
            ];
            this.logSeverities = [
                { name: this.$translate.instant("LOGS_RESOURCE_SEVERITIES_Healthy"), id: "success" },
                { name: this.$translate.instant("LOGS_RESOURCE_SEVERITIES_Critical"), id: "critical" },
                { name: this.$translate.instant("LOGS_RESOURCE_SEVERITIES_Warning"), id: "warning" },
                { name: this.$translate.instant("LOGS_RESOURCE_SEVERITIES_Info"), id: "info" }
            ];
            this.repositoryImageTypes = [
                { name: this.$translate.instant('SETTINGS_Repositories_imagetype_sles11'), id: "linux11" },
                { name: this.$translate.instant('SETTINGS_Repositories_imagetype_sles12'), id: "linux12" },
                { name: this.$translate.instant('SETTINGS_Repositories_imagetype_vmware'), id: "vmware_esxi" },
                { name: this.$translate.instant('SETTINGS_Repositories_imagetype_redhat'), id: "redhat" },
                { name: this.$translate.instant('SETTINGS_Repositories_imagetype_redhat7'), id: "redhat7" },
                { name: this.$translate.instant('SETTINGS_Repositories_imagetype_windows2008'), id: "windows2008" },
                { name: this.$translate.instant('SETTINGS_Repositories_imagetype_windows2012'), id: "windows2012" }
            ];
            this.resourceStateFilter = [
                { name: this.$translate.instant('GENERIC_All'), id: '' },
                { name: this.$translate.instant('DEVICES_Managed'), id: 'managed' },
                { name: this.$translate.instant('DEVICES_Unmanaged'), id: 'unmanaged' },
                { name: this.$translate.instant('DEVICES_Reserved'), id: 'reserved' }
            ];
            this.serviceHealths = [
                { name: this.$translate.instant('GENERIC_Critical'), id: "red", alias: "Critical" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Healthy'), id: "green", alias: "Healthy" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_InProgress'), id: "unknown", alias: "In Progress" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Warning'), id: "yellow", alias: "Warning" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Cancelled'), id: "orange", alias: "Cancelled" }
            ];
            this.serviceStates = [
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Error'), id: "Error" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Healthy'), id: "Healthy" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_InProgress'), id: "In Progress" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Warning'), id: "Warning" },
                { name: this.$translate.instant('SERVICES_DEPLOY_STATE_Cancelled'), id: "Cancelled" }
            ];
            this.spanningTreeMode = [
                { name: this.$translate.instant("DEFINE_UPLINKS_RSTP"), id: "1" },
                { name: this.$translate.instant("DEFINE_UPLINKS_MSTP"), id: "2" },
                { name: this.$translate.instant("DEFINE_UPLINKS_PVST"), id: "3" },
                { name: this.$translate.instant("DEFINE_UPLINKS_None"), id: "4" }
            ];
            this.staticIPState = [
                { id: 'inuse', name: this.$translate.instant('NETWORKSSTATE_InUse') },
                { id: 'available', name: this.$translate.instant('NETWORKSSTATE_Available') }
            ];
            this.staticIPAddressDetailsViews = [
                { id: "all", name: this.$translate.instant('NETWORKSVIEW_All') },
                { id: "inuse", name: this.$translate.instant('NETWORKSVIEW_InUse') },
                { id: "available", name: this.$translate.instant('NETWORKSVIEW_Available') }
            ];
        }
        return ConstantsFactory;
    }());
    asm.ConstantsFactory = ConstantsFactory;
})(asm || (asm = {}));
angular.module('ASM.constants').service('constants', ['$translate', function ($translate) {
        return new asm.ConstantsFactory($translate);
    }]);
//# sourceMappingURL=constants.js.map
angular.module('ASM.constants')
    .constant('CoreTranslations',
    {
        en: {
            GENERIC_AC: 'AC',
            GENERIC_Acknowledge: 'Acknowledge',
            GENERIC_Action: 'Action',
            GENERIC_Actions: 'Actions',
            GENERIC_Active: 'Active',
            GENERIC_Activity: 'Activity',
            GENERIC_Add: 'Add',
            GENERIC_Address: 'Address',
            GENERIC_Address1: 'Address Line 1',
            GENERIC_Address2: 'Address Line 2',
            GENERIC_Address3: 'Address Line 3',
            GENERIC_AnotherAction: 'Another Action',
            GENERIC_Aisle: 'Aisle',
            GENERIC_alert: 'alert',
            GENERIC_Alert: 'Alert',
            GENERIC_Alerts: 'Alerts',
            GENERIC_All: 'All',
            GENERIC_AlternateEmail: 'Alternate Email',
            GENERIC_Amps: 'Amps',
            GENERIC_Apply: 'Apply',
            GENERIC_Array: 'Array',
            GENERIC_Arrays: 'Arrays',
            GENERIC_AssetTag: 'Asset Tag',
            GENERIC_AssetServiceTag: 'Asset/Service Tag',
            GENERIC_Assign: 'Assign',
            GENERIC_Assigned: 'Assigned',
            GENERIC_Attribute: 'Attribute',
            GENERIC_AvailableMemory: 'Available Memory',
            GENERIC_Available: 'Available',
            GENERIC_Average: 'Average',
            GENERIC_Back: 'Back',
            GENERIC_Backplane: 'Backplane',
            GENERIC_Bandwidth: 'Bandwidth',
            GENERIC_Baseline: 'Baseline',
            GENERIC_Baselines: 'Baselines',
            GENERIC_BiWeekly: 'Bi-Weekly',
            GENERIC_Bottom: 'Bottom',
            GENERIC_Browse: 'Browse',
            GENERIC_BtuHour: "BTU/h",
            GENERIC_Cancel: 'Cancel',
            GENERIC_Cancelled: 'Cancelled',
            GENERIC_Capacity: 'Capacity',
            GENERIC_Category: 'Category',
            GENERIC_Chassis: 'Chassis',
            GENERIC_CheckUpdates: 'Check for Updates',
            GENERIC_CityTown: 'City/Town',
            GENERIC_City: 'City',
            GENERIC_Clear: 'Clear',
            GENERIC_ClearLogs: 'Clear Logs',
            GENERIC_Close: 'Close',
            GENERIC_Command: 'Command',
            GENERIC_Community: 'Community',
            GENERIC_Completed: 'Completed',
            GENERIC_Compliance: 'Compliance',
            GENERIC_Component: 'Component',
            GENERIC_Components: 'Components',
            GENERIC_Compute: 'Compute',
            GENERIC_Configuration: 'Configuration',
            GENERIC_ConfigureDeploy: 'Configure and Deploy',
            GENERIC_Configure: 'Configure',
            GENERIC_Confirm: 'Confirm',
            GENERIC_confirm: 'confirm',
            GENERIC_Console: 'Console',
            GENERIC_Connect: 'Connect',
            GENERIC_Connections: 'Connections',
            GENERIC_Consistent: 'Consistent',
            GENERIC_ContactInfo: 'Contact Info',
            GENERIC_Continue: 'Continue',
            GENERIC_Controller: 'Controller',
            GENERIC_CPU: 'CPU',
            GENERIC_cpus: 'CPUs',
            GENERIC_create: 'create',
            GENERIC_Create: 'Create',
            GENERIC_Created: 'Created',
            GENERIC_CreatedBy: 'Created By',
            GENERIC_CreatedDate: 'Created Date',
            GENERIC_CreateNew: 'Create New',
            GENERIC_CreatedOn: 'Created On',
            GENERIC_Critical: 'Critical',
            GENERIC_Criticality: 'Criticality',
            GENERIC_CriticalErrors: 'Critical Errors',
            GENERIC_Country: 'Country',
            GENERIC_CountryTerritory: 'Country or Territory',
            GENERIC_Current: 'Current',
            GENERIC_CurrentVersion: 'Current Version',
            GENERIC_CurrentUpdateStatus: 'Current Update Status',
            GENERIC_Daily: 'Daily',
            GENERIC_Database: 'Database',
            GENERIC_DataCenter: 'Data Center',
            GENERIC_Datastore: 'Datastore',
            GENERIC_Date: 'Date',
            GENERIC_DateInstalled: 'Date Installed',
            GENERIC_DateUpdated: 'Date Updated',
            GENERIC_DateTime: 'Date and Time',
            GENERIC_Day_: 'day',
            GENERIC_Days_: 'days',
            GENERIC_DayOfWeek_Sunday: 'Sunday',
            GENERIC_DayOfWeek_Monday: 'Monday',
            GENERIC_DayOfWeek_Tuesday: 'Tuesday',
            GENERIC_DayOfWeek_Wednesday: 'Wednesday',
            GENERIC_DayOfWeek_Thursday: 'Thursday',
            GENERIC_DayOfWeek_Friday: 'Friday',
            GENERIC_DayOfWeek_Saturday: 'Saturday',
            GENERIC_DC: 'DC',
            GENERIC_Debug: 'Debug',
            GENERIC_Default: 'Default',
            GENERIC_Delete: 'Delete',
            GENERIC_delete: 'delete',
            GENERIC_DellNews: 'Dell News',
            GENERIC_Deploy: 'Deploy',
            GENERIC_Deployed: 'Deployed',
            GENERIC_DeployedBy: 'Deployed By',
            GENERIC_DeployedOn: 'Deployed On',
            GENERIC_Device: 'Device',
            GENERIC_Devices: 'Devices',
            GENERIC_Description: 'Description',
            GENERIC_Destination: 'Destination',
            GENERIC_Detail: 'Detail',
            GENERIC_Details: 'Details',
            GENERIC_ResourceName: 'Resource Name',
            GENERIC_ResourceType: 'Resource Type',
            GENERIC_ResetPassword: 'Reset Password',
            GENERIC_Disable: 'Disable',
            GENERIC_Disabled: 'Disabled',
            GENERIC_Discover: 'Discover',
            GENERIC_Discovered: 'Discovered',
            GENERIC_Disk: 'Disk',
            GENERIC_Disks: 'Disks',
            GENERIC_Discovering: 'Discovering',
            GENERIC_Display: 'Display',
            GENERIC_Domain: 'Domain',
            GENERIC_Drives: 'Drives',
            GENERIC_Edit: 'Edit',
            GENERIC_ElementManager: 'Element Manager',
            GENERIC_Email: 'Email',
            GENERIC_EmailAddress: 'Email Address',
            GENERIC_EmptyTable: 'There are no items to display.',
            GENERIC_Enable: 'Enable',
            GENERIC_Enabled: 'Enabled',
            GENERIC_Enclosures: 'Enclosures',
            GENERIC_Enclosure: 'Enclosure',
            GENERIC_EndTime: 'End Time',
            GENERIC_Environmental: 'Environmental',
            GENERIC_Error: 'Error',
            GENERIC_estimatedtime: 'estimated time:',
            GENERIC_Events: 'Events',
            GENERIC_Expand: 'Expand',
            GENERIC_Expire: 'Expire',
            GENERIC_Expires: 'Expires',
            GENERIC_Export: 'Export',
            GENERIC_ExportAll: 'Export All',
            GENERIC_Fabric: 'Fabric',
            GENERIC_Facility: 'Facility',
            GENERIC_Failed: 'Failed',
            GENERIC_FileName: 'File Name',
            GENERIC_ClearFilter: 'Clear All',
            GENERIC_Filter: 'Filter',
            GENERIC_FilterResults: 'Filter Results',
            GENERIC_Finish: 'Finish',
            GENERIC_FirstName: 'First Name',
            GENERIC_FirmwareVersion: 'Firmware Version',
            GENERIC_FirmwareStatus: 'Firmware Status',
            GENERIC_FirmwareSoftwareCompliance: 'Firmware/Software Compliance',
            GENERIC_Firmware: 'Firmware',
            GENERIC_Free: 'Free',
            GENERIC_GB: 'GB',
            GENERIC_Gateway: 'Gateway',
            GENERIC_General: 'General',
            GENERIC_GeneralInfo: 'General Info',
            GENERIC_Group: "Group",
            GENERIC_Growth: 'Growth',
            GENERIC_Good: 'Good',
            GENERIC_Health: 'Health',
            GENERIC_Healthy: 'Healthy',
            GENERIC_HideDetails: 'Hide Details',
            GENERIC_Host: 'Host',
            GENERIC_Hosts: 'Hosts',
            GENERIC_HostName: 'Host Name',
            GENERIC_Hours: 'Hours',
            GENERIC_ID: 'ID',
            GENERIC_Identify: 'Identify',
            GENERIC_Immediate: 'Immediate',
            GENERIC_Import: 'Import',
            GENERIC_Index: 'Index',
            GENERIC_Information: 'Information',
            GENERIC_Informational: 'Informational',
            GENERIC_InProgress: 'In Progress',
            GENERIC_InUse: 'In Use',
            GENERIC_Install: 'Install',
            GENERIC_InstallOptions: 'Install Options',
            GENERIC_InService: 'In Service',
            GENERIC_Interconnects: 'Interconnects',
            GENERIC_IO: 'I/O',
            GENERIC_IpAddress: 'IP Address',
            GENERIC_IPMI: 'IPMI',
            GENERIC_IssuedTo: 'Issued To',
            GENERIC_IssuedBy: 'Issued By',
            GENERIC_Job: 'Job',
            GENERIC_Jobs: 'Jobs',
            GENERIC_K: 'K',
            GENERIC_Last: 'Last',
            GENERIC_LastName: 'Last Name',
            GENERIC_Leader: 'Leader',
            GENERIC_Learn: 'Learn',
            GENERIC_LearnMore: 'Learn More',
            GENERIC_LicensedFor: 'Licensed for',
            GENERIC_List: 'List',
            GENERIC_Loading: 'Loading...',
            GENERIC_LoadingResources: 'Loading Resource(s)',
            GENERIC_LoadingPleaseWait: 'Loading... Please Wait.',
            GENERIC_LocalUser: 'Local User',
            GENERIC_Location: 'Location',
            GENERIC_location: 'Location',
            GENERIC_Login: 'Login',
            GENERIC_LoginDateTime: 'Login Date and Time',
            GENERIC_LoginFailed: 'The specified User Name and/or password is incorrect. Make sure the correct login ID and password are entered and retry the operation.',
            GENERIC_NoConnection: 'Unable to connect to server. Verify the network connection and then retry the operation.',
            GENERIC_Logout: 'Logout',
            GENERIC_Logs: 'Logs',
            GENERIC_Major: 'Major',
            GENERIC_Manufacturer: 'Manufacturer',
            GENERIC_Mappings: 'Mappings',
            GENERIC_Mbps: 'Mbps',
            GENERIC_Memory: 'Memory',
            GENERIC_Message: 'Message',
            GENERIC_Min: 'Min',
            GENERIC_Model: 'Model',
            GENERIC_Monthly: 'Monthly',
            GENERIC_More: 'More',
            GENERIC_MoreActions: 'More Actions',
            GENERIC_NA: 'NA',
            GENERIC_Name: 'Name',
            GENERIC_Network: 'Network',
            GENERIC_Networking: 'Networking',
            GENERIC_Networks: 'Networks',
            GENERIC_New: 'New',
            GENERIC_New_: 'New...',
            GENERIC_Next: 'Next',
            GENERIC_No: 'No',
            GENERIC_NoPassword: 'No Password',
            GENERIC_None: 'None',
            GENERIC_Note: 'Note',
            GENERIC_Notes: 'Notes',
            GENERIC_FeatureNotImplemented: 'This feature is not yet implemented.',
            GENERIC_Offline: 'Offline',
            GENERIC_OK: 'OK',
            GENERIC_on: 'on',
            GENERIC_On_: 'On',
            GENERIC_Online: 'Online',
            GENERIC_Onboarding: 'Onboarding',
            GENERIC_optional_: '(optional)',
            GENERIC_OperatingSystem: 'Operating System',
            GENERIC_DellSupportAssistTickets: 'Dell Support Assist Tickets',
            GENERIC_RecentDellSupportAssistTickets: 'Recent Dell Support Assist Tickets',
            GENERIC_Overview: 'Overview',
            GENERIC_Password: 'Password',
            GENERIC_PasswordRequired: 'Password Required',
            GENERIC_Path: 'Path',
            GENERIC_Peak: 'Peak',
            GENERIC_Pending: 'Pending',
            GENERIC_PercentSymbol: '%',
            GENERIC_Phone: 'Phone',
            GENERIC_PhoneNumber: 'Phone Number',
            GENERIC_Port: 'Port',
            GENERIC_Ports: 'Ports',
            GENERIC_Power: 'Power',
            GENERIC_Present: 'Present',
            GENERIC_Print: 'Print',
            GENERIC_Product: 'Product',
            GENERIC_Progress: 'Progress',
            GENERIC_Protocol: 'Protocol',
            GENERIC_Proxy: 'Proxy',
            GENERIC_Purpose: 'Purpose',
            GENERIC_PWToolTip: 'Click and hold to show password',
            GENERIC_Rack: 'Rack',
            GENERIC_Reading: 'Reading',
            GENERIC_Recheck: 'Recheck',
            GENERIC_Rediscover: 'Rediscover',
            GENERIC_Register: 'Register',
            GENERIC_ReleaseNotes: 'Release Notes',
            GENERIC_Relevancy: 'Relevancy',
            GENERIC_Refresh: 'Refresh',
            GENERIC_RememberMe: 'Remember Me',
            GENERIC_Remove: 'Remove',
            GENERIC_RepositoryName: 'Repository Name',
            GENERIC_Repositories: 'Repositories',
            GENERIC_Repository: 'Repository',
            GENERIC_Required_: 'REQUIRED',
            GENERIC_Restart: 'Restart',
            GENERIC_Restore: 'Restore',
            GENERIC_Retry: 'Retry',
            GENERIC_Role: 'Role',
            GENERIC_Roles: 'Roles',
            GENERIC_Room: 'Room',
            GENERIC_Running: 'Running',
            GENERIC_RunReport: 'Run Report',
            GENERIC_Save: 'Save',
            GENERIC_SaveSettings: 'Save Settings',
            GENERIC_Scheduled: 'Scheduled',
            GENERIC_SCVMM: 'SCVMM',
            GENERIC_Search: 'Search',
            GENERIC_SearchResults: 'Results for ',
            GENERIC_Secured: 'Secured',
            GENERIC_select: 'Select',
            GENERIC_Select_: '--Select--',
            GENERIC_Server: 'Server',
            GENERIC_Servers: 'Servers',
            GENERIC_ServerInformation: 'Server Information',
            GENERIC_ServerName: 'Server Name',
            GENERIC_ServerPools: 'Server Pools',
            GENERIC_ServerPool: 'Server Pool',
            GENERIC_Service: 'Service',
            GENERIC_Services: 'Services',
            GENERIC_ServiceHealth: 'Service Health',
            GENERIC_ServiceInformation: 'Service Information',
            GENERIC_ServiceName: 'Service Name',
            GENERIC_ServiceSettings: 'Service Settings',
            GENERIC_ServiceTag: 'Service Tag',
            GENERIC_Settings: 'Settings',
            GENERIC_Severity: 'Severity',
            GENERIC_Shutdown: 'Shutdown',
            GENERIC_Size: 'Size',
            GENERIC_Slot: 'Slot',
            GENERIC_Source: 'Source',
            GENERIC_Speed: 'Speed',
            GENERIC_stars: '********',
            GENERIC_State: 'State',
            GENERIC_StartDate: 'Start Date',
            GENERIC_StartTime: 'Start Time',
            GENERIC_StateProvinceRegion: 'State / Province / Region',
            GENERIC_Statistic: 'Statistic',
            GENERIC_Status: 'Status',
            GENERIC_Storage: 'Storage',
            GENERIC_StorageInformation: 'Storage Information',
            GENERIC_Submit: 'Submit',
            GENERIC_Subnet: 'Subnet',
            GENERIC_Success: 'Success',
            GENERIC_Summary: 'Summary',
            GENERIC_Support: 'Support',
            GENERIC_SupportAssist: 'Support Assist',
            GENERIC_Switch: 'Switch',
            GENERIC_Switches: 'Switches',
            GENERIC_SystemVersion: 'System Version',
            GENERIC_TB: 'TB',
            GENERIC_Tags: 'Tags',
            GENERIC_Temperature: 'Temperature',
            GENERIC_Test: 'Test',
            GENERIC_Time: 'Time',
            GENERIC_TimeZone: 'Time Zone',
            GENERIC_ToggleDropdown: 'Toggle Dropdown',
            GENERIC_Top: 'Top',
            GENERIC_TopOffenders: 'Top Offenders',
            GENERIC_Total: 'Total',
            GENERIC_TotalUsage: 'Total Usage',
            GENERIC_Troubleshoot: 'Troubleshoot',
            GENERIC_Type: 'Type',
            GENERIC_Unknown: 'Unknown',
            GENERIC_UnknownError: 'Unknown Error',
            GENERIC_unmanage: 'Unmanage',
            GENERIC_Unallocated: 'Unallocated',
            GENERIC_Unsuccessful: 'Unsuccessful',
            GENERIC_UpdatedBy: 'Updated By',
            GENERIC_UpdatedDate: 'Updated Date',
            GENERIC_UpdatedOn: 'Updated On',
            GENERIC_Update: 'Update',
            GENERIC_Updated: 'Updated',
            GENERIC_UpdateStatus: 'Update Status',
            GENERIC_UpdateFirmware: 'Update Firmware',
            GENERIC_Upload: 'Upload',
            GENERIC_UploadConfigure: 'Upload and Configure',
            GENERIC_Urgent: 'Urgent',
            GENERIC_Used: 'Used',
            GENERIC_User: 'User',
            GENERIC_UserNameRequired: 'Username required',
            GENERIC_UserDetails: 'User Details',
            GENERIC_Users: 'Users',
            GENERIC_UserRoles: 'User and Roles',
            GENERIC_UsersRolesDirectoryService: 'Users, Roles, and Directory Service',
            GENERIC_UserNameEmail: 'User Name (email)',
            GENERIC_UserName: 'User Name',
            GENERIC_Utilization: 'Utilization',
            GENERIC_Value: 'Value',
            GENERIC_ValidFrom: 'Valid From',
            GENERIC_ValidTo: 'Valid To',
            GENERIC_Validate: 'Validate',
            GENERIC_VCenter: 'vCenter',
            GENERIC_Vendor: 'Vendor',
            GENERIC_Version: 'Version',
            GENERIC_Version_: 'version',
            GENERIC_View: 'View',
            GENERIC_ViewAll: 'View All',
            GENERIC_ViewLess: 'View Less',
            GENERIC_ViewBy: 'View By',
            GENERIC_View_By: 'View By:',
            GENERIC_ViewDetails: 'View Details',
            GENERIC_VLANS: 'VLANS',
            GENERIC_Volts: 'Volts',
            GENERIC_Volume: 'Volume',
            GENERIC_Volumes: 'Volumes',
            GENERIC_Warning: 'Warning',
            GENERIC_WarningAt: 'Warning at',
            GENERIC_Warnings: 'Warnings',
            GENERIC_Watts: 'Watts',
            GENERIC_Welcome: 'Welcome',
            GENERIC_Weekly: 'Weekly',
            GENERIC_Yes: 'Yes',
            GENERIC_ZipPostalCode: 'Zip/Postal Code',

            ERROR_Title_Success: 'Success!',
            ERROR_Title_Warning: 'Warning:',
            ERROR_Title_Critical: 'Critical Error:',
            ERROR_Title_Note: 'Note:',
            ERROR_Title_Multiple: 'Warning: Multiple Alerts',

            NAVIGATION_Home: 'Home',
            NAVIGATION_Services: 'Services',
            NAVIGATION_Templates: 'Templates',
            NAVIGATION_SampleTemplates: 'Sample Templates',
            NAVIGATION_MyTemplates: 'My Templates',
            NAVIGATION_Resources: 'Resources',
            NAVIGATION_AllResources: 'All Resources',
            NAVIGATION_ServerPools: 'Server Pools',
            NAVIGATION_Settings: 'Settings',
            NAVIGATION_Settings_ApplicationLogs: 'Application Logs',
            NAVIGATION_Settings_BackupRestore: 'Backup and Restore',
            NAVIGATION_Settings_CredentialsManagement: 'Credentials Management',
            NAVIGATION_Settings_GettingStarted: 'Getting Started',
            NAVIGATION_Settings_Networks: 'Networks',
            NAVIGATION_Settings_Repositories: 'Repositories',
            NAVIGATION_Settings_Users: 'Users',
            NAVIGATION_Settings_VirtualApplianceManagement: 'Virtual Appliance Management',

            VALIDATIONMESSAGES_creditcard: 'Please enter a valid credit card number.',
            VALIDATIONMESSAGES_date: 'Please enter a valid date.',
            VALIDATIONMESSAGES_dateISO: 'Please enter a valid date (ISO).',
            VALIDATIONMESSAGES_digits: 'Please enter only digits.',
            VALIDATIONMESSAGES_email: 'Please enter a valid email address.',
            VALIDATIONMESSAGES_equalTo: 'Please enter the same value again.',
            VALIDATIONMESSAGES_ipaddress: 'Please enter a valid IP Address.',
            VALIDATIONMESSAGES_max: 'Please enter a value less than or equal to {0}.',
            VALIDATIONMESSAGES_maxlength: 'Please enter no more than {0} characters.',
            VALIDATIONMESSAGES_min: 'Please enter a value greater than or equal to {0}.',
            VALIDATIONMESSAGES_minlength: 'Please enter at least {0} characters.',
            VALIDATIONMESSAGES_number: 'Please enter a valid number.',
            VALIDATIONMESSAGES_range: 'Please enter a value between {0} and {1}.',
            VALIDATIONMESSAGES_rangelength: 'Please enter a value between {0} and {1} characters long.',
            VALIDATIONMESSAGES_remote: 'Please fix this field.',
            VALIDATIONMESSAGES_required: 'This field is required.',
            VALIDATIONMESSAGES_url: 'Please enter a valid URL.'
        }
    });
angular.module('ASM.constants')
.constant('Enums', {});

angular.module('ASM.constants')
    .constant('AppTranslations',
    {

        en: {
            //Please see CoreTranslations for generic terms.
            'ApplicationTitle': 'Active System Manager',
            'ApplicationWelcome': 'Welcome to Dell Active System Manager',
            'Version': '8.3',
            'VersionName': 'Dell Active System Manager 8.3',
            'Patents': '',

            'STARTSCREEN_USERNAME_LABEL': 'User Name',
            'STARTSCREEN_PASSWORD_LABEL': 'Password',
            'STARTSCREEN_SIGN_IN_LABEL': 'Sign In',
            'STARTSCREEN_DOMAIN_LABEL': 'Domain',
            'DELL_COPYRIGHT': '© 2016 Dell Inc. ALL RIGHTS RESERVED',

            'MENU_DeployNewService': 'New Service',
            'MENU_Reports': 'Reports',
            'MENU_GettingStarted': 'Getting Started',
            'MENU_CommonTasks': 'Common Tasks',

            'WIZARD_Step': 'Step {{current}} of {{total}}',

            'INDEX_DeployNewService': 'Deploy New Service',
            'INDEX_CreateTemplate': 'Create Template',
            'INDEX_AddExistingService': 'Add Existing Service',
            'INDEX_Logout': ' Logout',
            'INDEX_Settings': ' Settings',

            'APPLICATION_Status': 'Application Status: ',
            'APPLICATION_Status_Ready': 'is available.',
            'APPLICATION_Status_Notready': 'is updating...',
            'APPLICATION_Status_Restarting': 'is restarting...',
            'APPLICATION_Status_Upgrading': 'is upgrading...',

            'DEFAULTPASSWORD_Title': 'Warning',
            'DEFAULTPASSWORD_Confirm': 'The login password for the "admin" user has not been changed from the default. <br /> <br /> For security purposes, consider changing the password for this user by editing it in Settings > Users.',
            'DEFAULTPASSWORD_DoNotShow': 'Do Not Show Again',

            'ADD_USERS_AddUsers': 'Add User(s)',
            'ADD_USERS_SelectWhichUsersInstructions': 'Select which users will have access to this service.',
            'ADD_USERS_Therearenoitemsavailable': 'There are no items available.',
            'ADD_USERS_': '',

            'ADDAPPLICATION_Title': 'Add Application',
            'EDITAPPLICATION_Title': 'Edit Applications',
            'ADDAPPLICATION_IdentifyResources': 'Identify Resources',
            'ADDAPPLICATION_IdentifyApplications': 'Identify Applications',
            'ADDAPPLICATION_AddApplications': 'Add Applications',
            'ADDAPPLICATION_IdentifyResourcesText1': 'Select the servers or virtual machines to which you want to add applications of the same type and configuration.',
            'ADDAPPLICATION_IdentifyResourcesText2': 'If you want to add applications to resources with existing applications, go to the Application Details for the desired resource and click Edit Applications. ',
            'ADDAPPLICATION_SelectResources': 'Select Resources',
            'ADDAPPLICATION_IdentifyApplicationsText': 'Select one or more applications to add to',
            'ADDAPPLICATION_AddApplication': 'Add Application',
            'ADDAPPLICATION_ApplicationType': 'Application Type',
            'ADDAPPLICATION_THInstallOrder': 'Install Order',
            'ADDAPPLICATION_ExpandAllSections': 'Expand All Sections',
            'ADDAPPLICATION_CollapseAllSections': 'Collapse All Sections',
            'ADDAPPLICATION_ApplicationSettingsHelp': 'Applications are shown in installation order, from first to last, as defined on the previous step. Click the Back button to modify the install order.',
            'ADDAPPLICATION_ApplicationSettings': 'Application Settings',
            'ADDAPPLICATION_InstallOrder': 'Install Order: ',

            //jek 3.29.2016
            'ADDPOOL_Title': 'Create Virtual Identity Pool',
            'ADDPOOL_PoolInformation_Title': 'Pool Information',
            'ADDPOOL_PoolInformation_Instructions': 'Enter the name and description by which you can identify this pool.',
            'ADDPOOL_PoolInformation_Name': 'Pool Name',
            'ADDPOOL_PoolInformation_Description': 'Pool Description',

            'ADDPOOL_VirtualMAC_Title': 'Virtual MAC',
            'ADDPOOL_VirtualMAC_Instructions': 'Enter the total Number of Virtual MAC Identities that you want to create (you can create up to 1,024 identities at a time).',
            'ADDPOOL_VirtualMAC_Identities': 'Number of Virtual MAC Identities',
            'ADDPOOL_VirtualMAC_Prefix': 'MAC Address Prefix',
            'ADDPOOL_VirtualMAC_Prefix_Value': '00:0E:AA',
            'ADDPOOL_VirtualMAC_Auto_Generate': 'Auto Generate Identities if needed during deployments',

            'ADDPOOL_VirtualIQN_Title': 'Virtual IQN',
            'ADDPOOL_VirtualIQN_Instructions': 'Enter the total Number of Virtual IQN Identities that you want to create (you can create up to 1,024 identities at a time).',
            'ADDPOOL_VirtualIQN_Identities': 'Number of Virtual iSCSI Identities ',
            'ADDPOOL_VirtualIQN_Prefix': 'IQN Prefix',
            'ADDPOOL_VirtualIQN_Auto_Generate': 'Auto Generate Identities if needed during deployments',

            'ADDPOOL_VirtualWWPN_Title': 'Virtual WWPN',
            'ADDPOOL_VirtualWWPN_Instructions': 'Enter the total Number of Virtual WWPN Identities that you want to create (you can create up to 1,024 identities at a time).',
            'ADDPOOL_VirtualWWPN_Identities': 'Number of Virtual WWPN Identities ',
            'ADDPOOL_VirtualWWPN_Prefix': 'WWPN Prefix',
            'ADDPOOL_VirtualWWPN_Prefix_Value': '20:01:00:0E',
            'ADDPOOL_VirtualWWPN_Auto_Generate': 'Auto Generate Identities if needed during deployments',

            'ADDPOOL_VirtualWWNN_Title': 'Virtual WWNN',
            'ADDPOOL_VirtualWWNN_Instructions': 'Enter the total Number of Virtual WWNN Identities that you want to create (you can create up to 1,024 identities at a time).',
            'ADDPOOL_VirtualWWNN_Identities': 'Number of Virtual WWNN Identities ',
            'ADDPOOL_VirtualWWNN_Prefix': 'WWNN Prefix',
            'ADDPOOL_VirtualWWNN_Prefix_Value': '20:00:00:0E ',
            'ADDPOOL_VirtualWWNN_Auto_Generate': 'Auto Generate Identities if needed during deployments',

            'ADDPOOL_Summary_Title': 'Pool Summary',
            'ADDPOOL_Summary_Header': 'Summary',
            'ADDPOOL_Summary_Instructions': 'Click <b>Finish</b> to create Virtual Identities with the following settings. If you want to change the settings, click <b>Back</b>.',
            'ADDPOOL_Summary_Pool_Information': 'Pool Information',
            'ADDPOOL_Summary_Pool_Name': 'Pool Name*',
            'ADDPOOL_Summary_Pool_Description': 'Pool Description',

            'ADDPOOL_Summary_VirtualMAC_Information': 'Virtual MAC',
            'ADDPOOL_Summary_VirtualMAC_Identities': 'Number of Virtual MAC Identities',
            'ADDPOOL_Summary_VirtualMAC_Prefix': 'MAC Address Prefix',

            'ADDPOOL_Summary_VirtualIQN_Information': 'Virtual IQN',
            'ADDPOOL_Summary_VirtualIQN_Identities': 'Number of Virtual iSCSI Identities',
            'ADDPOOL_Summary_VirtualIQN_Prefix': 'IQN Prefix',

            'ADDPOOL_Summary_VirtualWWPN_Information': 'Virtual WWPN',
            'ADDPOOL_Summary_VirtualWWPN_Identities': 'Number of Virtual WWPN Identities',
            'ADDPOOL_Summary_VirtualWWPN_Prefix': 'WWPN Prefix',

            'ADDPOOL_Summary_VirtualWWNN_Information': 'Virtual WWNN',
            'ADDPOOL_Summary_VirtualWWNN_Identities': 'Number of Virtual WWNN Identities',
            'ADDPOOL_Summary_VirtualWWNN_Prefix': 'WWNN Prefix',

            'ADDPOOL_Submit_Confirmation': 'Are you sure you want to submit this information?',
            'ADDPOOL_Cancel_Confirmation': 'Are you sure you want to cancel?',

            'BACKUPANDRESTORE_Title': 'Backup and Restore',
            'BACKUPANDRESTORE_btnbackupnow': 'Backup Now',
            'BACKUPANDRESTORE_btnrestorenow': 'Restore Now',
            'BACKUPANDRESTORE_settingsanddetailstitle': 'Settings And Details',
            'BACKUPANDRESTORE_lastBackupDate': 'Last Backup Date',
            'BACKUPANDRESTORE_lastBackupStat': 'Last Backup Status',
            'BACKUPANDRESTORE_directoryPath': 'Backup Directory Path',
            'BACKUPANDRESTORE_directoryUserName': 'Backup Directory User Name',
            'BACKUPANDRESTORE_autoBackups': 'Automatically Scheduled Backups',
            'BACKUPANDRESTORE_scheduledbackup_title': 'Automatically Scheduled Backups',
            'BACKUPANDRESTORE_daysforbackup': 'Days for Backup',
            'BACKUPANDRESTORE_timeforbackup': 'Time for Backup',

            'BACKUPNOW_testconnection': 'Test Connection',
            'BACKUPNOW_testconnection_title': 'Success',
            'BACKUPNOW_usebackupsettings': 'Use Backup Directory Path and Encryption Password from Backup Settings and Details',
            'BACKUPNOW_backupdirpath': 'Backup Directory Path',
            'BACKUPNOW_backupdirpathinfo': '<b>CIFS:</b> \\\\192.168.2.1\\LAB\\backups\\Dell_Appliance_Backup_1444333917698.tar.gz <br/> <b>NFS</b>: 192.168.0.1:/var/nfs/backups/Dell_Appliance_Backup_1444333917698.tar.gz',
            'BACKUPNOW_backupDirUserName': 'Backup Directory User Name',
            'BACKUPNOW_backupDirPassword': 'Backup Directory Password',
            'BACKUPNOW_backupFileDescription': 'Enter the password that will be required to open backup files.',
            'BACKUPNOW_encrypPassword': 'Encryption Password',
            'BACKUPNOW_confirmencrypPassword': 'Confirm Encryption Password',

            'BACKUPSETTINGSANDDETAILS_Title': 'Settings And Details',

            'BIOSCONFIGURATION_Title': 'BIOS Settings *',
            'BIOSCONFIGURATION_BasicBIOS': 'Basic',
            'BIOSCONFIGURATION_AdvancedBIOS': 'Advanced',

            'COMPARATOR_Minimum': 'Minimum',
            'COMPARATOR_Exactly': 'Exactly',

            'COMPONENTEDITOR_StorageComponent': 'Storage Component',
            'COMPONENTEDITOR_ServerComponent': 'Server Component',
            'COMPONENTEDITOR_ClusterComponent': 'Cluster Component',
            'COMPONENTEDITOR_VMComponent': 'VM Component',
            'COMPONENTEDITOR_SelectComponent': 'Select a Component',
            'COMPONENTEDITOR_BasicSettings': 'Basic Settings',
            'COMPONENTEDITOR_ComponentName': 'Component Name',
            'COMPONENTEDITOR_Instances': '# of Instances',
            'COMPONENTEDITOR_RelatedComponents': 'Related Components',
            'COMPONENTEDITOR_RelatedComponentsHelp': 'When adding a new component to a template, associate all existing components with the new component or as needed by checking them from the list below.',
            'COMPONENTEDITOR_AssociateAll': 'Associate All',
            'COMPONENTEDITOR_AssociateSelected': 'Associate Selected',
            'COMPONENTEDITOR_NoComponentsToAssociate': 'There are no components to associate.',
            'COMPONENTEDITOR_ImportConfig': 'Import Configuration from Reference Server',
            'COMPONENTEDITOR_ImportFromExisting': 'Import from Existing Template',
            'COMPONENTEDITOR_UploadServer': 'Upload Server Configuration Profile',
            'COMPONENTEDITOR_ReferenceServerIPAddress': 'Reference Server IP Address',
            'COMPONENTEDITOR_ImportConfigFileName': 'Upload Server Configuration File Name',
            'COMPONENTEDITOR_RequiredFieldsRemaining': 'Required Fields Remaining:',
            'COMPONENTEDITOR_ValidateSettings': 'Validate Settings',
            "COMPONENTEDITOR_SourceLocation": 'Source Location',
            "COMPONENTEDITOR_SQLServer": 'SQL Server',
            "COMPONENTEDITOR_DeliveryController": 'Deliver Controller',
            "COMPONENTEDITOR_CitrixStudio": 'Citrix Studio',
            "COMPONENTEDITOR_LicenseServer": 'License Server',
            "COMPONENTEDITOR_CitrixDirector": 'Citrix Director',
            "COMPONENTEDITOR_StoreFront": 'StoreFront',
            "COMPONENTEDITOR_InstallPackages": 'Install Packages',
            "COMPONENTEDITOR_UploadShare": 'Upload Share',
            "COMPONENTEDITOR_UploadRecursive": 'Upload Recursive',
            "COMPONENTEDITOR_ExecuteFileCommand": 'Execute File Command',
            "COMPONENTEDITOR_Share": 'Share',
            "COMPONENTEDITOR_InstallCommand": 'Install Command',
            "COMPONENTEDITOR_UploadFile": 'Upload File',
            "COMPONENTEDITOR_UploadRecurse": 'Upload Recurse',
            "COMPONENTEDITOR_Media": 'Media',
            "COMPONENTEDITOR_MediaLocation": 'Media Location',
            "COMPONENTEDITOR_InstanceName": 'Instance Name',
            "COMPONENTEDITOR_Features": 'Features',
            "COMPONENTEDITOR_SAPassword": 'SA Password',
            "COMPONENTEDITOR_SQLAgentServiceAccountName": 'SQL Agent Service Account Name',
            "COMPONENTEDITOR_SQLAgentServiceAccountPassword": 'SQL Agent Service Account Password',
            "COMPONENTEDITOR_AnalysisServicesAccountName": 'Analysis Services Account Name',
            "COMPONENTEDITOR_AnalysisServicesAccountPassword": 'Analysis Service Account Password',
            "COMPONENTEDITOR_ReportingServicesAccountName": 'Reporting Services Account Name',
            "COMPONENTEDITOR_ReportingServicesAccountPassword": 'Reporting Services Account Password',
            "COMPONENTEDITOR_SQLServiceAccountName": 'SQL Service Account Name',
            "COMPONENTEDITOR_SQLSystemAdminAccounts": 'SQL System Admin Accounts',
            "COMPONENTEDITOR_SQLServiceAccountPassword": 'SQL Service Account Password',
            "COMPONENTEDITOR_InstanceDirectory": 'Instance Directory',
            "COMPONENTEDITOR_AnalysisServicesCollation": 'Analysis Services Collation',
            "COMPONENTEDITOR_SQLCollation": 'SQL Collation',
            "COMPONENTEDITOR_Administrator": 'Administrator',
            "COMPONENTEDITOR_.NETSourceDirectory": '.NET Source Directory',

            "CONFIGURECHASSIS_WelcomeMessage1": 'The <b>Configure Resources</b> wizard will walk you through two scenarios: firmware compliance and an optional chassis on-boarding or reconfiguration for chassis that have been discovered within your environment.',
            "CONFIGURECHASSIS_WelcomeMessage2": '<h4><b>Firmware Compliance</b></h4>ASM requires a minimum firmware level for all resources it manages. You can also download the default repository ASM recommends or load your own custom repositories. Either way, the firmware on your resources will be compared against ASM’s minimum and the default repository set, if applicable. If any resources are found to be out of compliance you can choose to automatically update those resources before bringing them into your environment.',
            "CONFIGURECHASSIS_WelcomeMessage3": '<h4><b>Chassis Configuration</b></h4>If chassis appear in your list of discovered resources, you will be prompted to select them for configuration. All steps in this process are optional. You may choose to on-board new chassis or reconfigure existing chassis through these settings. This configuration includes chassis, iDRAC and I/O Modules. If no chassis are discovered, these steps will not appear in this wizard. ',
            "CONFIGURECHASSIS_LoadingResources": 'Loading Resource(s)',
            "CONFIGURECHASSIS_DeleteConfirm": 'Are you sure you want to delete the selected resource?',
            "CONFIGURECHASSIS_AddRepository": 'Add Repository',
            "CONFIGURECHASSIS_CheckingFirmwareVersions": 'Checking Firmware Versions',
            "CONFIGURECHASSIS_SelectResources": 'Select Resources for Immediate Firmware Update',
            "CONFIGURECHASSIS_Components": 'Components',
            "CONFIGURECHASSIS_CurrentVersion": 'Current Version',
            "CONFIGURECHASSIS_FabricSlot": "Fabric Slot",
            "CONFIGURECHASSIS_ExpectedVersion": 'Expected Version',
            "CONFIGURECHASSIS_FD332StorageMode": 'FD332 Storage Mode',
            "CONFIGURECHASSIS_FirmwareCompliance": 'Firmware Compliance',
            "CONFIGURECHASSIS_SupportedIOMs": 'Supported IOMs',
            "CONFIGURECHASSIS_SupportedBlades": 'Supported Blades',
            "CONFIGURECHASSIS_ChassisIpAddress": 'Chassis: IP Address: ',
            "CONFIGURECHASSIS_ServiceTag": ' / Service Tag: ',
            "CONFIGURECHASSIS_ChassisName": 'ChassisName',
            "CONFIGURECHASSIS_ChassisSettings": 'Chassis Settings',
            "CONFIGURECHASSIS_ServerSettings": 'Server Settings',
            "CONFIGURECHASSIS_IOMSettings": 'I/O Module Settings',
            "CONFIGURECHASSIS_CMCDNSName": 'CMC DNS Name(a-z, A-Z, 0-9, -only)',
            "CONFIGURECHASSIS_SystemInputPowerCap": 'System Input Power Cap',
            "CONFIGURECHASSIS_LocationDetails": 'Location Details',
            "CONFIGURECHASSIS_Datacenter": 'Datacenter',
            "CONFIGURECHASSIS_RackSlot": 'Rack Slot',
            "CONFIGURECHASSIS_ManagementIP": 'Management IP',
            "CONFIGURECHASSIS_iDRACDNSName": 'iDRAC DNS Name',
            "CONFIGURECHASSIS_NumIOModules": ' / # of I/O Modules: ',
            "CONFIGURECHASSIS_NumBlades": ' / # of Blades: ',
            "CONFIGURECHASSIS_Warning": 'Warning: ',
            "CONFIGURECHASSIS_FNIOAFirwmare1": 'FNIOA firmware must be on version 9.9 or above to configure uplinks. Please go to ',
            "CONFIGURECHASSIS_FNIOAFirwmare2": ' and update your catalog to proceed with uplink configuration.',
            "CONFIGURECHASSIS_StorageOption_Single": "Single",
            "CONFIGURECHASSIS_StorageOption_Dual": "Dual",
            "CONFIGURECHASSIS_StorageOption_Joined": "Joined",
            //"CONFIGURECHASSIS_UplinkPortConfigHelp": "Check the box below to configure the uplink ports of the switches manually or upload a custom configuration file.",


            "CONFIGURECHASSIS_DEVICE_CONFIG_Manage_Credentials": 'Manage Credentials',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Credentials_Help": 'Manage existing credentials or create new credentials to be set for the root user (recommended if using Dell Default Credentials).',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Credentials_Chassis": 'Chassis Credentials*',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Credentials_Blade": 'Blade Credentials*',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Credentials_IOM": 'I/O Module Credentials*',

            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing": 'IP Addressing',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Chassis": 'Chassis',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Chassis_Use_Existing": 'Use existing chassis IP address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Chassis_Assign_Static": 'Assign static IP address from this network',

            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Servers": 'Servers',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Servers_Use_Existing": 'Use existing chassis IP address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Servers_Assign_DHCP": 'Assign IP address via DHCP',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_Servers_Assign_Static": 'Assign static IP address from this network',

            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_IOM": 'I/O Modules',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_IOM_Use_Existing": 'Use existing chassis IP address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_IOM_Assign_DHCP": 'Assign IP address via DHCP',
            "CONFIGURECHASSIS_DEVICE_CONFIG_IPAddressing_IOM_Assign_Static": 'Assign static IP address from this network',



            "CONFIGURECHASSIS_DEVICE_CONFIG_Users": 'Users',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Monitoring": 'Monitoring',
            "CONFIGURECHASSIS_DEVICE_CONFIG_NTP": 'NTP',
            "CONFIGURECHASSIS_DEVICE_CONFIG_PowerConfig": 'Power Config',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Networking": 'Networking',
            "CONFIGURECHASSIS_DEVICE_CONFIG_CMCUsers": 'CMC Users',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Nousershavebeenentered": 'No users have been entered.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Group": 'Group',
            "CONFIGURECHASSIS_DEVICE_CONFIG_iDRACUsers": 'iDRAC Users',
            "CONFIGURECHASSIS_DEVICE_CONFIG_LANRole": 'LAN Role',
            "CONFIGURECHASSIS_DEVICE_CONFIG_AlertDestinations": 'Alert Destinations',
            "CONFIGURECHASSIS_DEVICE_CONFIG_AddAlertDestination": 'Add Alert Destination',
            "CONFIGURECHASSIS_DEVICE_CONFIG_DestinationIPAddress": 'Destination IP Address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_CommunityString": 'Community String',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Notrapsettingshavebeenentered": 'No trap settings have been entered.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_EmailAlertSettings": 'Email Alert Settings',
            "CONFIGURECHASSIS_DEVICE_CONFIG_SMTPServer": 'SMTP Server',
            "CONFIGURECHASSIS_DEVICE_CONFIG_AddEmailAlert": 'Add Email Alert',
            "CONFIGURECHASSIS_DEVICE_CONFIG_DestinationEmailAddress": 'Destination Email Address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Nodestinationemailshavebeenentered": 'No destination emails have been entered.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_SyslogConfig": 'Syslog Configuration (for I/O Modules only)',
            "CONFIGURECHASSIS_DEVICE_CONFIG_SyslogDestinationIPAddress": 'Syslog Destination IP Address',
            "CONFIGURECHASSIS_DEVICE_CONFIG_TimeZoneStar": 'Time Zone*',
            "CONFIGURECHASSIS_DEVICE_CONFIG_EnableNTPServer": 'Enable NTP Server',
            "CONFIGURECHASSIS_DEVICE_CONFIG_PreferredNTPServerStar": 'Preferred NTP Server*',
            "CONFIGURECHASSIS_DEVICE_CONFIG_SecondaryNTPServerOptional": 'Secondary NTP Server (optional)',
            "CONFIGURECHASSIS_DEVICE_CONFIG_RedundancyPolicy": 'Redundancy Policy',
            "CONFIGURECHASSIS_DEVICE_CONFIG_ConfiguretheuplinksoneachIModuleIndependently": 'Configure the uplinks on each I/O Module Independently',
            "CONFIGURECHASSIS_ConfigureUplinksChassis": 'Configure Uplink Ports on All Chassis independently',
            "CONFIGURECHASSIS_UploadFile": 'Upload Switch Configuration File',
            "CONFIGURECHASSIS_DEVICE_CONFIG_ConfigureUplinks": 'Configure Uplinks',
            "CONFIGURECHASSIS_DEVICE_CONFIG_DNSNetworkConfiguration": 'DNS Network Configuration',
            "CONFIGURECHASSIS_DEVICE_CONFIG_RegisterChassisControlleronDNS": 'Register Chassis Controller on DNS',
            "CONFIGURECHASSIS_DEVICE_CONFIG_RegisteriDRAConDNS": 'Register iDRAC on DNS',
            "CONFIGURECHASSIS_DEVICE_CONFIG_EnableIPMIoverLAN": 'Enable IPMI over LAN',
            "CONFIGURECHASSIS_DefineUplinks": 'Define Uplinks',
            "CONFIGURECHASSIS_UplinksDefined": 'Uplinks Defined',
            "CONFIGURECHASSIS_ConfigIOIndependently": 'Configure the uplinks on each I/O Module Independently',
            "CONFIGURECHASSIS_VLTEnabled": 'VLT Enabled',
            "CONFIGURECHASSIS_VLTEnabledDesctiption": 'VLT Enabled - Must be configured on like ports (e.g., all 10Gb, or all 40Gb ports)',
            "CONFIGURECHASSIS_QuadportMode": 'Quadport Mode',
            "CONFIGURECHASSIS_ExistingFileName": 'Existing File Name',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Empty": 'Empty',
            "CONFIGURECHASSIS_Empty": 'Empty',
            //"CONFIGURECHASSIS_DEVICE_CONFIG_ThewizardidentifiedNonCompliant": 'The wizard identified {{numIdentified}} non-compliant chassis. You selected {{numSelected}} to be updated automatically',
            //"CONFIGURECHASSIS_DEVICE_CONFIG_ThewizardidentifiedChassisWithRequiredUpdates": 'The wizard identified {{numIdentified}} chassis that require an update. You selected {{numSelected}} to be updated automatically.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_ThewizardidentifiedNonCompliant": 'The wizard identified {{numIdentified}} non-compliant resource(s). You selected {{numSelected}} to be updated automatically',
            "CONFIGURECHASSIS_DEVICE_CONFIG_ThewizardidentifiedChassisWithRequiredUpdates": 'The wizard identified {{numIdentified}} resource(s) that require an update. You selected {{numSelected}} to be updated automatically.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_Off": 'Off',
            "CONFIGURECHASSIS_DEVICE_CONFIG_NotConfigured": 'Not Configured.',
            "CONFIGURECHASSIS_DEVICE_CONFIG_NoRedundancy": 'No Redundancy',
            "CONFIGURECHASSIS_DEVICE_CONFIG_GridRedundancy": 'Grid Redundancy',
            "CONFIGURECHASSIS_DEVICE_CONFIG_RedundancyAlertingOnly": 'Redundancy Alerting Only',
            "CONFIGURECHASSIS_DEVICE_CONFIG_ServerPerformance": 'Server Performance over Power Redundancy',
            "CONFIGURECHASSIS_DEVICE_CONFIG_DynamicSupply": 'Enable Dynamic Power Supply Engagement',
            "CONFIGURECHASSIS_DEVICE_CONFIG_10Gb": '10Gb',
            "CONFIGURECHASSIS_DEVICE_CONFIG_40Gb": '40Gb',

            "DEFINE_UPLINKS_DefineUplinks": 'Define Uplinks',
            "DEFINE_UPLINKS_AddUplink": 'Add Uplink',
            "DEFINE_UPLINKS_Uplinks": 'Uplinks',
            "DEFINE_UPLINKS_PortChannel": 'Port Channel',
            "DEFINE_UPLINKS_NetworkType": 'Network Type',
            "DEFINE_UPLINKS_NetworkNames": 'Network Name(s)',
            "DEFINE_UPLINKS_NumberSelected": '{{number}} Selected',
            "DEFINE_UPLINKS_NoItemsAvailable": 'There are no items available.',
            "DEFINE_UPLINKS_AddNetwork": 'Add Network',
            "DEFINE_UPLINKS_ConfigureUplinkPortsonAllChassistheSame": 'Configure Uplink Ports on All Chassis the Same',
            "DEFINE_UPLINKS_SelectedNetworks": 'Selected Network(s)',
            "DEFINE_UPLINKS_ChooseFile": 'Choose File',
            "DEFINE_UPLINKS_UploadFile": 'Upload File',
            "DEFINE_UPLINKS_NewFileName": 'New File Name',
            "DEFINE_UPLINKS_RSTP": 'RSTP',
            "DEFINE_UPLINKS_MSTP": 'MSTP',
            "DEFINE_UPLINKS_PVST": 'PVST',
            "DEFINE_UPLINKS_None": 'None',
            "DEFINE_UPLINKS_SpanningTreeMode": 'Spanning Tree Mode',
            "DEFINE_UPLINKS_OnlyMXLs": '(Only applicable to MXLs)',
            "DEFINE_UPLINKS_ErrorMessage": 'At least one port on the switch needs to be assigned to an uplink.',
            "DEFINE_UPLINKS_mismatchPortSpeed": 'VLT configuration does not support mixing 10Gb and 40Gb ports. Please update your configuration so that VLT is on either all 10Gb ports, or all 40Gb ports.',
            "CONFIGURECHASSIS_NumModules": '/# of IOMs:',

            'CONFIGUREDEVICE_Credentials': 'Manage Credentials',
            'CONFIGUREDEVICE_IPAddressing': 'IP Addressing',

            'CREDENTIALS_EditTitle': 'Edit Credentials',
            'CREDENTIALS_CreateTitle': 'Create Credentials',
            'CREDENTIALS_EditModeDisabled': 'This credential is a default credential and cannot be edited.',
            'CREDENTIALS_DeleteConfirmation': 'Are you sure you want to delete this credential?',
            'CREDENTIALSFORM_Create_Help': 'Enter the following information to create the credentials to access the resources.',
            'CREDENTIALS_CredentialType': 'Credential Type',
            'CREDENTIALS_Name': 'Credential Name*',
            'CREDENTIALS_UserName': 'User Name*',
            'CREDENTIALS_Domain': 'Domain',
            'CREDENTIALS_Password': 'Password*',
            'CREDENTIALS_ConfirmPassword': 'Confirm Password*',
            'CREDENTIALS_SNMPConfig': 'SNMP Configuration',
            'CREDENTIALS_CommunityString': 'SNMP v2 Community String',
            'CREDENTIALS_Title': 'Credentials Management',
            'CREDENTIALS_THName': 'Name',
            'CREDENTIALS_THType': 'Type',
            'CREDENTIALS_THDevices': 'Resources',
            'CREDENTIALSDETAILS_Header': 'Credential',
            'CREDENTIALSDETAILS_Tabs_Summary': 'Summary',
            'CREDENTIALSDETAILS_Tabs_Devices': 'Resources',
            'CREDENTIALSDETAILS_Tabs_Templates': 'Templates',
            'CREDENTIALSDETAILS_Credential_CreatedBy': 'Created By',
            'CREDENTIALSDETAILS_Credential_CreationTime': 'Creation Time',
            'CREDENTIALSDETAILS_Credential_UpdateTime': 'Update Time',
            'CREDENTIALSDETAILS_Credential_UpdatedBy': 'Updated By',
            'CREDENTIALS_Field_Required': 'This field is required.',
            'CREDENTIALS_Password_Match': 'Please enter the same value again.',

            'CREDENTIALSDETAILS_THDevices_Health': 'Health',
            'CREDENTIALSDETAILS_THDevices_IP': 'IP Address',
            'CREDENTIALSDETAILS_THDevices_ServiceTag': 'Service Tag',
            'CREDENTIALSDETAILS_THDevices_Blades': 'Blades',
            'CREDENTIALSDETAILS_THDevices_LastTemplate': 'Last Template Applied',
            'CREDENTIALSDETAILS_THDevices_State': 'State',
            'CREDENTIALSDETAILS_THDevices_SystemModel': 'System Model',
            'CREDENTIALSDETAILS_THDevices_Ports': 'Ports',
            'CREDENTIALSDETAILS_THDevices_Memory': 'Memory',
            'CREDENTIALSDETAILS_THDevices_CPUs': 'CPUs',

            'CREDENTIALSDETAILS_THTemplates_Name': 'Name',
            'CREDENTIALSDETAILS_THTemplates_Description': 'Description',
            'CREDENTIALSDETAILS_THTemplates_LastUpdatedBy': 'Last Updated By',
            'CREDENTIALSDETAILS_THTemplates_State': 'State',
            'CREDENTIALSDETAILS_THTemplates_Usage': 'Usage',

            'DASHBOARD_AllDeployments': 'All Deployments',
            'DASHBOARD_DellEquallogicGroup': 'Dell EqualLogic Group',
            'DASHBOARD_DellCompellentArrays': 'Dell Compellent Arrays',
            'DASHBOARD_DeployedBy': 'Deployed By: ',
            'DASHBOARD_DeployedDate': 'Deployed On: ',
            'DASHBOARD_Errors': 'ERROR(S): ',
            'DASHBOARD_ExpiresStatus': 'The current license has expired. For more information about licences, contact your system administrator.',
            'DASHBOARD_LastMonth': 'Last Month',
            'DASHBOARD_LastSixMonths': 'Last 6 Months',
            'DASHBOARD_LastTen': 'Last 10 Deployments',
            'DASHBOARD_LastWeek': 'Last Week',
            'DASHBOARD_LastYear': 'Last Year',
            'DASHBOARD_Learn': 'Learn',
            'DASHBOARD_LearnDeploy': 'Learn about Service Deployments',
            'DASHBOARD_LearnTemps': 'Learn about Templates',
            'DASHBOARD_Licenses': 'License Information',
            'DASHBOARD_NetAppArrays': 'NetApp Arrays',
            'DASHBOARD_Of': ' of ',
            'DASHBOARD_QuickActions': 'Quick Actions',
            'DASHBOARD_RecentActivity': 'Recent Activity',
            'DASHBOARD_ResourcesDiscovered': 'Resources Discovered',
            'DASHBOARD_ResourceOverview': 'Resource Overview',
            'DASHBOARD_ServerHealth': ' Server Health',
            'DASHBOARD_Servers': ' Servers: ',
            'DASHBOARD_ServersInUse': ' Servers in Use',
            'DASHBOARD_ViewAllServers': 'View All Servers',
            'DASHBOARD_ViewAllServices': 'View All Services',
            'DASHBOARD_ViewServicesInError': 'View Services in Error',
            'DASHBOARD_ViewServicesInWarning': 'View Services with Warnings ',
            'DASHBOARD_ViewServicesInProgress': 'View In Progress Services',
            'DASHBOARD_ViewServicesInHealthy': 'View Healthy Services',
            'DASHBOARD_ViewServicesInCancelled': 'View Cancelled Services',
            'DASHBOARD_ViewServersInError': 'View Servers in Error',
            'DASHBOARD_ViewServersInWarning': 'View Servers with Warnings',
            'DASHBOARD_ViewServersInHealthy': 'View Healthy Servers',
            'DASHBOARD_ViewServersInUnknown': 'View Servers in an Unknown State',
            'DASHBOARD_ViewService': 'View Service',
            'DASHBOARD_ServiceHistory': 'Service History',
            'DASHBOARD_ServiceOverview': 'Service Overview',
            'DASHBOARD_StorageGroupBreakdown': 'Capacity by Storage Group',
            'DASHBOARD_Title': 'Dashboard',
            'DASHBOARD_TotalServices': 'Total Services',
            'DASHBOARD_TotalStorageCapacity': 'Total Storage Capacity',
            'DASHBOARD_Updating': 'Updating...',
            'DASHBOARD_Used': 'Used',
            'DASHBOARD_ServerUtilizationInServices': 'Server Utilization in Services',
            'DASHBOARD_UtilizationByServerPool': 'Utilization By Server Pool',
            'DASHBOARD_ZeroAvailableStatus': 'No licenses are available for resources.',

            'DEVICE_Summary': 'Summary',
            'DEVICE_PortView': 'Port View',
            'DEVICE_NetworkInterfaces': 'Network Interfaces',
            'DEVICE_FirmwareRevisions': 'Firmware Revisions',
            'DEVICE_FirmwareSoftwareRevisions': 'Firmware/Software Revisions',
            'DEVICE_CPUs': 'CPUs',
            'DEVICE_Memory': 'Memory',
            'DEVICE_Blades': 'Blades',
            'DEVICE_IOModules': 'I/O Modules',
            'DEVICE_ChassisControllers': 'Chassis Controllers',
            'DEVICE_Ikvm': 'IKVM',
            'DEVICE_PowerSupplies': 'Power Supplies',
            'DEVICE_Volumes': 'Volumes',

            'DEVICEDETAILS_Title': 'Device Details',
            'DEVICEDETAILS_RecentActivity': 'Recent Activity',
            'DEVICEDETAILS_ResourcesTitle': 'Resources',
            'DEVICEDETAILS_DetailsTitle': 'Details',
            'DEVICEDETAILS_InService': 'In Service: ',
            'DEVICEDETAILS_ChassisInformation': 'Chassis Information',
            'DEVICEDETAILS_SwitchInformation': 'Switch Information',
            'DEVICEDETAILS_RackServerInformation': 'Rack Server Information',
            'DEVICEDETAILS_TowerServerInformation': 'Tower Server Information',
            'DEVICEDETAILS_BladeServerInformation': 'Blade Server Information',
            'DEVICEDETAILS_ServerInformation': 'Server Information',
            'DEVICEDETAILS_IOModInfo': 'I/O Module Information',
            'DEVICEDETAILS_StorageGroupInformation': 'Storage Information',
            'DEVICEDETAILS_ResourceName': 'Resource Name',
            'DEVICEDETAILS_PowerState': 'Power State',
            'DEVICEDETAILS_SerialNumber': 'Serial Number',
            'DEVICEDETAILS_ChassisLocation': 'Chassis Location',
            'DEVICEDETAILS_DataCenter': 'Data Center',
            'DEVICEDETAILS_Aisle': 'Aisle',
            'DEVICEDETAILS_Rack': 'Rack',
            'DEVICEDETAILS_RackSlot': 'Rack Slot',
            'DEVICEDETAILS_IOModuleInfo': 'I/O Module Information',
            'DEVICEDETAILS_FabricSlot': 'Fabric/Slot',
            'DEVICEDETAILS_FabricPurpose': 'Fabric Purpose',
            'DEVICEDETAILS_ManagementIP': 'Management IP',
            'DEVICEDETAILS_SlotName': 'Slot Name',
            'DEVICEDETAILS_SlotNumber': 'Slot Number',
            'DEVICEDETAILS_CurrentUtilization': 'Current Utilization',
            'DEVICEDETAILS_CurrentAvailable': 'Current Availailable',
            'DEVICEDETAILS_HistoricalData': 'Historical Data',
            'DEVICEDETAILS_CPUUsage': 'CPU Usage',
            'DEVICEDETAILS_UsageDetails': 'Usage Details',
            'DEVICEDETAILS_CollapseExpandChart': 'Collapse/Expand Chart',
            'DEVICEDETAILS_Minimum': 'Minimum',
            'DEVICEDETAILS_Maximum': 'Maximum',
            'DEVICEDETAILS_PeakValues': 'Peak Values',
            'DEVICEDETAILS_Average': 'Average',
            'DEVICEDETAILS_PeakValue': 'Peak Value',
            'DEVICEDETAILS_PeakTime': 'Peak Time',
            'DEVICEDETAILS_StartTime': 'Start Time',
            'DEVICEDETAILS_StorageCapacity': 'Storage Capacity',
            'DEVICEDETAILS_StorageDiskSpaceTotal': 'Total Disk Space',
            'DEVICEDETAILS_Servers': 'Servers',
            'DEVICEDETAILS_ServersOnline': 'Online',
            'DEVICEDETAILS_ServersInUse': 'In Use',
            'DEVICEDETAILS_ServersOS': 'Operating System',
            'DEVICEDETAILS_DiskTitle': 'Disks',
            'DEVICEDETAILS_ManagedDisks': 'Managed Disks',
            'DEVICEDETAILS_SpareDisks': 'Spare Disks',
            'DEVICEDETAILS_ReplayProfile': 'Replay Profile',
            'DEVICEDETAILS_ReplaysOnline': 'Online',
            'DEVICEDETAILS_ReplaysInUse': 'In Use',
            'DEVICEDETAILS_GroupDiskSpace': 'Group Disk Space',
            'DEVICEDETAILS_StoragePoolMembers': 'Members',
            'DEVICEDETAILS_StoragePoolTotal': 'Total',
            'DEVICEDETAILS_SnapshotTitle': 'Snapshots',
            'DEVICEDETAILS_SnapshotsOnline': 'Online',
            'DEVICEDETAILS_SnapshotsInUse': 'In Use',
            'DEVICEDETAILS_VolumeCollectionsTitle': 'Collections',
            'DEVICEDETAILS_VolumeCollections': 'Volume Collections',
            'DEVICEDETAILS_SnapshotCollections': 'Snapshot Collections',
            'DEVICEDETAILS_CustomSnapshotCollections': 'Custom Snapshot Collections',
            'DEVICEDETAILS_StoragePool': 'Storage Pool',
            'DEVICEDETAILS_ServerTitle': 'Servers',
            'DEVICEDETAILS_ActionItems': 'Action Items',
            'DEVICEDETAILS_LaunchGroupManager': 'Launch Group Manager',
            'DEVICEDETAILS_LaunchStorageCenter': 'Launch Storage Center',
            'DEVICEDETAILS_LaunchGUILink': 'Launch GUI',
            'DEVICEDETAILS_LaunchMgmtGUILink': 'Launch Mgmt GUI',
            'DEVICEDETAILS_LaunchiDRACGUIDLink': 'Launch iDRAC GUI',
            'DEVICEDETAILS_LaunchCMCGUILink': 'Launch CMC GUI',
            'DEVICEDETAILS_AssociatedCredential': 'Associated Credential',
            'DEVICEDETAILS_ChassisModel': 'Chassis Model',
            'DEVICEDETAILS_ChassisDNSName': 'Chassis DNS Name',
            'DEVICEDETAILS_ChassisMidVersion': 'Chassis Midplane Version',
            'DEVICEDETAILS_PowerCapPercent': 'Power Cap Percent',
            'DEVICEDETAILS_TotalVolumes': 'Total Volumes',
            'DEVICEDETAILS_ISCSIConnections': 'ISCSI Connections',
            'DEVICEDETAILS_VolumesUp': 'Up',
            'DEVICEDETAILS_VolumesDown': 'Down',
            'DEVICEDETAILS_DellSwitchMACAddress': 'MAC Address',
            'DEVICEDETAILS_SoftwareVersion': 'Software Version',
            'DEVICEDETAILS_SystemDescription': 'System Description',
            'DEVICEDETAILS_VolumeReserve': 'Volume Reserve',
            'DEVICEDETAILS_SnapshotReserve': 'Snapshot Reserve',
            'DEVICEDETAILS_ReplicationReserve': 'Replication Reserve',
            'DEVICEDETAILS_Delegated': 'Delegated',
            'DEVICEDETAILS_Free': 'Free',
            'DEVICESDETAILS_UsageDetails': 'Usage Details',
            'DEVICES_DETAILS_Blades_State': 'State',
            'DEVICES_DETAILS_Blades_PowerState': 'Power State',
            'DEVICES_DETAILS_Blades_ManagementIP': 'Management IP',
            'DEVICES_DETAILS_Blades_Hostname': 'Hostname',
            'DEVICES_DETAILS_Blades_Location': 'Location',
            'DEVICES_DETAILS_Blades_ServiceTag': 'Service Tag',
            'DEVICES_DETAILS_Blades_SystemModel': 'System Model',
            'DEVICES_DETAILS_Blades_CPUs': 'CPUs',
            'DEVICES_DETAILS_Blades_Memory': 'Memory',
            'DEVICES_DETAILS_IOModules_ManagementIP': 'Management IP',
            'DEVICES_DETAILS_IOModules_ServiceTag': 'Service Tag',
            'DEVICES_DETAILS_IOModules_SystemModel': 'System Model',
            'DEVICES_DETAILS_IOModules_Ports': 'Ports',
            'DEVICES_DETAILS_IOModules_State': 'State',
            'DEVICES_DETAILS_ChassisControllers_PrimaryChassisController': 'Primary Chassis Management Controller',
            'DEVICES_DETAILS_ChassisControllers_Location': 'Location',
            'DEVICES_DETAILS_ChassisControllers_FirmwareVersion': 'Firmware Version',
            'DEVICES_DETAILS_ChassisControllers_StandbyChassisCMCInfo': 'Standby Chassis Management Controller',
            'DEVICES_DETAILS_ChassisControllers_Present': 'Present',
            'DEVICES_DETAILS_IKVM_Present': 'Present',
            'DEVICES_DETAILS_IKVM_Name': 'Name',
            'DEVICES_DETAILS_IKVM_Manufacturer': 'Manufacturer',
            'DEVICES_DETAILS_IKVM_FirmwareVersion': 'Firmware Version',
            'DEVICES_DETAILS_PowerSupplies_Name': 'Name',
            'DEVICES_DETAILS_PowerSupplies_PowerStatus': 'Power Status',
            'DEVICES_DETAILS_PowerSupplies_Capacity': 'Capacity',


            'DEVICES_Aggregates': 'Aggregates',
            'DEVICES_AllResources': 'All Resources',
            'DEVICES_AssetServiceTag': 'Asset/Service Tag',
            'DEVICES_AvailableStorage': 'Available Storage',
            'DEVICES_ChangeResourceTypeTo': 'Change resource state to...',
            'DEVICES_ChangeResourceType': 'Change resource state to',
            'DEVICES_ConfirmManage': 'Are you sure you want to mark the selected resources as Managed?',
            'DEVICES_ConfirmUnmanage': 'Are you sure you want to mark the selected resources as Unmanaged?',
            'DEVICES_ConfirmReserve': 'Are you sure you want to mark the selected resources as Reserved?',
            'DEVICES_Clusters': 'Clusters',
            'DEVICES_CompellentStorageName': 'Resource Name',
            'DEVICES_ConfigureChassis': 'Configure Chassis',
            'DEVICES_ConfigError': 'Config Error',
            'DEVICES_CPU': 'CPU',
            'DEVICES_DataCenters': 'Data Centers',
            'DEVICES_DellChassis': 'Dell Chassis',
            'DEVICES_Discover': 'Discover',
            'DEVICES_Disks': 'Disks',
            'DEVICES_DisplayServices': 'Service(s)',
            'DEVICES_DeploymentStatus': 'Deployment Status',
            'DEVICES_DeploymentFailed': 'Deployment Failed',
            'DEVICES_DNSDracName': 'Resource Name',
            'DEVICES_DNSName': 'DNS Name',
            'DEVICES_ElementManager': 'Element Manager',
            'DEVICES_EmptyTable': 'No Devices found',
            'DEVICES_FirmwareComplianceReport': 'View Compliance Report',
            'DEVICES_FirmwareStatus': 'Firmware Status',
            'DEVICES_FreeDiskSpace': 'Free Disk Space',
            'DEVICES_GroupMembers': 'Group Members',
            'DEVICES_HideFilters': 'Hide Filters',
            'DEVICES_Host Groups': 'Host Groups',
            'DEVICES_HostIP': 'Host IP',
            'DEVICES_Hosts': 'Hosts',
            'DEVICES_NetAppStorageName': 'Resource Name',
            'DEVICES_Luns': 'LUNs',
            'DEVICES_Managed': 'Managed',
            'DEVICES_ManagedState': 'Managed State',
            'DEVICES_State': 'State',
            'DEVICES_ManagementIp': 'Management IP',
            'DEVICES_IPAddress': 'IP Address',
            'DEVICES_Manufacturer': 'Manufacturer',
            'DEVICES_ManufacturerModel': 'Manufacturer/Model',
            'DEVICES_NotInUse': 'Not in Use',
            'DEVICES_Online': 'Online',
            'DEVICES_OS': 'OS',
            'DEVICES_OSHostName': 'OS Hostname',
            'DEVICES_PowerState': 'Power State',
            'DEVICES_Processors': 'Processors',
            'DEVICES_Processor': 'Processor',
            'DEVICES_PendingUpdates': 'Pending Updates',
            'DEVICES_RemoveConfirm': 'Are you sure you want to remove the selected resources?',
            'DEVICES_ReplayProfile': 'Replay Profile',
            'DEVICES_UpdateResources': 'Update Resources',
            'DEVICES_UpdateResource': 'Update Resource',
            'DEVICES_cannotUpdateStorage': "Storage components must be updated outside of ASM through the element manager.",
            'DEVICES_FirmwareRepository': 'Firmware Repository',
            'DEVICES_Reserved': 'Reserved',
            'DEVICES_ResourceName': 'Resource Name',
            'DEVICES_Resources': 'Resources',
            'DEVICES_ResourceState': 'Resource State',
            'DEVICES_ResourceStateTooltip': 'Resource State:<br/> · Managed - Resources currently deployed or available for deployment by ASM. Monitor firmware compliance and/or upgrade firmware for these resources. Includes states such as: Available, Error, and Unknown.<br/><br/>' +
                                                      '· Reserved - Resources not available for deployment by ASM. These may be resources that are already deployed and in use in your environment. Monitor firmware compliance and/or upgrade firmware for these resources.<br/><br/>' +
                                                      '· Unmanaged - Resources not available for deployment by ASM. Monitor firmware compliance, but firmware connot be upgraded.<br/><br/>',
            'DEVICES_ResourceType': 'Resource Type',
            'DEVICES_Compliance': 'Compliance',
            'DEVICES_ComplianceToolTip': 'Compliance is determined for firmware versions and/or software versions for the selected resource against the default or service catalog.',
            'DEVICES_UsedInServices': 'In Use in Service(s)',
            'DEVICES_NoncompliantDefault': 'Non-Compliant with Default Catalog {{name}}',
            'DEVICES_CompliantwithDefault': 'Compliant with Default Catalog - {{name}}',
            'DEVICES_NoncompliantService': 'Non-Compliant with Service Catalog - {{name}}',
            'DEVICES_CompliantService': 'Compliant with Service Catalog - {{name}}',
            'DEVICES_UpdateRequiredDefault': 'Update Required with Default Catalog - {{name}}',
            'DEVICES_UpdateRequiredService': 'Update Required with Service Catalog - {{name}}',
            'DEVICES_UpdateFailedDefault': 'Update Failed with Default Catalog - {{name}}',
            'DEVICES_UpdateFailedService': 'Update Failed with Service Catalog - {{name}}',
            'DEVICES_RunInventory': 'Run Inventory',
            'DEVICES_Alert_RunInventorySuccess': 'The Run Inventory process has started.',
            'DEVICES_SCVMMDeviceTitle': 'SCVMM Details',
            'DEVICES_SerialNumber': 'Serial Number',
            'DEVICES_ServerPools': 'Server Pools',
            'DEVICES_Service': 'Service',
            'DEVICES_ShowFilters': 'Show Filters',
            'DEVICES_SnapshotsTitle': 'Snapshots',
            'DEVICES_FreeGroupSpace': 'Free Group Space',
            'DEVICES_InUse': 'In Use',
            'DEVICES_Deploying': 'Deploying',
            'DEVICES_SystemStatus': 'System Status',
            'DEVICES_Title': 'Resources',
            'DEVICES_Unknown': 'Unknown',
            'DEVICES_Unmanaged': 'Unmanaged',
            'DEVICES_UpdateRequired': 'Update required',
            'DEVICES_UpdateFailed': 'Update failed',
            'DEVICES_Updating': 'Updating',
            'DEVICES_UpdatingResource': 'Updating Resource',
            'DEVICES_UpdatingService': 'Updating Service',
            'DEVICES_VCenterDeviceTitle': 'vCenter Details',
            'DEVICES_VMManager': 'VM Manager',
            'DEVICES_VMs': 'Virtual Machines',
            'DEVICES_Volumes': 'Volumes',
            'DEVICES_ExportAll_ErrorExportingDevices': 'Error Exporting Devices',
            'DEVICES_CompliantStatus_Unknown': 'Unknown',
            'DEVICES_CompliantStatus_Compliant': 'Compliant',
            'DEVICES_CompliantStatus_NonCompliant': 'Non-Compliant',
            'DEVICES_CompliantStatus_UpdateRequired': 'Update Required',
            'DEVICES_CompliantStatus_UpdateFailed': 'Update Failed',
            'DEVICES_CompliantStatus_PendingUpdates': 'Pending Updates',
            'DEVICES_WithDefaultCatalog': 'with Default Catalog -',
            'DEVICES_WithServiceCatalog': 'with Service Catalog -',
            'DEVICES_WithMinimum': 'with minimum',

            'DEVICES_SPAIPAddress': 'SP A IP Address',
            'DEVICES_SPBIPAddress': 'SP B IP Address',
            'DEVICES_Services': 'Service(s)',
            'DEVICEDETAILS_ServerOS': 'Server OS',
            'DEVICEDETAILS_ReplayInUse': 'Replay in use',
            'DEVICES_StoragePool': 'Storage Pool',
            'DEVICES_default': 'default',
            'DEVICES_backup': 'backup',
            'DEVICES_TotalDiskSpace': 'Total Disk Space',
            'DEVICES_EMC_StorageInformation': 'Storage Information',
            'DEVICES_EMC_ResourceName': 'Resource Name',
            'DEVICES_EMC_SPAIPAddress': 'SP A IP Address',
            'DEVICES_EMC_SPBIPAddres': 'SP B IP Address',
            'DEVICES_EMC_LUNs': 'LUNs',
            'DEVICES_EMC_TotalLUNs': 'Total LUNs',
            'DEVICES_EMC_Up': 'Up',
            'DEVICES_EMC_Down': 'Down',
            'DEVICES_EMC_LaunchUnisphere': 'Launch Unisphere',
            'DEVICES_EMC_Members': 'Members',
            'DEVICES_EMC_storagepooltotal': 'Total',
            'DEVICES_EMC_Hosts': 'Hosts',
            'DEVICES_EMC_HostsOnline': 'Online',
            'DEVICES_EMC_serversinuse': 'In Use',
            'DEVICES_EMC_Disks': 'Disks',
            'DEVICES_EMC_manageddisks': 'Managed Disks',
            'DEVICES_EMC_sparedisks': 'Spare Disks',
            'DEVICES_EMC_': '',


            'DEVICES_Apply_Firmware_Updates_Title': 'Apply Server Firmware Updates',
            'DEVICES_Apply_Resource_Updates_Title': 'Apply Resource Updates',
            'DEVICES_Apply_Firmware_Updates_Cancel_Confirmation': 'Are you sure you want to cancel?',

            'DEVICES_CONFIGURE_CHASSIS_ConfigureChassis': 'Configure Chassis',
            'DEVICES_CONFIGURE_CHASSIS_Welcome': 'Welcome',
            'DEVICES_CONFIGURE_CHASSIS_DiscoveredResources': 'Discovered Resources',
            'DEVICES_CONFIGURE_CHASSIS_DefaultFirmwareRepository': 'Default Firmware Repository',
            'DEVICES_CONFIGURE_CHASSIS_FirmwareCompliance': 'Firmware Compliance',
            'DEVICES_CONFIGURE_CHASSIS_ChassisConfiguration': 'Chassis Configuration',
            'DEVICES_CONFIGURE_CHASSIS_UniqueChassisSettings': 'Unique Chassis Settings',
            'DEVICES_CONFIGURE_CHASSIS_UniqueServerSettings': 'Unique Server Settings',
            'DEVICES_CONFIGURE_CHASSIS_UniqueIOModuleSettings': 'Unique I/O Module Settings',
            'DEVICES_CONFIGURE_CHASSIS_IOModuleConfiguration': 'I/O Module Configuration',
            'DEVICES_CONFIGURE_CHASSIS_Summary': 'Summary',
            'DEVICES_CONFIGURE_CHASSIS_WelcomeMessage': 'The <strong>Configure Chassis</strong> wizard will walk you through settings to on-board or reconfigure the chassis you have selected. This configuration includes chassis, iDRAC and I/O Modules. All steps in this process are optional. These settings will be applied at the end of the configuration process.',
            'DEVICES_CONFIGURE_CHASSIS_Thefollowingresourceshave': 'The following resources have been discovered within your environment.',
            'DEVICES_CONFIGURE_CHASSIS_Page2message2': 'If a resource has been discovered that you do not want to be in ASM\'s environment, you may remove it from ASM by clicking the trashcan icon in the first column.',
            'DEVICES_CONFIGURE_CHASSIS_DefaultFirmwareRepoMessage': 'If you want ASM to manage firmware on your resources beyond the minimum requirements, you can download the recommended ASM repository or load custom repositories by clicking the <strong>Add Repository</strong> button below.',
            'DEVICES_CONFIGURE_CHASSIS_FirmwareComplianceMessage': 'All firmware on the discovered resources is compliant to the default repository selected.',
            'DEVICES_CONFIGURE_CHASSIS_FirmwareComplianceMessageIfNonCompliant': 'The following resources do not have compliant firmware.' +
                '<ul><li><strong>Update Required:</strong> Resources that do not meet the minimum required by ASM</li><li><strong>Non-compliant:</strong> Resources that differ from the default repository</li></ul>' +
                '<br /> <p>You can select to update these resources immediately during the configuration process to bring them into compliance. Any resource that does not meet ASM’s minimum will not be available in for deployments until the resource is brought into compliance.</p>',
            'DEVICES_CONFIGURE_CHASSIS_ChassisConfigMessage': 'Check the box below to identify those chassis you want to configure. All configuration settings will be applied at the end of the configuration process.',
            'DEVICES_CONFIGURE_CHASSIS_SelectChassisforInitialConfiguration': 'Select Chassis for Initial Configuration',
            'DEVICES_CONFIGURE_CHASSIS_ChassisConfigSelectWhichChassisMessage': 'Select which chassis you wish to configure and expand the different sections below the table to edit global settings.',
            'DEVICES_CONFIGURE_CHASSIS_UniqueChassisCheckTheBoxMessage': 'Check the box below to modify unique settings for chassis individually.',
            'DEVICES_CONFIGURE_CHASSIS_ConfigureUniqueChassisSettings': 'Configure Unique Chassis Settings',
            'DEVICES_CONFIGURE_CHASSIS_UniqueServerSettingsCheckTheBoxMessage': 'Check the box below to modify unique settings for the servers within the chassis.',
            'DEVICES_CONFIGURE_CHASSIS_ConfigureUniqueServerSettings': 'Configure Unique Server Settings',
            'DEVICES_CONFIGURE_CHASSIS_UniqueIOModSettingsCheckTheBoxMessage': 'Check the box below to modify unique settings for the I/O Modules within the chassis.',
            'DEVICES_CONFIGURE_CHASSIS_ConfigureUniqueIOModuleSettings': 'Configure Unique I/O Module Settings',
            'DEVICES_CONFIGURE_CHASSIS_IOModConfigCheckTheBoxMessage': 'Check the box below to configure the uplink ports of the switches manually or upload a custom configuration file.',
            'DEVICES_CONFIGURE_CHASSIS_ConfigureUplinks': 'Configure Uplinks',

            'DEVICES_DETAILS_FIRMWARE_Components': 'Firmware Components',
            'DEVICES_DETAILS_SOFTWARE_Components': 'Software Components',
            'DEVICES_DETAILS_FIRMWARE_Component': 'Component',
            'DEVICES_DETAILS_FIRMWARE_Version': 'Version',
            'DEVICES_DETAILS_FIRMWARE_LastUpdated': 'Last Updated',

            'DEVICES_DETAILS_SOFTWARE_Component': 'Component',
            'DEVICES_DETAILS_SOFTWARE_Vendor': 'Vendor',
            'DEVICES_DETAILS_SOFTWARE_Version': 'Version',
            'DEVICES_DETAILS_SOFTWARE_LastUpdated': 'Last Updated',



            'DEVICES_DETAILS_CPU_ID': 'ID',
            'DEVICES_DETAILS_CPU_Manufacturer': 'Manufacturer',
            'DEVICES_DETAILS_CPU_Model': 'Model',
            'DEVICES_DETAILS_CPU_NumberofCores': 'Number of Cores',
            'DEVICES_DETAILS_CPU_EnabledCores': 'Enabled Cores',
            'DEVICES_DETAILS_CPU_MaxClockSpeed': 'Max Clock Speed (GHz)',
            'DEVICES_DETAILS_CPU_CurrentSpeed': 'Current Speed (GHz)',

            'DEVICES_DETAILS_MEMORY_ID': 'ID',
            'DEVICES_DETAILS_MEMORY_BankLabel': 'Bank Label',
            'DEVICES_DETAILS_MEMORY_CurrentSpeed': 'Current Speed',
            'DEVICES_DETAILS_MEMORY_Manufacturer': 'Manufacturer',
            'DEVICES_DETAILS_MEMORY_MemoryType': 'Memory Type',
            'DEVICES_DETAILS_MEMORY_PartNumber': '	Part Number',
            'DEVICES_DETAILS_MEMORY_Rank': 'Rank',
            'DEVICES_DETAILS_MEMORY_SerialNumber': 'Serial Number',
            'DEVICES_DETAILS_MEMORY_Size': 'Size',
            'DEVICES_DETAILS_MEMORY_Speed': 'Speed',
            'DEVICES_DETAILS_Volumes_Name': 'Name',
            'DEVICES_DETAILS_Volumes_LogicalSize': 'Logical Size',
            'DEVICES_DETAILS_Volumes_ReplayProfile': 'Replay Profile',
            'DEVICES_DETAILS_Volumes_StorageProfile': '	Storage Profile',
            'DEVICES_DETAILS_Volumes_DiskFolder': 'Disk Folder',

            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_Volume': 'Volume',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_StoragePool': 'Storage Pool',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_ReportedSize': 'Reported Size',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_VolumeReserve': 'Volume Reserve',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_SnapshotReserve': 'Snapshot Reserve',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_BorrowedSpace': 'Borrowed Space',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_VolumeStatus': 'Volume Status',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_ReplicationPartner': '	Replication Partner',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_SyncRepStatus': 'SyncRep Status',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_NumberofSnapshot': 'Number of Snapshot',
            'DEVICES_DETAILS_EQUAL_LOGIC_Volumes_ISCSIConnections': 'ISCSI Connections',
            'DEVICES_DETAILS_COMPELLENT_Volumes_Name': 'Name',
            'DEVICES_DETAILS_COMPELLENT_Volumes_LogicalSize': 'Logical Size',
            'DEVICES_DETAILS_COMPELLENT_Volumes_ReplayProfile': 'Replay Profile',
            'DEVICES_DETAILS_COMPELLENT_Volumes_StorageProfile': 'Storage Profile',
            'DEVICES_DETAILS_COMPELLENT_Volumes_DiskFolder': 'Disk Folder',

            'DEVICES_NETWORK_INTERFACES_InstanceID': 'Instance ID',
            'DEVICES_NETWORK_INTERFACES_Vendor': 'Vendor',
            'DEVICES_NETWORK_INTERFACES_Product': 'Product',
            'DEVICES_NETWORK_INTERFACES_NetworkMode': 'Network Mode',
            'DEVICES_NETWORK_INTERFACES_PermanentMACAddress': 'Permanent MAC Address',
            'DEVICES_NETWORK_INTERFACES_VirtualMACAddress': 'Virtual MAC Address',
            'DEVICES_NETWORK_INTERFACES_PermanentISCSIMACAddress': 'Permanent ISCSI MAC Address',
            'DEVICES_NETWORK_INTERFACES_VirtualISCSIMACAddress': 'Virtual ISCSI MAC Address',
            'DEVICES_NETWORK_INTERFACES_PermanentFCOEAddress': 'Permanent FCOE Address',
            'DEVICES_NETWORK_INTERFACES_VirtualFIPSMACAddress': 'Virtual FIPS MAC Address',
            'DEVICES_NETWORK_INTERFACES_InitiatorIQN': 'Initiator IQN',
            'DEVICES_NETWORK_INTERFACES_InitiatorIP': 'Initiator IP',
            'DEVICES_NETWORK_INTERFACES_World-wideportname(WWPN)': 'World-wide port name (WWPN)',
            'DEVICES_NETWORK_INTERFACES_VirtualWWPN': 'Virtual WWPN',
            'DEVICES_NETWORK_INTERFACES_WWnodeWeb': 'World-wide node name (WWNN)',
            'DEVICES_HostGroups': 'Host Groups',
            'DEVICES_InUseNoCatMessage': 'Service Firmware/Software Repository Not Set',

            'DEVICESTATE_Available': 'Available',
            'DEVICESTATE_Deployed': 'Deployed',
            'DEVICESTATE_Unknown': 'Unknown',
            'DEVICESTATE_Copying': 'Copying',
            'DEVICESTATE_Error': 'Error',
            'DEVICESTATE_Pending': 'Pending',
            'DEVICESTATE_Updating': 'Updating',
            'DEVICESTATE_Deploying': 'Deploying',
            'DEVICESTATE_PoweringOff': 'Powering Off',
            'DEVICESTATE_PoweringOn': 'Powering On',
            'DEVICESTATE_Reserved': 'Reserved',
            'DEVICESTATE_Unmanaged': 'Unmanaged',
            'DEVICESTATE_Online': 'Online',
            'DEVICESTATE_Yes': 'Yes',

            'DEVICETYPE_Chassis': 'Chassis',
            'DEVICETYPE_VRTX': 'Chassis',
            'DEVICETYPE_ChassisFX': 'Chassis',
            'DEVICETYPE_FXServer': 'FX Server',
            'DEVICETYPE_BladeServer': 'Blade Server',
            'DEVICETYPE_RackServer': 'Rack Server',
            'DEVICETYPE_TowerServer': 'Tower Server',
            'DEVICETYPE_AggregatorIOM': 'Switch',
            'DEVICETYPE_MXLIOM': 'Switch',
            'DEVICETYPE_FXIOM': 'Switch',
            'DEVICETYPE_Unknown': 'Unknown',
            'DEVICETYPE_VM': 'Virtual Machine',
            'DEVICETYPE_EM': 'Element Manager',
            'DEVICETYPE_Server': 'Server',
            'DEVICETYPE_GenericSwitch': 'Switch',
            'DEVICETYPE_DellSwitch': 'Switch',
            'DEVICETYPE_Compellent': 'Storage Group',
            'DEVICETYPE_Equallogic': 'Storage Group',
            'DEVICETYPE_NetApp': 'Storage Group',
            'DEVICETYPE_VCenter': 'VM Manager',
            'DEVICETYPE_SCVMM': 'VM Manager',
            'DEVICETYPE_Storage': 'Storage Group',

            'DISCOVERY_AddResourceType': 'Add Resource Type',
            'DISCOVERY_ChassisCredentials': 'Chassis Credentials*',
            'DISCOVERY_BladeCredentials': 'Blade Credentials*',
            'DISCOVERY_IPAddressing': 'IP Addressing',

            'DISCOVERY_IPAddressing_Chassis': 'Chassis',
            'DISCOVERY_IPAddressing_Chassis_Use_Existing': 'Use existing chassis IP address',
            'DISCOVERY_IPAddressing_Chassis_Assign_Static': 'Assign static IP address from this network',

            'DISCOVERY_IPAddressing_Servers': 'Servers',
            'DISCOVERY_IPAddressing_Servers_Use_Existing': 'Use existing chassis IP address',
            'DISCOVERY_IPAddressing_Servers_Assign_Static': 'Assign static IP address from this network',
            'DISCOVERY_IPAddressing_Servers_Assign_DHCP': 'Assign IP address via DHCP',

            'DISCOVERY_IPAddressing_IOM': 'I/O Modules',
            'DISCOVERY_IPAddressing_IOM_Use_Existing': 'Use existing chassis IP address',
            'DISCOVERY_IPAddressing_IOM_Assign_Static': 'Assign static IP address from this network',
            'DISCOVERY_IPAddressing_IOM_Assign_DHCP': 'Assign IP address via DHCP',


            'DISCOVERY_IOMCredentials': 'I/O Module Credentials*',
            'DISCOVERY_Credentials': 'Credentials',
            'DISCOVERY_Delete_Resource_Type': 'Delete Resurce Type',
            'DISCOVERY_Add_Server_Pool': 'Add Server Pool',
            'DISCOVERY_Add_Credential': 'Add Credential',
            'DISCOVERY_Edit_Credential': 'Edit Credential',

            'DISCOVERY_Select_Chassis_Credential': 'Select Chassis Credential',
            'DISCOVERY_Select_Blade_Credential': 'Select Blade Credential',
            'DISCOVERY_Select_IOM_Credential': 'Select IOMCredential',
            'DISCOVERY_Select_Server_Credential': 'Select Server Credential',
            'DISCOVERY_Select_Storage_Credential': 'Select Storage Credential',
            'DISCOVERY_Select_Switch_Credential': 'Select Switch Credential',
            'DISCOVERY_Select_SCVMM_Credential': 'Select SCVMM Credential',
            'DISCOVERY_Select_vCenter_Credential': 'Select vCenter Credential',
            'DISCOVERY_Select_EM_Credential': 'Select EM Credential',


            'DISCOVERY_DiscoverIntoServerPool': 'Discover into Server Pool',
            'DISCOVERY_EmptyChassisList': 'There were no Chassis identified in the selected IP Range. You may continue with discovery on the next step or go back and adjust the selected IP Ranges.',
            'DISCOVERY_IdentifyResources': 'Identify Resources',
            'DISCOVERY_IdentifyResourcesText1': 'Click <b>Add Resource Type</b> to enter the IP address(es) and credentials for the resource(s) you want to discover. Only a starting IP address is required, but to discover resources in an IP range, both starting and ending IP addresses are needed. ',
            'DISCOVERY_IdentifyResourcesText2': 'Choose the Reserved Resource State if you would like to monitor resource firmware compliance, but do not want these resources to be deployed in ASM services. These may be resources that are already deployed and in use in your environment. Choose Unmanaged if you would like to discover resources but not have ASM manage or deploy these in services. ',
            'DISCOVERY_InitialChassisConfig': 'Initial Chassis Configuration',
            'DISCOVERY_InitialChassisConfigHelp1': 'You have identified one or more chassis to discover.',
            'DISCOVERY_InitialChassisConfigHelp2': 'If the chassis is/are unconfigured or you would like ASM to initially reconfigure the chassis during discovery, check the chassis in the table below.',
            'DISCOVERY_InitialChassisConfigTitle2': 'Select Chassis for Initial Configuration',
            'DISCOVERY_InitialChassisConfigHelp3': 'These settings below will be applied to the selected chassis during the discovery process.',
            'DISCOVERY_InitialChassisConfigConnecting': 'Connecting to Chassis...',
            'DISCOVERY_IPAddressRange': 'IP Address Range',
            'DISCOVERY_PlaceholderServer': 'Mgmt IP',
            'DISCOVERY_PlaceholderStorage': 'Mgmt IP',
            'DISCOVERY_PlaceholderSwitch': 'Mgmt IP',
            'DISCOVERY_PlaceholderVCenter': 'vCenter Host IP',
            'DISCOVERY_PlaceholderSCVMM': 'SCVMM Host IP',
            'DISCOVERY_PlaceholderChassis': 'CMC IP',
            'DISCOVERY_PlaceholderOptional': 'Optional',
            'DISCOVERY_SelectServerPool': 'Select Server Pool',
            'DISCOVERY_SummaryHelp1': 'Click finish to run the discovery and inventory process.</p><p>While discovery is running a progress indicator will appear on the Dashboard in Recent Activity and in the upper right corner of the Resources page.',
            'DISCOVERY_SummaryHelp1.5': 'While discovery is running a progress indicator will appear on the Dashboard in Recent Activity and in the upper right corner of the Resources page.',
            'DISCOVERY_SummaryHelp2': 'Click finish to run the discovery, inventory and initial chassis configuration processes.',
            'DISCOVERY_SummaryHelp2.5': 'While discovery is running a progress indicator will appear on the Dashboard in Recent Activity and in the upper right corner of the Resources page.',
            'DISCOVERY_SummaryHelp3': 'Click finish to run the discovery and inventory process.',
            'DISCOVERY_SummaryHelp3.5': 'While discovery is running a progress indicator will appear in the Discovery step. Once discovery is complete you will be able to preview those resources ASM has been able to inventory in the next configuration step.',
            'DISCOVERY_SummaryHelp4': 'Click finish to run the discovery, inventory and initial chassis configuration processes.',
            'DISCOVERY_SummaryHelp4.5': 'While discovery is running a progress indicator will appear in the Discovery step. Once discovery is complete you will be able to preview those resources ASM has been able to inventory in the next configuration step.',
            'DISCOVERY_SupportedBlades': 'Supported Blades',
            'DISCOVERY_SupportedIOMs': 'Supported IOMs',
            'DISCOVERY_Title': 'Discovery Wizard',
            'DISCOVERY_WelcomeTitle': 'Welcome',
            'DISCOVERY_WelcomeText1': 'Use this wizard to discover and collect inventory data from resources within your environment. The supported resource types include chassis, servers, storage, switches, and virtual machine managers.',
            'DISCOVERY_WelcomeText2': 'Before discovering the resources, it is recommended to:',
            'DISCOVERY_WelcomeText3': '<li>Gather IP addresses and credentials to access the resources.</li><li>Make sure the resources and the virtual appliances are connected to the network</li>',
            'DISCOVERY_WelcomeText4': '* Indicates that data is mandatory.',
            'DISCOVERY_LongRunningNotice': 'The Discovery and Configuration process may take several minutes before resources are available in the Resources page.<br /><br />Are you sure you want to submit this discovery job?',
            'DISCOVERY_LongRunningNotice_NoChassis': 'The Discovery process may take several minutes before resources are available in the Resources page.<br /><br />Are you sure you want to submit this discovery job?',
            'DISCOVERY_Cancel_Confirmation': 'Are you sure you want to cancel?',

            'DISKTYPES_Any': 'Any Available',
            'DISKTYPES_First': 'First Disks',
            'DISKTYPES_Last': 'Last/Rear Disks',
            'DISKTYPES_Hdd': 'Require HDD',
            'DISKTYPES_Ssd': 'Require SSD',

            'EDIT_FIRMWARE_Default_Repository': 'Default Firmware Repository',
            'EDIT_FIRMWARE_Default_Firmware_Software_Repository': 'Default Firmware/Software Repository',
            'EDIT_FIRMWARE_THState': 'State',
            'EDIT_FIRMWARE_THRepository_Name': 'Repository Name',
            'EDIT_FIRMWARE_THSource': 'Source',
            'EDIT_FIRMWARE_THCustom_Bundles': 'Custom Bundles',
            'EDIT_FIRMWARE_View_Bundles': 'View Bundles',
            'EDIT_FIRMWARE_Add_Custom_Bundle': 'Add Custom Bundle',
            'EDIT_FIRMWARE_Bundles': 'Bundles',
            'EDIT_FIRMWARE_Components': 'Components',
            'EDIT_FIRMWARE_Created_On': 'Created On',
            'EDIT_FIRMWARE_Last_Updated': 'Last Updated',
            'EDIT_FIRMWARE_Custom_Bundles': 'Custom Bundles',
            'EDIT_FIRMWARE_Services_Affected': 'Services Affected',
            'EDIT_FIRMWARE_Delete_Confirmation': 'Are you sure you want to remove this repository?<br /><br />Warning:  If this repository is specified in a template any future deployments of that template will fail.<br /><br />NOTE:  This action will only remove the repository from ASM.  It will not affect the original source.',
            'EDIT_FIRMWARE_Delete_Tooltip': 'Delete Firmware Repository',

            'EDITPOOL_EditVirtualMac_IdentityCountToAdd': 'Number of Virtual MAC Identities to Add',
            'EDITPOOL_EditVirtualIQN_IdentityCountToAdd': 'Number of Virtual iSCSI Identities to Add',
            'EDITPOOL_EditVirtualWWPN_IdentityCountToAdd': 'Number of Virtual WWPN Identities to Add',
            'EDITPOOL_EditVirtualWWNN_IdentityCountToAdd': 'Number of Virtual WWNN Identities to Add',
            'EDITPOOL_Field_Required': 'This field is required',
            'EDITPOOL_Field_Range': 'A value greater than or equal to 0 is required',
            'EDITPOOL_Auto_Generate': 'Auto Generate Identities if needed during deployments',

            'ERROR_InvalidDate': 'Invalid Date',
            'ERROR_InvalidURL_Error': 'Invalid URL format.',
            'ERROR_InvalidIpURL_Error': 'Invalid IP or URL format.',
            'ERROR_Required_Error': 'You must enter a value for this field.',
            'ERROR_Email_Error': 'Provide a email address.',

            'FIRMWARE_UpdateInProgress': 'Firmware Update in Progress',

            //Getting Started
            'GETTINGSTARTED_systemsettings': 'Initial Appliance Setup',
            'GETTINGSTARTED_welcome': 'Welcome to Active System Manager',
            'GETTINGSTARTED_title': 'Active System Manager is Dell\'s unified management platform that enables automated delivery of IT resources, empowering users to quickly deploy infrastructure and workloads.',
            'GETTINGSTARTED_about': 'It provides additional third-party hardware support to aggregate customers\' existing heterogeneous infrastructure investments. This speeds up workload delivery and streamlines infrastructure management, enabling IT organizations to accelerate service delivery and time to value for customers.',
            'GETTINGSTARTED_instructions': 'Follow the steps below to discover resources and deploy services based on default templates.',
            'GETTINGSTARTED_instructions_initialsetup': 'Not able to proceed? Make sure you have completed the ',
            'GETTINGSTARTED_instructiontitle': 'Getting Started',
            'GETTINGSTARTED_step1': 'Step 1:',
            'GETTINGSTARTED_step2title': 'Networks',
            'GETTINGSTARTED_step2help': 'Define networks currently configured in your environment that your resources can access.',
            'GETTINGSTARTED_step2btn': 'Define Networks',
            'GETTINGSTARTED_step2': 'Step 2:',
            'GETTINGSTARTED_step3title': 'Discover',
            'GETTINGSTARTED_step3help': 'Discover resources that will be managed by Active System Manager.',
            'GETTINGSTARTED_step3btn': 'Discover Resources',
            'GETTINGSTARTED_inprogress': 'Initial Chassis Configuration in progress',
            'GETTINGSTARTED_jobrunning': 'Discovery Job Running:',
            'GETTINGSTARTED_discoveredresources': 'Discovered Resources: ',
            'GETTINGSTARTED_pendingresources': 'Pending Resources: ',
            'GETTINGSTARTED_errorresources': 'Errors: ',
            'GETTINGSTARTED_step3': 'Step 3:',
            'GETTINGSTARTED_defineexistingservices': 'Define Existing Services',
            'GETTINGSTARTED_defineexistingserviceshelp': 'Define existing ESXi services for resources that you do not want to re-configure.',
            'GETTINGSTARTED_step4': 'Step 4:',
            'GETTINGSTARTED_step4title': 'Configure',
            'GETTINGSTARTED_step4help': 'Check firmware compliance on discovered resources and configure chassis as needed.',
            'GETTINGSTARTED_step4btn': 'Configure Resources',
            'GETTINGSTARTED_step5': 'Step 5:',
            'GETTINGSTARTED_step5title': 'Templates',
            'GETTINGSTARTED_step5help': 'Create a new template or clone and edit one of the sample templates, publish and deploy a service.',
            'GETTINGSTARTED_step5btn': 'Publish Templates',
            'GETTINGSTARTED_showwelcome': 'Show welcome screen on next launch. (This welcome screen may always be accessed through your settings if needed.)',
            'GETTINGSTARTED_restorefrombackup': 'Restore From Backup',
            'GETTINGSTARTED_ShowWelcomeScreen': 'Show welcome screen on next launch.',
            'GETTINGSTARTED_ShowWelcomeScreenExplanation': '(This welcome screen may always be accessed through your settings)',
            'GETTINGSTARTED_SupportGetHelpDescription': 'Get help with racking and cabling your new hardware, or access information about setting up your controller software.',
            'GETTINGSTARTED_VisitASMSiteSupport': 'Visit our Active System Manager site on Dell.com',
            'GETTINGSTARTED_CommunityDescription': 'Access our Active System Manager Community to learn more about Dell\'s new line of unified management solutions, or to share your experience.',
            'GETTINGSTARTED_CommunityLink': 'Visit our Active System Manager Community center',

            'IMPORTTEMPLATE_Title': 'Import Template',
            'IMPORTTEMPLATE_SelectATemplate': 'Select A Template',

            'INITIALCHASSISCONFIG_InProgress': 'Initial Chassis Configuration in Progress',

            'INVENTORYUPDATE_InProgress': 'Inventory Update in Progress',

            'LOGS_Title': 'Logs',
            'LOGS_ExportAll': 'Export All',
            'LOGS_Purge': 'Purge',
            'LOGS_ViewCategories': 'View Categories',
            'LOGS_THSeverity': 'Severity',
            'LOGS_THCategory': 'Category',
            'LOGS_THDescription': 'Description',
            'LOGS_THDate': 'Date',
            'LOGS_THUser': 'User',
            'LOGS_RESOURCE_SEVERITIES_Healthy': 'Healthy',
            'LOGS_RESOURCE_SEVERITIES_Critical': 'Critical',
            'LOGS_RESOURCE_SEVERITIES_Warning': 'Warning',
            'LOGS_RESOURCE_SEVERITIES_Info': 'Info',
            'LOGS_RESOURCE_SEVERITIES_EmptyTable': 'There are no items available.',
            'LOGS_RESOURCE_SEVERITIES_ViewbySeverity': 'View by Severity',
            'LOGS_RESOURCE_SEVERITIES_ExportAll': 'Export All',
            'LOGS_RESOURCE_SEVERITIES_ComponentLogsModalTitle': '{{componentName}} Logs',

            'LISTPOOLS_Title': 'Virtual Identity Pools',
            'LISTPOOLS_THName': 'Name',
            'LISTPOOLS_THDescription': 'Description',
            'LISTPOOLS_THCreatedBy': 'Created By',
            'LISTPOOLS_THCreatedDate': 'Created Date',
            'LISTPOOLS_Detail_Heading': 'Pool : ',
            'LISTPOOLS_Tab_Summary': 'Summary',
            'LISTPOOLS_Tab_Server_Templates': 'Server Templates',
            'LISTPOOLS_Summary_LAN_Header': 'MAC',
            'LISTPOOLS_Summary_ISCSI_Header': 'IQN',
            'LISTPOOLS_Summary_WWPN_Header': 'WWPN',
            'LISTPOOLS_Summary_WWNN_Header': 'WWNN',
            'LISTPOOLS_Summary_Prefix': 'Selected Prefix',
            'LISTPOOLS_Summary_Reserved': 'Reserved',
            'LISTPOOLS_Summary_Assigned': 'Assigned',
            'LISTPOOLS_Summary_Available': 'Available',
            'LISTPOOLS_Summary_Auto_Generate': 'Auto Generate',
            'LISTPOOLS_Summary_Update_Pool_Identities': 'Update Pool Identities',
            'LISTPOOLS_Summary_Template_Useage_Name': 'Name',
            'LISTPOOLS_Summary_Template_Useage_None': 'There are no templates using this pool.',
            'LISTPOOLS_Export_Confirmation': 'Are you sure you want to export the selected pools?',
            'LISTPOOLS_Delete_Confirmation': 'Are you sure you want to delete the selected pools?',
            'LISTPOOLS_Update_Pool_Title': 'Update Pool Identities',

            'MIGRATE_SERVER_Title': 'Migrate Server(s)',
            'MIGRATE_SERVER_Help': '',
            'MIGRATE_SERVER_Current_Devices': 'Select specific servers to migrate',
            'MIGRATE_SERVER_THState': 'State',
            'MIGRATE_SERVER_THHost_IP': 'IP Address',
            'MIGRATE_SERVER_THResource_ID': 'Asset/Service Tag',
            'MIGRATE_SERVER_THModel': 'Model',
            'MIGRATE_SERVER_THServer_Pool': 'Current Server Pool',
            'MIGRATE_SERVER_THNew_Server_Pool': 'New Server Pool',
            'MIGRATE_SERVER_Migrate': 'Migrate',
            'MIGRATE_SERVER_Confirm': 'Are you sure you want to migrate the selected server(s)?<br/>' +
                '<ul><li> #from# - #to# </li></ul>',
            'MIGRATE_SERVER_Submitted': 'The server migration process has been submitted.',

            'NETWORKS_ADD_PreviouslyDeployedNetworks': 'Previously Deployed Networks',
            'NETWORKS_ADD_ResourceName': 'Resource Name',
            'NETWORKS_ADD_Networks': 'Networks',
            'NETWORKS_ADD_AvailableNetworks': 'Available Networks',
            'NETWORKS_ADD_NetworkstobeAdded': 'Networks to be Added',
            'NETWORKS_ADD_NetworkName': 'Network Name',
            'NETWORKS_ADD_SelectPortGroupStar': 'Select Port Group *',
            'NETWORKS_ADD_SelectResourcesStar': 'Select Resources *',
            'NETWORKS_ADD_Actions': 'Actions',
            'NETWORKS_ADD_Add': 'Add',
            'NETWORKS_ADD_DefineaNewNetwork': 'Define a New Network',
            'NETWORKS_ADD_NewPortGroup': 'New Port Group',
            'NETWORKS_ADD_enteraPortGroupname': 'enter a Port Group name',
            'NETWORKS_ADD_FirstselectaPortGroup': 'First, select a Port Group.',
            'NETWORKS_ADD_SelectResources': 'Select Resources',
            'NETWORKS_ADD_Remove': 'Remove',
            'NETWORKS_ADD_SelectAnAvailableNetwork': 'Select an available network above, or click Define a New Network to begin.',
            'NETWORKS_Define': 'Define',
            'NETWORKS_Edit': 'Edit',
            'NETWORKS_Delete': 'Delete',
            'NETWORKS_ExportAll': 'Export All',
            'NETWORKS_TH_Name': 'Name',
            'NETWORKS_TH_Description': 'Description',
            'NETWORKS_TH_NetworkType': 'Network Type',
            'NETWORKS_TH_VLANID': 'VLAN ID',
            'NETWORKS_TH_IPAddressSetting': 'IP Address Setting',
            'NETWORKS_TH_StartingIPAddress': 'Starting IP Address',
            'NETWORKS_TH_EndingIPAddress': 'Ending IP Address',
            'NETWORKS_TH_IPAddressesinUse': 'IP Address in Use',
            'NETWORKS_Empty': 'There are no items available.',
            'NETWORKS_Details': 'Details',
            'NETWORKS_ExportNetworkDetails': 'Export Network Details',
            'NETWORKS_LastUpdatedBy': 'Last Updated By',
            'NETWORKS_DateLastUpdated': 'Date Last Updated',
            'NETWORKS_CreatedBy': 'Created By',
            'NETWORKS_DateCreated': 'Date Created',
            'NETWORKS_SubnetMask': 'Subnet Mask',
            'NETWORKS_Gateway': 'Gateway',
            'NETWORKS_PrimaryDNS': 'Primary DNS',
            'NETWORKS_SecondaryDNS': 'Secondary DNS',
            'NETWORKS_DNSSuffix': 'DNS Suffix',
            'NETWORKS_StaticIPAddressDetails': 'Static IP Address Details',
            'NETWORKS_IPAddressesinUse': 'IP Addresses in Use',
            'NETWORKS_View': 'View',
            'NETWORKS_State': 'State',
            'NETWORKS_IPAddress': 'IP Address',
            'NETWORKS_ServiceUsingIPAddress': 'Service Using IP Address',
            'NETWORKS_ResourceUsingIPAddress': 'Resource Using IP Address',
            'NETWORKS_ConfirmDelete': 'Are you sure you want to delete this network?<br /><br />NOTE: This action will only delete the network from ASM.',
            'NETWORKSSTATE_InUse': 'In Use',
            'NETWORKSSTATE_Available': 'Available',
            'NETWORKSVIEW_All': 'All IP Addresses',
            'NETWORKSVIEW_InUse': 'IP Addresses in Use',
            'NETWORKSVIEW_Available': 'Available IP Addresses',

            'NETWORKS_Edit_CreateTitle': 'Define Network',
            'NETWORKS_Edit_EditTitle': 'Edit Network',
            'NETWORKS_Edit_CreateHelp': 'Enter the information of the networks that are currently configured in your environment that ASM and the resources can access.',
            'NETWORKS_Edit_EditHelp': '',
            'NETWORKS_Edit_Name': 'Name',
            'NETWORKS_Edit_Description': 'Description',
            'NETWORKS_Edit_NetworkType': 'Network Type',
            'NETWORKS_Edit_SelectNetworkType': 'Select Network Type...',
            'NETWORKS_Edit_VLANID': 'VLAN ID* (any number between 1 and 4094)',
            'NETWORKS_Edit_ConfigureStatic': 'Configure Static IP Address Ranges',
            'NETWORKS_Edit_GatewayHelp': 'To configure a static network, you must add at least one valid IP address range and additional required information. IP address ranges must not overlap, and should be used exclusively for the static network defined here.',
            'NETWORKS_Edit_SubnetMask': 'Subnet Mask',
            'NETWORKS_Edit_Gateway': 'Gateway',
            'NETWORKS_Edit_PrimaryDNS': 'Primary DNS',
            'NETWORKS_Edit_SecondaryDNS': 'Secondary DNS',
            'NETWORKS_Edit_DNSSuffix': 'DNS Suffix',
            'NETWORKS_Edit_AddIPAddressRange': 'Add IP Address Range',
            'NETWORKS_Edit_TH_StartingIPAddress': 'Starting IP Address',
            'NETWORKS_Edit_TH_EndingIPAddress': 'Ending IP Address',
            'NETWORKS_Edit_TableEmpty': ' There are no items available. ',
            'NETWORKS_Edit_SaveIPAddressRange': 'Save IP Address Range',
            'NETWORKS_Edit_AlertSaveIPCheck': 'The Ending IP Address must be larger than the Starting IP Address.',
            'NETWORKS_Edit_Field_Required': 'This field is required.',

            'NETWORKCONFIGURATION_Help': 'Added interfaces will be matched to interfaces on a server based on specifications you define.',
            'NETWORKCONFIGURATION_AddNewInterface': 'Add New Interface',
            'NETWORKCONFIGURATION_ConfirmDelete': 'Confirm Delete',
            'NETWORKCONFIGURATION_FabricType': 'Fabric Type',
            'NETWORKCONFIGURATION_Ethernet': 'Ethernet (NIC/CNA)',
            'NETWORKCONFIGURATION_FibreChannel': 'Fibre Channel (HBA)',
            'NETWORKCONFIGURATION_PortLayout': 'Port Layout',
            'NETWORKCONFIGURATION_Partitioning': 'Partitioning',
            'NETWORKCONFIGURATION_EnablePartitioningPorts': 'Enable Partitioning Ports (NPAR)',
            'NETWORKCONFIGURATION_Redundancy': 'Redundancy',
            'NETWORKCONFIGURATION_DuplicatePortSettings': 'Duplicate port settings and configure teaming',
            'NETWORKCONFIGURATION_Partition': 'Partition',
            'NETWORKCONFIGURATION_NetworkVLAN': 'Network (VLAN)',
            'NETWORKCONFIGURATION_MinBandwidth': 'Minimum Bandwidth (%)',
            'NETWORKCONFIGURATION_MaxBandwidth': 'Maximum Bandwidth (%)',

            'NICTYPE_2port': 'Two port, 10 gigabit',
            'NICTYPE_4port': 'Four port, 10 gigabit',
            'NICTYPE_2x1Gb2x10Gb': 'Two port, 10 gigabit and Two port, 1 gigabit',

            'PURGELOGS_Title': 'Purge Logs',
            'PURGELOGS_Instructions': 'Select the date and type of logs to purge. ',
            'PURGELOGS_OlderThanDisplay': 'Current and Older Than ',
            'PURGELOGS_Severity': 'Severity ',
            'PURGELOGS_Information': 'Information ',
            'PURGELOGS_Warning': 'Warning ',
            'PURGELOGS_Critical': 'Critical ',
            'PURGELOGS_Purge': 'Purge',
            'PURGELOGS_Field_Required': 'This field is required.',
            'PURGELOGS_Date_Error': 'Please enter a valid date.',
            'PURGELOGS_Confirmation': 'Are you sure you want to purge the log?',

            'PORTVIEW_Instructions': 'Hover and click to explore the additional information.',
            'PORTVIEW_ServerSelect': 'Port View details for:',

            'PORTVIEW_PortViewSVG_VLAN': 'VLAN - Networks',
            'PORTVIEW_PortViewSVG_ToR': 'Top of Rack (ToR) Switches',
            'PORTVIEW_PortViewSVG_IOM': 'I/O Modules',
            'PORTVIEW_PortViewSVG_Interface_Cards': 'Interface Cards (NIC/HBA)',
            'PORTVIEW_PortViewSVG_NPAR': 'NIC Partitioning (NPAR)',

            'PORTVIEW_Popover_Model': 'Model: ',
            'PORTVIEW_Popover_IP_Address': 'IP Address: ',
            'PORTVIEW_Popover_VLANS': 'VLANS',
            'PORTVIEW_Details_Connection_Details': 'Connection Details',

            'PORTVIEW_Details_NPAR': 'NIC Partitioning (NPAR) Details',
            'PORTVIEW_Details_NPAR_TH': 'NIC Partition (NPAR)',
            'PORTVIEW_Details_iSCSI_TH': 'iSCSI Enabled',
            'PORTVIEW_Details_FcOE_TH': 'FCoE Enabled',
            'PORTVIEW_Details_PXE_TH': 'PXE Enabled',
            'PORTVIEW_Details_IP_Address_TH': 'IP Address',
            'PORTVIEW_Details_MAC_Address_TH': 'MAC Address',
            'PORTVIEW_Details_WWPN_TH': 'World Wide Port Name (WWPN)',

            'PORTVIEW_Details_Interface_Card': 'Interface Card (NIC/HBA) Details',
            'PORTVIEW_Details_Location_TH': 'Location',
            'PORTVIEW_Details_Model_TH': 'Model',
            'PORTVIEW_Details_Port_TH': 'Port',
            'PORTVIEW_Details_Fabric_TH': 'Fabric',
            'PORTVIEW_Details_NPAREnabled_TH': 'NPAR Enabled',

            'PORTVIEW_Details_IOM': 'I/O Module Details',
            'PORTVIEW_Details_Host_Name_TH': 'Host Name',
            'PORTVIEW_Details_Asset_Tag_TH': 'Asset Tag/Service Tag',
            'PORTVIEW_Details_Server_Port_TH': 'Server Port',

            'PORTVIEW_Details_ToR': 'Top of Rack (ToR) Switch Details',
            'PORTVIEW_Details_Downlink_Port_TH': 'Downlink Port',
            'PORTVIEW_Details_Port_Channel_TH': 'Port Channel',

            'PORTVIEW_Details_VLAN': 'VLAN - Network Details',
            'PORTVIEW_Details_VLAN_TH': 'VLAN',
            'PORTVIEW_Details_Name_TH': 'Name',
            'PORTVIEW_Details_Description_TH': 'Description',
            'PORTVIEW_Details_Type_TH': 'Type',

            'PORTVIEW_Details_Zone': 'Network (VLAN/Zone) Details',
            'PORTVIEW_Details_Zone_Configuration_TH': 'Zone Configuration',
            'PORTVIEW_Details_Zone_TH': 'Zone',




            'RAIDCONFIGURATION_Title': 'Raid Configuration *',
            'RAIDCONFIGURATION_Basic': 'Basic',
            'RAIDCONFIGURATION_Advanced': 'Advanced',
            'RAIDCONFIGURATION_raid0': 'RAID 0',
            'RAIDCONFIGURATION_raid1': 'RAID 1',
            'RAIDCONFIGURATION_raid5': 'RAID 5',
            'RAIDCONFIGURATION_raid6': 'RAID 6',
            'RAIDCONFIGURATION_raid10': 'RAID 10',
            'RAIDCONFIGURATION_raid50': 'RAID 50',
            'RAIDCONFIGURATION_raid60': 'RAID 60',
            'RAIDCONFIGURATION_AddNewVirtualDisk': 'Add Internal Virtual Disk',
            'RAIDCONFIGURATION_EmptyVirtualDisks': 'There are no virtual disks defined.',
            'RAIDCONFIGURATION_VirtualDisk': 'Virtual Disk',
            'RAIDCONFIGURATION_RAIDLevel': 'RAID Level',
            'RAIDCONFIGURATION_NumberOfDisks': '# of Disks',
            'RAIDCONFIGURATION_DiskType': 'Disk Type',
            'RAIDCONFIGURATION_EnableGlobalHotSpares': 'Enable Global Hotspares',
            'RAIDCONFIGURATION_TotalHotSpares': 'Total # Hotspares',
            'RAIDCONFIGURATION_MinimumSSD': 'Minimum # SSDs from total hotspares',
            'RAIDCONFIGURATION_AddExternalVirtualDisk': 'Add External Virtual Disk',
            'RAIDCONFIGURATION_EnableGlobalHotspareTooltip': 'Enable Global Hotspares',

            'RESOURCE_CREATE_SERVER_POOL_CreateServerPool': 'Create Server Pool',
            'RESOURCE_CREATE_SERVER_POOL_Welcome': 'Welcome',
            'RESOURCE_CREATE_SERVER_POOL_WelcomeMessage': 'Use this wizard to add servers to a server pool and grant access rights to the users for the pools.',
            'RESOURCE_CREATE_SERVER_POOL_ServerPoolInformation': 'Server Pool Information',
            'RESOURCE_CREATE_SERVER_POOL_ServerPoolNameStar': 'Server Pool Name*',
            'RESOURCE_CREATE_SERVER_POOL_Description': 'Description',
            'RESOURCE_CREATE_SERVER_POOL_AddServers': 'Add Servers',
            'RESOURCE_CREATE_SERVER_POOL_SelectServersMessage': 'Select the servers that you want to add to the server pool.',
            'RESOURCE_CREATE_SERVER_POOL_Health': 'Health',
            'RESOURCE_CREATE_SERVER_POOL_State': 'State',
            'RESOURCE_CREATE_SERVER_POOL_ManagementIP': 'Management IP',
            'RESOURCE_CREATE_SERVER_POOL_ServiceTag': 'Service Tag',
            'RESOURCE_CREATE_SERVER_POOL_Model': 'Model',
            'RESOURCE_CREATE_SERVER_POOL_ServerPools': 'Server Pools',
            'RESOURCE_CREATE_SERVER_POOL_CPUs': 'CPUs',
            'RESOURCE_CREATE_SERVER_POOL_Memory': 'Memory',
            'RESOURCE_CREATE_SERVER_POOL_NICs': 'NICs',
            'RESOURCE_CREATE_SERVER_POOL_Location': 'Location',
            'RESOURCE_CREATE_SERVER_POOL_SelectUsersMessage': 'Select the users you want to grant access to use the server pool.',
            'RESOURCE_CREATE_SERVER_POOL_UserName': 'User Name',
            'RESOURCE_CREATE_SERVER_POOL_Domain': 'Domain',
            'RESOURCE_CREATE_SERVER_POOL_Role': 'Role',
            'RESOURCE_CREATE_SERVER_POOL_LastName': 'Last Name',
            'RESOURCE_CREATE_SERVER_POOL_FirstName': 'First Name',
            'RESOURCE_CREATE_SERVER_POOL_ViewDetails': 'View Details',
            'RESOURCE_CREATE_SERVER_POOL_AssignUsers': 'Assign Users',
            'RESOURCE_CREATE_SERVER_POOL_Summary': 'Summary',
            'RESOURCE_CREATE_SERVER_POOL_Type': 'Type',
            'RESOURCE_CREATE_SERVER_POOL_LastLogin': 'Last Login',
            'RESOURCE_CREATE_SERVER_POOL_AddUsers': '',
            'RESOURCE_EDIT_SERVER_POOL_EditServerPool': 'Edit Server Pool',

            'RESTORENOW_backupdirpath': 'Backup Directory Path and File Name',
            'RESTORENOW_backupFileDescription': 'Enter the password that is required to open the backup file.',
            'RESTORENOW_confirm_title': 'Warning',
            'RESTORENOW_confirm_text': 'Restoring will restart the system. This action will log off all current users and cancel all jobs in progress.',
            'RESTORENOW_confirm_footnote': 'The restore process will take approximately 15 minutes depending on your data connection.<br/><br/>Are you sure you want to perform a restore?',
            'RESTORENOW_confirm_userinfo': 'Logged-in Users: ',
            'RESTORENOW_confirm_jobinfo': 'In Progress Jobs: ',
            'RESTORENOW_confirm_scheduledjobinfo': 'Scheduled Jobs: ',

            'UPDATE_VIRTUAL_APPLIANCE_Description': 'Updating the appliance will restart the system. This action will log off all current users and cancel all jobs in progress.' +
             '<ul>' +
                '<li>Logged-in Users: {{numUsers}}</li>' +
                '<li>In Progress Jobs: {{numProgressJobs}}</li>' +
                '<li>Scheduled Jobs: {{numScheduledJobs}}</li>' +
                '</ul>'
            + 'The update process will take approximately 25 minutes depending on your data connection: 15 minutes to download the update and 10 minutes to apply.' +
            '<br /> <br />' +
            'Are you sure you want to perform an appliance update?',

            'SERVICES_Logs_Security': 'Security',
            'SERVICES_Logs_Appliance_Configuration': 'Appliance Configuration',
            'SERVICES_Logs_Template_Configuration': 'Template Configuration',
            'SERVICES_Logs_Network_Configuration': 'Network Configuration',
            'SERVICES_Logs_Hardware_Configuration': 'Hardware Configuration',
            'SERVICES_Logs_Monitoring': 'Monitoring',
            'SERVICES_Logs_Deployment': 'Deployment',
            'SERVICES_Logs_Licensing': 'Licensing',
            'SERVICES_Logs_Miscellaneous': 'Miscellaneous',

            'SETUPWIZARD_DefineNetworksDescription': 'Enter the information of the networks that are currently configured in your environment that ASM and the resources can access. To define networks after initial setup is complete, click <strong>Settings > Networks</strong>.',
            'SETUPWIZARD_Title': 'Setup Wizard',
            'SETUPWIZARD_WelcomeTitle': 'Welcome',
            'SETUPWIZARD_WelcomeHelp': '<p>Use this wizard to complete the initial setup before you start using Active System Manager.</p><p>Before configuring the initial setup, it is recommended to gather the following information:</p><ul><li>Time zone of the virtual appliance that hosts Active System Manager </li><li> IP addresses of at least two NTP servers </li><li>(Optional) IP address, port, and credentials of a proxy server </li><li> (Optional) Identify the networks in your environment for ASM to access.</li></ul><p>If you do not have all the information required to complete the Initial Setup wizard, you can cancel and continue later.  The information you saved on each page of the wizard will be retained.</p><p>To change the basic settings after initial setup is complete, click <b>Settings</b> > <b>Virtual Appliance Management</b>.  To define the networks after initial setup is complete, click <b>Settings </b> > <b>Networks.</b></p><p>* Indicates that data is mandatory. </p>',
            'SETUPWIZARD_LicensingTitle': 'Licensing',
            'SETUPWIZARD_LicensingHelp': 'Licensing Info',
            'SETUPWIZARD_LicensingUpload': 'Upload License',
            'SETUPWIZARD_LicensingType': 'Type',
            'SETUPWIZARD_LicensingTotalNodes': 'Total Resources',
            'SETUPWIZARD_LicensingExpirationDate': 'Expiration Date',
            'SETUPWIZARD_ServiceTag': 'DELL ASM Service Tag',
            'SETUPWIZARD_NTPSettingsTitle': 'Time Zone and NTP Settings',
            'SETUPWIZARD_NTPSettingsHelp': 'Set the time zone of the virtual appliance that hosts Active System Manager and configure the NTP server.<br><br>Configuring NTP will adjust your ASM system time. If the time is adjusted forward it will end your current user session. The time will sync 5-10 minutes after this step. If this occurs, log back in and continue with the setup process.<br>',
            'SETUPWIZARD_NTPSettingsTimeZone': 'Time Zone*',
            'SETUPWIZARD_NTPSettingsPreferredServer': 'Preferred NTP Server*',
            'SETUPWIZARD_NTPSettingsSecondaryServer': 'Secondary NTP Server (optional)',
            'SETUPWIZARD_ProxySettingsTitle': 'Proxy Settings',
            'SETUPWIZARD_ProxySettingsHelp': '<p>If your environment uses a proxy server for external communication, click <b>Use a proxy server</b> and then enter the configuration details.</p>',
            'SETUPWIZARD_ProxySettingsEnableProxy': 'Use a proxy server',
            'SETUPWIZARD_ProxySettingsServerAddress': 'Server IP Address*',
            'SETUPWIZARD_ProxySettingsPort': 'Port*',
            'SETUPWIZARD_ProxySettingsUseCredentials': 'Use proxy credentials',
            'SETUPWIZARD_ProxySettingsUserName': 'User Name*',
            'SETUPWIZARD_ProxySettingsPassword': 'Password*',
            'SETUPWIZARD_ProxySettingsVerifyPassword': 'Confirm Password*',
            'SETUPWIZARD_ProxySettingsProxyConnection': 'Test Proxy Connection',
            'SETUPWIZARD_ProxySettingsProxyConnectionSuccess': 'The connection to the proxy server was successful.',
            'SETUPWIZARD_ProxySettingsTestConnection': 'Testing Proxy Connection',
            'SETUPWIZARD_DHCPSettingsTitle': 'DHCP Settings',
            'SETUPWIZARD_DHCPSettingsHelp': '',
            'SETUPWIZARD_DHCPSettingsEnable': 'Enable DHCP/PXE Server',
            'SETUPWIZARD_DHCPSettingsSubnet': 'Subnet*',
            'SETUPWIZARD_DHCPSettingsNetMask': 'Netmask*',
            'SETUPWIZARD_DHCPSettingsStartingIP': 'DHCP Scope Starting IP Address*',
            'SETUPWIZARD_DHCPSettingsEndingIP': 'DHCP Scope Ending IP Address*',
            'SETUPWIZARD_DHCPSettingsDefaultLeaseTime': 'Default Lease Time* (DD:hh:mm:ss)',
            'SETUPWIZARD_DHCPSettingsMaxLeaseTime': 'Max Lease Time*  (DD:hh:mm:ss)',
            'SETUPWIZARD_DHCPSettingsGateway': 'Default Gateway',
            'SETUPWIZARD_DHCPSettingsDNS': 'DNS Server',
            'SETUPWIZARD_DHCPSettingsDomain': 'Domain',
            'SETUPWIZARD_SummaryTitle': 'Summary',
            'SETUPWIZARD_SummaryHelp': 'Review the summary and click <b>Finish</b> to complete the initial setup..',
            'SETUPWIZARD_SummaryNoTimeZone': 'Time Zone not set',
            'SETUPWIZARD_SummaryProxySettings': 'Proxy Settings',
            'SETUPWIZARD_SummaryNoProxySettings': 'Do not use a proxy server',
            'SETUPWIZARD_SubmitInfo': 'Are you sure you want to submit this information?',



            'SETTINGS_ActiveDirectoryUsers': 'Users',
            'SETTINGS_ActiveDirectoryAll': 'All',
            'SETTINGS_ActiveDirectoryGroups': 'Groups',
            'SETTINGS_ActiveDirectoryView': 'View',
            'SETTINGS_ActiveDirectoryEnterName': 'Enter name or email address',
            'SETTINGS_ActiveDirectoryItemCount': 'Item(s) Found. Displaying 1 -',
            'SETTINGS_ActiveDirectorySelectedItems': 'Selected Items:',
            'SETTINGS_ActiveDirectoryImported': 'Users/Groups to be imported',
            'SETTINGS_ActiveDirectoryUserRole': 'User Role',
            'SETTINGS_ActiveDirectoryFindUser': 'Find a User/Group',
            'SETTINGS_ActiveDirectoryFindUser_Data_Entry_Error': '3 or more characters are required',
            'SETTINGS_ActiveDirectoryFindUser_Data_Entry_Hint': '3 or more characters are required to perform a search for User/Group',
            'SETTINGS_ActiveDirectoryNoUsersOrGroups': 'No Users or Groups found matching your criteria',
            'SETTINGS_ActiveDirectorySelectARoleAlt': 'Select a Role...',
            'SETTINGS_ActiveDirectorySelectARole': 'Select a Role',
            'SETTINGS_ActiveDirectoryDirectorySrc': 'Directory Source',
            'SETTINGS_ActiveDirectoryAvailableUsers': 'Available Users/Groups',
            'SETTINGS_ActiveDirectoryDistinguishedName': 'Distinguished Name',
            'SETTINGS_MembersFound': 'Member(s) Found',


            'SETTINGS_DirectoryServicesCreateDir': 'Create Directory Service',
            'SETTINGS_DirectoryServicesEditDir': 'Edit Directory Service',
            'SETTINGS_DirectorySerivcesConfirmDir': 'Are you sure you want to submit this information?',
            'SETTINGS_DirectoryServicesNoDirAdded': 'No directories have been added',
            'SETTINGS_DirectoryServiceWizardTypeOfDir': 'Type of Directory Service',
            'SETTINGS_DirectoryServicesWizardExample': '(Example: user@domain)',
            'SETTINGS_DirectoryServicesWizardNameTooltip': 'Only alphanumeric characters, hyphens, and underscores are valid. This value will be the domain value when logging into the WebUI',
            'SETTINGS_DirectoryServicesWizardSelectDirectoryCaption': 'Select Directory Type',
            'SETTINGS_DirectoryServicesWizardConfirmPassword': 'Confirm Password',
            'SETTINGS_DirectoryServicesWizardPassword_Match': 'Please enter the same value again.',
            'SETTINGS_DirectoryServicesWizardIP_Format': 'Invalid IP format.',
            'SETTINGS_DirectoryServicesWizardBaseDN': 'Base DN',
            'SETTINGS_DirectoryServicesWizardUserAttribute': 'User Name Attribute',
            'SETTINGS_DirectoryServicesWizardFirstNameAttr': 'First Name Attribute',
            'SETTINGS_DirectoryServicesWizardLastNameAttr': 'Last Name Attribute',
            'SETTINGS_DirectoryServicesWizardEmailAttr': 'Email Attribute',
            'SETTINGS_DirectoryServicesWizardEditDescription': 'Click Save to update Directory Services with the following settings. If you want to change the settings, click desired settings hyperlink.',
            'SETTINGS_DirectoryServicesWizardCreateDescription': 'Click Finish to create Directory Services with the following settings. If you want to change the settings, click Back.',
            'SETTINGS_DirectoryServicesWizardConnectionSettings': 'Connection Settings',
            'SETTINGS_DirectoryServicesWizardAttrSettings': 'Attribute Settings',

            'SETTINGS_USERS_SelectARole': 'Select a Role...',
            'SETTINGS_Users': 'Users',
            'SETTINGS_AddOnModule': 'Add-On Modules',
            'SETTINGS_AllUsers': 'All Users',
            'SETTINGS_ActiveDirectoryGroup': 'Active Directory Group',
            'SETTINGS_ConfirmJobCancel': 'Are you sure you want to cancel these jobs?',
            'SETTINGS_UserDeleteConfirm': 'Are you sure you want to delete the selected user(s)?',
            'SETTINGS_BackupRestore': 'Backup and Restore',
            'SETTINGS_CredentialsManagement': 'Credentials Management',
            'SETTINGS_CurrentPassword': 'Current Password',
            'SETTINGS_ConfirmPassword': 'Confirm Password',
            'SETTINGS_Password_Match': 'Please enter the same value again.',
            'SETTINGS_Enter_Login_Password': 'Please enter the same password that you used to log into the application',
            'SETTINGS_CreateUser': 'Create User',
            'SETTINGS_DirectoryServices': 'Directory Services',
            'SETTINGS_DirectoryType': 'Directory Type',
            'SETTINGS_DeleteDirectory': 'Are you sure you want to delete the selected Directory Service(s)?',
            'SETTINGS_EditUser': 'Edit User',
            'SETTINGS_EnableUser': 'Enable User',
            'SETTINGS_FilterByGroup': 'Filter by Group',
            'SETTINGS_GettingStarted': 'Getting Started',
            'SETTINGS_Jobs': 'Job Name',
            'SETTINGS_HostIpAddress': 'Host IP Address',
            'SETTINGS_ImportActiveDirectoryUsers': 'Import Active Directory Users',
            'SETTINGS_InUseTemplates': 'In Use By Templates',
            'SETTINGS_InUseServices': 'In Use By Services',
            'SETTINGS_InUserServices': 'Identify a user or group of users to be imported.',
            'SETTINGS_NoJobs': 'There are currently no jobs scheduled or running.',
            'SETTINGS_Logs': 'Logs',
            'SETTINGS_Networks': 'Networks',
            'SETTINGS_NoEmail': 'No available email',
            'SETTINGS_NoUsersAdded': 'No users have been added',
            'SETTINGS_NoPhoneNumber': 'No available phone number',
            'SETTINGS_EnterValidEmail': 'Please enter a valid email address.',
            'SETTINGS_CurrentUserPassword': 'Password for the currently logged in user',
            'SETTINGS_Repositories': 'Repositories',
            'SETTINGS_RoleRequired': 'Role Required',
            'SETTINGS_SelectedUser': 'Selected User:',
            'SETTINGS_TimeElapsed': 'Time Elapsed',
            'SETTINGS_aday': 'a day',
            'SETTINGS_numDays': '{{number}} days',
            'SETTINGS_anhour': 'an hour',
            'SETTINGS_numHours': '{{number}} hours',
            'SETTINGS_amimute': 'a minute',
            'SETTINGS_numMinutes': '{{number}} minutes',
            'SETTINGS_InitialApplianceSetup': 'Initial Appliance Setup',
            'SETTINGS_VirtualIdPools': 'Virtual Identity Pools',
            'SETTINGS_AddOnModuleDescription': 'Add-on modules that are currently in use by one or more templates cannot be deleted.',
            'SETTINGS_AddModule': 'Add Module',
            'SETTINGS_DeleteConfirmation': 'Are you sure you want to delete this add-on module?',
            'SETTINGS_NoModules': 'No modules have been added',
            'SETTINGS_UploadedBy': 'Uploaded By',
            'SETTINGS_UploadedOn': 'Uploaded On',
            'SETTINGS_ChooseFile': 'Choose a file to upload, and then click Save.',
            'SETTINGS_VirtualApplianceManagement': 'Virtual Appliance Management',

            'SETTINGS_VirtualApplianceManagement_Update_Not_Required': 'No Update Required',
            'SETTINGS_VirtualApplianceManagement_Update_Warning': 'You are currently on the latest version of the appliance.',
            'SETTINGS_VirtualApplianceManagement_Update_Current_Version': 'Current Version:',
            'SETTINGS_VirtualApplianceManagement_Update_Confirm': 'Do you still want to continue and force an update?',

            'SETTINGS_UpdateVirtualAppliance': 'Update Virtual Appliance',
            'SETTINGS_GenerateTroubleshoot': 'Generate Troubleshooting Bundle',
            'SETTINGS_TimeZoneNTPSettings': 'Time Zone and NTP Settings',
            'SETTINGS_TimeZone': 'Time Zone',
            'SETTINGS_PreferredNTPServer': 'Preferred NTP Server',
            'SETTINGS_SecondaryNTPServer': 'Secondary NTP Server',
            'SETTINGS_UpdateRepositoryPath': 'Update Repository Path',
            'SETTINGS_VirtualAppliance': 'Virtual Appliance',
            'SETTINGS_CurrentVirtualApplianceVersion': 'Current Virtual Appliance Version',
            'SETTINGS_CurrentVersion': 'Current Version',
            'SETTINGS_AvailableVirtualApplianceVersion': 'Available Virtual Appliance Version',
            'SETTINGS_RepositoryPath': 'Repository Path',
            'SETTINGS_ReleaseNotesOnFollowingPage': 'Note: Release notes for the upgrade can be found on the following page:',
            'SETTINGS_releaseNotesLink': 'http://support.dell.com/repository',
            'SETTINGS_ProxyServerDetails': 'Proxy Server Details',
            'SETTINGS_UseHTTPProxySettings': 'Use HTTP Proxy Settings',
            'SETTINGS_ServerAddressIpHost': 'Server Address (IP or Hostname)',
            'SETTINGS_ApplianceManagementServerAddress': '',
            'SETTINGS_Port': 'Port',
            'SETTINGS_Enabled': 'Enabled',
            'SETTINGS_Disabled': 'Disabled',
            'SETTINGS_Monitoring': 'Monitoring',
            'SETTINGS_DestinationIPAddress': 'Destination IP Address',
            'SETTINGS_CommunityString': 'Community String',
            'SETTINGS_EmailAlertSettings': 'Email Alert Settings',
            'SETTINGS_SMTPServer': 'SMTP Server',
            'SETTINGS_SourceEmailName': 'Source Email Name',
            'SETTINGS_DestinationEmailAddress': 'Destination Email Address',
            'SETTINGS_NoDestinationEmailsHaveBeenEntered': 'No destination emails have been entered.',
            'SETTINGS_NoTrapSettingsHaveBeenEntered.': 'No trap settings have been entered.',
            'SETTINGS_SSLCertificates': 'SSL Certificates',
            'SETTINGS_GenerateSigningRequest': 'Generate Certificate Signing Request',
            'SETTINGS_DownloadCertificateSigReq': 'Download Certificate Signing Request',
            'SETTINGS_CertificateDetails': 'Certificate Details',
            'SETTINGS_IssuedTo': 'Issued To',
            'SETTINGS_IssuedBy': 'Issued By',
            'SETTINGS_ValidFrom': 'Valid From',
            'SETTINGS_ValidTo': 'Valid To',
            'SETTINGS_Add': 'Add',
            'SETTINGS_Edit': 'Edit',
            'SETTINGS_LicenseType': 'License Type',
            'SETTINGS_NumberofResources': 'Number of Resources',
            'SETTINGS_NumberofUsedResources': 'Number of Used Resources',
            'SETTINGS_NumberofAvailableResources': 'Number of Available Resources',
            'SETTINGS_Upload': 'Upload',
            'SETTINGS_LicenseManagement': 'License Management',
            'SETTINGS_ASMServiceTag': 'Dell ASM Service Tag',
            'SETTINGS_ASMServiceTag_Help': 'Enter Dell Active System Manager support Service Tag, and then click Save.',

            'SETTINGS_LongSetTimeMessage': 'Set the time zone of the virtual appliance that hosts Active System Manager and configure the NTP server.',
            'SETTINGS_LongSetTimeMessage2': 'WARNING:  Make sure the information entered about NTP server and time is correct before you click Save. If not, all the time stamps will be affected.',
            'SETTINGS_Save': 'Save',
            'SETTINGS_Cancel': 'Cancel',
            'SETTINGS_EnterPathParagraph': 'Enter the path to the local repository that contains the upgrade file.',
            'SETTINGS_EditProxyDetailsParagraph': 'Enter the details of the proxy server that you want to use for external communication.',
            'SETTINGS_PasswordRequired': 'A password is required',
            'SETTINGS_PasswordMatch': 'Passwords must match',
            'SETTINGS_VerifiedPassword': 'A verified password is required',
            'SETTINGS_UseProxyCredentials': 'Use proxy credentials',
            'SETTINGS_UserName': 'User Name',
            'SETTINGS_Password': 'Password',
            'SETTINGS_TestProxy': 'Test Proxy Connection',
            'SETTINGS_SummaryProxySettings': 'Proxy Settings',
            'SETTINGS_DHCPSettings': 'DHCP Settings',
            'SETTINGS_SelectTimeZone': 'Select Time Zone...',

            'SETTINGS_DHCPSettingsEnable': 'Enable DHCP/PXE Server',
            'SETTINGS_DHCPSettingsSubnet': 'Subnet*',
            'SETTINGS_DHCPSettingsNetMask': 'Netmask*',
            'SETTINGS_DHCPSettingsStartingIP': 'DHCP Scope Starting IP Address*',
            'SETTINGS_DHCPSettingsEndingIP': 'DHCP Scope Ending IP Address*',
            'SETTINGS_DHCPSettingsDefaultLeaseTime': 'Default Lease Time* (DD:hh:mm:ss)',
            'SETTINGS_DHCPSettingsMaxLeaseTime': 'Max Lease Time*  (DD:hh:mm:ss)',
            'SETTINGS_DHCPSettingsGateway': 'Default Gateway',
            'SETTINGS_DHCPSettingsDNS': 'DNS Server',
            'SETTINGS_DHCPSettingsDomain': 'Domain',
            'SETTINGS_UploadSSLCertificate': 'Upload SSL Certificate',
            'SETTINGS_SSLInstructions': 'Enter the details of the Active System Manager virtual appliance and click Generate. Active System Manager will use this information to generate a Certificate Signing Request (CSR).',
            'SETTINGS_SSLDistinguishedDomain': 'Distinguished Name (www.domain.com)*',
            'SETTINGS_BusinessName': 'Business Name*',
            'SETTINGS_DepartmentName': 'Department Name',
            'SETTINGS_Locality': 'Locality (Town/City)*',
            'SETTINGS_State': 'State (Province/Region)*',
            'SETTINGS_Country': 'Country*',
            'SETTINGS_Email': 'Email*',
            'SETTINGS_SSLModalDownloadCert': 'Download Certificate Signing Request',
            'SETTINGS_SelectaCountry': 'Select a Country',
            'SETTINGS_Generate': 'Generate',
            'SETTINGS_BrowseAndSave': 'Click Browse, select a valid SSL certificate, and then click Save.',
            'SETTINGS_SSLCert': 'SSL Certificate',
            'SETTINGS_AddLicense': 'Add License',
            'SETTINGS_AddLicenseDescription': 'Select Choose File to upload new or additional license. If additional, the resources will be added to your current total resources.',
            'SETTINGS_UploadLicense': 'Upload License',
            'SETTINGS_Type': 'Type',
            'SETTINGS_TotalResources': 'Total Resources',
            'SETTINGS_ExpirationDate': 'Expiration Date',
            'SETTINGS_CertSignRequest': 'Certificate Signing Request',
            'SETTINGS_EditServiceTag': 'Edit Service Tag',
            'SETTINGS_Close': 'Close',
            'SETTINGS_CertDownloadInstructions': 'Copy the text below, and submit it to a certificate authority to receive a valid SSL certificate.',
            'SETTINGS_UploadingWarning': 'Uploading the certificate will restart the system. This action will log off all current users and cancel all jobs in progress.',
            'SETTINGS_LoggedInusers': 'Logged-in Users',
            'SETTINGS_InProgressJobs': 'In Progress Jobs',
            'SETTINGS_ScheduledJobs': 'Scheduled Jobs',
            'SETTINGS_SureYouWantToUploadSSL': 'Are you sure you want to upload the certificate?',
            'SETTINGS_Yes': 'Yes',
            'SETTINGS_No': 'No',
            'SETTINGS_TestSuccessful': 'The connection to the proxy server was successful.',
            'SETTINGS_Repositories_Repositories': 'Repositories',
            'SETTINGS_Repositories_OSImageRepositories': 'OS Image Repositories',
            'SETTINGS_Repositories_Firmware': 'Firmware',
            'SETTINGS_Repositories_FirmwareSoftwareRepositories': 'Firmware/Software Repositories',
            'SETTINGS_Repositories_State': 'State',
            'SETTINGS_Repositories_SourcePath': 'Source Path',
            'SETTINGS_Repositories_InUse': 'In Use',
            'SETTINGS_Repositories_AvailableActions': 'Available Actions',
            'SETTINGS_Repositories_Delete': 'Delete',
            'SETTINGS_Repositories_SelectAction': 'Select an Action',
            'SETTINGS_Repositories_Edit': 'Edit',
            'SETTINGS_Repositories_Resynchronize': 'Resynchronize',
            'SETTINGS_Repositories_ConfirmDeleteMessage1': 'Are you sure you want to remove this repository?',
            'SETTINGS_Repositories_ConfirmDeleteMessage2': 'Warning: If this repository is specified in a template any future deployments of that template will fail.',
            'SETTINGS_Repositories_ConfirmDeleteMessage3': 'NOTE: This action will only remove the repository from ASM. It will not affect the original source.',
            'SETTINGS_Repositories_ResyncMessage': 'Please enter the user name and password for the selected OS repository.',
            'SETTINGS_Repositories_Name': 'Repository Name*',
            'SETTINGS_Repositories_ImageTypeStar': 'Image Type*',
            'SETTINGS_Repositories_ImageType': 'Image Type',
            'SETTINGS_Repositories_Path': 'Source Path and Filename*',
            'SETTINGS_Repositories_UserName': 'User Name',
            'SETTINGS_Repositories_EditOSImageRepo': 'Edit OS Image Repository',
            'SETTINGS_Repositories_Save': 'Save',
            'SETTINGS_Repositories_Add': 'Add',
            'SETTINGS_Repositories_Cancel': 'Cancel',
            'SETTINGS_Repositories_TestConnection': 'Test Connection',
            'SETTINGS_Repositories_SelectImageType': 'Select An Image Type',
            'SETTINGS_Repositories_imagetype_sles11': 'SuSE Enterprise Linux Server 11',
            'SETTINGS_Repositories_imagetype_sles12': 'SuSE Enterprise Linux Server 12',
            'SETTINGS_Repositories_imagetype_vmware': 'vmware_esxi',
            'SETTINGS_Repositories_imagetype_redhat': 'redhat',
            'SETTINGS_Repositories_imagetype_redhat7': 'redhat7',
            'SETTINGS_Repositories_imagetype_windows2008': 'windows2008',
            'SETTINGS_Repositories_imagetype_windows2012': 'windows2012',
            'SETTINGS_Repositories_TestSuccess': 'The test was successful',
            'SETTINGS_Repositories_TestFailed': 'The test Failed',
            'SETTINGS_Repositories_Success': 'Success',
            'SETTINGS_Repositories_Failure': 'Failure',
            'SETTINGS_Repositories_Confirm': 'Confirm',
            'SETTINGS_Repositories_Yes': 'Yes',
            'SETTINGS_Repositories_No': 'No',
            'SETTINGS_Repositories_ResyncOSRepo': 'Resynchronize OS Repository',
            'SETTINGS_Repositories_True': 'True',
            'SETTINGS_Repositories_False': 'False',
            'SETTINGS_Repositories_Select': 'Select',
            'SETTINGS_Repositories_Error': 'Error',
            'SETTINGS_Repositories_Available': 'Available',
            'SETTINGS_Repositories_Pending': 'Pending',
            'SETTINGS_Repositories_Copying': 'Copying',
            'SETTINGS_Repositories_AddFirmwareRepository': 'Add Firmware Repository',
            'SETTINGS_Repositories_ImportASMRec': 'Import ASM\'s recommended repository from ftp.dell.com',
            'SETTINGS_Repositories_Loadrepositoryfromnetworkpath': 'Load repository from network path',
            'SETTINGS_Repositories_Loadrepositoryfromlocaldrive': 'Load repository from local drive',
            'SETTINGS_Repositories_FilepathStar': 'File path* ',
            'SETTINGS_Repositories_Username': 'User Name',
            'SETTINGS_Repositories_Password': 'Password',
            'SETTINGS_RepositSETTINGS_Repositories_Filepathories_': '',
            'SETTINGS_Repositories_MakeDefault': 'Make this the default firmware repository for compliance checking',
            'SETTINGS_Repositories_OptionalUN': 'Username is optional and is only used if specifying a SIFS share.',
            'SETTINGS_Repositories_OptionalPW': 'Password is optional and is only used if specifying a SIFS share.',
            'SETTINGS_Repositories_FilePathExample': 'CIFS:\\\\192.168.2.1\\LABisos\\ASMCatalog.xml NFS:192.168.0.1:/var/nfs/ASMCatalog.xml',
            'SETTINGS_Repositories_AddCustomBundle': 'Add Custom Bundle',
            'SETTINGS_Repositories_Repository': 'Repository',
            'SETTINGS_Repositories_CustomBundleDescription': 'A custom bundle enables compliance for storage in addition to compliance and update for switches not already present in the selected repository.  Uploading of switch firmware is not required for compliance only.',
            'SETTINGS_Repositories_NameStar': 'Name*',
            'SETTINGS_Repositories_Description': 'Description',
            'SETTINGS_Repositories_DeviceTypeStar': 'Device Type*',
            'SETTINGS_Repositories_DeviceModelStar': 'Device Model*',
            'SETTINGS_Repositories_VersionStar': 'Version*',
            'SETTINGS_Repositories_CriticalityStar': 'Criticality*',
            'SETTINGS_Repositories_FirmwareVersionToolTip': 'Version should include parenthesis. Sample: 9:5(0.1)',
            'SETTINGS_Repositories_ExistingFileName': 'Existing File Name',
            'SETTINGS_Repositories_UploadFirmware': 'Upload Firmware',
            'SETTINGS_Repositories_Close': 'Close',
            'SETTINGS_Repositories_Urgent': 'Urgent',
            'SETTINGS_Repositories_Recommended': 'Recommended',
            'SETTINGS_Repositories_Optional': 'Optional',

            'SERVERPOOLS_Name': 'Server Pool Name',
            'SERVERPOOLS_NICs': 'NICs',
            'SERVERPOOLS_NumServers': '# Servers',
            'SERVERPOOLS_NumUsers': '# Users',
            'SERVERPOOLS_RemoveConfirm': 'Are you sure you want to remove the selected server pools?',

            'SERVICES_NoPublishedTemplates': "There are no published templates to deploy",
            'SERVICES_ExistingServiceConfirmationMessage' : 'Are you sure you would like to submit this information?',

            'SERVICE_ADD_EXISTING_SERVICE_Title': 'Add Existing Service',
            'SERVICE_ADD_EXISTING_SERVICE_Cancel_Confirmation': 'Are you sure you want to cancel?',

            'SERVICE_APPLY_FIRMWARE_UPDATES_Title': 'Apply Server Firmware Updates',
            'SERVICE_APPLY_RESOURCE_UPDATES_Title': 'Apply Resource Updates',
            'SERVICE_APPLY_FIRMWARE_UPDATES_Cancel_Confirmation': 'Are you sure you want to cancel?',

            'SERVICE_DELETE_SERVICE': 'Are you sure you want to delete this service?',

            'SERVICE_DETAIL_Title': 'Details',
            'SERVICE_DETAIL_Install_Order': 'Install Order',
            'SERVICE_DETAIL_Service_Details': 'Service Details',
            'SERVICE_DETAIL_Port_View': 'Port View',

            'SERVICE_DETAIL_Name': 'Name',
            'SERVICE_DETAIL_Stop_Managing_Applications': 'Stop Managing Applications',
            'SERVICE_DETAIL_Legend_Label': 'Component Deployment State',
            'SERVICE_DETAIL_Legend_Healthy': 'Deployed',
            'SERVICE_DETAIL_Legend_Pending': 'In Progress',
            'SERVICE_DETAIL_Legend_Warning': 'Warning',
            'SERVICE_DETAIL_Legend_Critical': 'Critical',
            'SERVICE_DETAIL_Legend_Cancelled': 'Cancelled',
            'SERVICE_DETAIL_Topology_Help': '[ Click on a component icon above to view its related deployment details. ]',
            'SERVICE_DETAIL_Virtual_Machines': 'Virtual machines',
            'SERVICE_DETAIL_Virtual_Machines_THComponent_Name': 'Component Name',
            'SERVICE_DETAIL_Virtual_Machines_THHost_Name': 'Hostname',
            'SERVICE_DETAIL_Virtual_Machines_THOS_Type': 'OS Type',
            'SERVICE_DETAIL_Virtual_Machines_THCPUs': 'CPUs',
            'SERVICE_DETAIL_Virtual_Machines_THDisk_Size': 'Disk Size',
            'SERVICE_DETAIL_Virtual_Machines_THMemory': 'Memory',

            'SERVICE_DETAIL_Clusters': 'Clusters',
            'SERVICE_DETAIL_Clusters_THComponent_Name': 'Component Name',
            'SERVICE_DETAIL_Clusters_THHost_IP': 'IP Address',
            'SERVICE_DETAIL_Clusters_THResource_ID': 'Asset/Service Tag',

            'SERVICE_DETAIL_Physical_Servers': 'Physical Servers',
            'SERVICE_DETAIL_Physical_Servers_THComponent_Name': 'Component Name',
            'SERVICE_DETAIL_Physical_Servers_THHost_Name': 'Hostname',
            'SERVICE_DETAIL_Physical_Servers_THHost_IP': 'IP Address',
            'SERVICE_DETAIL_Physical_Servers_THHypervisor_IP': 'OS IP Address',
            'SERVICE_DETAIL_Physical_Servers_THResource_ID': 'Asset/Service Tag',

            'SERVICE_DETAIL_Storage_THComponent_Name': 'Component Name',
            'SERVICE_DETAIL_Storage_THHost_IP': 'IP Address',
            'SERVICE_DETAIL_Storage_THResource_ID': 'Asset/Service Tag',
            'SERVICE_DETAIL_Storage_Volume_Name': 'Volume: ',
            'SERVICE_DETAIL_Storage_Volume_Size': 'Size: ',

            'SERVICE_DETAIL_Service_Information': 'Service Information',
            'SERVICE_DETAIL_EditServiceInformation': 'Edit Service Information',
            'SERVICE_DETAIL_EditServiceHelpText': 'Edit Service Information',
            'SERVICE_DETAIL_EditService_ServiceName': 'Service Name*',
            'SERVICE_DETAIL_EditService_ServiceDescription': 'Service Description',
            'SERVICE_DETAIL_EditService_ManageServerFirmware': 'Manage Server Firmware',
            'SERVICE_DETAIL_EditService_UseFirmwareRepository': 'Use Firmware / Software Repository',
            'SERVICE_DETAIL_EditService_ManageServicePermissions': 'Manage Service Permissions',
            'SERVICE_DETAIL_EditService_GrantPermissions': 'In addition to all Admins, grant Standard Users access to this service',
            'SERVICE_DETAIL_EditService_AllStandardUsers': 'All Standard Users',
            'SERVICE_DETAIL_EditService_SpecificStandardUsers': 'Specific Standard Users',
            'SERVICE_DETAIL_EditService_AddUsers': 'Add User(s)',
            'SERVICE_DETAIL_EditService_RemoveUsers': 'Remove User(s)',
            'SERVICE_DETAIL_EditService_AssignUsers_Title': 'Add User(s)',
            'SERVICE_DETAIL_EditService_AssignUsers_Instructions': 'Select which users will have access to this service.',
            'SERVICE_DETAIL_EditService_AssignUsers_THName': 'Name',
            'SERVICE_DETAIL_EditService_AssignUsers_THRold': 'Role',
            'SERVICE_DETAIL_EditService_AssignUsers_THLastName': 'Last Name',
            'SERVICE_DETAIL_EditService_AssignUsers_THFirstName': 'First Name',
            'SERVICE_DETAIL_EditService_AssignUsers_TableEmpty': ' There are no items available. ',
            'SERVICE_DETAIL_EditService_Field_Required': 'This field is required.',
            'SERVICE_DETAIL_HealthToolTip': 'Aggregate view of the service state comprised of health, firmware compliance, and deployment status of the underlying resources that make up a service.<br/>' +
                    'Service states include:' + '<br/><br/>' +
                    '· Healthy – Successful deployment and compliant with the desired firmware levels.<br/>' +
                    '· In Progress – The deployment is still in progress.<br/>' +
                    '· Warning – A server is no longer compliant with the desired firmware level, or a server or storage array has a health status of warning.<br/>' +
                    '· Error – The deployment process failed, a server or storage array has a resource state of “error”, or all server or storage components in the service are in a<br/>' +
                    '  warning state.<br/>' +
                    '· Cancelled – The deployment has been cancelled by the user, and is waiting to either be retried or deleted.',
            'SERVICE_DETAIL_UpdateRequired': 'You must first upgrade existing components.',
            'SERVICE_DETAIL_Overall_Service_Health': 'Overall Service Health',
            'SERVICE_DETAIL_Resource_Health': 'Resource Health',
            'SERVICE_DETAIL_Compliance': 'Compliance',
            'SERVICE_DETAIL_Deployment_State': 'Deployment State',
            'SERVICE_DETAIL_Deployed_By': 'Deployed By',
            'SERVICE_DETAIL_Deployed_On': 'Deployed On',
            'SERVICE_DETAIL_Reference_Template': 'Reference Template',
            'SERVICE_DETAIL_Reference_Firmware_Repository': 'Reference Firmware Repository',
            'SERVICE_DETAIL_User_Permissions': 'User Permissions',
            'SERVICE_DETAIL_Service_Actions': 'Service Actions',
            'SERVICE_DETAIL_Update_Inventory': 'Update Inventory',
            'SERVICE_DETAIL_View_All_Settings': 'View All Settings',
            'SERVICE_DETAIL_Generate_Troubleshoot_Bundle': 'Generate Troubleshooting Bundle',
            'SERVICE_DETAIL_ViewComplianceReportToolTip': "View Firmware/Software Compliance Report",
            'SERVICE_DETAIL_Resource_Actions': 'Resource Actions',
            'SERVICE_DETAIL_Update_Components': 'Upgrade Components',
            'SERVICE_DETAIL_Adjust_Resources': 'Add Resources',
            'SERVICE_DETAIL_Add_Application': 'Applications',
            'SERVICE_DETAIL_Add_VM': 'VM',
            'SERVICE_DETAIL_Add_Cluster': 'Cluster',
            'SERVICE_DETAIL_Add_Server': 'Server',
            'SERVICE_DETAIL_Add_Storage': 'Storage',
            'SERVICE_DETAIL_Add_Network': 'Network',
            'SERVICE_DETAIL_Migrate': 'Migrate Server(s)',
            'SERVICE_DETAIL_Delete_Resource': 'Delete Resources',
            'SERVICE_DETAIL_Firmware_Actions': 'Firmware Actions',
            'SERVICE_DETAIL_Update_Server_Firmware': 'Update Server Firmware',
            'SERVICE_DETAIL_View_Firmware_Report': 'View Compliance Report',
            'SERVICE_DETAIL_ReferenceFirmwareRepository': 'Reference Firmware/Software Repository',
            'SERVICE_DETAIL_Change_Firmware_Baseline': 'Change Server Firmware Baseline',
            'SERVICE_DETAIL_Recent_Activity': 'Recent Activity',
            'SERVICE_DETAIL_UpgradeServiceComponents': 'Upgrade Service Components',
            'SERVICE_DETAIL_ChangeRepository': 'Change Repository',


            'SERVICE_DETAIL_ManagementIPAddress': 'Management IP Address',
            'SERVICE_DETAIL_ResourceHealth': 'Resource Health',
            'SERVICE_DETAIL_FirmwareCompliance': 'Compliance',
            'SERVICE_DETAIL_DeploymentStatus': 'Deployment Status',
            'SERVICE_DETAIL_Deployed': 'Deployed',
            'SERVICE_DETAIL_Ready': 'Ready',
            'SERVICE_DETAIL_Services': 'Services',
            'SERVICE_DETAIL_Migrate Servers': 'Migrate Server(s)',
            'SERVICE_DETAIL_IP_Address': 'IP Address',
            'SERVICE_DETAIL_OS_IP_Address': 'OS IP Address',
            'SERVICE_DETAIL_View_Logs': 'View Logs',

            'SERVICE_DETAIL_Application': 'Application:',
            'SERVICE_DETAIL_Virtual_Machine': 'Virtual Machine:',
            'SERVICE_DETAIL_Cluster': 'Cluster:',
            'SERVICE_DETAIL_Server': 'Server:',
            'SERVICE_DETAIL_Storage': 'Storage:',

            'SERVICE_UPGRADE_COMPONENTS_Message1': 'The following required settings have been added to the components within your service based on an upgrade to the ASM software.',
            'SERVICE_UPGRADE_COMPONENTS_ApplyNowMessage': '<strong>Apply Now: </strong>immediately retries the service and applies the new settings',
            'SERVICE_UPGRADE_COMPONENTS_SaveMessage': '<strong>Save: </strong>saves the settings and applies when taking an action on the service such as retry or add resource',
            'SERVICE_UPGRADE_COMPONENTS_ApplyNow': 'Apply Now',
            'SERVICE_UPGRADE_COMPONENTS_PasswordFields': 'Password Fields',
            'SERVICE_UPGRADE_COMPONENTS_': '',

            'SERVICE_DELETE_RESOURCES_Title': 'Delete Resources from Service',
            'SERVICE_DELETE_RESOURCES_Helptext': 'Select resources that you wish you delete.',
            'SERVICE_DELETE_RESOURCES_Delete_Warning': 'Warning, if the server you have selected for teardown without the accompanying cluster is the last host in that cluster, the host will not be removed from the cluster. SCVMM does not allow removing the last host from a cluster without also removing the cluster containing that host.',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines': 'Virtual Machines',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THComponent_Name': 'Component Name',
            'SERVICE_DELETE_RESOURCES_Storage_DRS_Cluster_Title': 'Associated VMware Storage DRS Cluster',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THHost_Name': 'Hostname',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THOS_Type': 'OS Type',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THCPUs': 'CPUs',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THDisk_Size': 'Disk Size',
            'SERVICE_DELETE_RESOURCES_Virtual_Machines_THMemory': 'Memory',

            'SERVICE_DELETE_RESOURCES_Clusters': 'Clusters',
            'SERVICE_DELETE_RESOURCES_Clusters_THComponent_Name': 'Component Name',
            'SERVICE_DELETE_RESOURCES_Clusters_THDataCenterName': 'Data Center Name',
            'SERVICE_DELETE_RESOURCES_Clusters_THClusterName': 'Cluster Name',
            'SERVICE_DELETE_RESOURCES_Clusters_THHost_IP': 'Management IP Address',
            'SERVICE_DELETE_RESOURCES_Clusters_THResource_ID': 'Asset/Service Tag',

            'SERVICE_DELETE_RESOURCES_Physical_Servers': 'Physical Servers',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_THComponent_Name': 'Component Name',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_THHost_Name': 'Hostname',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_THHost_IP': 'Management IP Address',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_THHypervisor_IP': 'OS IP Address',
            'SERVICE_DELETE_RESOURCES_Physical_Servers_THResource_ID': 'Asset/Service Tag',

            'SERVICE_DELETE_RESOURCES_Storage': 'Storage',
            'SERVICE_DELETE_RESOURCES_Storage_THComponent_Name': 'Component Name',
            'SERVICE_DELETE_RESOURCES_Storage_THHost_IP': 'Management IP Address',
            'SERVICE_DELETE_RESOURCES_Storage_THResource_ID': 'Asset/Service Tag',
            'SERVICE_DELETE_RESOURCES_Storage_Volume_Name': 'Volume: ',
            'SERVICE_DELETE_RESOURCES_Storage_Volume_Size': 'Size: ',
            'SERVICE_DELETE_RESOURCES_Footnote': '*NOTE: Deleting a shared resource could affect other running services.',

            'SERVICE_ADD_EXISTING_ServiceInformation': 'Service Information',
            'SERVICE_ADD_EXISTING_InventoryMustBeCurrent': '<strong>Inventory must be current</strong> - Servers, storage, and virtual machine managers (VMM) that have not been discovered by ASM cannot be added to this service.',
            'SERVICE_ADD_EXISTING_Type': 'Type',
            'SERVICE_ADD_EXISTING_NameStar': 'Name*',
            'SERVICE_ADD_EXISTING_Description': 'Description',
            'SERVICE_ADD_EXISTING_FirmwareCompliance': 'Firmware Compliance',
            'SERVICE_ADD_EXISTING_PerformFirmwareCompliance': 'Perform firmware compliance check with selected firmware catalog',
            'SERVICE_ADD_EXISTING_FirmwareRespositoryStar': 'Firmware Respository*',
            'SERVICE_ADD_EXISTING_ServicePermissions': 'Service Permissions',
            'SERVICE_ADD_EXISTING_GrantStandardUsership': 'In addition to Administrators, grant Standard Users access to this service',
            'SERVICE_ADD_EXISTING_AllStandardUsers': 'All Standard Users',
            'SERVICE_ADD_EXISTING_SpecificStandardUsers': 'Specific Standard Users',
            'SERVICE_ADD_EXISTING_ESXi': 'ESXi',
            'SERVICE_ADD_EXISTING_ComponentNameStar': 'Component Name*',
            'SERVICE_ADD_EXISTING_ClusterSettings': 'Cluster Settings',
            'SERVICE_ADD_EXISTING_BasicSettings': 'Basic Settings',
            'SERVICE_ADD_EXISTING_ClusterComponent': 'Cluster Component',
            'SERVICE_ADD_EXISTING_SummaryForService': 'Summary for Service {{serviceName}}',
            'SERVICE_ADD_EXISTING_SummaryDescription': 'ASM resource inventory was compared to the inventory for the selected cluster. Discrepancies could be a result of not being discovered during the most recent ASM inventory, or the resource is not supported by ASM, and cannot be discovered. Additional resources can be added to this service after creation, if desired.',
            'SERVICE_ADD_EXISTING_ASMClusterInventory': 'ASM/Cluster Inventory',
            'SERVICE_ADD_EXISTING_Clusters': 'Clusters',
            'SERVICE_ADD_EXISTING_PhysicalServers': 'Physical Servers',
            'SERVICE_ADD_EXISTING_Storage': 'Storage',
            'SERVICE_ADD_EXISTING_Applications': 'Applications',
            'SERVICE_ADD_EXISTING_Name': 'Name',
            'SERVICE_ADD_EXISTING_IPAddress': 'IP Address',
            'SERVICE_ADD_EXISTING_AssetServiceTag': 'Asset/Service Tag',
            'SERVICE_ADD_EXISTING_AvailableInventory': 'Available Inventory',
            'SERVICE_ADD_EXISTING_AvailableInventoryToolTip': '<ul><li>"Available" servers and storage include those in ASM inventory that are;<ul><li>Not in use in a service.</li><li>Marked "Reserved" or "Managed"</li></ul>.<li>"Unavailable" servers and storage include;<ul><li>"Updating" or "Unmanaged" servers and storage.</li><li>Storage where all associated servers are unavailable.</li></ul></li></ul>',

            'SERVICE_DETAIL_DELETE_SERVICE_DeleteService': 'Delete Service',
            'SERVICE_DETAIL_DELETE_SERVICE_Warning': 'Warning, if the server you have selected for teardown without the accompanying cluster is the last host in that cluster, the host will not be removed from the cluster. SCVMM does not allow removing the last host from a cluster without also removing the cluster containing that host.',
            'SERVICE_DETAIL_DELETE_SERVICE_ReturnServers': 'Return Server(s) to Resource Pool',
            'SERVICE_DETAIL_DELETE_SERVICE_ServerDescription': 'This mandatory action powers off the server, and returns it to its designated resource pool. If RAID was configured during the deployment it will be removed from the server.',
            'SERVICE_DETAIL_DELETE_SERVICE_DeleteVms': 'Delete VM(s)',
            'SERVICE_DETAIL_DELETE_SERVICE_DeleteCluster': 'Delete Cluster(s) and Remove from Hyper-V and vCenter*',
            'SERVICE_DETAIL_DELETE_SERVICE_DeleteStorage': 'Delete Storage Volume(s)*',
            'SERVICE_DETAIL_DELETE_SERVICE_Footnote': '*NOTE: Deleting a shared resource could affect other running services.',

            'SERVICE_SETTINGS_Title': 'Service Deployment Settings',
            'SERVICE_SETTINGS_Reference_IP_Address': 'Reference Server IP Address',
            'SERVICE_SETTINGS_Application_Settings': 'Application Settings',

            'SERVICES_Title': 'Services',
            'SERVICES_No_Published_Templates_Tooltip': 'There are no published templates to deploy.',
            'SERVICES_Deploy': 'Deploy',
            'SERVICES_Add_Existing_Service': 'Add Existing Service',
            'SERVICES_Export_All': 'Export All',
            'SERVICES_View_As': 'View As',
            'SERVICES_Tile_View': 'Tile View',
            'SERVICES_Grid_View': 'List View',
            'SERVICES_Filter_By': 'Filter By',
            'SERVICES_None_Found': 'There are no services that match this criteria.',
            'SERVICES_THStatus': 'Status',
            'SERVICES_THName': 'Name',
            'SERVICES_THDeployed_By': 'Deployed By',
            'SERVICES_THDeployed_On': 'Deployed On',
            'SERVICES_THComponents': 'Components',
            'SERVICES_Service_Published_Template': 'A service is a deployment of a published template that is categorized in the following states.',
            'SERVICES_Service_States': 'Service States',
            'SERVICES_Service_Categorized': 'A service is a deployment of a published template that is categorized in the following states.<br/> '
                + '<br /><b>Cancelled:</b> Service deployment has been stopped by user. Resources can be updated and deployment retired, if desired.<br /> '
                + '<br /><b>Critical:</b> Services are in a severely degraded or non-functional state and require attention.<br />'
                + '<br /><b>Healthy:</b> Services are fully functional and compliant.<br />'
                + '<br /><b>In Progress:</b> Services are currently being deployed<br />'
                + '<br /><b>Warning:</b> Services are degraded or need attention to be brought into compliance.<br />',
            'SERVICES_View_Details': 'View Details',
            'SERVICES_Update_Firmware': 'Update Firmware',
            'SERVICES_Export_To_File': 'Export to File',
            'SERVICES_Deployed_By': 'Deployed By',
            'SERVICES_Deployed_On': 'Deployed On',
            'SERVICES_Reference_Template': 'Reference Template',
            'SERVICES_Components': 'Components',
            'SERVICES_Application': 'Application',
            'SERVICES_VM': 'VM',
            'SERVICES_Cluster': 'Cluster',
            'SERVICES_Server': 'Server',
            'SERVICES_Storage': 'Storage',
            'SERVICES_AddApplication': 'Add Application',
            'SERVICES_AddNetwork': 'Add Network',
            'SERVICES_NewComponentSettings': 'New Component Settings',
            'SERVICES_Duplicate': 'Duplicate',
            'SERVICES_New': 'New',
            'SERVICES_ResourcetoDuplicate': 'Resource to Duplicate',
            'SERVICES_UpgradeExistingComponents': 'You must first upgrade existing components.',
            'SERVICES_Continue': 'Continue',
            'SERVICES_Cancel': 'Cancel',
            'SERVICES_NumberofInstances': 'Number of Instances',
            'SERVICES_ComponentName': 'Component Name',
            'SERVICES_': '',

            'SERVICES_CancelledServices': 'Cancelled Services',
            'SERVICES_CriticalServices': 'Error Services',
            'SERVICES_DeployNew': 'Deploy New Services',
            'SERVICES_HealthyServices': 'Healthy Services',
            'SERVICES_InProgressServices': 'In Progress Services',
            'SERVICES_WarningServices': 'Warning Services',

            'SERVICES_DEPLOY_Confirm': 'Are you sure you want to publish this template?',
            'SERVICES_NEW_SERVICE_DeployService': 'Deploy Service',
            'SERVICES_NEW_SERVICE_SelectPublishedTemplateStar': 'Select Published Template*',
            'SERVICES_NEW_SERVICE_ServiceInfo': 'Service Information',
            'SERVICES_NEW_SERVICE_ServiceNameStar': 'Service Name*',
            'SERVICES_NEW_SERVICE_ServiceDescription': 'Service Description',
            'SERVICES_NEW_SERVICE_NumberofDeployments': 'Number of Deployments',
            'SERVICES_NEW_SERVICE_ManageServerFirmware': 'Manage Server Firmware',
            'SERVICES_NEW_SERVICE_DeployInterp': 'Deploy {{serviceName}}',
            'SERVICES_NEW_SERVICE_DeploymentSettings': 'Deployment Settings',

            'SERVICES_DEPLOY_ViewAllSettings': 'View All Settings',
            'SERVICES_DEPLOY_ScheduleDeployment': 'Schedule Deployment',
            'SERVICES_DEPLOY_DeployNow': 'Deploy Now',
            'SERVICES_DEPLOY_DeployLater': 'Deploy later',
            'SERVICES_DEPLOY_Date': 'Date',
            'SERVICES_DEPLOY_Time': 'Time',
            'SERVICES_DEPLOY_STATE_Error': 'Error',
            'SERVICES_DEPLOY_STATE_Healthy': 'Healthy',
            'SERVICES_DEPLOY_STATE_InProgress': 'In Progress',
            'SERVICES_DEPLOY_STATE_Warning': 'Warning',
            'SERVICES_DEPLOY_STATE_Pending': 'Pending',
            'SERVICES_DEPLOY_STATE_Cancelled': 'Cancelled',
            'SERVICES_DEPLOY_TILE_TOOLTIP_UpdateFirmware': 'Update Firmware',
            'SERVICES_DEPLOY_TILE_TOOLTIP_ExportService': 'Export Service',
            'SERVICES_NoMatchSearch': 'There are no services that match this criteria.',
            'SERVICES_All': 'All',
            'SERVICES_DEPLOY_ConfirmWizardClosing': 'Are you sure you wish to close this wizard?',

            'SERVICES_SERVICE_Details_confirmlnkretryservice': 'Retrying a service attempts to deploy the service again. Firmware will not be updated as part of a service retry.',
            'SERVICES_SERVICE_Details_confirmlnkretryserviceareyousure': 'Are you sure you want to continue?',
            'SERVICES_SERVICE_Details_retryalternateaction': 'Cancel Retry and Update Firmware',
            'SERVICES_SERVICE_Details_retryalternateaction_Dialog': 'Retry Cancelled.  Update Firmware?',
            'SERVICES_SERVICE_Details_confirmationmodal_alert': 'Alert',
            'SERVICES_SERVICE_Details_confirmationmodal_confirm': 'Confirm',
            'SERVICES_SERVICE_Details_confirmationmodal_success': 'Success',
            'SERVICES_SERVICE_Details_confirmationmodal_critical': 'Critical',
            'SERVICES_SERVICE_Details_confirmationmodal_info': 'Info',
            'SERVICES_SERVICE_Details_confirmationmodal_ok': 'OK',
            'SERVICES_SERVICE_Details_confirmationmodal_yes': 'Yes',
            'SERVICES_SERVICE_Details_confirmationmodal_no': 'No',

            'SERVICES_RESOURCE_FirmwareReportTitle': 'Firmware/Software Compliance Report',
            'SERVICES_SERVICE_FirmwareReportTitle': 'Server Firmware/Software Compliance Report',
            'SERVICES_FirmwareComplianceStatusMsg': ' against ',
            'SERVICES_FirmwareNonCompliantMessage': 'This service is Non-Compliant ',
            'SERVICES_FirmwareStatus': 'Firmware Status',
            'SERVICES_FirmwareCompliance': 'Compliance :',
            'SERVICES_FirmwareCompliant': 'Compliant',
            'SERVICES_FirmwareNonCompliant': 'Non-Compliant',
            'SERVICES_FirmwareNonCompliantWith': 'Non-Compliant with Default Catalog -',
            'SERVICES_FirmwareUpdateRequired': 'Update Required with Default Catalog -',
            'SERVICES_FirmwareCompliantWith': 'Compliant with -',
            'SERVICES_FirmwareStatusUpdateRequired': ' - there are firmware components on this resource that do not meet the minimum required by ASM',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_Components': 'Components',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_Component': 'Component',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_CurrentVersion': 'Current Version',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_ExpectedVersion': 'Expected Version',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_LastUpdate': 'Last Update',
            'SERVICES_FirmwareCompReport_ResourceTable_Firmware_LastUpdated': 'Last Updated',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_Component': 'Component',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_Vendor': 'Vendor',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_CurrentVersion': 'Current Version',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_ExpectedVersion': 'Expected Version',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_LastUpdate': 'Last Update',
            'SERVICES_FirmwareCompReport_ResourceTable_Software_LastUpdated': 'Last Updated',
            'SERVICES_FirmwareCompReport_Update_Resource': 'Update Resource',
            'SERVICES_FirmwareCompReport_Update_Service': 'Update Service',

            'SERVICES_FirmwareCompReport_ServiceTable_IPAddress': 'IP Address',
            'SERVICES_FirmwareCompReport_ServiceTable_AssetServiceTag': 'Asset/Service Tag',
            'SERVICES_FirmwareCompReport_ServiceTable_Components': 'Components',
            'SERVICES_FirmwareCompReport_ServiceTable_CurrentVersion': 'Current Version',
            'SERVICES_FirmwareCompReport_ServiceTable_ExpectedVersion': 'Expected Version',
            'SERVICES_FirmwareCompReport_ServiceTable_LastUpdate': 'Last Update',
            'SERVICES_FirmwareCompReport_ServiceTable_LastUpdated': 'Last Updated',
            'SERVICES_FirmwareCompReport_ServiceTable_UpdateService': 'Update Service',

            'STOP_MANAGING_APPLICATIONS_Title': 'Stop Managing Applications',
            'STOP_MANAGING_APPLICATIONS_Stop_Managing': 'Stop Managing',
            'STOP_MANAGING_APPLICATIONS_Help': 'Select the applications that you no longer want to manage in ASM.',
            'STOP_MANAGING_APPLICATIONS_Installed_Applications': 'Installed Applications',

            'STOP_MANAGING_APPLICATIONS_Select': 'Select',
            'STOP_MANAGING_APPLICATIONS_Application_Type': 'Application Type',

            'TEMPLATES_FilterBy': 'Filter By',
            'TEMPLATES_EditTemplateInformation': 'Edit Template Information',
            'TEMPLATES_ClonedTemplates': 'Cloned Templates',
            'TEMPLATES_AllCategories': 'All Categories',
            'TEMEPLATES_State': 'State',
            'TEMPLATES_LastDeployedOn': 'Last Deployed On',
            'TEMPLATES_Draft': 'Draft',
            'TEMPLATES_Published': 'Published',
            'TEMPLATES_DeployService': 'Deploy Service',
            'TEMPLATES_Clone': 'Clone',
            'TEMPLATES_ExportTemplate': 'Export Template',
            'TEMPLATES_AddAttachments': 'Add Attachments',
            'TEMPLATES_AddAttachment': 'Add Attachment',
            'TEMPLATES_DeleteAttachments': 'Are you sure you want to delete this attachment?',
            'TEMPLATES_Invalid': 'Some of your Templates require attention. You must edit the settings before these templates can be published.',
            'TEMPLATES_AttachmentSizeReq': 'The size limit for each attached file is 50MB',
            'TEMPLATES_TemplateInformation': 'Template Information',
            'TEMEPLATES_TemplateType': 'Template Type',
            'TEMPLATES_CloneExisting': 'Clone Existing',
            'TEMPLATES_TemplateName': 'Template Name',
            'TEMPLATES_TemplateCategory': 'Template Category',
            'TEMPLATES_TemplateDescription': 'Template Description',
            'TEMPLATES_ManageServerFirmware': 'Manage Server Firmware',
            'TEMPLATES_UseFirmwareRepo': 'Use Firmware / Software Repository',
            'TEMPLATES_FirmwareRepoNote': 'Note: Changing the firmware repository could update the firmware level on servers when this template is deployed as a service. Firmware on shared devices will still be maintained by the global default firmware repository.',
            'TEMPLATES_ManageServicePermissions': 'Manage Service Permissions',
            'TEMPLATES_PermissionsGrantAccess': 'In addition to all Admins, grant Standard Users access to this service',
            'TEMPLATES_AllStandardUsers': 'All Standard Users',
            'TEMPLATES_SpecificStandardUsers': 'Specific Standard Users',
            'TEMPLATES_AddUsers': 'Add User(s)',
            'TEMPLATES_RemoveUsers': 'Remove User(s)',

            'TEMPLATES_Templates': 'Templates',
            'TEMPLATES_Title': 'Templates',
            'TEMPLATES_MyTemplates': 'My Templates',
            'TEMPLATES_SampleTemplates': 'Sample Templates',
            'TEMPLATES_CreateTemplate': 'Create Template',
            'TEMPLATES_FirmwareRepositoryReq': 'Firmware Repository Required',
            'TEMPLATES_ViewAs': 'View As',
            'TEMPLATES_TemplateOverview': 'Template Overview',
            'TEMPLATES_TemplateOverviewText': 'A template is a collection of configured components that captures the end-to-end infrastructure of a service when deployed. The collection of components can comprise of storage devices, servers, clusters, virtual machines and applications.',
            'TEMPLATES_TemplateStates': 'Template States',
            'TEMPLATES_TemplateStatesText': '<b>Draft:</b> A new or cloned template created but not yet published. Draft templates are saved automatically.<br />' +
                                            '<b>Published:</b> A template ready for deployment as a service.<br />' +
                                            '<b>Sample:</b> A template included in ASM to help you get started. You must clone these templates in order to edit their settings.',
            'TEMPLATES_NoPublishedTemplates': 'There are currently no published templates available.',
            'TEMPLATES_PublishedTemplates': 'Published Templates',
            'TEMPLATES_PublishedDrafts': 'Published Drafts',
            'TEMPLATES_NoPublishedDrafts': 'There are currently no draft templates available.',
            'TEMPLATES_DRAFT': 'DRAFT',
            'TEMPLATES_Attachments': 'Attachments',
            'TEMPLATES_Last': 'Last',
            'TEMPLATES_NewCategoryName': 'New Category Name',
            'TEMPLATES_CreateNewCategory': 'Create New Category',
            'TEMPLATES_SelectorCreateNewCategory': 'Select or Create New Category',
            'TEMPLATES_ErrorExporting': 'Error exporting templates',
            'TEMPLATES_TemplateCategoryStar': 'Template Category*',

            'TEMPLATES_TILE_ViewDetails': 'View Details',
            'TEMPLATES_TILE_Clone': 'Clone',
            'TEMPLATES_TILE_Delete': 'Delete',
            'TEMPLATES_TILE_Edit': 'Edit',

            'TEMPLATES_fileTooLarge': 'The file must be less than 50MB in size',

            'TEMPLATEEXPORT_Information': 'Export the selected template to a zip file.  Upload exported templates to other ASM appliances to duplicate template settings across appliances.',
            'TEMPLATEEXPORT_File_Name': 'File Name*',
            'TEMPLATEEXPORT_File_Name_Required': 'This field is required',
            'TEMPLATEEXPORT_Use_Encryption_Password': 'Use Encryption Password from Backup Settings',
            'TEMPLATEEXPORT_Set_File_Encryption_Password': 'Set File Encryption Password',
            'TEMPLATEEXPORT_Confirm_Encryption_Password': 'Confirm Encryption Password',
            'TEMPLATEEXPORT_Password_Tooltip': 'Click and hold to show password',
            'TEMPLATEEXPORT_Confirm_Encryption_Password_Match': 'Please enter the same value again.',

            'TEMPLATES_UploadExternalTemplate': 'Upload External Template',
            'TEMPLATES_UploadExternalModal_UploadExternalTemplate': 'Upload External Template',
            'TEMPLATES_UploadExternalModal_FileInformation': 'File Information',
            'TEMPLATES_UploadExternalModal_SelectTemplate': 'Select Template',
            'TEMPLATES_UploadExternalModal_UseBackupPassword': 'Use Encryption Password from Backup Settings',
            'TEMPLATES_UploadExternalModal_EncryptionPassword': 'Encryption Password',
            'TEMPLATES_UploadExternalModal_TemplateInfo': 'Template Information',
            'TEMPLATES_UploadExternalModal_TemplateName': 'Template Name*',
            'TEMPLATES_UploadExternalModal_TemplateDescription': 'Template Description',
            'TEMPLATES_UploadExternalModal_AdditionalSettings': 'Additional Settings',
            'TEMPLATES_UploadExternalModal_AdditionalSettingsDesc': 'Select the resources to be populated in the cloned template in the sections below. Once selected, these resources will be populated in the template and the template will be editable. Use "View Components" links to help identify how the resource is used by displaying the other server, VM, or storage resources that are associated in the template.',
            'TEMPLATES_UploadExternalModal_NetworkSettings': 'Network Settings',
            'TEMPLATES_UploadExternalModal_NetworkDesc': 'Select the network to use for each of the networks in the original template.',
            'TEMPLATES_UploadExternalModal_NetworkName': 'Original Network Name',
            'TEMPLATES_UploadExternalModal_NetworkType': 'Network Type',
            'TEMPLATES_UploadExternalModal_SelectNewNetwork': 'Select New Network',
            'TEMPLATES_UploadExternalModal_ViewComponents': '(View Components)',
            'TEMPLATES_UploadExternalModal_OsSettings': 'OS Settings',
            'TEMPLATES_UploadExternalModal_OsSettingsDesc': 'Enter the administrator password to be used accross all servers. Then, select the OS respository to use for each of the repositories in the original template.',
            'TEMPLATES_UploadExternalModal_OsAdminstratorPassword': 'OS Administrator Password',
            'TEMPLATES_ConfirmPassword': 'Confirim Password',
            'TEMPLATE_NoMatch': 'Password does not match',
            'TEMPLATES_OriginalOsRepo': 'Original OS Repository',
            'TEMPLATES_SelectNewRepo': 'Select New Repository',
            'TEMPLATES_ClusterSettings': 'Cluster Settings',
            'TEMPLATES_ClusterDesc': 'Select the virtual machine manager to use for each of the clusters in the original template.',
            'TEMPLATES_OriginalVmManager': 'Original Virtual Machine Manager',
            'TEMPLATES_ClusterType': 'Cluster Type',
            'TEMPLATES_SelectNewVMManager': 'Select New Virtual Machine Manager',
            'TEMPLATES_ServerPoolSettings': 'Server Pool Settings',
            'TEMPLATES_ServerPoolDesc': 'Select the server pool to use for each of the server pools in the original template.',
            'TEMPLATES_OriginalServerPool': 'Original Server Pool',
            'TEMPLATES_SelectNewServerPool': 'Select New Server Pool',
            'TEMPLATES_UploadExternalModal_StorageSettings': 'Storage Settings',
            'TEMPLATES_UploadExternalModal_StorageDesc': 'Select the array to use for each of the arrays identified in the original template.',
            'TEMPLATES_UploadExternalModal_OriginalStorageArray': 'Original Storage Array',
            'TEMPLATES_UploadExternalModal_StorageType': 'Storage Type',
            'TEMPLATES_UploadExternalModal_SelectNewStorageArray': 'Select New Storage Array',

            'TEMPLATEBUILDER_Templates': 'Templates',
            'TEMPLATEBUILDER_Draft': '(Draft)',
            'TEMPLATEBUILDER_AddStorage': 'Add Storage',
            'TEMPLATEBUILDER_AddCluster': 'Add Cluster',
            'TEMPLATEBUILDER_AddVM': 'Add VM',
            'TEMPLATEBUILDER_AddApplication': 'Add Application',
            'TEMPLATEBUILDER_AddServer': 'Add Server',
            'TEMPLATEBUILDER_DiscardConfirm': 'Are you sure you want to delete this template?',
            'TEMPLATEBUILDER_Application': 'Application',
            'TEMPLATEBUILDER_VM': 'VM',
            'TEMPLATEBUILDER_Cluster': 'Cluster',
            'TEMPLATEBUILDER_Server': 'Server',
            'TEMPLATEBUILDER_Storage': 'Storage',
            'TEMPLATEBUILDER_Instructions1': 'Add applications to Servers or VMs by clicking Add Application above.',
            'TEMPLATEBUILDER_Instructions2': 'An application image (icon) is shown next to resources with associated applications.',
            'TEMPLATEBUILDER_Duplicate': 'Duplicate',
            'TEMPLATEBUILDER_NoInterfacesDefined': 'There are no interfaces defined.',
            'TEMPLATEBUILDER_Name': 'Name',
            'TEMPLATEBUILDER_Install_Order': 'Name',
            'TEMPLATEBUILDER_Interface': 'Interface',
            'TEMPLATEBUILDER_AssociatedResources': 'Associated Resources:',


            'TEMPLATEBUILDER_Clone_Title': 'Select Reference Server',
            'TEMPLATEBUILDER_Clone_Help': 'The information imported from the selected server could be up to 24 hours old. For the most up-to-date settings, run inventory from the resources page on the target server prior to selection.<br/><br/>Create a server component by importing BIOS, RAID, and Network Partitioning settings from the following reference server :',
            'TEMPLATEBUILDER_Clone_THState': 'State',
            'TEMPLATEBUILDER_Clone_THIP_Address': 'IP Address',
            'TEMPLATEBUILDER_Clone_THDevice_ID': 'Asset/Service Tag',
            'TEMPLATEBUILDER_Clone_THManufacturer': 'Manufacturer',
            'TEMPLATEBUILDER_Clone_THModel': 'Model',
            'TEMPLATEBUILDER_Clone_THSServer_Pool': 'Server Pool',

            'TEMPLATEBUILDER_Upload_Title': 'Upload Server Configuration Profile',
            'TEMPLATEBUILDER_Upload_Help': 'Create a server component by uploading BIOS, RAID, and Network Partitioning settings from a Server Configuration Profile.',
            'TEMPLATEBUILDER_Upload_Select_File': 'Select Server Configuration Profile',

            'TEMPLATEBUILDER_Import_From_Template_Title': 'Select Component',
            'TEMPLATEBUILDER_Import_From_Template_Help': 'Import a server component by cloning all of the settings from an existing component:',
            'TEMPLATEBUILDER_Import_From_Template_No_Components': 'No server components found in draft or published templates with imported configurations from a reference server.',
            'TEMPLATEBUILDER_Import_From_Template_Template': 'Template: ',

            'TEMPLATEBUILDER_AddVirtualDisk': 'Add Virtual Disk',
            'TEMPLATEBUILDER_VirtualDisks': 'Virtual Disk(s)*',
            'TEMPLATEBUILDER_DiskNum': 'Disk #',
            'TEMPLATEBUILDER_SizeGB': 'Size (GB)',
            'TEMPLATEBUILDER_VALIDATE_NumServersMatchDescription': '{{numMatchingServers}} of {{numTotalServers}} servers match server configuration parameters. Broaden or narrow matching servers by changing parameters.',
            'TEMPLATEBUILDER_VALIDATE_ManufacturerModel': 'Manufacturer/Model',
            'TEMPLATEBUILDER_VALIDATE_PoweringOff': 'Powering Off',
            'TEMPLATEBUILDER_VALIDATE_Reserved': 'Reserved',
            'TEMPLATEBUILDER_VALIDATE_Unmanaged': 'Unmanaged',
            'TEMPLATEBUILDER_VALIDATE_': '',

            'TEMPLATEBUILDER_DeleteAllApplications': 'Delete All Applications',
            'TEMPLATEBUILDER_EditApplications': 'Edit Applications',
            'TEMPLATEBUILDER_Areyousureyouwanttoremovethiscomponent': 'Are you sure you want to remove this component?',
            'TEMPLATEBUILDER_Areyousureyouwanttodeletethisattachment': 'Are you sure you want to delete this attachment?',
            'TEMPLATEBUILDER_': '',


            'TEMPLATES_TEMPLATEBUILDER_SIDE_TemplateInvalid': 'This template requires attention. You must edit the settings before this template can be published.',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_TemplateInformation': 'Template Information',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Edit': 'Edit',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Category': 'Category',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_ReferenceFirmwareRepository': 'Reference Firmware Repository',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_NotSpecified': 'Not Specified',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_UserPermissions': 'User Permissions',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Actions': 'Actions',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Deploy': 'Deploy',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_PublishTemplate': 'Publish Template',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_DeleteTemplate': 'Delete Template',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_ViewAllSettings': 'View All Settings',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_ImportTemplate': 'Import Template',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Clone': 'Clone',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Attachments': 'Attachments',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_AddAttachments': 'Add Attachments',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Enabled': 'Enabled',
            'TEMPLATES_TEMPLATEBUILDER_SIDE_Disabled': 'Disabled',

            'TEMPLATES_TEMPLATESETTINGS_MODAL_PasswordFields': 'Password Fields',
            'TEMPLATES_TEMPLATESETTINGS_MODAL_NoPassword': 'No Password',
            'TEMPLATES_TEMPLATESETTINGS_MODAL_TemplateSettings': 'Template Settings',
            'TEMPLATES_TEMPLATESETTINGS_MODAL_ExportTemplate': 'Export Template to ZIP file',

            'UPDATE_SERVICE_FIRMWARE_TimeEstimate': 'Firmware updates may take up to 45 minutes per server.',
            //'UPDATE_SERVICE_FIRMWARE_UpdateNow': 'Update Now<br />ASM will apply the firmware updates immediately and then reboot to all servers within this service. For servers belonging to a VMware vSphere cluster, <br/> ' +
            //                                        'servers will be updated one at a time by putting it first into maintenance mode, then performing the firmware update and rebooting the server, and finally <br/> ' +
            //                                        'bringing the server out of maintenance mode before moving on to the next server.<br /> <br /> ' +
            //                                        'Firmware will not be applied to servers that cannot be put in maintenance mode.  This can be the result of clusters that do not have DRS enabled or servers <br/> ' +
            //                                        'that are not in  a cluster and have running virtual machines.  Power down or migrate the virtual machines prior to initiating a firmware update.',
            'UPDATE_SERVICE_FIRMWARE_UpdateNow': 'Apply firmware and software updates now <br />ASM will apply the firmware and software updates immediately and then reboot the server(s).',
            //'UPDATE_SERVICE_FIRMWARE_NextReboot': 'Apply Updates on Next Reboot<br />ASM will stage the firmware update to each server selected. The update will take effect at the next server reboot.',
            'UPDATE_SERVICE_FIRMWARE_NextReboot': 'Apply updates on next reboot (Firmware only)<br />ASM will stage firmware updates to server(s) to take effect at the next server reboot.  Software updates will not be applied.',
            //'UPDATE_SERVICE_FIRMWARE_ScheduleUpdate': 'Schedule Update<br />ASM will apply the firmware updates at a selected date and time and then reboot to all servers within this service. For servers belonging to a VMware <br/> ' +
            //                                            'vSphere cluster, servers will be updated one at a time by putting it first into maintenance mode, then performing the firmware update and <br/> ' +
            //                                            'rebooting the server, and finally bringing the server out of maintenance mode before moving on to the next server.',
            'UPDATE_SERVICE_FIRMWARE_ScheduleUpdate': 'Schedule firmware and software updates<br />ASM will apply firmware and software updates at the selected date and time, then reboot the server(s).',
            'UPDATE_SERVICE_FIRMWARE_ScheduleDate': 'Date',
            'UPDATE_SERVICE_FIRMWARE_ScheduleTime': 'Time',
            'UPDATE_SERVICE_FIRMWARE_Confirmation': 'Are you sure you want to make these firmware changes?',
            'UPDATE_SERVICE_FIRMWARE_DateError': 'Schedule Update requires a future date/time selection.  Please change the date/time values or select Update Now or Apply Updates on Next Reboot',

            "UPDATE_RESOURCE_FIRMWARE_serverTimeEstimate": "Updates may take up to 45 minutes per server.",
            "UPDATE_RESOURCE_FIRMWARE_chassisTimeEstimate": "Updates may take up to 15 minutes per chassis.",
            "UPDATE_RESOURCE_FIRMWARE_switchTimeEstimate": "Updates may take up to 15 minutes per switch.",
            "UPDATE_RESOURCE_FIRMWARE_updateNowNoSpecificType":
                            " Apply firmware and software updates now<br />" +
                            "ASM will apply the firmware and software updates immediately and then reboot all servers within this service." +
                            "  For servers belonging to a VMware vSphere cluster, servers will be updated one at a time by putting it first " +
                            "into maintenance mode, then performing the firmware update and rebooting the server, and finally bringing " +
                            "the server out of maintenance mode before moving on to the next server. <br /><br />" +
                            "Firmware will not be applied to servers that cannot be put in maintenance mode.  " +
                            "This can be the result of clusters that do not have DRS enabled or servers that are not in a " +
                            "cluster and have running virtual machines.  Power down or migrate the virtual machines prior to initiating a firmware update.",
            "UPDATE_RESOURCE_FIRMWARE_updateNowServer": " Apply firmware and software updates now <br />" +
                            "ASM will apply the firmware and software updates immediately and then reboot the server(s).",
            "UPDATE_RESOURCE_FIRMWARE_updateNowChassis": "Apply firmware and software updates now <br />" +
                            "ASM will apply the firmware and software updates immediately and then reboot the chassis.",
            "UPDATE_RESOURCE_FIRMWARE_updateNowSwitch": "Apply firmware and software updates now <br />" +
                            "ASM will apply the firmware and software updates immediately and then reboot the switch.",
            "UPDATE_RESOURCE_FIRMWARE_applyOnRebootDescription": "Apply updates on next reboot (firmware only)<br />ASM will stage firmware updates to server(s) to take effect at the next server reboot.  Software updates will not be applied.",
            "UPDATE_RESOURCE_FIRMWARE_ApplyUpdates": "Apply Updates",
            "UPDATE_RESOURCE_FIRMWARE_Schedulefirmwareandsoftwareupdates": "Schedule firmware and software updates",
            "UPDATE_RESOURCE_FIRMWARE_scheduleServer": "Schedule firmware and software updates<br />ASM will apply the firmware and software updates at the selected date and time, then reboot the server(s)",
            "UPDATE_RESOURCE_FIRMWARE_scheduleChassis": "Schedule firmware and software updates<br />ASM will apply the firmware and software updates at the selected date and time, then reboot the chassis.",
            "UPDATE_RESOURCE_FIRMWARE_scheduleSwitch": "Schedule firmware and software updates<br />ASM will apply the firmware and software updates at the selected date and time, then reboot the switch.",

            "CREATE_EDIT_DEVICE_USERS_CreateCMCUser": 'Create CMC User',
            "CREATE_EDIT_DEVICE_USERS_EditCMCUser": 'Edit CMC User',
            "CREATE_EDIT_DEVICE_USERS_CreateiDRACUser": 'Create iDRAC User',
            "CREATE_EDIT_DEVICE_USERS_EditiDRACUser": 'Edit iDRAC User',
            "CREATE_EDIT_DEVICE_USERS_UserName": 'User Name',
            "CREATE_EDIT_DEVICE_USERS_ConfirmPassword": 'Confirm Password',
            "CREATE_EDIT_DEVICE_USERS_LANRole": 'LAN Role',
            "CREATE_EDIT_DEVICE_USERS_EnableUser": 'Enable User',
            "CREATE_EDIT_DEVICE_USERS_Administrator": 'Administrator',
            "CREATE_EDIT_DEVICE_USERS_PowerUser": 'Power User',
            "CREATE_EDIT_DEVICE_USERS_GuestUser": 'Guest User',
            "CREATE_EDIT_DEVICE_USERS_None": 'None',
            "CREATE_EDIT_DEVICE_USERS_Operator": 'Operator',
            "CREATE_EDIT_DEVICE_USERS_ReadOnly": 'Read Only',
            "CREATE_EDIT_DEVICE_USERS_User": 'User',
            "CREATE_EDIT_DEVICE_USERS_NoAccess": 'No Access',

            'VIEW_BUNDLES_firmwarebundles': 'Firmware Bundles',
            'VIEW_BUNDLES_softwarebundles': 'Software Bundles',

            'VIEW_BUNDLES_Description': 'Package Bundles',
            'VIEW_BUNDLES_THName': 'Name',
            'VIEW_BUNDLES_THVendor': 'Vendor',
            'VIEW_BUNDLES_THVersion': 'Version',
            'VIEW_BUNDLES_THDate': 'Date',
            'VIEW_BUNDLES_THDateTime': 'Date and Time',
            'VIEW_BUNDLES_Details_Tooltip': 'View Bundle Details',

            'VIEW_BUNDLES_Custom_Description': 'Custom Bundles',
            'VIEW_BUNDLES_Custom_THName': 'Name',
            'VIEW_BUNDLES_Custom_THVersion': 'Version',
            'VIEW_BUNDLES_Custom_THDate': 'Date',
            'VIEW_BUNDLES_Custom_THDateTime': 'Date and Time',
            'VIEW_BUNDLES_Custom_Edit_Tooltip': 'Edit Custom Bundle',
            'VIEW_BUNDLES_Custom_Remove_Tooltip': 'Remove Custom Bundle',
            'VIEW_BUNDLES_Custom_Details_Tooltip': 'View Bundle Details',

            'VIEW_BUNDLE_DETAILS_Description': 'Firmware Bundle',
            'VIEW_BUNDLE_DETAILS_THName': 'Name',
            'VIEW_BUNDLE_DETAILS_THType': 'Type',
            'VIEW_BUNDLE_DETAILS_THVersion': 'Version',

            'VIEW_BUNDLE_DETAILS_THSoftwareName': 'Name',
            'VIEW_BUNDLE_DETAILS_THVendor': 'Vendor',
            'VIEW_BUNDLE_DETAILS_THSoftwareType': 'Type',
            'VIEW_BUNDLE_DETAILS_THSoftwareVersion': 'Version'

        }
    });

angular.module('ASM.constants')
    .constant('URLs',
    {
        help: {
            none: 'help/index.html'
        }
    });

var asm;
(function (asm) {
    "use strict";
    var DeviceBladesController = (function () {
        function DeviceBladesController($http) {
            this.$http = $http;
            var self = this;
            self.refresh();
        }
        DeviceBladesController.prototype.refresh = function () {
            var self = this;
            self.safeSrc = angular.copy(self.device);
            self.deviceType = self.deviceType;
        };
        DeviceBladesController.$inject = ['$http'];
        return DeviceBladesController;
    }());
    angular.module('app')
        .component('deviceblades', {
        templateUrl: 'views/devicedetails/blades.html',
        controller: DeviceBladesController,
        controllerAs: 'deviceBladesController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=blades.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceChassisController = (function () {
        function DeviceChassisController() {
            var self = this;
            self.refresh();
        }
        DeviceChassisController.prototype.refresh = function () {
            var self = this;
            self.device = self.device;
            self.deviceType = self.deviceType;
        };
        DeviceChassisController.prototype.isFX2 = function () {
            //note:  easier to just re-calculate this value than to pass it in
            //https://docs.angularjs.org/guide/interpolation
            return (this.deviceType === 'ChassisFX');
        };
        DeviceChassisController.$inject = [];
        return DeviceChassisController;
    }());
    angular.module('app')
        .component('devicechassiscontroller', {
        templateUrl: 'views/devicedetails/chassiscontroller.html',
        controller: DeviceChassisController,
        controllerAs: 'deviceChassisController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=chassisController.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceCompellentStorageController = (function () {
        function DeviceCompellentStorageController() {
            var self = this;
            self.refresh();
        }
        DeviceCompellentStorageController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device.volumes);
            self.deviceType = self.deviceType;
        };
        DeviceCompellentStorageController.$inject = [];
        return DeviceCompellentStorageController;
    }());
    angular.module('app')
        .component('devicecompellent', {
        templateUrl: 'views/devicedetails/compellentstoragevolumes.html',
        controller: DeviceCompellentStorageController,
        controllerAs: 'deviceCompellentStorageController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=compellentStorageVolumes.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceCpusController = (function () {
        function DeviceCpusController() {
            var self = this;
            self.refresh();
        }
        Object.defineProperty(DeviceCpusController.prototype, "device", {
            get: function () {
                var self = this;
                return self._device;
            },
            set: function (value) {
                var self = this;
                self._device = value;
                self.refresh();
            },
            enumerable: true,
            configurable: true
        });
        DeviceCpusController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device.cpudata);
        };
        DeviceCpusController.$inject = [];
        return DeviceCpusController;
    }());
    angular.module('app')
        .component('devicecpus', {
        templateUrl: 'views/devicedetails/cpus.html',
        controller: DeviceCpusController,
        controllerAs: 'deviceCpusController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=cpus.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceEquallogicController = (function () {
        function DeviceEquallogicController() {
            var self = this;
            self.refresh();
        }
        DeviceEquallogicController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device.volumes);
            self.deviceType = self.deviceType;
        };
        DeviceEquallogicController.$inject = [];
        return DeviceEquallogicController;
    }());
    angular.module('app')
        .component('deviceequallogic', {
        templateUrl: 'views/devicedetails/equallogicvolumes.html',
        controller: DeviceEquallogicController,
        controllerAs: 'deviceEquallogicController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=equallogicVolumes.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceFirmwareController = (function () {
        function DeviceFirmwareController() {
            this.componentSelection = 'fw';
            var self = this;
            self.refresh();
        }
        DeviceFirmwareController.prototype.refresh = function () {
            var self = this;
            self.firmwaressafeSource = angular.copy(self.device.firmwares);
            self.softwaressafeSource = angular.copy(self.device.softwares);
        };
        DeviceFirmwareController.$inject = [];
        return DeviceFirmwareController;
    }());
    angular.module('app')
        .component('devicefirmware', {
        templateUrl: 'views/devicedetails/firmwarerevisions.html',
        controller: DeviceFirmwareController,
        controllerAs: 'deviceFirmwareController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=firmwareRevisions.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceIkvmController = (function () {
        function DeviceIkvmController() {
            var self = this;
            self.refresh();
        }
        DeviceIkvmController.prototype.refresh = function () {
            var self = this;
            self.device = self.device;
            self.deviceType = self.deviceType;
        };
        DeviceIkvmController.$inject = [];
        return DeviceIkvmController;
    }());
    angular.module('app')
        .component('deviceikvm', {
        templateUrl: 'views/devicedetails/ikvm.html',
        controller: DeviceIkvmController,
        controllerAs: 'deviceIkvmController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=ikvm.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceIOModuleController = (function () {
        function DeviceIOModuleController() {
            var self = this;
            self.refresh();
        }
        DeviceIOModuleController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device);
            self.deviceType = self.deviceType;
        };
        DeviceIOModuleController.$inject = [];
        return DeviceIOModuleController;
    }());
    angular.module('app')
        .component('deviceiomodule', {
        templateUrl: 'views/devicedetails/iomodule.html',
        controller: DeviceIOModuleController,
        controllerAs: 'deviceIOModuleController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=ioModule.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceMemoryController = (function () {
        function DeviceMemoryController() {
            var self = this;
            self.refresh();
        }
        DeviceMemoryController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device.memorydata);
            self.deviceType = self.deviceType;
        };
        DeviceMemoryController.$inject = [];
        return DeviceMemoryController;
    }());
    angular.module('app')
        .component('devicememory', {
        templateUrl: 'views/devicedetails/memory.html',
        controller: DeviceMemoryController,
        controllerAs: 'deviceMemoryController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=memoryDirective.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceNetAppVolumesController = (function () {
        function DeviceNetAppVolumesController() {
            var self = this;
            self.refresh();
        }
        DeviceNetAppVolumesController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device.volumes);
            self.deviceType = self.deviceType;
        };
        DeviceNetAppVolumesController.$inject = [];
        return DeviceNetAppVolumesController;
    }());
    angular.module('app')
        .component('devicenetappvolumes', {
        templateUrl: 'views/devicedetails/netappstoragevolumes.html',
        controller: DeviceNetAppVolumesController,
        controllerAs: 'deviceNetAppVolumesController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=netappStorageVolumes.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceNetworkInterfacesController = (function () {
        function DeviceNetworkInterfacesController() {
            var self = this;
            self.safeSource = angular.copy(self.device);
        }
        DeviceNetworkInterfacesController.$inject = [];
        return DeviceNetworkInterfacesController;
    }());
    angular.module('app')
        .component('devicenetworkinterfaces', {
        templateUrl: 'views/devicedetails/networkinterfaces.html',
        controller: DeviceNetworkInterfacesController,
        controllerAs: 'deviceNetworkInterfacesController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=networkInterfaces.js.map
var asm;
(function (asm) {
    "use strict";
    //interface PortViewDirectiveController  {
    //    // specify exposed controller methods and properties here
    //}
    //class PortViewController implements PortViewDirectiveController {
    var PortViewController = (function () {
        //new Collection([], { model: PortViewFilter }),
        //dataUpdated: '',
        //updateSVG: '',
        function PortViewController(Modal, Dialog, $http, $timeout, $q, $translate, $rootScope, GlobalServices, $routeParams, $scope, Loading, Commands, $interval) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$rootScope = $rootScope;
            this.GlobalServices = GlobalServices;
            this.$routeParams = $routeParams;
            this.$scope = $scope;
            this.Loading = Loading;
            this.Commands = Commands;
            this.$interval = $interval;
            this.TorSwitchIntervals = 300;
            this.TorPortIntervals = 25;
            this.IOMintervals = 180;
            this.IomPortIntervals = 55;
            this.NicIntervals = 260;
            this.NicPortIntervals = 110;
            this.Allnics = 0;
            this.boxWidth = 0;
            this.showbox = false;
            this.counter = 0;
            this.previousUplink = '';
            this.previousUplinkPort = '';
            this.SelectedConnectionType = '';
            this.SelectedConnectionId = '';
            this.selectedPartitionID = '';
            this.visibleVLANS = [];
            this.servicePage = false;
            this.serversDropDown = [];
            this.firstLoad = true;
            this.portList = [];
            var self = this;
            if (!self.$scope.service) {
                self.deviceId = self.$scope.selectedDeviceId;
            }
            else {
                self.serversDropDown = _.filter(self.$scope.service.components, { type: "server" });
                self.selectedServer = self.serversDropDown[0];
                self.deviceId = self.selectedServer;
                self.servicePage = true;
            }
            if (self.$scope.server) {
                self.selectedServer = _.find(self.serversDropDown, ['id', self.$scope.server.id]);
            }
            self.activate();
        }
        PortViewController.prototype.activate = function () {
            var self = this;
            self.promise = self.$interval(function () {
                self.refresh();
                //console.log('refresh!')
            }, 60000);
            self.refresh();
        };
        PortViewController.prototype.changeServer = function () {
            var self = this;
            self.deviceId = self.selectedServer;
            self.refresh();
        };
        PortViewController.prototype.$onDestroy = function () {
            var self = this;
            self.$interval.cancel(self.promise);
        };
        PortViewController.prototype.refresh = function () {
            var self = this;
            $('.popover').remove();
            $('#PortViewSVGLines').empty();
            $('#PortViewSelectedSVGLines').empty();
            //spinner
            //self.Loading(self.$q.defer().promise);
            var filterObj = [];
            var request;
            //update filter with dropdown on change
            if (self.selectedPorts && self.selectedPorts != '' && self.selectedPorts.nicId != 'all') {
                if (self.selectedPorts.nicId != null) {
                    filterObj.push({ field: 'nicId', op: '=', opTarget: [self.selectedPorts.nicId] });
                    filterObj.push({ field: 'nicPortId', op: '=', opTarget: [self.selectedPorts.nicPortId] });
                }
                if (self.selectedPorts.health != null) {
                    filterObj.push({ field: 'health', op: '=', opTarget: ['red', 'yellow'] });
                }
                request = {
                    requestObj: self.deviceId,
                    criteriaObj: { filterObj: filterObj }
                };
            }
            else {
                request = {
                    requestObj: self.deviceId
                };
            }
            this.$http.post(self.Commands.data.servers.getServerPortViewById, request).then(function (data) {
                self.portView = data.data.responseObj;
                if (self.portView.nics.length) {
                    if (self.portView.torSwitches.length) {
                        self.updateTorSwitch();
                    }
                    if (self.portList.length == 0) {
                        self.portList.push({ id: 'all', nicId: 'all', nicPortId: 'all', displayName: 'Show All Connections', health: 'all' });
                        $.each(self.portView.nics, function (i, nic) {
                            $.each(nic.ports, function (j, port) {
                                self.portList.push({ id: self.GlobalServices.NewGuid(), nicId: nic.id, nicPortId: port.id, displayName: nic.name + ' - ' + port.name, health: null });
                            });
                        });
                        self.portList.push({ id: self.GlobalServices.NewGuid(), nicId: null, nicPortId: null, health: 'red,yellow', displayName: 'All resources in Warning or Error state' });
                        //console.log(self.portList);
                        self.selectedPorts = self.portList[0];
                    }
                    if (self.portView.ioModules != null) {
                        self.updateIOM();
                    }
                    //Caculate intervals between NIC groups
                    self.Allnics = 0;
                    $.each(self.portView.nics, function (i, nic) {
                        var Xatt = ((self.Allnics * 110));
                        nic.xcoord = Xatt;
                        var niclength = parseInt(nic.ports.length);
                        self.Allnics = self.Allnics + niclength;
                    });
                    //Gather VLans
                    $.each(self.portView.nics, function (i, nic) {
                        $.each(nic.ports, function (i, port) {
                            $.each(port.partitions, function (i, partition) {
                                $.each(partition.vlans, function (i, vlan) {
                                    var x = 0;
                                });
                            });
                        });
                    });
                    //self.$q.resolve();
                    self.cleanIds();
                }
            }).catch(function (data) {
                //self.$q.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        PortViewController.prototype.updateTorSwitch = function () {
            //Update TOR switch with nic info to render vlans on top
            var self = this;
            if (self.portView.torSwitches.length) {
                $.each(self.portView.torSwitches, function (i, torSwitch) {
                    //-MH
                    torSwitch.nics = [];
                    $.each(self.portView.portConnections, function (j, connection) {
                        if (connection.iomUplinkConnections != null) {
                            $.each(connection.iomUplinkConnections, function (k, iom) {
                                if (iom.connectedDevice.deviceId == torSwitch.id) {
                                    var nic = _.filter(self.portView.nics, { id: connection.nicId })[0];
                                    torSwitch.nics.push(nic);
                                    torSwitch.selectedPartition = '';
                                }
                            });
                        }
                        else {
                            if (connection.connectedDevice.deviceId == torSwitch.id) {
                                var nic = _.filter(self.portView.nics, { id: connection.nicId })[0];
                                torSwitch.nics.push(nic);
                                torSwitch.selectedPartition = '';
                            }
                        }
                    });
                    //add vlans to torswitches
                    $.each(torSwitch.nics, function (k, nic) {
                        torSwitch.vlans = [];
                        $.each(nic.ports, function (l, port) {
                            if (port.zoneInfo != null) {
                                if (!_.find(torSwitch.vlans, { vlan: port.zoneInfo.vlan })) {
                                    torSwitch.vlans.push(port.zoneInfo);
                                }
                            }
                            $.each(port.partitions, function (m, partition) {
                                $.each(partition.vlans, function (n, vlan) {
                                    if (!_.find(torSwitch.vlans, { vlan: vlan.vlan })) {
                                        torSwitch.vlans.push(vlan);
                                    }
                                });
                            });
                        });
                    });
                });
            }
            //console.log(self.portView);
        };
        PortViewController.prototype.updateIOM = function () {
            //Update IOM with nic info to render vlans on top
            var self = this;
            if (self.portView.ioModules != null) {
                $.each(self.portView.portConnections, function (j, connection) {
                    $.each(self.portView.ioModules, function (i, iom) {
                        iom.nics = [];
                        if (connection.connectedDevice.deviceId == iom.id && connection.iomUplinkConnections != null) {
                            var nic = _.filter(self.portView.nics, { id: connection.nicId })[0];
                            iom.nics.push(nic);
                            iom.selectedPartition = '';
                        }
                    });
                });
            }
        };
        PortViewController.prototype.addPartition = function () {
            var self = this;
            $.each(self.portView.portConnections, function (i, connection) {
                connection.partitions = [];
                $.each(self.portView.nics, function (j, nic) {
                    if (connection.nicId == nic.id) {
                        $.each(nic.ports, function (k, port) {
                            if (connection.nicPortId == port.id) {
                                connection.nicPortHealth = port.health;
                                if (port.partitions) {
                                    //connection.partitions = port.partitions.length;
                                    connection.partitions.push(port.partitions);
                                    connection.partitions = connection.partitions[0];
                                }
                            }
                        });
                    }
                });
            });
        };
        PortViewController.prototype.iomData = function (nicId, portId) {
            var self = this;
            var iom = null;
            if (self.portView.ioModules) {
                var connection = _.filter(self.portView.portConnections, { nicId: nicId, nicPortId: portId });
                //var connection = self.portView.portConnections.where({ nicId: nicId, nicPortId: portId });
                if (connection.length) {
                    var deviceId = connection[0].connectedDevice.deviceId;
                    iom = _.filter(self.portView.ioModules, { id: deviceId });
                    //iom = self.portView.ioModules.where({ id: deviceId });
                    iom = iom.length ? iom[0] : null;
                }
            }
            return iom;
        };
        PortViewController.prototype.torData = function () {
            var self = this;
            $.each(self.portView.nics, function (i, nic) {
                $.each(nic.ports, function (j, port) {
                    var connection = _.filter(self.portView.portConnections, { nicId: nic.id, nicPortId: port.id });
                    port.torSwitches = [];
                    if (connection.length) {
                        if (connection[0].iomUplinkConnections) {
                            $.each(connection[0].iomUplinkConnections, function (i, uplink) {
                                var torSwitch = _.filter(self.portView.torSwitches, { id: uplink.connectedDevice.deviceId })[0];
                                if (torSwitch)
                                    port.torSwitches.push(torSwitch);
                            });
                        }
                        else {
                            var torSwitch1 = _.filter(self.portView.torSwitches, { id: connection[0].connectedDevice.deviceId })[0];
                            if (torSwitch1)
                                port.torSwitches.push(torSwitch1);
                        }
                    }
                });
            });
            self.detailData = [];
            //Aggregate data to allow repeated accordions to work
            angular.forEach(self.portView.nics, function (nic) {
                angular.forEach(nic.ports, function (port) {
                    port.nicInfo = nic;
                    self.detailData.push(port);
                });
            });
            if (self.firstLoad) {
                self.accordionData = self.detailData;
                self.firstLoad = false;
            }
            //Possible hack to prevent accordion closure when polled data has no changes.  May replace with 'track by' solution
            if (self.accordionData) {
                angular.forEach(self.detailData, function (detail, detailIndx) {
                    var x = self.accordionData[detailIndx];
                    var y = angular.copy(x);
                    var comparison = _.isEqual(detail, y);
                    if (!comparison) {
                        self.accordionData = self.detailData;
                        return;
                    }
                });
            }
            //Possible hack to prevent accordion closure when polled data has no changes.  May replace with 'track by' solution
            //if (self.accordionData) {
            //    angular.forEach(self.portView.nics, function (nic, nicIndx) {
            //        angular.forEach(nic.ports, function (port, portIndx) {
            //            var x = self.accordionData.nics[nicIndx].ports[portIndx];
            //            var y = angular.copy(x);
            //            var comparison = _.isEqual(port, y);
            //            if (!comparison) {
            //                self.accordionData = self.portView;
            //                return
            //            }
            //        })
            //    })
            //}
        };
        //Removes periods and adds port ids
        PortViewController.prototype.cleanIds = function () {
            var self = this;
            $.each(self.portView.nics, function (i, nic) {
                nic.id = (nic.id).replace(/\./g, '');
                $.each(nic.ports, function (x, port) {
                    port.id = 'port' + port.id;
                });
            });
            $.each(self.portView.torSwitches, function (i, tor) {
                tor.id = (tor.id).replace(/\./g, '');
                $.each(tor.downlinkPorts, function (j, downlink) {
                    downlink.id = 'port' + (downlink.port).replace(/\,/g, '-');
                });
            });
            if (self.portView.ioModules != null) {
                $.each(self.portView.ioModules, function (i, iom) {
                    iom.id = (iom.id).replace(/\./g, '');
                    $.each(iom.downlinkPorts, function (j, downlink) {
                        downlink.id = 'port' + (downlink.port).replace(/\,/g, '-');
                    });
                    $.each(iom.uplinkPorts, function (j, uplink) {
                        uplink.id = 'port' + (uplink.port).replace(/\,/g, '-');
                    });
                });
            }
            $.each(self.portView.portConnections, function (i, connection) {
                connection.nicId = (connection.nicId).replace(/\./g, '');
                connection.connectedDevice.deviceId = (connection.connectedDevice.deviceId).replace(/\./g, '');
                connection.nicPortId = 'port' + (connection.nicPortId).replace(/\,/g, '-');
                connection.connectedDevice.downlinkPort.id = 'port' + (connection.connectedDevice.downlinkPort.port).replace(/\,/g, '-');
                if (connection.iomUplinkConnections != null) {
                    $.each(connection.iomUplinkConnections, function (j, iom) {
                        iom.connectedDevice.deviceId = (iom.connectedDevice.deviceId).replace(/\./g, '');
                        iom.uplinkPort.id = 'port' + (iom.uplinkPort.port).replace(/\,/g, '-');
                        iom.connectedDevice.downlinkPort.id = 'port' + (iom.connectedDevice.downlinkPort.port).replace(/\,/g, '-');
                    });
                }
            });
            self.addPartition();
            self.torData();
            self.drawLines();
        };
        PortViewController.prototype.drawLines = function () {
            var self = this;
            self.$timeout(function () {
                self.counter = 0;
                $.each(self.portView.portConnections, function (i, connection) {
                    //If NIC - IOM - TOR
                    //IOM to Tor & Tor to VLAN CONNECTION
                    if (connection.iomUplinkConnections != null) {
                        $.each(connection.iomUplinkConnections, function (x, uplink) {
                            //Tor to VLAN
                            var VlanFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var VlanHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var VlanSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var vlan_x1 = (parseInt($('svg#' + uplink.connectedDevice.deviceId).attr('x')) + 350).toString();
                            var vlan_y1 = '100';
                            var vlan_x2 = vlan_x1;
                            var vlan_y2 = '140';
                            VlanFirstVertical.setAttribute('x1', vlan_x1);
                            VlanFirstVertical.setAttribute('y1', vlan_y1);
                            VlanFirstVertical.setAttribute('x2', vlan_x2);
                            VlanFirstVertical.setAttribute('y2', vlan_y2);
                            //Difine line class names
                            VlanFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + uplink.uplinkPort.health;
                            $('#PortViewSVGLines').append(VlanFirstVertical);
                            $('#PortViewSelectedSVGLines').append(angular.copy(VlanFirstVertical));
                            //Partition to Port
                            if (connection.partitions.length >= 1) {
                                var PartitionFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                                var PartitionHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                                var PartitionSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                                var partition_x1 = (parseInt($('svg#' + connection.nicId).attr('x')) + parseInt($('svg#' + connection.nicId + ' svg#' + connection.nicPortId).attr('x')) + 375).toString();
                                var partition_y1 = '522';
                                var partition_x2 = partition_x1;
                                var partition_y2 = '571';
                                PartitionFirstVertical.setAttribute('x1', partition_x1);
                                PartitionFirstVertical.setAttribute('y1', partition_y1);
                                PartitionFirstVertical.setAttribute('x2', partition_x2);
                                PartitionFirstVertical.setAttribute('y2', partition_y2);
                                //Difine line class names
                                PartitionFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                                $('#PortViewSVGLines').append(PartitionFirstVertical);
                                $('#PortViewSelectedSVGLines').append(angular.copy(PartitionFirstVertical));
                            }
                            //Nic to IOM Downlink
                            var newFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var newHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var newSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            //var NICx = parseInt($('.NICelements #' + connection.nicId).attr('x'));
                            //var Portx = parseInt($('svg#' + connection.nicPortId).attr('x'));
                            var x1 = (parseInt($('svg#' + connection.nicId).attr('x')) + parseInt($('svg#' + connection.nicId + ' svg#' + connection.nicPortId).attr('x')) + 375).toString();
                            //var x1 = (parseInt($('.NICelements #' + connection.nicId).attr('x')) + parseInt($('svg#' + connection.nicPortId).attr('x')) + 375).toString();
                            //var x1 = (parseInt($('g.NICelements svg.NICports svg.' + connection.nicId + connection.nicPortId).attr('x')) + 375).toString();
                            var y1 = '490';
                            var x2 = (parseInt($('.IOMSlotElements #' + connection.connectedDevice.deviceId + ' #' + connection.connectedDevice.downlinkPort.id).attr('x')) + (parseInt($('.IOMSlotElements #' + connection.connectedDevice.deviceId).attr('x'))) + 370).toString();
                            var y2 = '340';
                            var MidTurn = (390 + (6 * i)).toString();
                            newFirstVertical.setAttribute('x1', x1);
                            newFirstVertical.setAttribute('y1', y1);
                            newFirstVertical.setAttribute('x2', x1);
                            newFirstVertical.setAttribute('y2', MidTurn);
                            newHorizontal.setAttribute('x1', x1);
                            newHorizontal.setAttribute('y1', MidTurn);
                            newHorizontal.setAttribute('x2', x2);
                            newHorizontal.setAttribute('y2', MidTurn);
                            newSecondVertical.setAttribute('x1', x2);
                            newSecondVertical.setAttribute('y1', MidTurn);
                            newSecondVertical.setAttribute('x2', x2);
                            newSecondVertical.setAttribute('y2', y2);
                            ($('.NICelements #' + connection.nicId + ' #' + connection.nicPortId)).addClass(connection.nicId + connection.nicPortId);
                            ($('.NICelements #' + connection.nicId + ' #' + connection.nicPortId + ' .BackgroundSelection')).addClass(connection.nicId + connection.nicPortId);
                            ($('.IOMSlotElements #' + connection.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                            ($('.IOMSlotElements #' + connection.connectedDevice.deviceId + ' .BackgroundSelection')).addClass(connection.nicId + connection.nicPortId);
                            ($('.vlanList #vlan-' + uplink.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                            //Define line class names
                            newFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                            newHorizontal.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                            newSecondVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                            $('#PortViewSVGLines').append(newFirstVertical);
                            $('#PortViewSVGLines').append(newHorizontal);
                            $('#PortViewSVGLines').append(newSecondVertical);
                            $('#PortViewSelectedSVGLines').append(angular.copy(newFirstVertical));
                            $('#PortViewSelectedSVGLines').append(angular.copy(newHorizontal));
                            $('#PortViewSelectedSVGLines').append(angular.copy(newSecondVertical));
                            //IOM to Tor
                            //The counter handles situations where a range of port connections are connected to a range of other port connections
                            if (self.previousUplink != connection.connectedDevice.deviceId || (self.previousUplinkPort != uplink.uplinkPort.id && self.previousUplink == connection.connectedDevice.deviceId)) {
                                self.counter++;
                            }
                            var TorFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var TorHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var TorSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var x1 = (parseInt($('.IOMElements #' + connection.connectedDevice.deviceId + ' #' + uplink.uplinkPort.id).attr('x')) + (parseInt($('.IOMElements #' + connection.connectedDevice.deviceId).attr('x'))) + 370).toString();
                            var y1 = '287';
                            var x2 = (parseInt($('#' + uplink.connectedDevice.deviceId + ' #' + uplink.connectedDevice.downlinkPort.id).attr('x')) + (parseInt($('svg#' + uplink.connectedDevice.deviceId).attr('x'))) + 305).toString();
                            var y2 = '195';
                            var MidTurn = (215 + (6 * (self.counter))).toString();
                            TorFirstVertical.setAttribute('x1', x1);
                            TorFirstVertical.setAttribute('y1', y1);
                            TorFirstVertical.setAttribute('x2', x1);
                            TorFirstVertical.setAttribute('y2', MidTurn);
                            TorHorizontal.setAttribute('x1', x1);
                            TorHorizontal.setAttribute('y1', MidTurn);
                            TorHorizontal.setAttribute('x2', x2);
                            TorHorizontal.setAttribute('y2', MidTurn);
                            TorSecondVertical.setAttribute('x1', x2);
                            TorSecondVertical.setAttribute('y1', MidTurn);
                            TorSecondVertical.setAttribute('x2', x2);
                            TorSecondVertical.setAttribute('y2', y2);
                            //Define line class names
                            TorFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + uplink.uplinkPort.health;
                            TorHorizontal.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + uplink.uplinkPort.health;
                            TorSecondVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + uplink.connectedDevice.deviceId + ' ' + uplink.uplinkPort.health;
                            $('#PortViewSVGLines').append(TorFirstVertical);
                            $('#PortViewSVGLines').append(TorHorizontal);
                            $('#PortViewSVGLines').append(TorSecondVertical);
                            $('#PortViewSelectedSVGLines').append(angular.copy(TorFirstVertical));
                            $('#PortViewSelectedSVGLines').append(angular.copy(TorHorizontal));
                            $('#PortViewSelectedSVGLines').append(angular.copy(TorSecondVertical));
                            ($('svg#' + uplink.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                            self.previousUplinkPort = uplink.uplinkPort.id;
                            self.previousUplink = connection.connectedDevice.deviceId;
                            //Hide Selected lines
                            $('#PortViewSelectedSVGLines line').attr('display', 'none');
                        });
                    }
                    else {
                        //Tor to VLAN
                        var VlanFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var VlanHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var VlanSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var vlan_x1 = (parseInt($('svg#' + connection.connectedDevice.deviceId).attr('x')) + 350).toString();
                        var vlan_y1 = '100';
                        var vlan_x2 = vlan_x1;
                        var vlan_y2 = '140';
                        VlanFirstVertical.setAttribute('x1', vlan_x1);
                        VlanFirstVertical.setAttribute('y1', vlan_y1);
                        VlanFirstVertical.setAttribute('x2', vlan_x2);
                        VlanFirstVertical.setAttribute('y2', vlan_y2);
                        //Difine line class names
                        VlanFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + connection.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                        $('#PortViewSVGLines').append(VlanFirstVertical);
                        $('#PortViewSelectedSVGLines').append(angular.copy(VlanFirstVertical));
                        //Partition to Port
                        if (connection.partitions.length >= 1) {
                            var PartitionFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var PartitionHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var PartitionSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                            var partition_x1 = (parseInt($('svg#' + connection.nicId).attr('x')) + parseInt($('svg#' + connection.nicId + ' svg#' + connection.nicPortId).attr('x')) + 375).toString();
                            var partition_y1 = '522';
                            var partition_x2 = partition_x1;
                            var partition_y2 = '571';
                            PartitionFirstVertical.setAttribute('x1', partition_x1);
                            PartitionFirstVertical.setAttribute('y1', partition_y1);
                            PartitionFirstVertical.setAttribute('x2', partition_x2);
                            PartitionFirstVertical.setAttribute('y2', partition_y2);
                            //Difine line class names
                            PartitionFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + connection.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                            $('#PortViewSVGLines').append(PartitionFirstVertical);
                            $('#PortViewSelectedSVGLines').append(angular.copy(PartitionFirstVertical));
                        }
                        //TOR - NIC
                        var newFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var x1 = (parseInt($('svg#' + connection.nicId).attr('x')) + parseInt($('svg#' + connection.nicId + ' svg#' + connection.nicPortId).attr('x')) + 375).toString();
                        var y1 = '490';
                        var x2 = (parseInt($('#' + connection.connectedDevice.deviceId + ' #' + connection.connectedDevice.downlinkPort.id).attr('x')) + (parseInt($('svg#' + connection.connectedDevice.deviceId).attr('x'))) + 305).toString();
                        var y2 = '195';
                        var MidTurn = (390 + (6 * i)).toString();
                        newFirstVertical.setAttribute('x1', x1);
                        newFirstVertical.setAttribute('y1', y1);
                        newFirstVertical.setAttribute('x2', x1);
                        newFirstVertical.setAttribute('y2', MidTurn);
                        newHorizontal.setAttribute('x1', x1);
                        newHorizontal.setAttribute('y1', MidTurn);
                        newHorizontal.setAttribute('x2', x2);
                        newHorizontal.setAttribute('y2', MidTurn);
                        newSecondVertical.setAttribute('x1', x2);
                        newSecondVertical.setAttribute('y1', MidTurn);
                        newSecondVertical.setAttribute('x2', x2);
                        newSecondVertical.setAttribute('y2', y2);
                        ($('.NICelements #' + connection.nicId + ' #' + connection.nicPortId)).addClass(connection.nicId + connection.nicPortId);
                        ($('.NICelements #' + connection.nicId + ' #' + connection.nicPortId + ' .BackgroundSelection')).addClass(connection.nicId + connection.nicPortId);
                        ($('.IOMSlotElements #' + connection.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                        ($('.IOMSlotElements #' + connection.connectedDevice.deviceId + ' .BackgroundSelection')).addClass(connection.nicId + connection.nicPortId);
                        ($('.vlanList #vlan-' + connection.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                        ($('svg#' + connection.connectedDevice.deviceId)).addClass(connection.nicId + connection.nicPortId);
                        //Define line class names
                        newFirstVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + connection.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                        newHorizontal.className.baseVal = connection.nicId + connection.nicPortId + ' ' + connection.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                        newSecondVertical.className.baseVal = connection.nicId + connection.nicPortId + ' ' + connection.connectedDevice.deviceId + ' ' + connection.nicPortHealth;
                        $('#PortViewSVGLines').append(newFirstVertical);
                        $('#PortViewSVGLines').append(newHorizontal);
                        $('#PortViewSVGLines').append(newSecondVertical);
                        $('#PortViewSelectedSVGLines').append(angular.copy(newFirstVertical));
                        $('#PortViewSelectedSVGLines').append(angular.copy(newHorizontal));
                        $('#PortViewSelectedSVGLines').append(angular.copy(newSecondVertical));
                        //Hide selected lines
                        $('#PortViewSelectedSVGLines line').attr('display', 'none');
                    }
                });
            }, 1000);
        };
        PortViewController.prototype.selectConnection = function (parentId, childId, partition) {
            var self = this;
            //Reset svg drawing
            if (self.SelectedConnectionId !== '') {
                //$('#PortViewSVGLines line.' + connection.nicId + connection.nicPortId).attr("style", "");
                $('.BackgroundSelection').attr("display", "none");
                $('#PortViewSelectedSVGLines line').attr("display", "none");
            }
            //Show all vlan lists and remove selected class from partition
            $('.vlan').attr('style', '');
            $('.selectedPartition').removeClass('selectedPartition');
            $.each(self.portView.portConnections, function (i, connection) {
                //Reset every line
                $('#PortViewSVGLines line.' + connection.nicId + connection.nicPortId).attr("style", "");
                //Clicked a vlan up top
                if (partition && !partition.ipaddress) {
                    var selectedvlan = partition;
                    var lineclass = $('ul.vlanList li#vlan-' + parentId).attr("class");
                    $('#PortViewSVGLines line.' + lineclass).attr("style", "");
                    $('ul.vlanList li#vlan-' + parentId + ' li.' + selectedvlan.vlan).attr("style", 'background-color: lightBlue');
                    if (connection.iomUplinkConnections) {
                        $.each(connection.iomUplinkConnections, function (x, uplinkconnection) {
                            if (uplinkconnection.connectedDevice.deviceId == parentId) {
                                $.each(connection.partitions, function (y, partitiongroup) {
                                    $.each(partitiongroup.vlans, function (z, vlan) {
                                        if (vlan.vlan == partition.vlan) {
                                            $('svg#' + connection.nicId + ' #' + connection.nicPortId + ' .PartitionElements.' + partitiongroup.id).addClass('selectedPartition');
                                        }
                                    });
                                });
                            }
                        });
                    }
                    else {
                        if (connection.connectedDevice.deviceId == parentId) {
                            $.each(connection.partitions, function (y, partitiongroup) {
                                $.each(partitiongroup.vlans, function (z, vlan) {
                                    if (vlan.vlan == partition.vlan) {
                                        $('svg#' + connection.nicId + ' #' + connection.nicPortId + ' .PartitionElements.' + partitiongroup.id).addClass('selectedPartition');
                                    }
                                });
                            });
                        }
                    }
                }
                //Cicked a NIC or Partition
                if (connection.nicId == parentId && connection.nicPortId == childId) {
                    self.SelectedConnectionType = 'NIC';
                    self.SelectedConnectionId = connection.id;
                    $('#PortViewSelectedSVGLines line.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                    $('svg#PortView .BackgroundSelection.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                    $.each(connection.iomUplinkConnections, function (j, uplink) {
                        $('svg#PortView #' + uplink.connectedDevice.deviceId + ' .BackgroundSelection').attr("display", "inline");
                    });
                    //Click a partition
                    if (partition !== null) {
                        $.each(self.portView.torSwitches, function (j, torSwitch) {
                            $.each(torSwitch.nics, function (j, nic) {
                                if (nic.id == parentId) {
                                    $.each(nic.ports, function (k, port) {
                                        if (port.id == childId) {
                                            //Filter vlan list up top
                                            self.visibleVLANS = partition.vlans;
                                            $('svg#' + nic.id + ' #' + port.id + ' .PartitionElements.' + partition.id).addClass('selectedPartition');
                                            $('ul.vlanList li#vlan-' + torSwitch.id + '.' + parentId + childId + ' .vlan').attr("style", "display: none");
                                            $.each(self.visibleVLANS, function (l, vlan) {
                                                $('#vlan-' + torSwitch.id + '.' + parentId + childId + ' .vlan.' + vlan.vlan).attr('style', '');
                                            });
                                        }
                                    });
                                }
                            });
                        });
                    }
                }
                //Cicked a IOM
                if (connection.connectedDevice.deviceId == parentId) {
                    self.SelectedConnectionType = 'IOM';
                    self.SelectedConnectionId = connection.id;
                    $('#PortViewSelectedSVGLines line.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                    $('svg#PortView .BackgroundSelection.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                    $.each(connection.iomUplinkConnections, function (j, uplink) {
                        $('svg#PortView #' + uplink.connectedDevice.deviceId + ' .BackgroundSelection').attr("display", "inline");
                    });
                }
                //Cicked a TOR switch
                if (connection.iomUplinkConnections) {
                    $.each(connection.iomUplinkConnections, function (j, uplink) {
                        if (uplink.connectedDevice.deviceId == parentId) {
                            self.SelectedConnectionType = 'TOR';
                            self.SelectedConnectionId = connection.id;
                            $('#PortViewSelectedSVGLines line.' + connection.nicId + connection.nicPortId + '.' + uplink.connectedDevice.deviceId).attr("display", "inline");
                            $('svg#PortView .BackgroundSelection.' + connection.nicId + connection.nicPortId).attr("display", "inline");
                            $('svg#PortView #' + uplink.connectedDevice.deviceId + ' .BackgroundSelection').attr("display", "inline");
                        }
                    });
                }
                else {
                    $.each(self.portView.portConnections, function (j, portconnection) {
                        if (portconnection.connectedDevice.deviceId == parentId) {
                            self.SelectedConnectionType = 'TOR';
                            self.SelectedConnectionId = portconnection.id;
                            $('#PortViewSelectedSVGLines line.' + portconnection.nicId + portconnection.nicPortId + '.' + portconnection.connectedDevice.deviceId).attr("display", "inline");
                            $('svg#PortView .BackgroundSelection.' + portconnection.nicId + portconnection.nicPortId).attr("display", "inline");
                            $('svg#PortView #' + portconnection.connectedDevice.deviceId + ' .BackgroundSelection').attr("display", "inline");
                        }
                    });
                }
            });
        };
        PortViewController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$rootScope', 'GlobalServices', '$routeParams', '$scope', 'Loading', 'Commands', '$interval'];
        return PortViewController;
    }());
    function deviceportview() {
        return {
            restrict: 'E',
            templateUrl: 'views/deviceportview.html',
            replace: true,
            transclude: false,
            controller: PortViewController,
            controllerAs: 'deviceportview',
            scope: {
                selectedDeviceId: "=device",
                service: "=service",
                server: "="
            },
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('deviceportview', deviceportview);
})(asm || (asm = {}));
//# sourceMappingURL=portView.js.map
var asm;
(function (asm) {
    "use strict";
    var DevicePowerSuppliesController = (function () {
        function DevicePowerSuppliesController() {
            var self = this;
            self.refresh();
        }
        DevicePowerSuppliesController.prototype.refresh = function () {
            var self = this;
            self.safeSource = angular.copy(self.device);
            self.deviceType = self.deviceType;
        };
        DevicePowerSuppliesController.$inject = [];
        return DevicePowerSuppliesController;
    }());
    angular.module('app')
        .component('devicepowersupplies', {
        templateUrl: 'views/devicedetails/powersupplies.html',
        controller: DevicePowerSuppliesController,
        controllerAs: 'devicePowerSuppliesController',
        bindings: {
            device: '=',
            deviceType: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=powerSupplies.js.map
//# sourceMappingURL=summary.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceConfigurationController = (function () {
        function DeviceConfigurationController($http, commands, $q, $translate, loading, globalServices, Modal, constants, $filter) {
            this.$http = $http;
            this.commands = commands;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.globalServices = globalServices;
            this.Modal = Modal;
            this.constants = constants;
            this.$filter = $filter;
            this.configModel = {
                "id": null,
                "name": null,
                "dataCenter": null,
                "aisle": null,
                "rack": null,
                "rackSlot": null,
                "registerChassisManagementControllerOnDns": false,
                "dnsDomainName": null,
                "enableTelnet": false,
                "enableSsh": false,
                "trapSettings": [],
                "smtpServer": null,
                "smtpAuthentication": false,
                "smtpUsername": null,
                "smtpPassword": null,
                "sourceEmailName": null,
                "destinationEmails": [],
                "users": [],
                "systemInputPowercap": 0.0,
                "powercapMeasurementType": null,
                "redundancyPolicy": null,
                "serverPerformanceOverPowerRedundancy": false,
                "enableDynamicPowerSupplyEngagement": false,
                "chassisaddressingmode": 'existing',
                "chassisnetworkid": null,
                "serveraddressingmode": 'existing',
                "servernetworkid": null,
                "iomaddressingmode": 'existing',
                "iomnetworkid": null,
                "chassisCredentialId": null,
                "iomCredentialId": null,
                "bladeCredentialId": null,
                "idracuserlist": [],
                "syslogDestination": null,
                "timeZone": null,
                "enableNTPServer": false,
                "preferredNTPServer": null,
                "secondaryNTPServer": null,
                "registeriDracOnDns": false,
                "enableipmi": false
            };
            this.view = {};
            var self = this;
            self.config = self.config.configurationmode === "onboarding" ? angular.extend(self.config, self.configModel) : self.config;
            var d = self.$q.defer();
            self.loading(d.promise);
            self.$q.all([
                self.getTimeZones().then(function (response) {
                    self.timeZones = response.data.responseObj;
                })
            ]).catch(function (response) {
                self.globalServices.DisplayError(response.data);
            }).finally(function () {
                d.resolve();
            });
            self.view = {
                onboarding: {
                    users: {
                        visible: function () { return self.editMode || self.config.users.length || self.config.idracuserlist.length; }
                    },
                    monitoring: {
                        visible: function () { return self.editMode || self.config.trapSettings.length || self.config.destinationEmails.length || self.config.smtpServer || self.config.syslogDestination; }
                    },
                    ntp: {
                        visible: function () { return self.editMode || self.config.timeZone; }
                    },
                    power: {
                        visible: function () { return self.editMode || self.config.redundancyPolicy || (!self.hasFxChassis() && (self.config.serverPerformanceOverPowerRedundancy || self.config.enableDynamicPowerSupplyEngagement)); }
                    },
                    networking: {
                        visible: function () { return self.editMode || self.config.registerChassisManagementControllerOnDns || self.config.registerChassisManagementControllerOnDns || self.config.registeriDracOnDns || self.config.enableipmi; }
                    },
                },
                onboardingVisible: function () {
                    return self.config.configurationmode !== 'onboarding' && self.numConfigurableDevices() !== 0 && (self.editMode || !!_.find(self.view.onboarding, function (obj) { return obj.visible(); }));
                },
                //below makes collapsable row ids between edit mode and non-edit mode unique
                editMode: function () {
                    return self.editMode ? "edit_" : "view_";
                }
            };
        }
        DeviceConfigurationController.prototype.createUser = function (userType, editType) {
            var self = this, title, user, array = userType === "idrac" ? self.config.idracuserlist : self.config.users;
            if (editType === "create") {
                if (userType === "cmc") {
                    title = "CREATE_EDIT_DEVICE_USERS_CreateCMCUser";
                }
                else if (userType === "idrac") {
                    title = "CREATE_EDIT_DEVICE_USERS_CreateiDRACUser";
                    user = _.find(array, { rowChecked: true });
                }
            }
            else if (editType === "edit") {
                if (userType === "cmc") {
                    title = "CREATE_EDIT_DEVICE_USERS_EditCMCUser";
                    user = _.find(array, { rowChecked: true });
                }
                else if (userType === "idrac") {
                    title = "CREATE_EDIT_DEVICE_USERS_EditiDRACUser";
                }
            }
            var theModal = self.Modal({
                title: self.$translate.instant(title),
                modalSize: 'modal-lg',
                templateUrl: 'views/deviceUserModal.html',
                controller: 'EditDeviceModalController as editDeviceModalController',
                params: {
                    type: userType,
                    mode: editType,
                    user: angular.copy(user)
                },
                onComplete: function (createdUser) {
                    if (editType === "create") {
                        array.push(createdUser);
                    }
                    else if (editType === "edit") {
                        angular.extend(user, createdUser);
                    }
                }
            });
            theModal.modal.show();
        };
        DeviceConfigurationController.prototype.selectAllUsers = function (array) {
            var self = this, allSelected = self.numUsersChecked(array) === array.length;
            angular.forEach(array, function (user) {
                user.rowChecked = !allSelected;
            });
        };
        DeviceConfigurationController.prototype.numUsersChecked = function (array) {
            return _.filter(array, { rowChecked: true }).length;
        };
        DeviceConfigurationController.prototype.deleteUsers = function (array) {
            _.remove(array, { rowChecked: true });
        };
        DeviceConfigurationController.prototype.numConfigurableDevices = function () {
            var self = this;
            return _.filter(self.devices, function (device) {
                return self.$filter("isTypeChassis")(device) && device.chassisConfiguration.configChassis === true;
            }).length;
        };
        DeviceConfigurationController.prototype.hasFxChassis = function () {
            var self = this;
            return !!_.find(_.filter(self.devices, function (device) {
                return self.$filter("isTypeChassis")(device);
            }), { resourceType: 'ChassisFX' });
        };
        DeviceConfigurationController.prototype.doManageCredentials = function (updateType, credentialName) {
            var self = this, theTitle, theId, theName;
            if (updateType.toUpperCase() === "CREATE") {
                theTitle = self.$translate.instant('CREDENTIALS_CreateTitle');
                theId = "";
            }
            else if (updateType.toUpperCase() === "EDIT") {
                theTitle = self.$translate.instant('CREDENTIALS_EditTitle');
                theName = _.upperFirst(_.toLower(credentialName));
                switch (theName) {
                    case 'Chassis':
                        theId = self.config.chassisCredentialId;
                        break;
                    case 'Server':
                        theId = self.config.bladeCredentialId;
                        break;
                    case 'Switch':
                        theId = self.config.iomCredentialId;
                        break;
                }
            }
            var theModal = self.Modal({
                title: theTitle,
                modalSize: 'modal-lg',
                templateUrl: 'views/credentials/editCredentials.html',
                controller: 'EditCredentialsController as creds',
                params: {
                    id: theId,
                    editMode: updateType,
                    editName: theName
                },
                onComplete: function (modalScope) {
                    // should be id of credential
                    //console.log(modalScope.creds.viewData.objectId);              
                    switch (theName) {
                        case 'Chassis':
                            self.config.chassisCredentialId = modalScope.creds.viewData.objectId;
                            break;
                        case 'Server':
                            self.config.bladeCredentialId = modalScope.creds.viewData.objectId;
                            break;
                        case 'Switch':
                            self.config.iomCredentialId = modalScope.creds.viewData.objectId;
                            break;
                    }
                }
            });
            theModal.modal.show();
        };
        DeviceConfigurationController.prototype.doIPAddressing = function (updateType) {
            var self = this;
            var title;
            //add/create or edit
            switch (updateType.toUpperCase()) {
                case 'CREATE':
                    title = self.$translate.instant('NETWORKS_Edit_CreateTitle');
                    break;
                case 'EDIT':
                    title = self.$translate.instant('NETWORKS_Edit_EditTitle');
                    break;
            }
            var editNetworkModal = self.Modal({
                title: title,
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/editNetwork.html',
                controller: 'EditNetworkModalController as editNetwork',
                params: {
                    editMode: updateType,
                },
                onComplete: function () {
                    //self.refresh();
                }
            });
            editNetworkModal.modal.show();
        };
        DeviceConfigurationController.prototype.getTimeZones = function () {
            var self = this;
            return self.$http.post(self.commands.data.environment.getTimeZones, null);
        };
        DeviceConfigurationController.prototype.getNetworks = function () {
            var self = this;
            return self.$http.post(self.commands.data.networking.networks.getHardwareManagementNetworks, null);
        };
        DeviceConfigurationController.$inject = ["$http", "Commands", "$q", "$translate", "Loading", "GlobalServices", "Modal", "constants", "$filter"];
        return DeviceConfigurationController;
    }());
    angular.module("app")
        .component("deviceConfig", {
        templateUrl: "views/resources/DeviceConfiguration.html",
        controller: DeviceConfigurationController,
        controllerAs: "deviceConfig",
        bindings: {
            editMode: "=?",
            config: "=",
            devices: "=?",
            networks: "=?",
            chassiscredentials: "=?",
            servercredentials: "=?",
            torcredentials: "=?"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=deviceConfig.js.map
var asm;
(function (asm) {
    var DeployServiceWizard = (function () {
        function DeployServiceWizard($scope, Modal, dialog, $http, $q, $timeout, Loading, globalServices, $translate, constants, commands, $location) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.globalServices = globalServices;
            this.$translate = $translate;
            this.constants = constants;
            this.commands = commands;
            this.$location = $location;
            /**
             Date picker docs:
            http://eonasdan.github.io/bootstrap-datetimepicker/
             */
            this.service = {
                scheduleType: "deploynow"
            };
            this.selectedTemplate = {};
            this.datePicker = {
                options: {
                    format: "L hh:mm A",
                    minDate: moment()
                },
                selectedDate: moment().add(1, 'hour')
            };
            this.forms = { step3: {} };
            var self = this;
            self.selectedTemplate = $scope.modal.params.selectedTemplate;
            self.service.template = self.selectedTemplate;
        }
        DeployServiceWizard.prototype.filterComponents = function (template) {
            var self = this;
            //template > components > categories > settings
            //marks settings that return true from settingVisible with show = true
            //marks parents up the line with the same property if they have children
            _.forEach(_.filter(template.components, function (component) {
                return _.forEach(_.filter(component.categories, function (category) {
                    return _.forEach(_.filter(category.settings, function (setting) {
                        return self.settingVisible(setting, template);
                    }), function (setting) {
                        setting.show = true;
                    }).length;
                }), function (category) {
                    category.show = true;
                }).length;
            }), function (component) {
                component.show = true;
            });
        };
        DeployServiceWizard.prototype.finishStep1 = function () {
            var self = this;
            self.filterComponents(self.service.template);
        };
        //TODO: copied from addExistingService... not sure if this is correct
        DeployServiceWizard.prototype.settingVisible = function (setting, component) {
            var self = this;
            switch (setting.datatype) {
                case "raidconfiguration":
                case "biosconfiguration":
                case "networkconfiguration":
                    return false;
            }
            if (setting.hidefromtemplate) {
                return false;
            }
            ;
            if (!setting || !component || !setting.dependencyTarget)
                return true;
            if (setting.dependencyTarget && setting.dependencyValue) {
                var targetSetting = null;
                $.each(component.categories, function (ix, c) {
                    var matchingSetting = _.find(c.settings, function (s) {
                        return (s.id === setting.dependencyTarget);
                    });
                    if (matchingSetting) {
                        targetSetting = matchingSetting;
                        return;
                    }
                });
                var matchingValue = false;
                if (targetSetting && targetSetting.value != null) {
                    var settingvalues = setting.dependencyValue.split(',');
                    $.each(settingvalues, function (idx, val) {
                        if (val.toString() === targetSetting.value.toString())
                            matchingValue = true;
                    });
                }
                return matchingValue && self.settingVisible(targetSetting, component);
            }
            return true;
        };
        DeployServiceWizard.prototype.viewDetails = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('TEMPLATES_TEMPLATESETTINGS_MODAL_TemplateSettings'),
                modalSize: 'modal-lg',
                templateUrl: '/views/templatebuilder/ViewTemplateDetailsModal.html',
                controller: 'ViewTemplateDetailsModalController as viewTemplateDetailsModalController',
                params: {
                    template: self.service.template
                }
            });
            modal.modal.show();
        };
        DeployServiceWizard.prototype.validateStep3 = function () {
            var self = this;
            self.forms.step3.invalid = (self.forms.step3.$invalid || self.timeInvalid(true));
        };
        DeployServiceWizard.prototype.timeInvalid = function (checking) {
            var self = this;
            checking || self.validateStep3();
            return self.service.scheduleType === 'schedule' && (!self.datePicker.selectedDate || moment().isAfter(self.datePicker.selectedDate.toISOString()));
        };
        DeployServiceWizard.prototype.finishWizard = function () {
            var self = this;
            if (self.timeInvalid()) {
                return;
            }
            ;
            self.service.scheduleDate = self.service.scheduleType === "schedule"
                ? self.datePicker.selectedDate.toISOString()
                : "";
            var d = self.$q.defer();
            self.Loading(d.promise);
            if (self.selectedTemplate) {
                self.$http.post(self.commands.data.templates.getTemplateBuilderById, { id: self.selectedTemplate.id, deploy: true }).then(function (response) {
                    self.service.template = response.data.responseObj;
                    d.resolve();
                    self.generateService();
                });
            }
            else {
                d.resolve();
                self.generateService();
            }
        };
        DeployServiceWizard.prototype.generateService = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.createService(self.service).then(function (response) {
                d.resolve();
                self.$timeout(function () {
                    self.$location.path("service/" + response.data.responseObj.id + "/details");
                }, 500);
                self.close();
            }).catch(function (data) {
                d.resolve();
                self.globalServices.DisplayError(data.data);
            });
        };
        DeployServiceWizard.prototype.createService = function (service) {
            var self = this;
            return self.$http.post(self.commands.data.services.createService, service);
        };
        DeployServiceWizard.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DeployServiceWizard.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        DeployServiceWizard.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', '$translate', 'constants', 'Commands', '$location'];
        return DeployServiceWizard;
    }());
    asm.DeployServiceWizard = DeployServiceWizard;
    angular
        .module("app")
        .controller("DeployServiceWizard", DeployServiceWizard);
})(asm || (asm = {}));
//# sourceMappingURL=deployServiceWizard.js.map
var asm;
(function (asm) {
    "use strict";
    var ResourceTablesController = (function () {
        function ResourceTablesController(modal, dialog, $http, $timeout, $q, $translate) {
            this.modal = modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.warning = "warning";
        }
        Object.defineProperty(ResourceTablesController.prototype, "resources", {
            get: function () {
                var self = this;
                return self._resources;
            },
            set: function (newValue) {
                var self = this;
                if (!angular.equals(self.resources, newValue)) {
                    self._resources = newValue;
                    self.refresh();
                }
            },
            enumerable: true,
            configurable: true
        });
        ResourceTablesController.prototype.refresh = function () {
            var self = this;
            angular.extend(self.resources, {
                available: {
                    clusters: _.filter(self.resources.clusterlist, function (cluster) { return self.availableInventory(cluster.state); }).length,
                    servers: _.filter(self.resources.serverlist, function (server) { return self.availableInventory(server.state); }).length,
                    storages: _.filter(self.resources.storagelist, function (storage) { return self.availableInventory(storage.state); }).length
                }
            });
            //get values for name and status
            angular.forEach([
                self.resources.applicationlist,
                self.resources.vmlist,
                self.resources.clusterlist,
                self.resources.serverlist,
                self.resources.storagelist,
                self.resources.applicationlist
            ], function (array) {
                _.map(array, function (app) {
                    angular.extend(app, {
                        component: _.find(self.resources.components, { id: app.id }),
                        status: self.getComponentStatus(app.id),
                        available: self.availableInventory(app.state)
                    });
                });
            });
        };
        ResourceTablesController.prototype.availableInventory = function (state) {
            return !(state === 'unmanaged' || state === 'updating');
        };
        ResourceTablesController.prototype.getComponentStatus = function (id) {
            var self = this;
            var match = _.find(self.resources.componentstatus, function (cs) { return (cs.componentid === id); });
            switch (match ? match.status : "") {
                case 'pending':
                    return { icon: "standby", text: 'SETTINGS_Repositories_Pending' };
                case 'inprogress':
                    return { icon: "standby", text: 'GENERIC_InProgress' };
                case 'complete':
                    return { icon: "success", text: 'GENERIC_Deployed' };
                case 'error':
                    return { icon: "critical", text: 'GENERIC_Error' };
                case 'cancelled':
                    return { icon: "critical", text: 'GENERIC_Error' };
                case 'warning':
                    return { icon: "warning", text: 'GENERIC_Warning' };
            }
        };
        ResourceTablesController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate'];
        return ResourceTablesController;
    }());
    angular.module('app')
        .component('resourceTables', {
        templateUrl: 'views/services/ResourceTables.html',
        controller: ResourceTablesController,
        controllerAs: 'resourceTablesController',
        bindings: {
            resources: '=',
            mode: '@'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=resourceTables.js.map
var asm;
(function (asm) {
    var ServiceInformationController = (function () {
        function ServiceInformationController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, $translate, constants, commands, $filter) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.$translate = $translate;
            this.constants = constants;
            this.commands = commands;
            this.$filter = $filter;
            this.errors = new Array();
            this.templates = new Array();
            this.categories = new Array();
            this.firmwares = new Array();
            var self = this;
            self.activate();
        }
        ServiceInformationController.prototype.activate = function () {
            var self = this;
            console.log(self.service);
            var d = self.$q.defer();
            self.getTemplates().then(function (data) {
                self.templates = data.data.responseObj;
                if (self.service.template.id) {
                    self.selectedDropdownTemplate = _.filter(self.templates, { id: self.service.template.id })[0];
                }
                d.resolve();
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
            self.getFirmwares();
        };
        ServiceInformationController.prototype.getTemplate = function (id) {
            var self = this;
            self.getTemplateById(id).then(function (response) {
                self.service.template = response.data.responseObj;
                self.service.template.components = self.filterComponents(self.service.template);
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ServiceInformationController.prototype.filterComponents = function (template) {
            //marks all components, categories and settings with a property of 'hidden' = false based on 
            //whether they have at least one setting with the property 'requireatdeployment' of true
            //template > components > categories > settings
            _.forEach(_.filter(template.components, function (component) {
                component.categories = _.filter(component.categories, function (category) {
                    category.settings = _.filter(category.settings, "requireatdeployment");
                    return category.settings.length > 0;
                });
                return component.categories.length > 0;
            }), function (component) {
                component.hidden = false;
                _.forEach(component.categories, function (category) {
                    category.hidden = false;
                    _.forEach(category.settings, function (setting) {
                        setting.hidden = false;
                    });
                });
            });
            return template.components;
        };
        ServiceInformationController.prototype.getFirmwares = function () {
            var self = this;
            self.$http.post(self.commands.data.firmwarepackages.getAvailableFirmwarePackages, {}).then(function (response) {
                self.firmwares = response.data.responseObj;
            });
        };
        ServiceInformationController.prototype.getTemplates = function () {
            var self = this;
            return self.$http.post(self.commands.data.templates.getReadyTemplateList, { requestObj: {} });
        };
        ServiceInformationController.prototype.getTemplateById = function (id) {
            var self = this;
            return self.$http.post(self.commands.data.templates.getTemplateBuilderById, { id: id, deploy: true });
        };
        ServiceInformationController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', '$translate', 'constants', 'Commands', '$filter'];
        return ServiceInformationController;
    }());
    asm.ServiceInformationController = ServiceInformationController;
    angular.module('app')
        .component('serviceInformation', {
        templateUrl: 'views/services/DeployService/ServiceInformation.html',
        controller: ServiceInformationController,
        controllerAs: 'serviceInformationController',
        bindings: {
            service: '=',
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=serviceInformation.js.map
var asm;
(function (asm) {
    "use strict";
    var ServiceTileController = (function () {
        function ServiceTileController(modal, dialog, $http, $timeout, $q, $translate) {
            this.modal = modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.actions = {};
            var self = this;
            angular.extend(self.actions, { getClasses: function (param) { return self.getClasses(param); } });
        }
        //showTransparency comes as a boolean when coming from the filter by 'All' tiles which require transparency when their count is zero and a boolean comes from the side panel also which is always false
        //other service tiles will only need the translucent layer when their tile matches the side panel
        ServiceTileController.prototype.getClasses = function (tile) {
            var self = this;
            var classes = new Array();
            classes.push('thumbnail-service');
            switch (tile.health) {
                case 'Error':
                    classes.push('red');
                    break;
                case 'Healthy':
                    classes.push('green');
                    break;
                case 'In Progress':
                    classes.push('unknown');
                    break;
                case 'Warning':
                    classes.push('yellow');
                    break;
                case 'Cancelled':
                    classes.push('orange');
                    break;
            }
            return classes.join(" ");
        };
        ServiceTileController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate'];
        return ServiceTileController;
    }());
    angular.module('app')
        .component('serviceTile', {
        templateUrl: 'views/services/serviceTile.html',
        controller: ServiceTileController,
        controllerAs: 'serviceTileController',
        bindings: {
            selectedItem: '=',
            tileInfo: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=serviceTile.js.map
var asm;
(function (asm) {
    "use strict";
    var TemplateBuilderSidePanelController = (function () {
        function TemplateBuilderSidePanelController(Modal, dialog, $http, $timeout, $q, $translate, $scope, globalServices, loading, Commands, $location) {
            this.Modal = Modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$scope = $scope;
            this.globalServices = globalServices;
            this.loading = loading;
            this.Commands = Commands;
            this.$location = $location;
            this.refresh();
        }
        TemplateBuilderSidePanelController.prototype.refresh = function () {
            var self = this;
        };
        TemplateBuilderSidePanelController.prototype.editMode = function () {
            var self = this;
            self.$location.path("/templatebuilder/" + self.template.id + "/edit");
        };
        TemplateBuilderSidePanelController.prototype.viewDetails = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('TEMPLATES_TEMPLATESETTINGS_MODAL_TemplateSettings'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templatebuilder/ViewTemplateDetailsModal.html',
                controller: 'ViewTemplateDetailsModalController as viewTemplateDetailsModalController',
                params: {
                    template: self.template
                },
                close: function () {
                    self.$scope.modal.close();
                },
            });
            modal.modal.show();
        };
        TemplateBuilderSidePanelController.prototype.editTemplateInformation = function () {
            var self = this;
            var createTemplateModal = self.Modal({
                title: self.$translate.instant('TEMPLATES_EditTemplateInformation'),
                modalSize: 'modal-lg',
                templateUrl: 'views/createtemplate.html',
                controller: 'CreateTemplateModalController as createTemplateModalController',
                params: {
                    //selecteduser: modalUser
                    //templates: self.myTemplates,
                    template: self.template,
                    type: 'edit'
                },
                onComplete: function (id) {
                    self.refreshParent();
                },
                close: function () {
                    self.refreshParent();
                }
            });
            createTemplateModal.modal.show();
        };
        TemplateBuilderSidePanelController.prototype.publishTemplate = function () {
            var self = this;
            self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_Confirm')).then(function () {
                var d = self.$q.defer();
                self.loading(d.promise);
                self.template.draft = false;
                self.publish(self.template).then(function (response) {
                    d.resolve();
                    self.$timeout(function () {
                        self.$location.path('templatebuilder/' + self.template.id + '/view');
                    }, 500);
                }).catch(function (response) {
                    self.globalServices.DisplayError(response.data);
                });
            }).catch(function () { });
        };
        TemplateBuilderSidePanelController.prototype.publish = function (template) {
            var self = this;
            return self.$http.post(self.Commands.data.templates.saveTemplate, template);
        };
        TemplateBuilderSidePanelController.prototype.deleteTemplate = function () {
            var self = this;
            var confirm = self.dialog(("Confirm"), self.$translate.instant("TEMPLATEBUILDER_DiscardConfirm"));
            confirm.then(function () {
                //var d = self.$q.defer();
                //self.loading(d.promise);
                self.$http.post(self.Commands.data.templates.discardTemplate, { requestObj: [self.template.id.toString()] })
                    .success(function (data, status, headers, config) {
                    //d.resolve();
                    self.$location.path('templates');
                })
                    .error(function (data, status, headers, config) {
                    //d.resolve();
                });
            });
        };
        TemplateBuilderSidePanelController.prototype.importTemplate = function () {
            var self = this;
            var modal = this.Modal({
                title: self.$translate.instant('IMPORTTEMPLATE_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/importtemplatemodal.html',
                controller: 'ImportTemplateModalController as importtemplate',
                params: {
                    template: self.template.id
                },
                onComplete: function () {
                    self.refreshParent();
                },
            });
            modal.modal.show();
        };
        TemplateBuilderSidePanelController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$scope', 'GlobalServices', 'Loading', 'Commands', '$location'];
        return TemplateBuilderSidePanelController;
    }());
    angular.module('app')
        .component('sidePanel', {
        templateUrl: 'views/templatebuilder/SidePanel.html',
        controller: TemplateBuilderSidePanelController,
        controllerAs: 't',
        bindings: {
            template: '=',
            mode: '=',
            jobRequest: '=',
            actions: '=',
            refreshParent: '&'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=sidePanel.js.map
var asm;
(function (asm) {
    "use strict";
    var BasicSettingController = (function () {
        function BasicSettingController($q, Loading, $http, GlobalServices) {
            this.$q = $q;
            this.Loading = Loading;
            this.$http = $http;
            this.GlobalServices = GlobalServices;
            var self = this;
            if (self.setting.datatype === "enum" && !self.setting.value) {
                var options = self.filteredoptions(self.setting, self.component), possibleDefault = _.find(options, { id: "-1" });
                self.setting.value = possibleDefault ? possibleDefault.id : options[0].id;
            }
        }
        BasicSettingController.prototype.filteredoptions = function (setting, component) {
            var self = this;
            if (!setting || !component)
                return [];
            var returnVal = [];
            var radioGroup = self.GlobalServices.NewGuid();
            $.each(setting.options, function (optionIndex, option) {
                if (option.dependencyTarget && option.dependencyValue) {
                    var targetSetting = null;
                    $.each(component.categories, function (categoryIndex, c) {
                        var matchingSetting = _.find(c.settings, function (s) {
                            return (s.id == option.dependencyTarget);
                        });
                        if (matchingSetting) {
                            targetSetting = matchingSetting;
                            return;
                        }
                    });
                    var matchingValue = false;
                    if (targetSetting && targetSetting.value != null) {
                        var settingvalues = option.dependencyValue.split(',');
                        $.each(settingvalues, function (idx, val) {
                            if (val.toString() == targetSetting.value.toString())
                                matchingValue = true;
                        });
                    }
                    if (matchingValue) {
                        returnVal.push(option);
                    }
                }
                else {
                    returnVal.push(option);
                }
            });
            return returnVal;
        };
        BasicSettingController.prototype.checkboxSettingClicked = function (id, arr) {
            var x = arr.indexOf(id);
            if (x > -1) {
                x.splice(x, 1);
            }
            else {
                x.add(id);
            }
        };
        BasicSettingController.$inject = ['$q', 'Loading', '$http', 'GlobalServices'];
        return BasicSettingController;
    }());
    angular.module('app')
        .component('basicsetting', {
        templateUrl: 'views/basicsetting.html',
        controller: BasicSettingController,
        controllerAs: 'BasicSetting',
        bindings: {
            setting: '=?',
            mode: '=?',
            component: '=?',
            category: '=?',
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=basicsetting.js.map
var asm;
(function (asm) {
    "use strict";
    var GroupedGridController = (function () {
        function GroupedGridController(Modal, Dialog, $http, $timeout, $q, $translate, $scope, GlobalServices) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$scope = $scope;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.refreshCategories();
        }
        GroupedGridController.prototype.refreshCategories = function () {
            var self = this;
            self.categories = [];
            var groupedCategories = _.groupBy(self.list, 'category');
            for (var category in groupedCategories) {
                if (groupedCategories.hasOwnProperty(category)) {
                    self.categories.push({ 'name': category, 'count': groupedCategories[category].length });
                }
            }
        };
        GroupedGridController.prototype.changeCategory = function (categoryName) {
            var self = this;
            self.filterBy = categoryName;
            self.$timeout(function () { return self.updateArrays(); });
        };
        GroupedGridController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$scope', 'GlobalServices'];
        return GroupedGridController;
    }());
    angular.module('app')
        .component('groupedGrid', {
        templateUrl: '/views/templates/GroupedGrid.html',
        controller: GroupedGridController,
        controllerAs: 'group',
        bindings: {
            list: '<',
            filterBy: '=',
            updateArrays: '&'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=groupedGrid.js.map
var asm;
(function (asm) {
    "use strict";
    var TemplateTileController = (function () {
        function TemplateTileController(modal, dialog, $http, $timeout, $q, $translate) {
            this.modal = modal;
            this.dialog = dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            var self = this;
            angular.extend(self.actions, {
                getClasses: function (param) { return self.getClasses(param); }
            });
        }
        TemplateTileController.prototype.getClasses = function (tile) {
            var self = this;
            var classes = new Array();
            classes.push('thumbnail-template');
            //May need to add this back in if visual design direction changes -MH
            //if (tile.isTemplateValid === false) {
            //    classes.push('template-warning');
            //}
            //else if (tile.isLocked === true) {
            //    classes.push('template-example');
            //} else if (tile.draft === true) {
            //    classes.push('draft');
            //}
            if (tile.isLocked === true) {
                classes.push('template-example');
            }
            else if (tile.draft === true) {
                classes.push('draft');
            }
            return classes.join(" ");
        };
        TemplateTileController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate'];
        return TemplateTileController;
    }());
    angular.module('app')
        .component('templateTile', {
        templateUrl: 'views/templates/templateTile.html',
        controller: TemplateTileController,
        controllerAs: 'templateTileController',
        bindings: {
            selectedItem: '=',
            tileInfo: '=',
            actions: '=',
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=templateTile.js.map
var asm;
(function (asm) {
    "use strict";
    var TileController = (function () {
        function TileController(Modal, Dialog, $http, $timeout, $q, $translate, $scope, GlobalServices, $location) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$scope = $scope;
            this.GlobalServices = GlobalServices;
            this.$location = $location;
            var self = this;
            self.refresh();
        }
        TileController.prototype.refresh = function () {
            var self = this;
        };
        TileController.prototype.isTemplate = function () {
            var self = this;
            return self.type === 'template';
        };
        TileController.prototype.isService = function () {
            var self = this;
            return self.type === 'service';
        };
        TileController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$scope', 'GlobalServices', '$location'];
        return TileController;
    }());
    angular.module('app')
        .component('tile', {
        templateUrl: 'views/tiles/Tile.html',
        controller: TileController,
        controllerAs: 't',
        bindings: {
            selectedItem: '=',
            tileInfo: '=',
            hideActions: '=',
            actions: '=',
            type: '@'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=tile.js.map
var asm;
(function (asm) {
    "use strict";
    var NetworksController = (function () {
        function NetworksController($http, $timeout, $q, Modal, Dialog, $filter, Loading, $translate, Commands, GlobalServices, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$filter = $filter;
            this.Loading = Loading;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            var self = this;
            self.networkTypes = [];
            self.currentView = "all";
            self.StaticIPAddressDetailsViews = constants.staticIPAddressDetailsViews;
            self.deferred = self.$q.defer();
            self.refresh();
        }
        NetworksController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.$q.all([
                self.loadNetworkTypes()
                    .then(function (data) {
                    self.networkTypes = data.data.responseObj;
                }),
                self.getNetworksList().then(function (data) {
                    //apply default sort so selecting first will work
                    var sortedData = _.sortBy(data.data.responseObj, function (n) {
                        return n.name.toLowerCase();
                    });
                    self.networkData = sortedData;
                    self.displayedNetworkData = [].concat(self.networkData);
                    var selectedNet = null;
                    if (self.selectedNetworkId != null) {
                        selectedNet = _.find(self.networkData, { id: self.selectedNetworkId });
                    }
                    if (selectedNet == null) {
                        selectedNet = self.displayedNetworkData[0];
                    }
                    self.onNetworkSelected(selectedNet);
                })
            ])
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                .finally(function () { return d.resolve(); });
        };
        ;
        NetworksController.prototype.onNetworkSelected = function (network, ipRange) {
            var self = this;
            if (network) {
                var d = self.$q.defer();
                self.Loading(d.promise);
                //this call must be async: false
                self.getNetworkById(network.id)
                    .then(function (data) {
                    self.selectedNetwork = data.data.responseObj;
                    self.selectedNetworkId = self.selectedNetwork.id;
                    if (self.selectedNetwork.staticordhcp == 'Static') {
                        //update static ip address details counts on network selection, based on selectedNetwork
                        self.totalIPAddresses_display = self.selectedNetwork.staticipaddressdetails.length;
                        self.inUseIPAddresses_display = _.filter(self.selectedNetwork.staticipaddressdetails, { state: 'inuse' }).length;
                        self.staticipaddressdetails_copy = self.selectedNetwork.staticipaddressdetails.slice(0, self.selectedNetwork.staticipaddressdetails.length);
                        if (self.selectedElement == 'filterDetails') {
                            self.totalIPAddresses_display = ipRange.totalIPAddresses;
                            self.inUseIPAddresses_display = ipRange.inUseIPAddresses;
                            //if one of the in use links was clicked, reset filter to inuse
                            self.currentView = 'inuse';
                            self.updateClientFilter();
                        }
                        else {
                            //reset the filter to all with each network row change or same-row click that is not on a link
                            //if one of the in use links was not clicked, reset filter to all
                            self.currentView = 'all';
                            self.updateClientFilter();
                        }
                    }
                }).catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                    .finally(function () { return d.resolve(); });
            }
        };
        NetworksController.prototype.updateClientFilter = function () {
            var self = this;
            var ipaddress1;
            var ipaddress2;
            if (self.staticipaddressdetails_copy.length == 0)
                return;
            self.selectedNetwork.staticipaddressdetails = [];
            self.selectedNetwork.staticipaddressdetails = self.staticipaddressdetails_copy.slice(0, self.staticipaddressdetails_copy.length);
            if (self.startingIpAddress != null && self.endingIpAddress != null) {
                ipaddress1 = self.$filter('ip2long')(self.startingIpAddress);
                ipaddress2 = self.$filter('ip2long')(self.endingIpAddress);
            }
            var filteredData = self.selectedNetwork.staticipaddressdetails.filter(function (item) {
                return (((self.currentView == 'all' && (item.state == 'available' || item.state == 'inuse')) || (item.state == self.currentView)) &&
                    ((ipaddress1 == '' && ipaddress2 == '') || (self.$filter('ip2long')(item.ipAddress) >= ipaddress1 && self.$filter('ip2long')(item.ipAddress) <= ipaddress2)));
            });
            self.selectedNetwork.staticipaddressdetails = [];
            self.selectedNetwork.staticipaddressdetails = filteredData.slice(0, filteredData.length);
            //smart table works by starting with data from st-safe-src (treating that one as safe), and then uses data from st-table for the actual display and paging of the data,
            //so another array is needed for this displayed data source
            self.selectedNetwork.staticipaddressdetails_displayed = [].concat(self.selectedNetwork.staticipaddressdetails);
        };
        NetworksController.prototype.click_tableRow = function (clickedItem) {
            //click on TR
            //self.selectedNetwork = network;
            var self = this;
            var network = clickedItem;
            self.selectedElement = 'row';
            self.startingIpAddress = '';
            self.endingIpAddress = '';
            //var currentTarget = evt.target;
            //while (currentTarget.nodeName != 'TR') {
            //    //we are on a child node
            //    currentTarget = currentTarget.parentNode;
            //}
            ////we are now on the TR node so dataFor will now apply to the correct element
            //var network = ko.dataFor(currentTarget);
            self.onNetworkSelected(network);
        };
        NetworksController.prototype.click_IPAddressRange = function (clickedItem1, clickedItem2) {
            //click on class filterDetails
            var self = this;
            var network = clickedItem1;
            var ipRange = clickedItem2;
            self.selectedElement = 'filterDetails';
            self.startingIpAddress = ipRange.startingIpAddress;
            self.endingIpAddress = ipRange.endingIpAddress;
            //self.Loading(self.deferred.promise);
            self.onNetworkSelected(network, ipRange);
            //self.totalIPAddresses_display = ipRange.totalIPAddresses;
            //self.inUseIPAddresses_display = ipRange.inUseIPAddresses;
        };
        NetworksController.prototype.deleteNetwork = function () {
            var self = this;
            //Confirmation Dialog box that fires delete on confirmation
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('NETWORKS_ConfirmDelete'))).then(function () {
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.deleteNetworkById(self.selectedNetwork.id)
                    .then(function (data) {
                    self.refresh();
                }).catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                    .finally(function () { return d.resolve(); });
            });
        };
        NetworksController.prototype.doDownload = function (type) {
            var self = this;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            self.processDownloadRequests('initial', '', type, deferred);
        };
        NetworksController.prototype.processDownloadRequests = function (call, id, type, deferred) {
            var self = this;
            var urlToCall;
            var data;
            urlToCall = self.Commands.data.downloads.status;
            data = { 'id': id };
            if (call == 'initial') {
                urlToCall = self.Commands.data.downloads.create;
                if (type == 'networkdetails') {
                    data = { 'type': type, 'id': self.selectedNetworkId };
                }
                else {
                    data = { 'type': type };
                }
            }
            self.$http.post(urlToCall, { requestObj: data })
                .then(function (data) {
                switch (data.data.responseObj.status) {
                    case 'NOT_READY':
                        self.$timeout(function () {
                            self.processDownloadRequests('status', data.data.responseObj.id, type, deferred);
                        }, 5000);
                        break;
                    case 'READY':
                        window.location = 'downloads/getfile/' + data.data.responseObj.id;
                        deferred.resolve();
                        break;
                    case 'ERROR':
                        deferred.resolve();
                        self.GlobalServices.DisplayError(data.data);
                        break;
                }
            }).catch(function (data) {
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        NetworksController.prototype.doUpdates = function (updateType) {
            var self = this;
            var title;
            //add/create or edit
            switch (updateType.toUpperCase()) {
                case 'CREATE':
                    //title = 'Define Network';
                    title = self.$translate.instant('NETWORKS_Edit_CreateTitle');
                    self.selectedNetworkId = '';
                    break;
                case 'EDIT':
                    //title = 'Edit Network';
                    title = self.$translate.instant('NETWORKS_Edit_EditTitle');
                    break;
            }
            var editNetworkModal = this.Modal({
                title: title,
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/editNetwork.html',
                controller: 'EditNetworkModalController as editNetwork',
                params: {
                    editMode: updateType,
                    id: self.selectedNetworkId
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            editNetworkModal.modal.show();
        };
        NetworksController.prototype.loadNetworkTypes = function () {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworkTypes, { 'scaleup': false });
        };
        NetworksController.prototype.getNetworksList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworksList, {});
        };
        NetworksController.prototype.getNetworkById = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworkById, { id: id });
        };
        NetworksController.prototype.deleteNetworkById = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.deleteNetwork, { id: id });
        };
        NetworksController.$inject = ['$http', '$timeout', '$q', 'Modal', 'Dialog', '$filter',
            'Loading', '$translate', 'Commands', 'GlobalServices', 'constants'];
        return NetworksController;
    }());
    function networks() {
        return {
            restrict: 'E',
            templateUrl: 'views/networking/networks/networks.html',
            replace: true,
            transclude: false,
            controller: NetworksController,
            controllerAs: 'networks',
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('networks', networks);
})(asm || (asm = {}));
//# sourceMappingURL=networksdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var AddonmodulesController = (function () {
        function AddonmodulesController(Dialog, $http, $timeout, $q, $translate, Modal, GlobalServices, Commands, Loading, $filter) {
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            this.Loading = Loading;
            this.$filter = $filter;
            this.refresh();
        }
        AddonmodulesController.prototype.activate = function () {
            var self = this;
            self.$timeout(function () {
                self.refresh();
                self.activate();
            }, 60000);
        };
        AddonmodulesController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.addonmodules.getAddOnModules, null).then(function (data) {
                self.results = self.$filter('orderBy')(data.data.responseObj, "name");
                self.displayedresults = [].concat(self.results);
                //when finished getting jobs, reselect the selected and include elapsed time
            }).then(function (response) {
                self.selected = self.selected
                    ? _.find(self.displayedresults, { id: self.selected.id })
                    : self.displayedresults[0];
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        ;
        //delete module
        AddonmodulesController.prototype.deleteModule = function (module) {
            var self = this;
            //Confirmation Dialog box that fire delete on confirmation
            var confirm = self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_DeleteConfirmation')));
            confirm.then(function () {
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.addonmodules.removeAddOnModule, module)
                    .then(function (data) {
                    self.selected = false;
                    self.refresh();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        AddonmodulesController.prototype.addModule = function () {
            var self = this;
            var testModal = self.Modal({
                title: self.$translate.instant('SETTINGS_AddModule'),
                //TODO:  need to wire up help button still as per framework updates
                //helpUrl: self.Commands.help.AddingAddonModules,
                modalSize: 'modal-lg',
                templateUrl: 'views/addonmodules/addmodule.html',
                controller: 'AddModuleModalController as AddModuleModal',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            testModal.modal.show();
        };
        AddonmodulesController.$inject = ['Dialog', '$http', '$timeout', '$q', '$translate', 'Modal', 'GlobalServices', 'Commands', 'Loading', '$filter'];
        return AddonmodulesController;
    }());
    angular.module('app')
        .component('addonModules', {
        templateUrl: 'views/addonmodules.html',
        controller: AddonmodulesController,
        controllerAs: 'addonmodules',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=addonmodulesdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var AddUsersController = (function () {
        function AddUsersController(modal, $translate) {
            this.modal = modal;
            this.$translate = $translate;
        }
        AddUsersController.prototype.removeUsers = function () {
            var self = this;
            _.remove(self.usersList, { enabled: true });
        };
        AddUsersController.prototype.addUsers = function () {
            var self = this;
            var newUsersModal = self.modal({
                title: self.$translate.instant("ADD_USERS_AddUsers"),
                modalSize: "modal-lg",
                templateUrl: "views/addUsersModal.html",
                controller: "AddUsersController as addUsersController",
                params: {
                    users: angular.copy(self.usersList)
                },
                onComplete: function (users) {
                    self.usersList = users;
                },
                onFinish: function () {
                }
            });
            newUsersModal.modal.show();
        };
        AddUsersController.$inject = ["Modal", "$translate"];
        return AddUsersController;
    }());
    angular.module('app')
        .component('addUsers', {
        templateUrl: 'views/addUsersComponent.html',
        controller: AddUsersController,
        controllerAs: 'addUsersController',
        bindings: {
            usersList: "="
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=addUsers.js.map
angular.module('ASM.directives', ['ASM.dataservices']);

var asm;
(function (asm) {
    "use strict";
    var LogsController = (function () {
        //public availableLogCategories: Array<any> = [
        //    //{ name: 'All' },
        //    { name: 'Security' },
        //    { name: 'Appliance Configuration' },
        //    { name: 'Template Configuration' },
        //    { name: 'Network Configuration' },
        //    { name: 'Hardware Configuration' },
        //    { name: 'Monitoring' },
        //    { name: 'Deployment' },
        //    { name: 'Licensing' },
        //    { name: 'Miscellaneous' }
        //];
        function LogsController($http, $timeout, $q, $translate, Modal, Loading, Commands, GlobalServices, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.selectorConfig = {};
            this.viewModel = {};
            this.currentView = '';
            this.displayedData = [];
            var self = this;
            self.refresh();
        }
        LogsController.prototype.activate = function () {
            var self = this;
            this.$timeout(function () {
                self.refresh();
            }, 10000);
        };
        LogsController.prototype.refresh = function () {
            var self = this;
            self.$http.post(self.Commands.data.logs.getLogs, null).then(function (data) {
                //self.$http.post('bogus', null).then(function (data: any) {
                self.viewModel = data.data.responseObj;
                self.displayedData = [].concat(self.viewModel);
            }).catch(function (data) {
                //error
                self.viewModel = [];
                self.GlobalServices.DisplayError(data.data);
            });
        };
        LogsController.prototype.doDownload = function () {
            var self = this;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            self.processDownloadRequests('initial', '', deferred);
        };
        LogsController.prototype.processDownloadRequests = function (type, id, deferred) {
            var self = this;
            var urlToCall = '';
            var data;
            urlToCall = self.Commands.data.downloads.status;
            data = { 'id': id };
            if (type == 'initial') {
                urlToCall = self.Commands.data.downloads.create;
                //urlToCall = 'bogus';
                data = { 'type': 'logs' };
            }
            self.$http.post(urlToCall, { requestObj: data }).then(function (data) {
                switch (data.data.responseObj.status) {
                    case 'NOT_READY':
                        self.$timeout(function () {
                            self.processDownloadRequests('status', data.data.responseObj.id, deferred);
                        }, 5000);
                        break;
                    case 'READY':
                        window.location = 'downloads/getfile/' + data.data.responseObj.id;
                        deferred.resolve();
                        break;
                    case 'ERROR':
                        //handle error
                        var x = 0;
                        deferred.resolve();
                        self.GlobalServices.DisplayError(data.data);
                        break;
                }
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        LogsController.prototype.doPurge = function () {
            var self = this;
            var purgeModal = this.Modal({
                title: self.$translate.instant('PURGELOGS_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/logs/purgelogs.html',
                controller: 'PurgeLogsController as PurgeLogsController',
                params: {},
                onComplete: function (modalScope) {
                    //modalScope.modal.dismiss();
                    self.refresh();
                }
            });
            purgeModal.modal.show();
        };
        LogsController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Commands', 'GlobalServices', 'constants'];
        return LogsController;
    }());
    angular.module('app')
        .component('asmlogs', {
        templateUrl: 'views/logs.html',
        controller: LogsController,
        controllerAs: 'logs',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=asmlogsdirective.js.map
/// <reference path="asmlogsdirective.ts" />
var asm;
(function (asm) {
    "use strict";
    var BackupAndRestoreController = (function () {
        function BackupAndRestoreController(Modal, Dialog, $http, $timeout, $q, $translate, Commands, Loading, GlobalServices) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Commands = Commands;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.editScheduledBackupInfo = function () {
                var self = this;
                var editScheduledBackupModal = self.Modal({
                    title: self.$translate.instant('BACKUPANDRESTORE_scheduledbackup_title'),
                    modalSize: 'modal-lg',
                    templateUrl: 'views/settings/backupandrestore/editscheduledbackup.html',
                    controller: 'EditScheduledBackupModalController as editScheduledBackup',
                    params: {},
                    onComplete: function () {
                        self.refresh();
                    }
                });
                editScheduledBackupModal.modal.show();
            };
            this.refresh();
        }
        BackupAndRestoreController.prototype.activate = function () {
            var self = this;
            self.$timeout(function () {
                self.refresh();
                self.activate();
            }, 60000);
        };
        BackupAndRestoreController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$q.all([
                self.$http.post(self.Commands.data.backupAndRestore.getBackupScheduleInfo, null)
                    .then(function (response) {
                    self.backupScheduleInfo = response.data.responseObj;
                }),
                self.$http.post(self.Commands.data.backupAndRestore.getBackupSettings, null)
                    .then(function (response) {
                    self.backupSettings = response.data.responseObj;
                })
            ]).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            })
                .finally(function () { return d.resolve(); });
        };
        ;
        BackupAndRestoreController.prototype.backupNow = function () {
            var self = this;
            var backupNowModal = self.Modal({
                title: self.$translate.instant('BACKUPANDRESTORE_btnbackupnow'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/backupandrestore/backupnow.html',
                controller: 'BackupNowModalController as backupNow',
                params: {}, onComplete: function () {
                    self.refresh();
                }
            });
            backupNowModal.modal.show();
        };
        BackupAndRestoreController.prototype.restoreNow = function () {
            var self = this;
            var restoreNowModal = self.Modal({
                title: self.$translate.instant('BACKUPANDRESTORE_btnrestorenow'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/backupandrestore/restorenow.html',
                controller: 'RestoreNowModalController as restoreNow',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            restoreNowModal.modal.show();
        };
        ;
        BackupAndRestoreController.prototype.editBackupSettingsAndDetails = function () {
            var self = this;
            var editBackupSettingsModal = self.Modal({
                title: self.$translate.instant('BACKUPSETTINGSANDDETAILS_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/backupandrestore/editsettingsanddetails.html',
                controller: 'BackupSettingsAndDetailsModalController as editBackupSettings',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            editBackupSettingsModal.modal.show();
        };
        ;
        BackupAndRestoreController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', 'Commands', 'Loading', 'GlobalServices'];
        return BackupAndRestoreController;
    }());
    angular.module('app')
        .component('backupAndRestore', {
        templateUrl: 'views/settings/backupandrestore/backupandrestore.html',
        controller: BackupAndRestoreController,
        controllerAs: 'backupAndRestore',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=backupandrestore.js.map
var asm;
(function (asm) {
    "use strict";
    var BiosConfigurationController = (function () {
        function BiosConfigurationController($scope, GlobalServices) {
            this.$scope = $scope;
            this.GlobalServices = GlobalServices;
            this.setting = null;
            this.readonly = '';
            this.radioGuid = '';
            var self = this;
            this.setting = this.$scope.setting;
            this.readonly = this.$scope.readonly;
            this.radioGuid = this.GlobalServices.NewGuid();
        }
        BiosConfigurationController.$inject = ['$scope', 'GlobalServices'];
        return BiosConfigurationController;
    }());
    function biosconfiguration() {
        return {
            restrict: 'E',
            templateUrl: 'views/biosconfiguration.html',
            replace: true,
            transclude: false,
            controller: BiosConfigurationController,
            controllerAs: 'BiosConfiguration',
            scope: {
                setting: '=',
                readonly: '='
            },
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular
        .module('app')
        .directive('biosconfiguration', biosconfiguration);
})(asm || (asm = {}));
//# sourceMappingURL=biosconfiguration.js.map
var asm;
(function (asm) {
    "use strict";
    var ChevronController = (function () {
        function ChevronController() {
        }
        ChevronController.$inject = [];
        return ChevronController;
    }());
    angular.module('app')
        .component('chevron', {
        transclude: true,
        templateUrl: 'views/Chevron.html',
        controller: ChevronController,
        controllerAs: 'chevronController',
        bindings: {
            item: '=',
            initValue: '=?',
            hideChevron: '=?'
        }
    });
})(asm || (asm = {}));
/*
Used for accordion style collapsable rows. Note this is only the header portion.
Parameters:
item - This is a boolean property that will be toggled on click of the chevron symbol or the title itself passed in
initValue - You can pass in an initial value of true for item, otherwise it will default to false
hideChevron - Hide a chevron when it has nothing to list below it

Transcluded items - The text for the heading
Example:
<chevron item="showContent"
         init-value="true"
         hide-chevron="!item.children.length">
Title of collapseable row
</chevron>
<div ng-if="showContent">
    Content to show
</div>

*/ 
//# sourceMappingURL=chevron.js.map
var asm;
(function (asm) {
    "use strict";
    var ClarityColumnSelectorController = (function () {
        //public config: any = {};
        function ClarityColumnSelectorController(Modal, Dialog, $http, $timeout, $q, $translate, $scope, $parse) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$scope = $scope;
            this.$parse = $parse;
        }
        ClarityColumnSelectorController.prototype.activate = function () {
        };
        ClarityColumnSelectorController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$scope', '$parse'];
        return ClarityColumnSelectorController;
    }());
    function clarityColumnSelector() {
        return {
            restrict: 'A',
            replace: false,
            transclude: false,
            controller: ClarityColumnSelectorController,
            //controllerAs: 'ctrl',
            scope: {
                config: '=clarityColumnSelector'
            },
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    function clarityColumnPicker() {
        return {
            restrict: 'A',
            replace: true,
            transclude: false,
            //controller: ClarityColumnSelectorController,
            //controllerAs: 'ctrl',
            scope: {
                config: '=clarityColumnPicker'
            },
            link: function (scope, element, attributes, controller) {
            },
            template: function () {
                var html = '';
                html += '                <div class="dropdown dropdown-filter btn-group">' +
                    '                    <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">' +
                    '                        Column Picker &nbsp;<span class="caret"></span>' +
                    '                    </button>' +
                    '                            <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">' +
                    '                                <li ng-repeat="column in config">' +
                    '                                    <input type="checkbox" ng-model="column.visible" style="margin-left: 3px; margin-right: 3px;"><span style="color: initial;">{{column.label}}</span>' +
                    '                               </li>' +
                    '                           </ul>' +
                    '                  </div>';
                return html;
            }
        };
    }
    function clarityColumnSelectorColumn() {
        return {
            require: '^clarityColumnSelector',
            restrict: 'A',
            replace: false,
            transclude: false,
            scope: {
                clarityColumnSelectorColumn: '='
            },
            link: function (scope, element, attributes, controller) {
                if (!scope.clarityColumnSelectorColumn)
                    return;
                var column = {
                    label: scope.clarityColumnSelectorColumn.label || scope.clarityColumnSelectorColumn.column || scope.clarityColumnSelectorColumn,
                    column: scope.clarityColumnSelectorColumn.column || scope.clarityColumnSelectorColumn.column || scope.clarityColumnSelectorColumn,
                    visible: true
                };
                if (!controller.$scope.config[column.column])
                    controller.$scope.config[column.column] = column;
                controller.$scope.$watch('config', function () {
                    if (controller.$scope.config[column.column].visible === false) {
                        element.hide();
                    }
                    else {
                        element.show();
                    }
                }, true);
            }
        };
    }
    angular.module('app').
        directive('clarityColumnSelector', clarityColumnSelector);
    angular.module('app').
        directive('clarityColumnSelectorColumn', clarityColumnSelectorColumn);
    angular.module('app').
        directive('clarityColumnPicker', clarityColumnPicker);
})(asm || (asm = {}));
//# sourceMappingURL=claritycolumnselector.js.map
var asm;
(function (asm) {
    "use strict";
    var ComponentEditorController = (function () {
        function ComponentEditorController($rootScope, $q, Loading, $http, GlobalServices, $translate, Modal, constants, commands, $location, dialog) {
            this.$rootScope = $rootScope;
            this.$q = $q;
            this.Loading = Loading;
            this.$http = $http;
            this.GlobalServices = GlobalServices;
            this.$translate = $translate;
            this.Modal = Modal;
            this.constants = constants;
            this.commands = commands;
            this.$location = $location;
            this.dialog = dialog;
            this.formProcessing = false;
            this.newComponent = null;
            this.instances = 1;
            this.mode = "edit";
            this.associateAllResources = "selected";
            this.continueClicked = false;
            this.saving = false;
            this.templateinvalid = false;
            this.action = 'add';
            this.backButton = false;
            this.invalidFormElements = [];
            var self = this;
            self.action = self.config.action;
            if (self.action == 'edit') {
                self.newComponent = _.find(self.config.template.components, { id: self.config.componentId });
            }
        }
        Object.defineProperty(ComponentEditorController.prototype, "templateInvalid", {
            /*
             How template invalid works:
                The final save button will be bound to the result of the getter of templateInvalid.
                Each instance of a custom form element will push its instance into the invalidFormElements array and update it there
                template invalid getter will return whether any of those instances is invalid.
    
            This was implemented to solve the issue that resulted from having each custom form element have control over templateinvalid. Issue being
            that no component could know whether any other form elements were valid or invalid and couldn't know when to say the entire form genuinely was or was not valid.
             */
            get: function () {
                var self = this;
                return !!_.find(self.invalidFormElements, { invalid: true });
            },
            enumerable: true,
            configurable: true
        });
        ComponentEditorController.prototype.isRelated = function (relatedId) {
            var self = this;
            return _.find(self.newComponent.relatedcomponents, { id: relatedId });
        };
        ComponentEditorController.prototype.linkComponents = function (component1, component2, oneWay) {
            component1.relatedcomponents = angular.isUndefined(component1.relatedcomponents) ? [] : component1.relatedcomponents;
            component2.relatedcomponents = angular.isUndefined(component2.relatedcomponents) ? [] : component2.relatedcomponents;
            component1.relatedcomponents.push({ id: component2.id, name: component2.name });
            oneWay || component2.relatedcomponents.push({ id: component1.id, name: component1.name });
        };
        ComponentEditorController.prototype.unlinkComponents = function (component1, component2) {
            //var relatedc = component1.relatedcomponents.get(component2.id);
            $.each(component1.relatedcomponents, function (index, model) {
                if (model.id == component2.id) {
                    component1.relatedcomponents.splice(index, 1);
                    return false;
                }
            });
            $.each(component2.relatedcomponents, function (index, model) {
                if (model.id == component1.id) {
                    component2.relatedcomponents.splice(index, 1);
                    return false;
                }
            });
        };
        ComponentEditorController.prototype.checkClicked = function (c) {
            var self = this;
            var found = false;
            $.each(self.newComponent.relatedcomponents, function (index, rc) {
                if (rc.id == c.id) {
                    self.unlinkComponents(c, self.newComponent);
                    found = true;
                    return;
                }
            });
            if (!found) {
                self.linkComponents(c, self.newComponent);
            }
        };
        ComponentEditorController.prototype.associateAll = function () {
            var self = this;
            var components = _.filter(self.config.template.components, function (component) {
                return (component.id != self.newComponent.id && self.validType(component.type));
            });
            $.each(components, function (ix, component) {
                self.linkComponents(self.newComponent, component);
            });
        };
        ComponentEditorController.prototype.advance = function () {
            var self = this;
            var valid = true; //Need to ensure section 1 is complete prior to advancing.
            if (valid) {
                if (self.newComponent) {
                    if (!self.backButton) {
                        self.originalComponent = self.newComponent;
                        self.originalId = self.config.templateId;
                    }
                    var d = self.$q.defer();
                    self.Loading(d.deferred);
                    var data = {
                        templateId: self.config.templateId,
                        component: self.newComponent
                    };
                    if (self.backButton && self.newComponent) {
                        data.component = self.originalComponent;
                        data.templateId = self.originalId;
                        self.backButton = false;
                    }
                    self.getUpdatedTemplateBuilder(data).then(function (data) {
                        //var clicked = self.options.component().continueClicked();
                        //self.options.component().continueClicked(!clicked);
                        var tmp = self.newComponent.relatedcomponents;
                        var tmpid = self.newComponent.id;
                        self.newComponent = data.data.responseObj;
                        self.newComponent.relatedcomponents = tmp;
                        self.newComponent.id = tmpid;
                        self.continueClicked = true;
                        d.resolve();
                    }).catch(function (data) {
                        d.resolve();
                        self.newComponent = data.data.responseObj;
                    });
                }
            }
        };
        ComponentEditorController.prototype.categoryVisible = function (category, component) {
            var self = this;
            if (!category || !component)
                return true;
            var visible = false;
            $.each(category.settings, function (ix, s) {
                if (!s.hideFromTemplate && !visible && self.settingVisible(s, component))
                    visible = true;
            });
            return visible;
        };
        ComponentEditorController.prototype.filteredoptions = function (setting, component) {
            var self = this;
            if (!setting || !component)
                return [];
            var returnVal = [];
            var radioGroup = self.GlobalServices.NewGuid();
            $.each(setting.options, function (optionIndex, option) {
                if (option.dependencyTarget && option.dependencyValue) {
                    var targetSetting = null;
                    $.each(component.categories, function (categoryIndex, c) {
                        var matchingSetting = _.find(c.settings, function (s) {
                            return (s.id == option.dependencyTarget);
                        });
                        if (matchingSetting) {
                            targetSetting = matchingSetting;
                            return;
                        }
                    });
                    var matchingValue = false;
                    if (targetSetting && targetSetting.value != null) {
                        var settingvalues = option.dependencyValue.split(',');
                        $.each(settingvalues, function (idx, val) {
                            if (val.toString() == targetSetting.value.toString())
                                matchingValue = true;
                        });
                    }
                    if (matchingValue) {
                        returnVal.push(option);
                    }
                }
                else {
                    returnVal.push(option);
                }
            });
            return returnVal;
        };
        ComponentEditorController.prototype.checkboxSettingClicked = function (id, arr) {
            var x = arr.indexOf(id);
            if (x > -1) {
                x.splice(x, 1);
            }
            else {
                x.add(id);
            }
        };
        ComponentEditorController.prototype.requiredFieldsRemaining = function () {
            var self = this;
            var component = self.newComponent;
            if (component == null || component.isDisposed)
                return;
            if (!component || !component.categories)
                return 0;
            var count = 0;
            $.each(component.categories, function (ix, category) {
                $.each(category.settings, function (iy, s) {
                    if (!s.isDisposed && !s.hidefromtemplate) {
                        if (self.settingVisible(s, component) && s.required) {
                            if (s.value == null || s.value == '' || s.value == undefined) {
                                count++;
                            }
                        }
                    }
                });
            });
            return count;
        };
        ComponentEditorController.prototype.settingVisible = function (setting, component) {
            var self = this;
            if (!setting || !component || !setting.dependencyTarget)
                return true;
            if (setting.dependencyTarget && setting.dependencyValue) {
                var targetSetting = null;
                $.each(component.categories, function (ix, c) {
                    var matchingSetting = _.find(c.settings, function (s) {
                        return (s.id == setting.dependencyTarget);
                    });
                    if (matchingSetting) {
                        targetSetting = matchingSetting;
                        return;
                    }
                });
                var matchingValue = false;
                if (targetSetting && targetSetting.value != null) {
                    var settingvalues = setting.dependencyValue.split(',');
                    $.each(settingvalues, function (idx, val) {
                        if (val.toString() == targetSetting.value.toString())
                            matchingValue = true;
                    });
                }
                return matchingValue && self.settingVisible(targetSetting, component);
            }
            return true;
        };
        ComponentEditorController.prototype.validType = function (type) {
            var self = this;
            switch (self.newComponent.type) {
                case 'application':
                    return false;
                case 'vm':
                    return type == 'cluster';
                case 'cluster':
                    return type == 'server' || type == 'vm';
                case 'server':
                    return type == 'storage' || type == 'cluster';
                case 'storage':
                    return type == 'server';
            }
        };
        ComponentEditorController.prototype.add = function () {
            var self = this;
            if (self.newComponent) {
                //self.instances = 1;
                //clone object and set unique ID
                var clone = angular.copy(self.newComponent);
                //set new unique ID for component
                clone.id = self.$rootScope.ASM.NewGuid();
                //copy components original id to componentid for reference purposes
                clone.componentid = clone.id;
                clone.name = self.namePicker(self.config.template.components, [clone], self.getBaseName(clone.name))[0].name;
                if (self.action == 'add') {
                    self.newComponent = clone;
                    self.newComponent.relatedcomponents = [];
                }
                self.component = clone;
            }
        };
        ComponentEditorController.prototype.addComponent = function () {
            var self = this;
            if (self.action != 'add') {
                self.updateComponent();
                return false;
            }
            var template = self.config.template;
            angular.forEach(self.newComponent.categories, function (cat) {
                cat.settings = _.map(cat.settings, function (setting) {
                    if (typeof setting.value !== 'string') {
                        setting.value = JSON.stringify(setting.value);
                    }
                    return setting;
                });
            });
            self.newComponent.newItem = true;
            _.times(self.instances, function () {
                var newComponent = angular.copy(self.newComponent), newId = self.$rootScope.ASM.NewGuid();
                angular.extend(newComponent, {
                    name: self.namePicker(self.config.template.components, [newComponent], self.getBaseName(newComponent.name))[0].name,
                    id: newId,
                    componentid: newId
                });
                angular.forEach(_.filter(self.config.template.components, function (component) { return self.validType(component.type) &&
                    _.find(self.newComponent.relatedcomponents, { id: component.id }); }), function (component) {
                    self.linkComponents(component, newComponent, true);
                });
                template.components.push(newComponent);
            });
            self.save({ data: self })
                .then(function (data) {
                self.close();
            });
        };
        ComponentEditorController.prototype.deleteComponent = function () {
            var self = this;
            $('.popover').remove();
            self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('TEMPLATEBUILDER_Areyousureyouwanttoremovethiscomponent')).then(function () {
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.$http.post(self.commands.data.templates.getTemplateBuilderById, { id: self.templateId, name: "" })
                    .then(function (data) {
                    var d2 = self.$q.defer(), template = data.data.responseObj;
                    self.Loading(d2.promise);
                    angular.forEach(template.components, function (component) {
                        _.remove(component.relatedcomponents, { id: self.newComponent.id });
                    });
                    _.remove(template.components, { id: self.newComponent.id });
                    self.$http.post(self.commands.data.templates.saveTemplate, template)
                        .then(function (data) {
                        d2.resolve();
                        self.close();
                    })
                        .catch(function (data) {
                        self.GlobalServices.DisplayError(data.data);
                    })
                        .finally(function () { return d2.resolve(); });
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        ComponentEditorController.prototype.previewSettingUnequal = function (settings, index) {
            var self = this;
            var group = settings[index].group;
            var isUnequal = true;
            for (var i = index - 1; i > -1; i--) {
                if (settings[i].hideFromTemplate) {
                    if (settings[i].group == group) {
                        isUnequal = false;
                    }
                    i = -1;
                }
            }
            return isUnequal;
        };
        ComponentEditorController.prototype.updateComponent = function () {
            var self = this;
            if (self.action != 'edit')
                return false;
            angular.forEach(self.newComponent.categories, function (category) {
                angular.forEach(category.settings, function (setting) {
                    if (typeof setting.value != 'string') {
                        setting.value = JSON.stringify(setting.value);
                    }
                });
            });
            self.config.template.components[self.config.template.components.indexOf(_.find(self.config.template.components, { id: self.config.componentId }))] = self.newComponent;
            self.save({ data: self }).then(function (data) {
                self.close();
            }).catch(function (data) {
            });
        };
        ComponentEditorController.prototype.importConfigurationFromReferenceServer = function () {
            var self = this;
            var cloneModal = this.Modal({
                title: self.$translate.instant('TEMPLATEBUILDER_Clone_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templatebuilder/clone.html',
                controller: 'CloneController as cloneController',
                params: {},
                onComplete: function (modalScope) {
                    var data = {
                        'id': self.GlobalServices.NewGuid(),
                        'componentId': self.newComponent.componentid,
                        'referenceId': modalScope.cloneController.selectedDevice.id
                    };
                    self.$http.post(self.commands.data.templates.getReferenceComponent, { requestObj: data }).then(function (data) {
                        //self.$http.post('bogus', null).then(function (data: any) {
                        self.newComponent = data.data.responseObj;
                    }).catch(function (data) {
                        //error
                        self.GlobalServices.DisplayError(data.data);
                    });
                },
            });
            cloneModal.modal.show();
        };
        ComponentEditorController.prototype.importFromExistingTemplate = function () {
            var self = this;
            var importModal = this.Modal({
                title: self.$translate.instant('TEMPLATEBUILDER_Import_From_Template_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templatebuilder/importFromTemplate.html',
                controller: 'ImportFromTemplateController as importFromTemplateController',
                params: {
                    existingComponentId: self.newComponent.componentid
                },
                onComplete: function (modalScope) {
                    var data = {
                        'id': self.GlobalServices.NewGuid(),
                        'referenceId': modalScope.importFromTemplateController.selectedTemplate.id,
                        'componentId': modalScope.importFromTemplateController.selectedComponent.id
                    };
                    self.$http.post(self.commands.data.templates.getClonedComponentFromTemplate, { requestObj: data }).then(function (data) {
                        //self.$http.post('bogus', null).then(function (data: any) {
                        self.newComponent = data.data.responseObj;
                    }).catch(function (data) {
                        //error
                        self.GlobalServices.DisplayError(data.data);
                    });
                }
            });
            importModal.modal.show();
        };
        ComponentEditorController.prototype.uploadServerConfigurationProfile = function () {
            var self = this;
            var uploadModal = self.Modal({
                title: self.$translate.instant('TEMPLATEBUILDER_Upload_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templatebuilder/uploadConfig.html',
                controller: 'UploadConfigController as uploadConfigController',
                params: {},
                onComplete: function (modalScope) {
                    //OLD ASM uses referenceId which is set to the
                    //uploaded filename?!
                    var data = {
                        'id': self.GlobalServices.NewGuid(),
                        'referenceId': modalScope.uploadConfigController.referenceId,
                        'componentId': self.newComponent.componentid
                    };
                    self.$http.post(self.commands.data.templates.getParsedConfigFile, { requestObj: data }).then(function (data) {
                        //self.$http.post('bogus', null).then(function (data: any) {
                        self.newComponent = data.data.responseObj;
                    }).catch(function (data) {
                        //error
                        self.GlobalServices.DisplayError(data.data);
                    });
                }
            });
            uploadModal.modal.show();
        };
        ComponentEditorController.prototype.getBaseName = function (name) {
            var pat = /\s\([0-9]*\)$/, // Match the pattern like: (7)
            match = name.match(pat);
            return match ? name.replace(match, '') : name;
        };
        ComponentEditorController.prototype.namePicker = function (namedArray, unNamedArray, baseName) {
            var nameToTry = "", i = 1;
            _.map(unNamedArray, function (unNamedItem) {
                var originalName = unNamedItem.name, done;
                while (!done) {
                    nameToTry = i > 1 ? baseName + ' ' + '(' + i + ')' : baseName;
                    if (!(_.find(namedArray, { name: nameToTry }) ||
                        _.find(unNamedArray, function (unNamed) {
                            return unNamed.name === nameToTry && unNamed.id !== unNamedItem.id;
                        }))) {
                        //untaken name found
                        unNamedItem.name = nameToTry;
                        return done = true;
                    }
                    i++;
                }
            });
            return unNamedArray;
        };
        ComponentEditorController.prototype.generateName = function (cname) {
            var self = this;
            var pat = /\s\([0-9]*\)/; // Match the pattern like: (7)
            var result = null;
            var match = cname.match(pat);
            cname = match != null ? cname.replace(match, '') : cname;
            var comps = [];
            angular.forEach(self.config.template.components, function (item) {
                if (_.startsWith(item.name, cname)) {
                    comps.push(item.name);
                }
            });
            comps.sort();
            if (match == null && comps.length == 0) {
                result = cname;
            }
            else if (match == null && comps.length == 1) {
                result = cname + " (2)";
            }
            else if (comps.length > 1) {
                for (var i = 1; i < comps.length; i++) {
                    //get the pattern
                    var curr = comps[i].match(pat);
                    var prev = comps[i - 1].match(pat);
                    //Strip off parentheses and get the number only to compare
                    if (curr != null)
                        curr = parseInt(comps[i].match(pat)[0].replace(/(^\s\()|(\)$)/g, ""));
                    if (prev != null)
                        prev = parseInt(comps[i - 1].match(pat)[0].replace(/(^\s\()|(\)$)/g, ""));
                    else
                        prev = 1;
                    var diff = curr - prev;
                    if (diff != 1) {
                        result = cname + " (" + (prev + 1) + ")"; //if difference is greater than 1, then add 1 to fill the gap.
                        if (self.instances == 1)
                            break;
                    }
                }
            }
            if (!result) {
                result = cname + " (" + (comps.length + 1) + ")";
            }
            return result;
        };
        ComponentEditorController.prototype.validateSettings = function () {
            var self = this;
            var validateModal = self.Modal({
                title: self.$translate.instant('COMPONENTEDITOR_ValidateSettings'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templates/validateSettings.html',
                controller: 'ValidateSettingsController as validateSettingsController',
                params: {
                    component: self.newComponent
                },
            });
            validateModal.modal.show();
        };
        ComponentEditorController.prototype.getUpdatedTemplateBuilder = function (data) {
            var self = this;
            return self.$http.post(self.commands.data.templates.getUpdatedTemplateBuilderComponent, data);
        };
        ComponentEditorController.prototype.close = function () {
            var self = this;
            self.closeModal();
        };
        ComponentEditorController.prototype.cancel = function () {
            var self = this;
            self.cancelModal();
        };
        ComponentEditorController.$inject = ['$rootScope', '$q', 'Loading', '$http', 'GlobalServices', '$translate', 'Modal', 'constants', 'Commands', '$location', 'Dialog'];
        return ComponentEditorController;
    }());
    angular.module('app')
        .component('componentEditor', {
        templateUrl: 'views/componenteditor.html',
        controller: ComponentEditorController,
        controllerAs: 'ComponentEditor',
        bindings: {
            config: '=',
            closeModal: '&',
            cancelModal: '&',
            save: '&',
            multipleInstancesNotAllowed: '=?',
            templateId: '<'
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=componentEditor.js.map
var asm;
(function (asm) {
    "use strict";
    var CredentialsController = (function () {
        function CredentialsController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.viewModel = {};
            var self = this;
            self.refresh(false);
            self.viewData = {
                displayedSummaries: [],
                selectedCredential: '',
                selectedCredentialDetail: {}
            };
        }
        CredentialsController.prototype.activate = function () {
            var self = this;
            this.$timeout(function () {
                self.refresh(false);
            }, 10000);
        };
        CredentialsController.prototype.refresh = function (calledFromUI) {
            var self = this;
            var rawData = [];
            if (calledFromUI) {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
            }
            self.$http.post(self.Commands.data.credential.getCredentialSummaryList, null).then(function (data) {
                //self.$http.post('bogus', null).then(function(data:any) {
                rawData = data.data.responseObj;
                //apply sort on credentialsName
                var sortedData = _.sortBy(rawData, function (r) {
                    return r.credentialsName.toLowerCase();
                });
                self.viewModel = angular.copy(sortedData);
                self.viewData.displayedSummaries = [].concat(self.viewModel);
                if (self.viewModel.length) {
                    if (self.viewData.selectedCredential)
                        self.onSelectedCredential(self.viewData.selectedCredential);
                    else
                        self.onSelectedCredential(self.viewData.displayedSummaries[0]);
                }
                if (calledFromUI)
                    deferred.resolve();
            }).catch(function (data) {
                //need to handle error
                self.viewModel = [];
                if (calledFromUI)
                    deferred.resolve();
                //error is in data.data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ;
        CredentialsController.prototype.onSelectedCredential = function (selectedItem) {
            var self = this;
            var data;
            //var deferred = self.$q.defer();
            //self.Loading(deferred.promise);
            data = { 'id': selectedItem.id };
            self.$http.post(self.Commands.data.credential.getCredentialById, { requestObj: data }).then(function (data) {
                //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                self.viewData.selectedCredentialDetail = data.data.responseObj;
                self.viewData.selectedCredential = selectedItem;
                //deferred.resolve();
            }).catch(function (data) {
                //need to handle error
                //deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        CredentialsController.prototype.doUpdates = function (updateType) {
            var self = this;
            var title;
            //self.$translate.instant('CREDENTIALS_CreateTitle');
            //self.$translate.instant('CREDENTIALS_EditTitle');
            switch (updateType.toUpperCase()) {
                case 'CREATE':
                    //title = 'Create Credentials';
                    title = self.$translate.instant('CREDENTIALS_CreateTitle');
                    //self.viewData.selectedCredential.id = '';
                    break;
                case 'EDIT':
                    //title = 'Edit Credentials';
                    title = self.$translate.instant('CREDENTIALS_EditTitle');
                    break;
            }
            var theEditName = self.viewData.selectedCredential.typeName.toLowerCase();
            if (updateType.toUpperCase() == 'EDIT' && !self.viewData.selectedCredential.canedit) {
                return;
            }
            var theModal = this.Modal({
                title: title,
                modalSize: 'modal-lg',
                templateUrl: 'views/credentials/editCredentials.html',
                controller: 'EditCredentialsController as creds',
                params: {
                    editMode: updateType,
                    id: updateType.toUpperCase() == 'CREATE' ? '' : self.viewData.selectedCredential.id,
                },
                onComplete: function (modalScope) {
                    // should be id of credential
                    //console.log(modalScope.creds.viewData.objectId);
                    self.refresh(false);
                }
            });
            theModal.modal.show();
        };
        CredentialsController.prototype.doDelete = function () {
            var self = this;
            var data;
            if (!self.viewData.selectedCredential.candelete) {
                return;
            }
            var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('CREDENTIALS_DeleteConfirmation'));
            confirm.then(function () {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
                data = { 'id': self.viewData.selectedCredential.id };
                self.$http.post(self.Commands.data.credential.deleteCredential, { requestObj: data }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                    self.selectItemAfterDelete();
                    deferred.resolve();
                    self.refresh(false);
                }).catch(function (data) {
                    //need to handle error
                    deferred.resolve();
                    //data object is always empty
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        CredentialsController.prototype.selectItemAfterDelete = function () {
            var self = this;
            //var _: _.LoDashStatic;
            //var deleteItemNdxx = _.findIndex(self.displayedSummaries, function (ds:any) { return ds.id == self.selectedCredential.id; });
            var deleteItemNdx = self.viewData.displayedSummaries.map(function (ds) { return ds.id; }).indexOf(self.viewData.selectedCredential.id);
            // no data
            if (deleteItemNdx == 0 && self.viewData.displayedSummaries.length == 0) {
                self.viewData.selectedCredential = '';
            }
            else {
                // top of list, pick next item down
                if (deleteItemNdx == 0 && self.viewData.displayedSummaries.length >= 0) {
                    self.viewData.selectedCredential = self.viewData.displayedSummaries[deleteItemNdx + 1];
                }
                else {
                    if (deleteItemNdx >= 0 && self.viewData.displayedSummaries.length >= 0) {
                        self.viewData.selectedCredential = self.viewData.displayedSummaries[deleteItemNdx - 1];
                    }
                }
            }
        };
        CredentialsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return CredentialsController;
    }());
    function credentialsManagement() {
        return {
            restrict: 'E',
            templateUrl: 'views/listcredentials.html',
            replace: true,
            transclude: false,
            controller: CredentialsController,
            controllerAs: 'creds',
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('credentialsManagement', credentialsManagement);
})(asm || (asm = {}));
//# sourceMappingURL=credentialsmanagementdirective.js.map
var asm;
(function (asm) {
    'use strict';
    var DirectoryservicesController = (function () {
        function DirectoryservicesController(Modal, Dialog, $http, $timeout, $q, $compile, $scope, $translate, GlobalServices, Commands) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$compile = $compile;
            this.$scope = $scope;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            //this.jobs = [
            //    { isSelected: false, "id": 0, "name": 'Scheduled Job 30', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' },
            //    { isSelected: false, "id": 1, "name": 'Scheduled Job 26', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' },
            //    { isSelected: false, "id": 2, "name": 'Scheduled Job 27', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' }
            //];
            this.checkAllBox = false;
            this.selectedStates = [];
            this.selectedUserObjects = [];
            this.activeTab = 'userinfo';
            this.refresh();
        }
        DirectoryservicesController.prototype.refresh = function () {
            var self = this;
            //Get All directories
            this.$http.post(self.Commands.data.users.getDirectoryList, null).then(function (data) {
                self.results = data.data.responseObj;
                self.displayedresults = [].concat(self.results);
                console.log(self.displayedresults);
                self.selectedDetail = self.results[0];
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        DirectoryservicesController.prototype.selectedDirectories = function () {
            return _.filter(this.results, { 'isSelected': true });
        };
        //check all checkbox
        DirectoryservicesController.prototype.checkAll = function () {
            var _this = this;
            var self = this;
            this.displayedresults.forEach(function (job) {
                if (_this.checkAllBox) {
                    job.isSelected = true;
                }
                else {
                    job.isSelected = false;
                }
            });
        };
        DirectoryservicesController.prototype.deleteDirectory = function () {
            var self = this;
            var directoryIds = _.map(this.selectedDirectories(), 'id');
            var directoryNames = _.map(this.selectedDirectories(), function (u) {
                return '<li>' + u.hostName + '</li>';
            });
            var Directories = (directoryNames.toString()).replace(/[, ]+/g, " ").trim();
            //Confirmation Dialog box that fires delete on confirmation
            var confirm = this.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_DeleteDirectory') + '<br> <ul class="">' + Directories + '</ul>'));
            confirm.then(function () {
                self.$http.post(self.Commands.data.users.deleteADUser, { requestObj: directoryIds })
                    .success(function (data, status, headers, config) {
                    self.refresh();
                })
                    .error(function (data, status, headers, config) {
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        DirectoryservicesController.prototype.createdirectory = function () {
            var self = this;
            var setupWizard = self.Modal({
                title: self.$translate.instant('SETTINGS_DirectoryServicesCreateDir'),
                modalSize: 'modal-lg',
                templateUrl: 'views/directorywizard.html',
                controller: 'DirectoryWizardController as DirectoryWizard',
                params: {},
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDPOOL_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        setupWizard.modal.dismiss();
                        self.refresh();
                    });
                },
                onComplete: function (modalScope) {
                    self.refresh(); //When the modal is closed, update the data.
                }
            });
            setupWizard.modal.show();
        };
        DirectoryservicesController.prototype.editdirectory = function () {
            var self = this;
            var modaldirectory = this.selectedDirectories();
            var setupWizard = self.Modal({
                title: this.$translate.instant('SETTINGS_DirectoryServicesEditDir'),
                modalSize: 'modal-lg',
                templateUrl: 'views/directorywizard.html',
                controller: 'DirectoryWizardController as DirectoryWizard',
                params: {
                    editmode: true,
                    directory: modaldirectory
                },
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDPOOL_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        setupWizard.modal.dismiss();
                        self.refresh();
                    });
                },
                onComplete: function () {
                    self.refresh(); //When the modal is closed, update the data.
                }
            });
            setupWizard.modal.show();
        };
        DirectoryservicesController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$compile', '$scope', '$translate', 'GlobalServices', 'Commands'];
        return DirectoryservicesController;
    }());
    function directoryList() {
        return {
            restrict: 'E',
            templateUrl: 'views/directoryserviceslist.html',
            replace: true,
            transclude: false,
            controller: DirectoryservicesController,
            controllerAs: 'directoryList',
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('directoryList', directoryList);
})(asm || (asm = {}));
//# sourceMappingURL=directoryservicesdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var EditFirmwareController = (function () {
        function EditFirmwareController($http, $timeout, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.refresh();
        }
        EditFirmwareController.prototype.activate = function () {
            var self = this;
            self.$timeout(function () {
                self.refresh();
            }, 10000);
        };
        EditFirmwareController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.firmwarepackages.getFirmwarePackages, {}).then(function (data) {
                self.viewModel = data.data.responseObj;
                self.viewData.displayedData = [].concat(self.viewModel);
                self.viewData.selectedFirmware = _.find(self.viewModel, { id: self.viewData.currentPackageListItem });
                self.setDefaultFirmwareRepositoryList();
            }).catch(function (data) {
                self.viewModel = [];
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        EditFirmwareController.prototype.setDefaultFirmwareRepositoryList = function () {
            var self = this;
            // used to populate drop down
            self.viewData.firmwarePackageList = angular.copy(_.filter(self.viewData.displayedData, function (fp) {
                return (fp.packageSource != 'embedded' &&
                    fp.state &&
                    (fp.state == 'copying' || fp.state == 'available'));
            }));
            var match = _.find(self.viewData.firmwarePackageList, { defaultpackage: true });
            self.viewData.currentPackageListItem = match ? match.id : match;
        };
        EditFirmwareController.prototype.doDelete = function (firmware) {
            var self = this;
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('EDIT_FIRMWARE_Delete_Confirmation')).then(function () {
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.firmwarepackages.remove, [firmware.id]).then(function (data) {
                    self.refresh();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                }).finally(function () { return d.resolve(); });
            });
        };
        EditFirmwareController.prototype.newCustomBundle = function (repo) {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_AddCustomBundle'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/addEditViewBundle.html',
                controller: 'AddEditViewBundleModalController as c',
                params: {
                    repo: angular.copy(repo),
                    type: 'add'
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        EditFirmwareController.prototype.doViewBundles = function () {
            var self = this;
            if (self.viewData.selectedFirmware) {
                var theModal = self.Modal({
                    title: self.viewData.selectedFirmware.name,
                    modalSize: 'modal-lg',
                    templateUrl: 'views/settings/repositories/viewBundles.html',
                    controller: 'ViewBundlesController as vb',
                    params: {
                        id: self.viewData.selectedFirmware.id
                    },
                    onComplete: function (modalScope) {
                        self.refresh();
                    }
                });
                theModal.modal.show();
            }
        };
        EditFirmwareController.prototype.onDefaultFirmwareChanged = function () {
            var self = this;
            if (self.viewData.currentPackageListItem != 'Select') {
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.setDefaultFirmwarePackage(self.viewData.currentPackageListItem).then(function (data) {
                    self.viewData.selectedFirmware = '';
                    self.refresh();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                }).finally(function () { return d.resolve(); });
            }
        };
        EditFirmwareController.prototype.setDefaultFirmwarePackage = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.setDefaultFirmwarePackage, { id: self.viewData.currentPackageListItem });
        };
        EditFirmwareController.prototype.addFirmwareRepo = function () {
            var self = this;
            var theModal = self.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_AddFirmwareRepository'),
                modalSize: 'modal-lg',
                templateUrl: '/views/settings/Repositories/AddFirmwareBundleModal.html',
                controller: 'AddFirmwareBundleModalController as addFirmwareBundleModalController',
                params: {},
                onComplete: function (modalScope) {
                    self.refresh();
                }
            });
            theModal.modal.show();
        };
        EditFirmwareController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return EditFirmwareController;
    }());
    angular.module('app')
        .component("editfirmware", {
        templateUrl: "views/editfirmware.html",
        controller: EditFirmwareController,
        controllerAs: 'fw',
        bindings: {
            mode: "@"
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=editfirmware.js.map
var asm;
(function (asm) {
    "use strict";
    var EditRepositoryController = (function () {
        function EditRepositoryController($http, $timeout, $q, $translate, modal, loading, dialog, commands, globalServices, $rootScope, $interval) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.loading = loading;
            this.dialog = dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            var self = this;
            self.initialize();
        }
        EditRepositoryController.prototype.poll = function () {
            var self = this;
            self.$interval(function () { self.refresh(true); }, 120000);
        };
        EditRepositoryController.prototype.initialize = function () {
            var self = this;
            self.refresh();
            self.poll();
        };
        EditRepositoryController.prototype.refresh = function (hideLoading) {
            var self = this;
            var d = self.$q.defer();
            hideLoading || self.loading(d.promise);
            self.getRepos().then(function (response) {
                angular.forEach(response.data.responseObj, function (repo) {
                    var options = self.repoActions(repo);
                    repo.options = options;
                });
                d.resolve();
                self.repos = response.data.responseObj;
                self.backup = angular.copy(response.data.responseObj);
            }).catch(function (error) {
                d.resolve();
                self.globalServices.DisplayError(error.data);
            });
        };
        EditRepositoryController.prototype.repoActions = function (repo) {
            var self = this;
            var actions = [{ id: undefined, name: self.$translate.instant('SETTINGS_Repositories_SelectAction') }];
            /*possible actions:  Delete (delete), Edit (edit), Resynchronize (sync)
            if not in use, it can be deleted
            if state is copying or pending, it cannot be deleted */
            if (!repo.isInUse) {
                if ((repo.state !== 'copying') && (repo.state !== 'pending')) {
                    actions.push({ id: "delete", name: self.$translate.instant('SETTINGS_Repositories_Delete') });
                }
            }
            /* can only have edit and resynchronize is in state error */
            if (repo.state === 'errors') {
                actions.push({ id: "edit", name: self.$translate.instant('SETTINGS_Repositories_Edit') });
                actions.push({ id: "sync", name: self.$translate.instant('SETTINGS_Repositories_Resynchronize') });
            }
            return angular.copy(actions);
        };
        EditRepositoryController.prototype.actionTaken = function (repo) {
            var self = this;
            switch (repo.selectedOption) {
                case 'delete':
                    self.deleteRepo(repo);
                    break;
                case 'edit':
                    self.editRepoModal(repo);
                    break;
                case 'sync':
                    self.resyncRepo(repo);
                    break;
            }
        };
        EditRepositoryController.prototype.editRepoModal = function (repo) {
            var self = this;
            var modal = self.modal({
                title: self.$translate.instant('SETTINGS_Repositories_EditOSImageRepo'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/Repositories/EditRepoModal.html',
                controller: 'EditRepoModalController as editRepoModalController',
                params: {
                    repo: angular.copy(repo),
                    type: repo.selectedOption
                },
                onComplete: function () {
                    self.refresh();
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        EditRepositoryController.prototype.deleteRepo = function (repo) {
            var self = this;
            var modal = self.modal({
                title: self.$translate.instant('SETTINGS_Repositories_Confirm'),
                modalSize: 'modal-md',
                templateUrl: 'views/settings/Repositories/ConfirmDeleteRepo.html',
                controller: 'GenericModalController as c',
                params: {},
                onComplete: function () {
                    var d = self.$q.defer();
                    self.loading(d.promise);
                    self.$http.post(self.commands.data.repository.deleteRepository, { requestObj: { id: repo.id } }).then(function (response) {
                        d.resolve();
                        self.refresh();
                    }).catch(function (error) { d.resolve(); self.globalServices.DisplayError(error.data); });
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        EditRepositoryController.prototype.resyncRepo = function (repo) {
            var self = this;
            var modal = self.modal({
                title: self.$translate.instant('SETTINGS_Repositories_ResyncOSRepo'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/Repositories/EditRepoModal.html',
                controller: 'EditRepoModalController as editRepoModalController',
                params: {
                    repo: angular.copy(repo),
                    type: repo.selectedOption
                },
                onComplete: function () {
                    self.refresh();
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        EditRepositoryController.prototype.addRepo = function () {
            var self = this;
            var modal = self.modal({
                title: self.$translate.instant('SETTINGS_Repositories_ResyncOSRepo'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/Repositories/EditRepoModal.html',
                controller: 'EditRepoModalController as editRepoModalController',
                params: {
                    repo: {},
                    type: 'add'
                },
                onComplete: function () {
                    self.refresh();
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        EditRepositoryController.prototype.getRepos = function () {
            var self = this;
            return self.$http.get(self.commands.data.repository.getRepositoryList);
        };
        EditRepositoryController.prototype.getRepoById = function (id) {
            var self = this;
            return self.$http.post(self.commands.data.repository.getRepositoryById, { requestObj: { id: id } });
        };
        EditRepositoryController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope', '$interval'];
        return EditRepositoryController;
    }());
    angular.module("app")
        .component("editrepository", {
        templateUrl: "views/editrepository.html",
        controller: EditRepositoryController,
        controllerAs: "editRepositoryController"
    });
})(asm || (asm = {}));
//# sourceMappingURL=editrepository.js.map
var asm;
(function (asm) {
    "use strict";
    var JobsController = (function () {
        function JobsController(Modal, Dialog, $http, $timeout, $q, $translate, $rootScope, GlobalServices, commands, loading) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$rootScope = $rootScope;
            this.GlobalServices = GlobalServices;
            this.commands = commands;
            this.loading = loading;
            var self = this;
            self.buttonActive = false;
            self.checkAllBox = false;
            self.refresh();
            self.activate();
        }
        JobsController.prototype.activate = function () {
            var self = this;
            self.selectedjobs = self.checkselected();
            var jobstimer = self.$timeout(function () {
                self.refresh();
                self.activate();
            }, 60000);
            self.$rootScope.$on('$locationChangeSuccess', function () {
                self.$timeout.cancel(jobstimer);
            });
        };
        JobsController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.loading(d.promise);
            //Get All Jobs
            self.$http.post(self.commands.data.jobs.getJobList, {}).then(function (data) {
                self.results = data.data.responseObj;
                self.displayedresults = [].concat(self.results);
                if (self.checkselected().length == 0) {
                    self.buttonActive = false;
                }
                //when finished getting jobs, reselect the selected and include elapsed time
                angular.forEach(_.filter(self.results, function (job) {
                    return job.endDate || job.status === 'running';
                }), function (job) {
                    var now = job.endDate ? moment(job.endDate) : moment(), then = moment(job.startDate), duration = moment.duration(now.diff(then)), days = Math.floor(duration.asDays()), hours = Math.floor(duration.asHours()), minutes = Math.floor(duration.asMinutes());
                    if (days === 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_aday');
                    }
                    else if (days > 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_numDays', { number: days });
                    }
                    else if (hours === 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_anhour');
                    }
                    else if (hours > 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_numHours', { number: hours });
                    }
                    else if (minutes === 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_amimute');
                    }
                    else if (minutes > 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_numMinutes', { number: minutes });
                    }
                    job.isSelected = self.selectedjobs.length >= 1 && !!_.find(self.selectedjobs, { id: job.id });
                });
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () {
                d.resolve();
            });
        };
        ;
        JobsController.prototype.checkselected = function () {
            var self = this;
            return _.filter(self.results, { 'isSelected': true });
        };
        JobsController.prototype.cancelButtonActive = function () {
            //verify that all selected jobs are 'scheduled' and that at least one selected value is checked
            var self = this, returnVal = true;
            if (self.results) {
                self.results.forEach(function (x) {
                    if (x.isSelected && x.status !== 'scheduled') {
                        returnVal = false;
                    }
                });
            }
            return returnVal;
        };
        //check all checkbox
        JobsController.prototype.checkAll = function () {
            var self = this;
            self.results.forEach(function (job) {
                if (self.checkAllBox) {
                    job.isSelected = true;
                }
                else {
                    job.isSelected = false;
                }
            });
        };
        ;
        JobsController.prototype.cancelJob = function () {
            var self = this, selectedusers = _.map(self.checkselected(), 'id'), d = self.$q.defer();
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_ConfirmJobCancel')))
                .then(function () {
                self.loading(d.promise);
                self.$http.post(self.commands.data.jobs.deleteJob, selectedusers)
                    .then(function (data) {
                    self.refresh();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                }).finally(function () { return d.resolve(); });
                //self.checkselected() = [];
            });
        };
        JobsController.prototype.modalTest = function () {
            var self = this;
            var modalJobs = [];
            //angular loop
            //Move Selected jobs into an array
            self.displayedresults.forEach(function (job) {
                if (job.isSelected) {
                    modalJobs.push(job.id);
                }
            });
            var testModal = self.Modal({
                title: 'Jobs Test Modal Title',
                modalSize: 'modal-lg',
                templateUrl: 'views/testModal.html',
                controller: 'TestModalController as TestModal',
                params: {
                    jobs: modalJobs
                },
                close: function (modalScope) {
                    self.refresh();
                }
            });
            testModal.modal.show();
        };
        JobsController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$rootScope', 'GlobalServices', "Commands", "Loading"];
        return JobsController;
    }());
    angular.module('app')
        .component('jobs', {
        templateUrl: 'views/jobs.html',
        controller: JobsController,
        controllerAs: 'jobs',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=jobsdirective.js.map
//module asm {
//    "use strict";
//    export interface ILookupDirectiveScope
//    {
//        list: [any];
//        key: any;
//        propertyName: any;
//        val: any;
//    }
//    function listLookup(): ng.IDirective {
//        return {
//            restrict: 'E',
//            template: '<span>{{value}}</span>',
//            replace: true,
//            transclude: false,
//            link: (scope: ILookupDirectiveScope): void => {
//                var lookuppropertyname = scope.propertyName || 'name';
//                var match = _.find(scope.list, ['id', scope.key]);
//                scope.val = match[lookuppropertyname];
//            }
//        };
//    }
//    angular
//        .module('app')
//        .directive('listLookup', listLookup);
//}
var asm;
(function (asm) {
    "use strict";
    var ListLookupController = (function () {
        function ListLookupController() {
        }
        Object.defineProperty(ListLookupController.prototype, "list", {
            get: function () {
                return this._list;
            },
            set: function (theList) {
                this._list = theList;
                if (this._list && this._list.length > 0)
                    this.update();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListLookupController.prototype, "key", {
            get: function () {
                return this._key;
            },
            set: function (theKey) {
                this._key = theKey;
                if (this._key && this._key.length > 0)
                    this.update();
            },
            enumerable: true,
            configurable: true
        });
        ListLookupController.prototype.update = function () {
            var self = this;
            if (self.key && self.list && self.list.length > 0) {
                var lookuppropertyname = self.propertyName || 'name';
                var match = _.find(self.list, { 'id': self.key });
                self.val = match[lookuppropertyname];
            }
        };
        return ListLookupController;
    }());
    asm.ListLookupController = ListLookupController;
    angular
        .module('app')
        .component('listLookup', {
        template: '<span>{{vm.val}}</span>',
        controller: ListLookupController,
        controllerAs: 'vm',
        bindings: {
            propertyName: '=',
            list: '=',
            key: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=lookupdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var Fabric = (function () {
        function Fabric() {
            this.id = '';
            this.name = '';
            this.enabled = true;
            this.redundancy = false;
            this.fabrictype = 'ethernet';
            this.nictype = '2x10Gb';
            this.partitioned = false;
            this.interfaces = [];
            this.deleteState = false;
        }
        Fabric.prototype.Fabric = function (data) {
            if (data === void 0) { data = {}; }
            var self = this;
            self.id = data.id || '';
            self.name = data.name || '';
            self.enabled = data.enabled || true;
            self.redundancy = data.redundancy || false;
            self.fabrictype = data.fabrictype || 'ethernet';
            self.nictype = data.nictype || '2x10Gb';
            self.partitioned = data.partitioned || false;
            self.interfaces = data.interfaces || [];
            self.deleteState = data.deleteState || false;
        };
        return Fabric;
    }());
    asm.Fabric = Fabric;
    var Interface = (function () {
        function Interface() {
            this.id = '';
            this.name = '';
            this.partitions = [];
        }
        Interface.prototype.Interface = function (data) {
            if (data === void 0) { data = {}; }
            var self = this;
            self.id = data.id || '';
            self.name = data.name || '';
            self.partitions = data.partitions || [];
        };
        return Interface;
    }());
    asm.Interface = Interface;
    var Partition = (function () {
        function Partition() {
            this.id = '';
            this.name = '';
            this.networks = [];
            this.minimum = 0;
            this.maximum = 100;
        }
        Partition.prototype.Partition = function (data) {
            if (data === void 0) { data = {}; }
            var self = this;
            self.id = data.id || '';
            self.name = data.name || '';
            self.networks = data.networks || [];
            self.minimum = data.minimum || 0;
            self.maximum = data.maximum || 100;
        };
        return Partition;
    }());
    asm.Partition = Partition;
    var NetworkConfigurationController = (function () {
        function NetworkConfigurationController($scope, GlobalServices, constants, $http, commands) {
            this.$scope = $scope;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$http = $http;
            this.commands = commands;
            this.setting = null;
            this.readOnly = false;
            this.availableNicTypes = [];
            var self = this;
            self.readOnly = self.$scope.readonly;
            self.setting = self.$scope.setting;
            if (typeof self.setting.value === 'string' && self.setting.value) {
                self.setting.value = angular.fromJson(self.setting.value);
            }
            self.readonly = self.$scope.readonly;
            self.availableNicTypes = constants.availableNicTypes;
            if (self.setting.value == "")
                self.updateSetting();
            self.getNetworksList()
                .then(function (response) {
                self.serviceNetworks = response.data.responseObj;
                self.wireUpNetworks();
            });
        }
        NetworkConfigurationController.prototype.addInterface = function (networkconfig) {
            var self = this;
            var fabric = new Fabric();
            fabric.id = self.GlobalServices.NewGuid();
            fabric.name = 'Interface';
            for (var j = 0; j < 4; j++) {
                var _interface = new Interface();
                _interface.id = self.GlobalServices.NewGuid();
                _interface.name = 'Port ' + (j + 1);
                for (var i = 0; i < 4; i++) {
                    var partition = new Partition();
                    partition.id = self.GlobalServices.NewGuid();
                    partition.name = (i + 1).toString();
                    _interface.partitions.push(partition);
                }
                fabric.interfaces.push(_interface);
            }
            self.setting.value.interfaces.push(fabric);
            self.wireUpNetworks();
        };
        NetworkConfigurationController.prototype.updateSetting = function () {
            var defaultnetwork = {
                id: this.GlobalServices.NewGuid(),
                servertype: 'rack',
                interfaces: [],
                teams: [],
                vswitches: [],
                fabrics: [
                    {
                        id: this.GlobalServices.NewGuid(), name: 'Fabric A / onboard NIC', redundancy: true, enabled: true, fabrictype: 'ethernet', nictype: '2x10Gb', partitioned: true, usedforfc: false,
                        interfaces: [
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 1',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 2',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 3',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 4',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            }
                        ]
                    }, {
                        id: this.GlobalServices.NewGuid(), name: 'Fabric B / PCIe slot 1', redundancy: false, enabled: false, fabrictype: 'ethernet', nictype: '2x10Gb', usedforfc: false, partitioned: true,
                        interfaces: [
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 1',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 2',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 3',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 4',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            }
                        ]
                    }, {
                        id: this.GlobalServices.NewGuid(), name: 'Fabric C / PCIe slot 2', redundancy: false, enabled: false, fabrictype: 'ethernet', nictype: '2x10Gb', usedforfc: false, partitioned: true,
                        interfaces: [
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 1',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 2',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 3',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            },
                            {
                                id: this.GlobalServices.NewGuid(),
                                name: 'Port 4',
                                partitions: [
                                    { id: this.GlobalServices.NewGuid(), name: '1', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '2', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '3', networks: [], minimum: 0, maximum: 100 },
                                    { id: this.GlobalServices.NewGuid(), name: '4', networks: [], minimum: 0, maximum: 100 }
                                ]
                            }
                        ]
                    }
                ]
            };
            this.setting.value = defaultnetwork;
        };
        NetworkConfigurationController.prototype.wireUpNetworks = function () {
            var self = this;
            //interface is a reserved word
            angular.forEach(self.setting.value.interfaces, function (fabric) {
                angular.forEach(fabric.interfaces, function (interface1) {
                    angular.forEach(interface1.partitions, function (partition) {
                        //networks to display in dropdown
                        partition._networks = angular.copy(self.serviceNetworks);
                        //mark any that are already included
                        var match;
                        angular.forEach(partition.networks, function (network) {
                            match = _.find(partition._networks, { id: network });
                            if (match) {
                                match.checked = true;
                            }
                        });
                    });
                });
            });
        };
        NetworkConfigurationController.prototype.toggleNetwork = function (partition, _network) {
            _network.checked = !_network.checked;
            if (_network.checked) {
                partition.networks.push(_network.id);
            }
            else {
                partition.networks.splice(_.indexOf(partition.networks, _.find(partition.networks, function (network) { return network === _network.id; })), 1);
            }
        };
        NetworkConfigurationController.prototype.getNetworksList = function () {
            var self = this;
            return self.$http.post(self.commands.data.networking.networks.getUplinkNetworksList, {});
        };
        NetworkConfigurationController.$inject = ['$scope', 'GlobalServices', 'constants', "$http", "Commands"];
        return NetworkConfigurationController;
    }());
    function networkconfiguration() {
        return {
            restrict: 'E',
            templateUrl: 'views/networkconfiguration.html',
            replace: true,
            transclude: false,
            controller: NetworkConfigurationController,
            controllerAs: 'NetworkConfiguration',
            scope: {
                setting: '=',
                readonly: '='
            },
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular
        .module('app')
        .directive('networkconfiguration', networkconfiguration);
})(asm || (asm = {}));
//# sourceMappingURL=networkconfiguration.js.map
var asm;
(function (asm) {
    "use strict";
    var PasswordController = (function () {
        function PasswordController() {
            this.showIcon = false;
            this.blankInput = true;
            this.showPassword = false;
            var self = this;
            if (self.model != '') {
                self.blankInput = false;
            }
        }
        PasswordController.prototype.inputChanged = function () {
            var self = this;
            if (self.model && self.model != '') {
                self.showIcon = true;
                self.blankInput = false;
            }
            else {
                self.blankInput = true;
                self.showIcon = false;
            }
        };
        PasswordController.$inject = [];
        return PasswordController;
    }());
    angular.module('app')
        .component('password', {
        template: '<div class="pwContainer"><input id="{{password.pId}}" name="{{password.pName}}" placeholder="{{password.placeholder}}" class="pwInput" ng-if="!password.showPassword" id="currentPassword" type="password" ng-keyup="password.inputChanged()" ng-model="password.model" ng-required="password.required" /><input class="pwInput" ng-if="password.showPassword" type="text" ng-model="password.model" /><i ng-mousedown="password.showPassword = true;" ng-mouseleave="password.showPassword = false;" ng-mouseup="password.showPassword = false;" class="pwShowHide" ng-show="password.showIcon" data-toggle="tooltip" title="{{\'GENERIC_PWToolTip\'|translate}}"></i></div>',
        controller: PasswordController,
        controllerAs: 'password',
        bindings: {
            model: '=',
            required: '=',
            placeholder: "@?",
            pName: "@?",
            pId: "@?"
        }
    });
})(asm || (asm = {}));
/*
Password component to properly style password inputs.

Parameters:
model - What the password will bind to (use this instead of ng-model),
required - Passing true or false will require the field on whichever form it is found on
pName- assign a name to the field to
pId - Id to be assigned to field

Example:
<password p-id="password"
            p-name="password"
            model="editDeviceModalController.user.password"
            required="true"></password>
*/ 
//# sourceMappingURL=password.js.map
var asm;
(function (asm) {
    "use strict";
    var PasswordMatcherDirective = (function () {
        function PasswordMatcherDirective($window) {
            // Directive parameters.
            this.restrict = 'A';
            this.require = 'ngModel';
            this.scope = { pwdString: '=passwordMatcher' };
        }
        // Link function
        // 3.21.2016 jek - this decalration requires extending angular.INgModelController which I could never get to work;
        // see asm.custom.d.ts for most recent attempt.  Changing to ngModel: any allows this to work.
        //public link(scope: myScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes, ngModel: angular.INgModelController) {
        PasswordMatcherDirective.prototype.link = function (scope, element, attrs, ngModel) {
            ngModel.$validators.passwordMatch = function (repeatValue) {
                if ($(element).is(':disabled'))
                    repeatValue = scope.pwdString;
                return repeatValue == scope.pwdString;
            };
            scope.$watch("pwdString", function () {
                ngModel.$validate();
            });
        };
        // Creates an instance of the PasswordMatcherDirective class.
        PasswordMatcherDirective.factory = function () {
            var directive = function ($window) { return new PasswordMatcherDirective($window); };
            directive.$inject = ['$window'];
            return directive;
        };
        // Constructor 
        PasswordMatcherDirective.$inject = ['$window'];
        return PasswordMatcherDirective;
    }());
    asm.PasswordMatcherDirective = PasswordMatcherDirective;
    angular.module('app').
        directive('passwordMatcher', PasswordMatcherDirective.factory());
})(asm || (asm = {}));
//# sourceMappingURL=passwordMatcher.js.map
var asm;
(function (asm) {
    "use strict";
    var RaidConfigurationController = (function () {
        function RaidConfigurationController(GlobalServices, constants) {
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.radioGuid = "";
            this.basicRaidOptions = null;
            this.internalInvalid = false;
            this.externalInvalid = false;
            this.comparators = null;
            this.diskTypes = null;
            this.validityObj = {
                id: this.GlobalServices.NewGuid(),
                invalid: false
            };
            var self = this;
            self.readOnly || self.invalidArray.push(self.validityObj);
            if (!self.setting.value) {
                self.setting.value = {};
            }
            else {
                self.setting.value = typeof self.setting.value === 'string' ? angular.fromJson(self.setting.value) : self.setting.value;
            }
            self.radioGuid = self.GlobalServices.NewGuid();
            self.basicRaidOptions = self.constants.basicRaidOptions;
            self.comparators = self.constants.comparators;
            self.diskTypes = self.constants.diskTypes;
            if (self.setting.value == "" || self.setting.value.raidtype == undefined) {
                self.updateSetting();
            }
            self.validateForm();
        }
        RaidConfigurationController.prototype.addVirtualDisk = function (raidconfig) {
            var self = this;
            var _virtualdisk = {
                id: self.GlobalServices.NewGuid(),
                raidlevel: 'raid0',
                comparator: 'minimum',
                numberofdisks: 1,
                disktype: 'any'
            };
            self.setting.value.virtualdisks.push(_virtualdisk);
            self.validateExternalDisks();
        };
        RaidConfigurationController.prototype.deleteVirtualDisk = function (raidconfig, _virtualdisk) {
            var self = this;
            _.remove(raidconfig.virtualdisks, { id: _virtualdisk.id });
            self.validateDisks();
        };
        RaidConfigurationController.prototype.deleteExternalVirtualDisk = function (raidconfig, _virtualdisk) {
            var self = this;
            _.remove(raidconfig.externalvirtualdisks, { id: _virtualdisk.id });
            self.validateExternalDisks();
        };
        RaidConfigurationController.prototype.addExternalVirtualDisk = function (raidconfig) {
            var self = this;
            var raidconfig = self.setting.value;
            var _virtualdisk = {
                id: self.GlobalServices.NewGuid(),
                raidlevel: 'raid0',
                comparator: 'minimum',
                numberofdisks: 1,
                disktype: 'any'
            };
            raidconfig.externalvirtualdisks.push(_virtualdisk);
            self.validateDisks();
        };
        RaidConfigurationController.prototype.validVirtualDisk = function (virtualdisk, type, index, skip) {
            var self = this;
            var raidconfig = self.setting.value;
            //if (virtualdisk == null) return true;
            //return true if we're not in basic mode
            if (raidconfig && raidconfig.raidtype != 'advanced')
                return true;
            var valid = true;
            if (virtualdisk.disktype == '' || virtualdisk.disktype == null)
                valid = false;
            else if (virtualdisk.numberofdisks == '' || virtualdisk.numberofdisks == null)
                valid = false;
            else if (virtualdisk.raidlevel == '' || virtualdisk.raidlevel == null)
                valid = false;
            else if (virtualdisk.comparator == '' || virtualdisk.comparator == null)
                valid = false;
            else if (virtualdisk.numberofdisks <= 0)
                valid = false;
            else if (virtualdisk.raidlevel == 'raid0' && virtualdisk.numberofdisks < 1)
                valid = false;
            else if (virtualdisk.raidlevel == 'raid1' && (virtualdisk.numberofdisks != 2 || virtualdisk.comparator != 'exact'))
                valid = false;
            else if (virtualdisk.raidlevel == 'raid5' && virtualdisk.numberofdisks < 3)
                valid = false;
            else if (virtualdisk.raidlevel == 'raid6' && virtualdisk.numberofdisks < 4)
                valid = false;
            else if (virtualdisk.raidlevel == 'raid10' && (virtualdisk.numberofdisks < 4 || virtualdisk.numberofdisks % 2 != 0))
                valid = false;
            else if (virtualdisk.raidlevel == 'raid50' && (virtualdisk.numberofdisks < 6 || virtualdisk.numberofdisks % 3 != 0))
                valid = false;
            else if (virtualdisk.raidlevel == 'raid60' && virtualdisk.numberofdisks < 8)
                valid = false;
            else if ((virtualdisk.disktype == 'first' || virtualdisk.disktype == 'last') && ((index == 0 && virtualdisk.comparator != 'exact') || index > 0))
                valid = false; //can only be set on 1
            if (!skip) {
                self.validateForm();
            }
            return valid;
        };
        RaidConfigurationController.prototype.validateDisks = function () {
            var self = this;
            var raidconfig = self.setting.value, valid = true;
            //mark form false
            if (raidconfig && raidconfig.raidtype == 'advanced' && (raidconfig.virtualdisks.length == 0 && raidconfig.externalvirtualdisks.length == 0))
                valid = false;
            if (valid && raidconfig && raidconfig.raidtype == 'basic' && raidconfig.basicraidlevel == null)
                valid = false;
            //only check virtual disks if we're in advanced mode
            if (raidconfig && raidconfig.raidtype == 'advanced' && valid) {
                valid = !_.find(raidconfig.virtualdisks, function (disk) {
                    return !self.validVirtualDisk(disk, 'internal', _.indexOf(raidconfig.virtualdisks, disk), true);
                });
            }
            return !valid;
        };
        RaidConfigurationController.prototype.validateExternalDisks = function () {
            var self = this;
            var raidconfig = self.setting.value, valid = true;
            //mark form false
            if (raidconfig && raidconfig.raidtype == 'advanced' && (raidconfig.externalvirtualdisks.length == 0 && raidconfig.virtualdisks.length == 0))
                valid = false;
            if (raidconfig && raidconfig.raidtype == 'basic' && raidconfig.basicraidlevel == null)
                valid = false;
            //only check virtual disks if we're in advanced mode
            if (raidconfig && raidconfig.raidtype == 'advanced' && valid) {
                valid = !_.find(raidconfig.externalvirtualdisks, function (disk) {
                    return !self.validVirtualDisk(disk, 'external', _.indexOf(raidconfig.virtualdisks, disk), true);
                });
            }
            return !valid;
        };
        RaidConfigurationController.prototype.validateForm = function () {
            var self = this;
            return self.readOnly || (self.validityObj.invalid = self.validateExternalDisks() || self.validateDisks());
        };
        RaidConfigurationController.prototype.updateSetting = function () {
            var self = this;
            self.setting.value = {
                raidtype: 'basic',
                basicraidlevel: 'raid1',
                enableglobalhotspares: false,
                globalhotspares: 0,
                minimumssd: 0,
                enableglobalhotsparesexternal: false,
                globalhotsparesexternal: 0,
                minimumssdexternal: 0,
                virtualdisks: [],
                externalvirtualdisks: []
            };
        };
        RaidConfigurationController.$inject = ['GlobalServices', 'constants'];
        return RaidConfigurationController;
    }());
    angular.module('app')
        .component('raidconfiguration', {
        templateUrl: 'views/raidconfiguration.html',
        controller: RaidConfigurationController,
        controllerAs: 'RaidConfiguration',
        bindings: {
            setting: '=',
            readOnly: '=readonly',
            invalidArray: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=raidconfiguration.js.map
var asm;
(function (asm) {
    "use strict";
    var ListRepositoriesController = (function () {
        function ListRepositoriesController($http, $timeout, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.viewData = {
                activeTab: 'iso'
            };
        }
        ListRepositoriesController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ListRepositoriesController;
    }());
    function listrepositories() {
        return {
            restrict: 'E',
            templateUrl: 'views/listrepositories.html',
            replace: true,
            transclude: false,
            controller: ListRepositoriesController,
            controllerAs: 'rep',
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular
        .module('app')
        .directive('listrepositories', listrepositories);
})(asm || (asm = {}));
//# sourceMappingURL=repositoriesdirective.js.map
var asm;
(function (asm) {
    'use strict';
    var ServicesvgController = (function () {
        //get intervalX(): number {
        //    var self: ServicesvgController = this;
        //    return self._intervalX;
        //}
        //set intervalX(theIntervalX: number) {
        //    var self: ServicesvgController = this;
        //    var oldIntervalX = self._intervalX;
        //    self._intervalX = theIntervalX;
        //    if (self.intervalX !== oldIntervalX) {
        //        if (self.service !== "") {
        //            self.refresh();
        //        }
        //    }
        //}
        function ServicesvgController(Modal, Dialog, $http, $timeout, $q, GlobalServices, $route, localStorageService, $routeParams, $translate, $location, $window, Loading, Commands, constants, $scope, $rootScope) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.GlobalServices = GlobalServices;
            this.$route = $route;
            this.localStorageService = localStorageService;
            this.$routeParams = $routeParams;
            this.$translate = $translate;
            this.$location = $location;
            this.$window = $window;
            this.Loading = Loading;
            this.Commands = Commands;
            this.constants = constants;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.svgheight = 300;
            this.mode = "edit"; //
            this.serviceServers = [];
            this.popoverServers = [];
            this.serviceStorages = [];
            this.popoverStorages = [];
            this.serviceClusters = [];
            this.popoverClusters = [];
            this.serviceVMs = [];
            this.popoverVMs = [];
            this.mostItems = 0;
            this.render = false;
            //public serviceId: any;
            this.timerIntervals = 300;
            this.addResource = null;
            this.enableSvgLogging = false;
            this.overallServiceHealthText = '';
            this.overallServiceResourceHealthText = '';
            this.intervalX = 0;
            var self = this;
            self.const_firmwareStatus = constants.firmwareStatus;
            self.serviceId = self.$scope.serviceId;
            self.firmwarereport = self.$scope.firmwarereport;
            self.activeTab = self.$scope.activeTab;
            self.$scope.$watch(function () { return self.intervalX; }, function (newValue, oldValue) {
                if (oldValue !== newValue) {
                    if (self.service !== '') {
                        self.refresh();
                    }
                }
            });
            self.$scope.$watch(function () { return self.$scope.refreshService; }, function (newValue, oldValue) {
                if (oldValue !== newValue) {
                    self.getserviceData();
                }
            });
            self.refresh();
            self.windowResize();
            //$(window).resize(function () {
            //    if (self.pollwindowtimer) self.$timeout.cancel(self.pollwindowtimer);
            //    //self.pollwindowtimer = self.$timeout(function() {
            //    //    self.calculatewindowheight();
            //    //}, 1);
            //    self.pollwindowtimer = self.calculatewindowheight();
            //});
            //self.upgradeServiceComponents();
        }
        ServicesvgController.prototype.removePopovers = function () {
            $('.popover').remove();
        };
        ServicesvgController.prototype.portviewServer = function (server) {
            var self = this;
            self.removePopovers();
            self.$scope.onServerPortViewClick({ tab: 'portView', server: server });
        };
        ServicesvgController.prototype.viewLogs = function (component, deploymentid) {
            var self = this;
            self.removePopovers();
            var viewLogsModal = self.Modal({
                title: self.$translate.instant("LOGS_RESOURCE_SEVERITIES_ComponentLogsModalTitle", { componentName: component.name }),
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/resourceLogs.html',
                controller: 'ResourceLogsController as resourceLogsController',
                params: {
                    componentid: component.id,
                    deploymentid: deploymentid
                }
            });
            viewLogsModal.modal.show();
        };
        ServicesvgController.prototype.hasApplication = function (component) {
            if (component.type == 'storage' || component.type == 'cluster')
                return false;
            var hasApplication = false;
            $.each(component.relatedcomponents, function (index, model) {
                if (model.installOrder > 0) {
                    hasApplication = true;
                    return;
                }
            });
            return hasApplication;
        };
        ServicesvgController.prototype.windowResize = function () {
            var self = this;
            $(window).resize(function () {
                //console.log('inside resize event');
                if (self.pollwindowtimer)
                    self.$timeout.cancel(self.pollwindowtimer);
                //if (self.windowtimer) self.$timeout.cancel(self.windowtimer);
                self.pollwindowtimer = self.$timeout(function () {
                    self.calculatewindowheight();
                }, 1);
                //self.pollwindowtimer = self.calculatewindowheight();
            });
        };
        ServicesvgController.prototype.$onDestroy = function () {
            var self = this;
            $(window).off("resize");
            if (self.windowtimer)
                self.$timeout.cancel(self.windowtimer);
            if (self.pollwindowtimer)
                self.$timeout.cancel(self.pollwindowtimer);
        };
        ServicesvgController.prototype.centerValue = function (components) {
            var self = this;
            if (components <= (self.mostItems - 1)) {
                var x = ((self.mostItems - components) / 2) * self.intervalX;
                return x;
            }
        };
        /* Original service stuff start */
        ServicesvgController.prototype.doAddExistingService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: 'Add Existing Service',
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/pools/addpoolwizard.html',
                controller: 'AddPoolWizardController as AddPoolWizard',
                params: {},
                onCancel: function () {
                },
                onComplete: function (modalScope) {
                }
            });
            addServiceWizard.modal.show();
        };
        ServicesvgController.prototype.doMigrate = function () {
            var self = this;
            self.removePopovers();
            var migrateModal = self.Modal({
                title: self.$translate.instant('MIGRATE_SERVER_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/migrate.html',
                controller: 'MigrateController as migrateController',
                params: {
                    serviceId: self.serviceId
                },
                onCancel: function () {
                    migrateModal.modal.dismiss();
                },
                onComplete: function (modalScope) {
                }
            });
            migrateModal.modal.show();
        };
        ServicesvgController.prototype.viewSettings = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('TEMPLATES_TEMPLATESETTINGS_MODAL_TemplateSettings'),
                modalSize: 'modal-lg',
                templateUrl: '/views/templatebuilder/ViewTemplateDetailsModal.html',
                controller: 'ViewTemplateDetailsModalController as viewTemplateDetailsModalController',
                params: {
                    template: angular.copy(self.service)
                }
            });
            modal.modal.show();
        };
        ;
        ServicesvgController.prototype.doDeleteResources = function () {
            var self = this;
            var deleteModal = self.Modal({
                title: self.$translate.instant('SERVICE_DELETE_RESOURCES_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/deleteResources.html',
                controller: 'DeleteResourcesController as deleteResources',
                params: {
                    serviceId: self.serviceId
                }, onComplete: function () {
                    self.getserviceData();
                }
            });
            deleteModal.modal.show();
        };
        ServicesvgController.prototype.deleteService = function () {
            var self = this;
            var deleteserviceModal = self.Modal({
                title: self.$translate.instant('SERVICE_DETAIL_DELETE_SERVICE_DeleteService'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/deleteService.html',
                controller: 'DeleteServiceModalController as DeleteServiceModal',
                params: {
                    service: angular.copy(self.service)
                },
                onClose: function () {
                    deleteserviceModal.modal.close();
                },
                onCancel: function () {
                    deleteserviceModal.modal.dismiss();
                },
            });
            deleteserviceModal.modal.show();
        };
        ServicesvgController.prototype.doUpdateFirmware = function () {
            var self = this;
            var updateFirmware = self.Modal({
                title: self.$translate.instant('SERVICE_APPLY_FIRMWARE_UPDATES_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/updateservicefirmware.html',
                controller: 'UpdateServiceFirmwareController as UpdateServiceFirmware',
                params: {
                    id: self.serviceId
                },
                onCancel: function () {
                    //THIS FUNCTION IS CALLED ON MODAL.CANCEL, not WIZARD.CANCEL
                    //var confirm : self.Dialog(self.$translate.instant('GENERIC_Confirm'), 'Are you sure you want to cancel?');
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICE_APPLY_FIRMWARE_UPDATES_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        updateFirmware.modal.dismiss();
                        self.getserviceData();
                    });
                },
                onComplete: function () {
                    self.getserviceData(); //When the modal is closed, update the data.
                }
            });
            updateFirmware.modal.show();
        };
        ServicesvgController.prototype.editService = function (revertRouteOnFinish) {
            var self = this;
            var editServiceModal = self.Modal({
                title: self.$translate.instant('SERVICE_DETAIL_EditServiceInformation'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/editService.html',
                controller: 'EditServiceModalController as editService',
                params: {
                    id: self.serviceId
                },
                onComplete: function () {
                    if (revertRouteOnFinish) {
                        self.$location.path("/service/" + self.$scope.serviceId + "/details");
                    }
                    else {
                        self.getserviceData();
                    }
                }
            });
            editServiceModal.modal.show();
        };
        ServicesvgController.prototype.openFirmwareReport = function (reportType) {
            //old url for resource:  'services/firmwareReport?type=resource&id=' + devices.selectedDevice.id
            //old url:  '#services/firmwareReport?type=service&id=' + $parent.serviceId()
            var self = this;
            var title;
            var id;
            if (reportType.toUpperCase() == 'SERVICE') {
                //note:  the compliance report is only available for server components
                //title = 'Server Firmware Compliance Report';
                title = self.$translate.instant('SERVICES_SERVICE_FirmwareReportTitle');
                id = self.serviceId;
                var firmwareReportModal = self.Modal({
                    title: title,
                    modalSize: 'modal-lg',
                    templateUrl: 'views/services/ServiceComplianceReport.html',
                    controller: 'ServiceComplianceReportController as serviceComplianceReportController',
                    params: {
                        type: reportType,
                        id: id
                    },
                    onComplete: function () {
                        self.getserviceData();
                    }
                });
                firmwareReportModal.modal.show();
            }
        };
        ServicesvgController.prototype.getHealthText = function (modelHealth) {
            var text;
            switch (modelHealth.toLowerCase()) {
                case 'red':
                    text = 'Error';
                    break;
                case 'green':
                    text = 'Healthy';
                    break;
                case 'blue':
                case 'unknown':
                case '':
                    text = 'In Progress';
                    break;
                case 'yellow':
                    text = 'Warning';
                    break;
                case 'orange':
                    text = 'Cancelled';
                    break;
            }
            return text;
        };
        ServicesvgController.prototype.getResourceHealthText = function (modelHealth) {
            var text;
            switch (modelHealth.toLowerCase()) {
                case 'red':
                    text = 'Error';
                    break;
                case 'green':
                    text = 'Healthy';
                    break;
                case 'blue':
                case 'unknown':
                case '':
                    text = 'Unknown';
                    break;
                case 'yellow':
                    text = 'Warning';
                    break;
                case 'orange':
                    text = 'Cancelled';
                    break;
            }
            return text;
        };
        ServicesvgController.prototype.exportService = function () {
            var self = this;
            self.$window.location.href = self.Commands.data.services.exportService + '/' + (self.serviceId ? self.serviceId : '');
        };
        ServicesvgController.prototype.generateTroubleshootingBundle = function () {
            var self = this;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            self.$http.post(self.Commands.data.applianceManagement.exportTroubleshootingBundle, null)
                .then(function (data) {
                $("body").append("<iframe src='" + data.data.responseObj + "' style='display: none;' ></iframe>");
                deferred.resolve();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
                deferred.resolve();
            });
        };
        ServicesvgController.prototype.retryService_Dialog = function () {
            var self = this;
            var text_p1 = self.$translate.instant('SERVICES_SERVICE_Details_confirmlnkretryservice');
            var text_p2 = self.$translate.instant('SERVICES_SERVICE_Details_confirmlnkretryserviceareyousure');
            var text_alt = self.$translate.instant('SERVICES_SERVICE_Details_retryalternateaction_Dialog');
            var confirm = self.Dialog((self.$translate.instant('GENERIC_Confirm')), text_p1 + '<BR /><BR />' + text_p2);
            confirm.then(function () {
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.services.retryService, { 'id': self.serviceId })
                    .then(function (data) {
                    self.getserviceData();
                    d.resolve();
                }).catch(function (data) {
                    d.resolve();
                    self.GlobalServices.DisplayError(data.data);
                });
            });
            confirm.catch(function () {
                //if not confirmed, have to implement alternative action logic
                var confirm_alt = self.Dialog((self.$translate.instant('GENERIC_Confirm')), text_alt);
                confirm_alt.then(function () {
                    self.doUpdateFirmware();
                });
            });
        };
        ServicesvgController.prototype.retryService = function () {
            var self = this;
            //self.confirmMessage( ASM.Translations.services.details.confirmlnkretryservice );
            ////confirmlnkretryservice: 'Retrying a service attempts to deploy the service again. Firmware will not be updated as part of a service retry.',
            //var text_p1 = self.$translate.instant( 'SERVICES_SERVICE_Details_confirmlnkretryservice' );
            //self.confirmIsAlert( false );
            //self.footnote( ASM.Translations.services.details.confirmlnkretryserviceareyousure );
            ////confirmlnkretryserviceareyousure: 'Are you sure you want to continue?',
            //var text_p2 = self.$translate.instant( 'SERVICES_SERVICE_Details_confirmlnkretryserviceareyousure' );
            //self.alternateActionText( ASM.Translations.services.details.retryalternateaction );
            ////retryalternateaction: 'Cancel Retry and Update Firmware'
            //var text_alt = self.$translate.instant( 'SERVICES_SERVICE_Details_retryalternateaction' );
            //self.confirmCallbackTrue( function ()
            //{
            //    self.service.destroy( {
            //        url: ASM.urlConfig.data.services.retryService,
            //        requestObj: { id: self.service.id },
            //        success: function ()
            //        {
            //            //window.location.hash = '#services/list';
            //            //reload service with updated id
            //            var params = new Object();
            //            params.id = self.service.id;
            //            self.update( params );
            //        },
            //        error: function ( model, response, options )
            //        {
            //            ASM.handleError( response.errorObj, 'page_service_detail' );
            //        }
            //    });
            //});
            //self.confirmCallbackFalse( function ( viewmodel )
            //{
            //    if ( viewmodel.alternateAction() )
            //    {
            //        self.redirectToFirmware( true );
            //    }
            //});
            //window.location.hash = "#confirm";
        };
        /* Original service stuff end */
        //The window size is constantly being calculated
        ServicesvgController.prototype.calculatewindowheight = function () {
            var self = this;
            //self.enableSvgLogging && console.log('redrawing window');
            self.windowtimer = self.$timeout(function () {
                self.svgcanvaswidth = $('#serviceBuilderSVG').width();
                self.windowheight = $(window).height() - 300;
                //if (self.windowheight >= 300) {
                //    self.svgheight = self.windowheight - 50;
                //}
                //min height
                if (self.windowheight <= 600) {
                    self.svgheight = self.windowheight - 50;
                    if (self.svgheight <= 500) {
                        self.svgheight = 500;
                    }
                }
                //max height
                if (self.windowheight >= 600) {
                    self.svgheight = self.windowheight - 50;
                    if (self.svgheight >= 600) {
                        self.svgheight = 600;
                    }
                }
                self.componentscale = self.svgheight * .002;
                self.Xlines = self.svgheight * .065;
                self.intervalX = 15;
                if (self.svgcanvaswidth >= 800 && self.svgheight <= 600) {
                    self.intervalX = 10;
                }
                if (self.svgcanvaswidth <= 800 && self.svgheight >= 600) {
                    self.intervalX = 18;
                }
                //The x interval needs to change depending on the size of the window and canvas
                //short windows
                //if (self.windowheight <= 601 && self.svgcanvaswidth <= 400) {
                //    self.intervalX = 25;
                //}
                //if (self.windowheight <= 601 && self.svgcanvaswidth >= 400) {
                //    self.intervalX = 14;
                //}
                ////tall windows
                //if (self.windowheight >= 601 && self.svgcanvaswidth >= 800) {
                //    self.intervalX = 15;
                //}
                //if (self.windowheight >= 601 && self.svgcanvaswidth <= 800) {
                //    self.intervalX = 20;
                //    self.componentscale = self.svgheight * .0015;
                //    self.Xlines = self.svgheight * .052;
                //}
                self.changewidths();
            }, self.timerIntervals);
        };
        //This gets called after calculating window height and after drawing the lines
        ServicesvgController.prototype.changewidths = function () {
            var self = this;
            $('#drawingContainer').css('height', (self.svgheight - 50 + 'px'));
            if (self.render && self.mostItems >= 1 && self.furthestComponentId !== '') {
                //Chrome needs this: It adjusts heights and widths of various DOM containers to allow horizontal scrolling on the SVG
                if (self.render) {
                    //if (self.windowheight >= 300) {
                    //    $('#drawingContainer').css('height', (self.windowheight * .8 + 'px'));
                    //}
                    //$('#drawingContainer').css('width', '400px');
                    var BScontainerWidth = $('#servicearticle').width();
                    $('#drawingContainer').css('width', BScontainerWidth);
                    $('#drawingContainer').css('width', (BScontainerWidth).toString() + 'px');
                    $('#serviceBuilderSVG').css('width', (BScontainerWidth - 45).toString() + 'px');
                    var widestRowStart = $('#' + self.mostComponents).offset().left;
                    var widestRowEnd = $('#' + self.furthestComponentId + ' #topright').offset().left;
                    var wideDivwidth = widestRowEnd - widestRowStart;
                    $('#wideDiv').css('width', (wideDivwidth + 250).toString() + 'px');
                    $('#deselectionBG').attr('width', (wideDivwidth + 250).toString() + 'px');
                    //Adjust background lines
                    self.furthestSVGPoint = $('#' + self.furthestComponentId).attr('x');
                    self.furthestSVGPoint = parseInt(self.furthestSVGPoint.replace(/[^\w\s]/gi, '')) + 50;
                    self.furthestSVGPoint = self.furthestSVGPoint.toString() + '%';
                    if (self.furthestSVGPoint.replace(/[^\w\s]/gi, '') <= 100) {
                        self.furthestSVGPoint = '100%';
                    }
                }
            }
            else {
                //if (self.windowheight >= 300) {
                //    $('#drawingContainer').css('height', (self.windowheight * .8 + 'px'));
                //}
                //$('#drawingContainer').css('width', '400px');
                var BScontainerWidth = $('#servicearticle').width();
                $('#drawingContainer').css('width', BScontainerWidth);
                $('#drawingContainer').css('width', (BScontainerWidth).toString() + 'px !important');
                $('#serviceBuilderSVG').css('width', (BScontainerWidth - 45).toString() + 'px');
                self.furthestSVGPoint = '100%';
            }
        };
        ServicesvgController.prototype.addComponent = function (resourceType) {
            var self = this, component = {
                controller: "ServiceComponentModalController as serviceComponentModalController",
                templateUrl: "views/services/ServiceComponentWrapper.html"
            }, network = {
                controller: "AddNetworkModalController as addNetworkModalController",
                templateUrl: "views/networking/networks/addnetworktoservice.html"
            }, application = {
                controller: "AddApplicationWizardController as Application",
                templateUrl: "views/addapplicationwizard.html"
            }, defaultParams = {
                mode: "edit",
                action: "add",
                type: resourceType,
                templateId: self.service.templateId,
                serviceId: self.service.id,
                template: self.service,
                service: self.service
            }, modalProps = {};
            switch (resourceType) {
                case "application":
                    modalProps = angular.extend(application, {
                        title: self.$translate.instant("ADDAPPLICATION_Title"),
                        params: {
                            template: null,
                            service: self.service,
                            action: "add"
                        }
                    });
                    break;
                case "network":
                    modalProps = angular.extend(network, {
                        title: self.$translate.instant("SERVICES_AddNetwork"),
                        params: defaultParams
                    });
                    break;
                case "storage":
                    modalProps = angular.extend(component, {
                        title: self.$translate.instant("COMPONENTEDITOR_StorageComponent"),
                        params: defaultParams
                    });
                    break;
                case "server":
                    modalProps = angular.extend(component, {
                        title: self.$translate.instant("COMPONENTEDITOR_ServerComponent"),
                        params: defaultParams
                    });
                    break;
                case "cluster":
                    modalProps = angular.extend(component, {
                        title: self.$translate.instant("COMPONENTEDITOR_ClusterComponent"),
                        params: defaultParams
                    });
                    break;
                case "vm":
                    modalProps = angular.extend(component, {
                        title: self.$translate.instant("COMPONENTEDITOR_VMComponent"),
                        params: defaultParams
                    });
                    break;
                default:
                    //if title option is selected, do nothing
                    return;
            }
            //build and launch the modal
            var componentEditModal = self.Modal(angular.extend({
                modalSize: "modal-lg",
                onCancel: function () {
                    componentEditModal.modal.dismiss();
                },
                onComplete: function (modalScope) {
                    //componentEditModal.modal.close();
                    self.getserviceData();
                },
            }, modalProps));
            componentEditModal.modal.show();
            //reset the dropdown
            self.addResource = null;
        };
        ServicesvgController.prototype.updateServiceComponents = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SERVICE_DETAIL_UpgradeServiceComponents'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/UpdateComponents.html',
                controller: 'UpdateComponentsController as updateComponentsController',
                onComplete: function () {
                    self.getserviceData();
                },
                params: {
                    serviceId: self.serviceId
                }
            });
            modal.modal.show();
        };
        //TODO: fix this title translation
        ServicesvgController.prototype.deleteApplications = function (selectedComponent) {
            var self = this;
            $(".popover").remove();
            var stopManagingApplicationsModal = self.Modal({
                title: self.$translate.instant('STOP_MANAGING_APPLICATIONS_Title') + ' for ' + selectedComponent.name,
                modalSize: 'modal-lg',
                templateUrl: 'views/stopmanagingapplications.html',
                controller: 'StopManagingApplicationsModalController as Stop',
                onComplete: function () {
                    self.getserviceData();
                },
                params: {
                    serviceId: self.serviceId,
                    selectedComponent: selectedComponent
                }
            });
            stopManagingApplicationsModal.modal.show();
        };
        ServicesvgController.prototype.editApplications = function (selectedComponent) {
            var self = this;
            $(".popover").remove();
            var addApplicationWizard = self.Modal({
                title: self.$translate.instant('EDITAPPLICATION_Title') + ' for ' + selectedComponent.name,
                modalSize: 'modal-lg',
                templateUrl: 'views/addapplicationwizard.html',
                controller: 'AddApplicationWizardController as Application',
                onComplete: function () {
                    //addApplicationWizard.modal.close();
                    self.getserviceData();
                },
                onCancel: function () {
                    addApplicationWizard.modal.dismiss();
                },
                params: {
                    service: self.service,
                    action: 'edit',
                    id: selectedComponent.id
                }
            });
            addApplicationWizard.modal.show();
        };
        //Get the service data
        ServicesvgController.prototype.getserviceData = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            //Shut everything down and start over
            self.selectedComponent = {};
            self.render = false;
            self.service = '';
            $('#TemplateBuilderSVGLines').empty();
            $('#TemplateBuilderSVGHoverLines').empty();
            $('#TemplateBuilderSVGSelectedLines').empty();
            $(window).off("resize");
            if (self.windowtimer)
                self.$timeout.cancel(self.windowtimer);
            if (self.pollwindowtimer)
                self.$timeout.cancel(self.pollwindowtimer);
            self.mostItems = 0;
            self.intervalX = 0;
            //New call for data
            self.$http.post(self.Commands.data.services.getServiceById, { id: self.serviceId }).then(function (data) {
                self.service = data.data.responseObj;
                //console.log(self.service);
                self.refresh();
                angular.forEach([
                    self.service.serverlist,
                    self.service.vmlist,
                    self.service.clusterlist,
                    self.service.applicationlist,
                    self.service.storagelist
                ], function (deviceList) {
                    angular.forEach(deviceList, function (device) {
                        var match = _.find(self.service.components, { componentid: device.id });
                        if (match) {
                            var status = _.find(self.service.componentstatus, { componentid: device.id }) || {};
                            var health = "";
                            switch (status.status) {
                                case "complete":
                                    status.health = "green";
                                    break;
                                case "warning":
                                    status.health = "yellow";
                                    break;
                                case "unknown":
                                case "pending":
                                case "inprogress":
                                    status.health = "blue";
                                    break;
                                case "error":
                                    status.health = "red";
                                    break;
                                case "cancelled":
                                    status.health = "orange";
                                    break;
                            }
                            angular.extend(match, {
                                componentStatus: status,
                                device: device
                            });
                            $(document).off('click', '#edit_' + device.id);
                            $(document).on('click', '#edit_' + device.id, function (evt) {
                                $('body').find('.popover').popover('hide');
                                self.editApplications($(evt.currentTarget).attr('id').split('_')[1]);
                            });
                            $(document).off('click', '#delete_' + device.id);
                            $(document).on('click', '#delete_' + device.id, function (evt) {
                                $('body').find('.popover').popover('hide');
                                self.deleteApplications($(evt.currentTarget).attr('id').split('_')[1]);
                            });
                        }
                    });
                });
                self.calculatewindowheight();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        ServicesvgController.prototype.refresh = function () {
            var self = this;
            $('.tooltip').remove();
            $('#TemplateBuilderSVGLines').empty();
            $('#TemplateBuilderSVGHoverLines').empty();
            $('#TemplateBuilderSVGSelectedLines').empty();
            if (self.service) {
                self.dealWithActionableRouteParams();
                self.getserviceServers();
                self.getserviceCluster();
                self.getserviceStorage();
                self.getserviceVMs();
            }
            else {
                self.getserviceData();
            }
        };
        ServicesvgController.prototype.dealWithActionableRouteParams = function () {
            var self = this;
            if (self.firmwarereport === 'firmwarereport') {
                self.openFirmwareReport('service');
            }
            else if (self.firmwarereport === 'edit') {
                self.editService(true);
            }
        };
        //Filters data and figures out which device type has the most components
        ServicesvgController.prototype.getserviceServers = function () {
            var self = this;
            self.serviceServers = _.filter(self.service.components, { 'type': 'server' });
            if (self.serviceServers.length && self.serviceServers.length >= self.mostItems) {
                self.mostItems = self.serviceServers.length;
                self.mostComponents = 'serverWidth';
                var arrayitem = self.serviceServers.length - 1;
                self.furthestComponentId = self.serviceServers[arrayitem].id;
            }
            self.drawlines(self.serviceServers);
        };
        ServicesvgController.prototype.getserviceStorage = function () {
            var self = this;
            self.serviceStorages = _.filter(self.service.components, { 'type': 'storage' });
            if (self.serviceStorages.length && self.serviceStorages.length >= self.mostItems) {
                self.mostItems = self.serviceStorages.length;
                self.mostComponents = 'storageWidth';
                var arrayitem = self.serviceStorages.length - 1;
                self.furthestComponentId = self.serviceStorages[arrayitem].id;
            }
            self.drawlines(self.serviceStorages);
        };
        ServicesvgController.prototype.getserviceCluster = function () {
            var self = this;
            self.serviceClusters = _.filter(self.service.components, { 'type': 'cluster' });
            if (self.serviceClusters.length && self.serviceClusters.length >= self.mostItems) {
                self.mostItems = self.serviceClusters.length;
                self.mostComponents = 'clusterWidth';
                var arrayitem = self.serviceClusters.length - 1;
                self.furthestComponentId = self.serviceClusters[arrayitem].id;
            }
            self.drawlines(self.serviceClusters);
        };
        ServicesvgController.prototype.getserviceVMs = function () {
            var self = this;
            self.serviceVMs = _.filter(self.service.components, { 'type': 'vm' });
            if (self.serviceVMs.length && self.serviceVMs.length >= self.mostItems) {
                self.mostItems = self.serviceVMs.length;
                self.mostComponents = 'vmWidth';
                var arrayitem = self.serviceVMs.length - 1;
                self.furthestComponentId = self.serviceVMs[arrayitem].id;
            }
            self.drawlines(self.serviceVMs);
        };
        ServicesvgController.prototype.drawlines = function (x) {
            var self = this;
            self.$timeout(function () {
                x.forEach(function (component) {
                    component.relatedcomponents.forEach(function (related) {
                        var newFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var x1 = $('#serviceBuilderSVG #' + component.id).attr('x');
                        var y1 = $('#serviceBuilderSVG #' + component.id).attr('y');
                        var x2 = $('#serviceBuilderSVG #' + related.id).attr('x');
                        var y2 = $('#serviceBuilderSVG #' + related.id).attr('y');
                        var lanechange = '';
                        var y1Number = 0;
                        var y2Number = 0;
                        if (y1 && y2) {
                            //Helps figure out if we're going up or down
                            y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                            y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                        }
                        if (component.type === 'cluster') {
                            lanechange = '38%';
                        }
                        if (component.type === 'server') {
                            lanechange = '58%';
                        }
                        if (component.type === 'storage') {
                            lanechange = '58%';
                        }
                        if (component.type === 'vm') {
                            lanechange = '18%';
                        }
                        //Are we drawing up?
                        if (y1Number > y2Number) {
                            if (component.type === 'cluster') {
                                lanechange = '10%';
                            }
                            if (component.type === 'server') {
                                lanechange = '38%';
                            }
                            if (component.type === 'vm' || component.type === 'cluster') {
                                lanechange = '18%';
                            }
                        }
                        if (x1 && y1 && x2 && y2) {
                            newFirstVertical.setAttribute('x1', x1);
                            newFirstVertical.setAttribute('y1', y1);
                            newFirstVertical.setAttribute('x2', x1);
                            newFirstVertical.setAttribute('y2', lanechange);
                            newHorizontal.setAttribute('x1', x1);
                            newHorizontal.setAttribute('y1', lanechange);
                            newHorizontal.setAttribute('x2', x2);
                            newHorizontal.setAttribute('y2', lanechange);
                            newSecondVertical.setAttribute('x1', x2);
                            newSecondVertical.setAttribute('y1', lanechange);
                            newSecondVertical.setAttribute('x2', x2);
                            newSecondVertical.setAttribute('y2', y2);
                        }
                        if (x2 && y2 && y1) {
                            newFirstVertical.className.baseVal = 'templateline ' + component.name;
                            newHorizontal.className.baseVal = 'templateline ' + component.name;
                            newSecondVertical.className.baseVal = 'templateline ' + component.name;
                            $('#TemplateBuilderSVGLines').append(newFirstVertical);
                            $('#TemplateBuilderSVGLines').append(newHorizontal);
                            $('#TemplateBuilderSVGLines').append(newSecondVertical);
                        }
                    });
                });
                self.changewidths();
                self.render = true;
            }, self.timerIntervals);
        };
        ServicesvgController.prototype.hoverLine = function (x) {
            var self = this;
            self.componentHover = x;
            x.relatedcomponents.forEach(function (related) {
                var HoverFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var HoverHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var HoverSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var x1 = $('#serviceBuilderSVG #' + x.id).attr('x');
                var y1 = $('#serviceBuilderSVG #' + x.id).attr('y');
                var x2 = $('#serviceBuilderSVG #' + related.id).attr('x');
                var y2 = $('#serviceBuilderSVG #' + related.id).attr('y');
                var lanechange = '';
                var y1Number = 0;
                var y2Number = 0;
                if (y1 && y2) {
                    //Helps figure out if we're going up or down
                    y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                    y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                }
                if (x.type === 'cluster') {
                    lanechange = '38%';
                }
                if (x.type === 'server') {
                    lanechange = '58%';
                }
                if (x.type === 'storage') {
                    lanechange = '58%';
                }
                if (x.type === 'vm') {
                    lanechange = '18%';
                }
                //Are we drawing up?
                if (y1Number > y2Number) {
                    if (x.type === 'cluster') {
                        lanechange = '10%';
                    }
                    if (x.type === 'server') {
                        lanechange = '38%';
                    }
                    if (x.type === 'vm' || x.type === 'cluster') {
                        lanechange = '18%';
                    }
                }
                if (x1 && y1 && x2 && y2) {
                    HoverFirstVertical.setAttribute('x1', x1);
                    HoverFirstVertical.setAttribute('y1', y1);
                    HoverFirstVertical.setAttribute('x2', x1);
                    HoverFirstVertical.setAttribute('y2', lanechange);
                    HoverHorizontal.setAttribute('x1', x1);
                    HoverHorizontal.setAttribute('y1', lanechange);
                    HoverHorizontal.setAttribute('x2', x2);
                    HoverHorizontal.setAttribute('y2', lanechange);
                    HoverSecondVertical.setAttribute('x1', x2);
                    HoverSecondVertical.setAttribute('y1', lanechange);
                    HoverSecondVertical.setAttribute('x2', x2);
                    HoverSecondVertical.setAttribute('y2', y2);
                }
                HoverFirstVertical.className.baseVal = 'hoverline ' + x.id;
                HoverHorizontal.className.baseVal = 'hoverline ' + x.id;
                HoverSecondVertical.className.baseVal = 'hoverline ' + x.id;
                if (x2 && y2 && y1) {
                    $('#TemplateBuilderSVGHoverLines').append(HoverFirstVertical);
                    $('#TemplateBuilderSVGHoverLines').append(HoverHorizontal);
                    $('#TemplateBuilderSVGHoverLines').append(HoverSecondVertical);
                }
            });
        };
        ServicesvgController.prototype.removeHovers = function () {
            var self = this;
            $('#TemplateBuilderSVGHoverLines').empty();
            self.componentHover = '';
        };
        ServicesvgController.prototype.removeSelection = function () {
            var self = this;
            $('#TemplateBuilderSVGSelectedLines').empty();
            self.selectedComponent = '';
        };
        ServicesvgController.prototype.selectLine = function (x) {
            var self = this;
            $('#TemplateBuilderSVGSelectedLines').empty();
            self.selectedComponent = x;
            x.relatedcomponents.forEach(function (related) {
                var SelectedFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var SelectedHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var SelectedSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var x1 = $('#serviceBuilderSVG #' + x.id).attr('x');
                var y1 = $('#serviceBuilderSVG #' + x.id).attr('y');
                var x2 = $('#serviceBuilderSVG #' + related.id).attr('x');
                var y2 = $('#serviceBuilderSVG #' + related.id).attr('y');
                var lanechange = '';
                var y1Number = 0;
                var y2Number = 0;
                if (y1 && y2) {
                    //Helps figure out if we're going up or down
                    y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                    y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                }
                if (x.type === 'cluster') {
                    lanechange = '38%';
                }
                if (x.type === 'server') {
                    lanechange = '58%';
                }
                if (x.type === 'storage') {
                    lanechange = '58%';
                }
                if (x.type === 'vm') {
                    lanechange = '18%';
                }
                //Are we drawing up?
                if (y1Number > y2Number) {
                    if (x.type === 'cluster') {
                        lanechange = '10%';
                    }
                    if (x.type === 'server') {
                        lanechange = '38%';
                    }
                    if (x.type === 'vm' || x.type === 'cluster') {
                        lanechange = '18%';
                    }
                }
                if (x1 && y1 && x2 && y2) {
                    SelectedFirstVertical.setAttribute('x1', x1);
                    SelectedFirstVertical.setAttribute('y1', y1);
                    SelectedFirstVertical.setAttribute('x2', x1);
                    SelectedFirstVertical.setAttribute('y2', lanechange);
                    SelectedHorizontal.setAttribute('x1', x1);
                    SelectedHorizontal.setAttribute('y1', lanechange);
                    SelectedHorizontal.setAttribute('x2', x2);
                    SelectedHorizontal.setAttribute('y2', lanechange);
                    SelectedSecondVertical.setAttribute('x1', x2);
                    SelectedSecondVertical.setAttribute('y1', lanechange);
                    SelectedSecondVertical.setAttribute('x2', x2);
                    SelectedSecondVertical.setAttribute('y2', y2);
                }
                SelectedFirstVertical.className.baseVal = 'selectedline ' + x.id;
                SelectedHorizontal.className.baseVal = 'selectedline ' + x.id;
                SelectedSecondVertical.className.baseVal = 'selectedline ' + x.id;
                if (x2 && y2 && y1) {
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedFirstVertical);
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedHorizontal);
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedSecondVertical);
                }
            });
        };
        ServicesvgController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', 'GlobalServices', '$route', 'localStorageService', '$routeParams', '$translate', '$location', '$window', 'Loading', 'Commands', 'constants', '$scope', '$rootScope'];
        return ServicesvgController;
    }());
    function servicesvg() {
        return {
            restrict: 'E',
            templateUrl: 'views/servicesvg.html',
            replace: true,
            transclude: false,
            controller: ServicesvgController,
            controllerAs: 'servicesvg',
            scope: {
                serviceId: '=serviceId',
                firmwarereport: '=firmwarereport',
                mode: '=mode',
                onServerPortViewClick: '&',
                refreshService: "<"
            },
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('servicesvg', servicesvg);
})(asm || (asm = {}));
//# sourceMappingURL=serviceSVGdirective.js.map
var asm;
(function (asm) {
    'use strict';
    var StatusController = (function () {
        function StatusController(Modal, Dialog, $http, $timeout, $q, $compile, $scope, $translate, GlobalServices, Commands) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$compile = $compile;
            this.$scope = $scope;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            this.showStatuses = false;
            this.refreshTimer = null;
            this.oobe = {};
            var self = this;
            self.testMessage = 'Statuses go here';
            self.refresh();
        }
        StatusController.prototype.$onDestroy = function () {
            var self = this;
            if (self.refreshTimer)
                self.$timeout.cancel(self.refreshTimer);
        };
        StatusController.prototype.refresh = function () {
            var self = this;
            self.$http.post(self.Commands.data.initialSetup.gettingStarted, null)
                .then(function (data) {
                if (self.refreshTimer)
                    self.$timeout.cancel(self.refreshTimer);
                self.oobe = data.data.responseObj;
                self.$http.post(self.Commands.data.jobs.getJobList, null)
                    .then(function (data) {
                    var jobs = data.data.responseObj;
                    var x = _.filter(jobs, { 'endDate': null, 'status': 'running' });
                    self.jobsinprogress = x.length;
                    self.refreshTimer = self.$timeout(function () { self.refresh(); }, 30000);
                })
                    .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        StatusController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$compile', '$scope', '$translate', 'GlobalServices', 'Commands'];
        return StatusController;
    }());
    function status() {
        return {
            restrict: 'E',
            templateUrl: 'views/statusMasthead.html',
            replace: true,
            transclude: false,
            controller: StatusController,
            controllerAs: 'status',
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('status', status);
})(asm || (asm = {}));
//# sourceMappingURL=statusdirective .js.map
var asm;
(function (asm) {
    "use strict";
    function stringToNumber() {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, element, attrs, ngModel) {
                ngModel.$parsers.push(function (value) {
                    return '' + value;
                });
                ngModel.$formatters.push(function (value) {
                    return parseFloat(value);
                });
            }
        };
    }
    angular
        .module('app')
        .directive('stringToNumber', stringToNumber);
})(asm || (asm = {}));
//# sourceMappingURL=stringtonumberdirective.js.map
var asm;
(function (asm) {
    'use strict';
    var TemplatebuildersvgController = (function () {
        //efforts to remove $watch
        //private _intervalX: any;
        //get intervalX(): any {
        //    var self = this;
        //    return self._intervalX;
        //}
        //set intervalX(theIntervalX: any) {
        //    var self = this;
        //    var oldIntervalX = self._intervalX;
        //    self._intervalX = theIntervalX;
        //    if (self.intervalX != oldIntervalX) {
        //        if (self.template != '') {
        //            self.refresh();
        //        }
        //    }
        //}
        function TemplatebuildersvgController(Modal, Dialog, $http, $timeout, $q, GlobalServices, $route, localStorageService, $routeParams, $compile, $scope, $translate, $location, $window, Loading, $rootScope, Commands) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.GlobalServices = GlobalServices;
            this.$route = $route;
            this.localStorageService = localStorageService;
            this.$routeParams = $routeParams;
            this.$compile = $compile;
            this.$scope = $scope;
            this.$translate = $translate;
            this.$location = $location;
            this.$window = $window;
            this.Loading = Loading;
            this.$rootScope = $rootScope;
            this.Commands = Commands;
            this.svgheight = 300;
            this.templateServers = [];
            this.templateStorages = [];
            this.templateClusters = [];
            this.templateVMs = [];
            this.timerIntervals = 300;
            var self = this;
            self.selectedTemplateId = '';
            self.pollwindowtimer = '';
            self.windowtimer = '';
            self.mode = self.$scope.mode;
            self.template = '';
            self.jobRequest = { requestObj: { id: '', name: '' } };
            self.intervalX = 0;
            self.mostItems = 0;
            self.render = false;
            self.selectedTemplateId = self.$scope.selectedTemplateId;
            self.mode = self.$scope.mode;
            self.actions = {
                deleteAttachment: function (param) { return self.deleteAttachment(param); },
                addAttachment: function () { return self.addAttachment(); },
                downloadAttachment: function (param) { return self.downloadAttachment(param); },
                getTemplateData: function () { return self.getTemplateData(); },
                cloneTemplate: function () { return self.cloneTemplate(); },
                deployNewService: function () { return self.deployNewService(); }
            };
            self.$scope.$watch(function () { return self.intervalX; }, function (newValue, oldValue) {
                if (oldValue !== newValue) {
                    if (self.template !== '') {
                        self.refresh();
                    }
                }
            });
            self.root = this.$rootScope;
            self.refresh();
            self.windowResize();
        }
        TemplatebuildersvgController.prototype.windowResize = function () {
            var self = this;
            $(window).resize(function () {
                //console.log('inside resize event');
                if (self.pollwindowtimer)
                    self.$timeout.cancel(self.pollwindowtimer);
                //if (self.windowtimer) self.$timeout.cancel(self.windowtimer);
                self.pollwindowtimer = self.$timeout(function () {
                    self.calculatewindowheight();
                }, 1);
                //self.pollwindowtimer = self.calculatewindowheight();
            });
        };
        TemplatebuildersvgController.prototype.$onDestroy = function () {
            var self = this;
            $(window).off("resize");
            if (self.windowtimer)
                self.$timeout.cancel(self.windowtimer);
            if (self.pollwindowtimer)
                self.$timeout.cancel(self.pollwindowtimer);
        };
        TemplatebuildersvgController.prototype.centerValue = function (components) {
            var self = this;
            if (components <= (self.mostItems - 1)) {
                var x = ((self.mostItems - components) / 2) * self.intervalX;
                return x;
            }
        };
        //Called on window resize
        TemplatebuildersvgController.prototype.calculatewindowheight = function () {
            var self = this;
            //console.log('redrawing window');
            self.windowtimer = self.$timeout(function () {
                self.svgcanvaswidth = $('#TemplateBuilderSVG').width();
                self.windowheight = $(window).height() - 300;
                //if (self.windowheight >= 400) {
                //    self.svgheight = self.windowheight - 50;
                //}
                //min height
                if (self.windowheight <= 600) {
                    self.svgheight = self.windowheight - 50;
                    if (self.svgheight <= 500) {
                        self.svgheight = 500;
                    }
                }
                //max height
                if (self.windowheight >= 600) {
                    self.svgheight = self.windowheight - 50;
                    if (self.svgheight >= 600) {
                        self.svgheight = 600;
                    }
                }
                self.componentscale = self.svgheight * .002;
                self.Xlines = self.svgheight * .065;
                self.intervalX = 15;
                if (self.svgcanvaswidth >= 800 && self.svgheight <= 600) {
                    self.intervalX = 10;
                }
                if (self.svgcanvaswidth <= 800 && self.svgheight >= 600) {
                    self.intervalX = 18;
                }
                //The x interval needs to change depending on the size of the window and canvas
                //short windows
                //if (self.windowheight <= 601 && self.svgcanvaswidth <= 400) {
                //    self.intervalX = 25;
                //}
                //if (self.windowheight <= 601 && self.svgcanvaswidth >= 400) {
                //    self.intervalX = 14;
                //}
                ////tall windows
                //if (self.windowheight >= 601 && self.svgcanvaswidth >= 800) {
                //    self.intervalX = 15;
                //}
                //if (self.windowheight >= 601 && self.svgcanvaswidth <= 800) {
                //    self.intervalX = 20;
                //    //self.componentscale = self.svgheight * .0015;
                //    //self.Xlines = self.svgheight * .052;
                //}
                self.changewidths();
            }, self.timerIntervals);
        };
        //This gets called after calculating window height and after drawing the lines
        TemplatebuildersvgController.prototype.changewidths = function () {
            var self = this;
            $('#drawingContainer').css('height', (self.svgheight - 50 + 'px'));
            if (self.render && self.mostItems >= 1 && self.furthestComponentId !== '') {
                //Chrome needs this: It adjusts heights and widths of various DOM containers to allow horizontal scrolling on the SVG
                if (self.render) {
                    //if (self.windowheight >= 400) {
                    //    $('#drawingContainer').css('height', (self.windowheight * .8 + 'px'));
                    //}
                    //$('#drawingContainer').css('width', '400px');
                    var BScontainerWidth = $('#templatearticle').width();
                    $('#drawingContainer').css('width', BScontainerWidth);
                    $('#drawingContainer').css('width', (BScontainerWidth).toString() + 'px');
                    $('#TemplateBuilderSVG').css('width', (BScontainerWidth - 45).toString() + 'px');
                    var widestRowStart = $('#' + self.mostComponents).offset().left;
                    var widestRowEnd = $('#' + self.furthestComponentId + ' #topright').offset().left;
                    var wideDivwidth = widestRowEnd - widestRowStart;
                    $('#wideDiv').css('width', (wideDivwidth + 250).toString() + 'px');
                    $('#deselectionBG').attr('width', (wideDivwidth + 250).toString() + 'px');
                    //Adjust background lines
                    self.furthestSVGPoint = $('#' + self.furthestComponentId).attr('x');
                    self.furthestSVGPoint = parseInt(self.furthestSVGPoint.replace(/[^\w\s]/gi, '')) + 50;
                    self.furthestSVGPoint = self.furthestSVGPoint.toString() + '%';
                    if (self.furthestSVGPoint.replace(/[^\w\s]/gi, '') <= 100) {
                        self.furthestSVGPoint = '100%';
                    }
                }
            }
            else {
                //if (self.windowheight >= 400) {
                //    $('#drawingContainer').css('height', (self.windowheight  * .8 + 'px'));
                //}
                //$('#drawingContainer').css('width', '400px');
                var BScontainerWidth = $('#templatearticle').width();
                $('#drawingContainer').css('width', BScontainerWidth);
                $('#drawingContainer').css('width', (BScontainerWidth).toString() + 'px !important');
                $('#TemplateBuilderSVG').css('width', (BScontainerWidth - 45).toString() + 'px');
                self.furthestSVGPoint = '100%';
            }
        };
        TemplatebuildersvgController.prototype.getBaseName = function (name) {
            var pat = /\s\([0-9]*\)$/, // Match the pattern like: (7)
            match = name.match(pat);
            return match ? name.replace(match, '') : name;
        };
        TemplatebuildersvgController.prototype.namePicker = function (namedArray, unNamedArray, baseName) {
            var nameToTry = "", i = 1;
            _.map(unNamedArray, function (unNamedItem) {
                var originalName = unNamedItem.name, done;
                while (!done) {
                    nameToTry = i > 1 ? baseName + ' ' + '(' + i + ')' : baseName;
                    if (!(_.find(namedArray, { name: nameToTry }) ||
                        _.find(unNamedArray, function (unNamed) {
                            return unNamed.name === nameToTry && unNamed.id !== unNamedItem.id;
                        }))) {
                        //untaken name found
                        unNamedItem.name = nameToTry;
                        return done = true;
                    }
                    i++;
                }
            });
            return unNamedArray;
        };
        TemplatebuildersvgController.prototype.generateName = function (cname) {
            var self = this;
            var pat = /\s\([0-9]*\)/; // Match the pattern like: (7)
            var result = null;
            var match = cname.match(pat);
            cname = match != null ? cname.replace(match, '') : cname;
            var comps = [];
            $.each(self.template.components, function (index, item) {
                if (_.startsWith(item.name, cname)) {
                    comps.push(item.name);
                }
            });
            comps.sort();
            if (match == null && comps.length === 1) {
                result = cname + ' (2)';
            }
            else if (comps.length > 1) {
                for (var i = 1; i < comps.length; i++) {
                    //get the pattern
                    var curr = comps[i].match(pat);
                    var prev = comps[i - 1].match(pat);
                    //Strip off parentheses and get the number only to compare
                    if (curr != null)
                        curr = parseInt(comps[i].match(pat)[0].replace(/(^\s\()|(\)$)/g, ''));
                    if (prev != null)
                        prev = parseInt(comps[i - 1].match(pat)[0].replace(/(^\s\()|(\)$)/g, ''));
                    else
                        prev = 1;
                    var diff = curr - prev;
                    if (diff !== 1) {
                        result = cname + ' (' + (prev + 1) + ')'; //if difference is greater than 1, then add 1 to fill the gap.
                    }
                }
            }
            if (!result) {
                result = cname + ' (' + (comps.length + 1) + ')';
            }
            return result;
        };
        TemplatebuildersvgController.prototype.cloneComponent = function (id) {
            var self = this;
            var component = _.find(self.template.components, { id: id });
            var copy = angular.copy(component), newId = self.GlobalServices.NewGuid();
            angular.extend(copy, {
                clonedFromId: component.id,
                componentid: newId,
                name: self.namePicker(self.template.components, [copy], self.getBaseName(copy.name))[0].name
            }, { id: newId });
            //for components without applications
            if (component.type !== 'cluster') {
                angular.forEach(_.reject(self.template.components, { type: 'application' }), function (cmp) {
                    console.log(_.find(cmp.relatedcomponents, { id: component.id }));
                    //relate clone to seed's original associated components
                    if (_.find(cmp.relatedcomponents, { id: component.id })) {
                        cmp.relatedcomponents.push(copy);
                    }
                });
                //Note: Do not copy related components for clusters
                if (component.type === 'server' || component.type === 'vm') {
                    //_.remove returns array of applications
                    angular.forEach(_.remove(copy.relatedcomponents, { type: 'application' }), function (rc) {
                        var cmp = _.find(self.template.components, { id: rc.id });
                        var copyOfCurrentComponent = angular.copy(cmp);
                        self.template.components.push(angular.extend(copyOfCurrentComponent, {
                            id: self.GlobalServices.NewGuid(),
                            relatedcomponents: [],
                        }));
                        copy.relatedcomponents.push({
                            installOrder: rc.installOrder,
                            name: copyOfCurrentComponent.name,
                            id: copyOfCurrentComponent.id
                        });
                    });
                }
            }
            else {
                copy.relatedcomponents = [];
            }
            self.template.components.push(copy);
            self.$http.post(self.Commands.data.templates.saveTemplate, self.template)
                .then(function (data) {
                self.getTemplateData();
            })
                .catch(function (data) {
            });
        };
        //Get the template data
        TemplatebuildersvgController.prototype.getTemplateData = function () {
            var self = this;
            $('.popover').remove();
            var d = self.$q.defer();
            self.Loading(d.promise);
            //Shut everything down and start over
            self.selectedComponent = {};
            self.render = false;
            $('#TemplateBuilderSVGLines').empty();
            $('#TemplateBuilderSVGHoverLines').empty();
            $('#TemplateBuilderSVGSelectedLines').empty();
            $(window).off("resize");
            if (self.windowtimer)
                self.$timeout.cancel(self.windowtimer);
            if (self.pollwindowtimer)
                self.$timeout.cancel(self.pollwindowtimer);
            self.mostItems = 0;
            self.intervalX = 0;
            //New call for data
            self.jobRequest.requestObj.id = self.selectedTemplateId;
            self.$http.post(self.Commands.data.templates.getTemplateBuilderById, { requestObj: self.jobRequest.requestObj }).then(function (data) {
                self.template = data.data.responseObj;
                if (self.mode === 'edit') {
                    self.template.draft = true;
                }
                self.refresh();
                d.resolve();
                self.windowResize();
                //self.calculatewindowheight();
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        TemplatebuildersvgController.prototype.editApplications = function (id) {
            var self = this;
            var addApplicationWizard = self.Modal({
                title: self.$translate.instant('ADDAPPLICATION_Title'),
                titleIcon: "ci-settings-gear-wrench",
                modalSize: 'modal-lg',
                templateUrl: 'views/addapplicationwizard.html',
                controller: 'AddApplicationWizardController as Application',
                onComplete: function () {
                    self.refresh();
                },
                params: {
                    template: self.template,
                    action: 'edit',
                    id: id
                },
                onCancel: function () {
                    addApplicationWizard.modal.close();
                },
            });
            addApplicationWizard.modal.show();
            //addApplicationWizard.$on('modal:closed', function () {
            //    self.refresh();
            //}); //When the modal is closed, update the data.
            //addApplicationWizard.$on('modal:cancelled', function () {
            //}); //When the modal is cancelled do nothing for now
        };
        TemplatebuildersvgController.prototype.deleteApplications = function (id) {
            var self = this, parentComponent = _.find(self.template.components, { id: id });
            var applicationIds = _.map(_.filter(parentComponent.relatedcomponents, function (component) { return component.installOrder > 0; }), function (application) { return { id: application.id }; });
            angular.forEach([parentComponent.relatedcomponents, self.template.components], function (array) { return _.pullAllBy(array, applicationIds, "id"); });
            self.$http.post(self.Commands.data.templates.saveTemplate, self.template)
                .then(function () {
                self.getTemplateData();
            })
                .catch(function (data) { return self.GlobalServices.DisplayError(data.data); });
        };
        TemplatebuildersvgController.prototype.refresh = function () {
            var self = this;
            $('#TemplateBuilderSVGLines').empty();
            $('#TemplateBuilderSVGHoverLines').empty();
            $('#TemplateBuilderSVGSelectedLines').empty();
            if (self.template === '') {
                self.getTemplateData();
            }
            else {
                self.getTemplateServers();
                self.getTemplateCluster();
                self.getTemplateStorage();
                self.getTemplateVMs();
            }
        };
        //Filters data and figures out which device type has the most components
        TemplatebuildersvgController.prototype.getTemplateServers = function () {
            var self = this;
            self.templateServers = _.filter(self.template.components, { 'type': 'server' });
            if (self.templateServers.length && self.templateServers.length >= self.mostItems) {
                self.mostItems = self.templateServers.length;
                self.mostComponents = 'serverWidth';
                var arrayitem = self.templateServers.length - 1;
                self.furthestComponentId = self.templateServers[arrayitem].id;
            }
            self.drawlines(self.templateServers);
        };
        TemplatebuildersvgController.prototype.getTemplateStorage = function () {
            var self = this;
            self.templateStorages = _.filter(self.template.components, { 'type': 'storage' });
            if (self.templateStorages.length && self.templateStorages.length >= self.mostItems) {
                self.mostItems = self.templateStorages.length;
                self.mostComponents = 'storageWidth';
                var arrayitem = self.templateStorages.length - 1;
                self.furthestComponentId = self.templateStorages[arrayitem].id;
            }
            self.drawlines(self.templateStorages);
        };
        TemplatebuildersvgController.prototype.getTemplateCluster = function () {
            var self = this;
            self.templateClusters = _.filter(self.template.components, { 'type': 'cluster' });
            if (self.templateClusters.length && self.templateClusters.length >= self.mostItems) {
                self.mostItems = self.templateClusters.length;
                self.mostComponents = 'clusterWidth';
                var arrayitem = self.templateClusters.length - 1;
                self.furthestComponentId = self.templateClusters[arrayitem].id;
            }
            self.drawlines(self.templateClusters);
        };
        TemplatebuildersvgController.prototype.getTemplateVMs = function () {
            var self = this;
            self.templateVMs = _.filter(self.template.components, { 'type': 'vm' });
            if (self.templateVMs.length && self.templateVMs.length >= self.mostItems) {
                self.mostItems = self.templateVMs.length;
                self.mostComponents = 'vmWidth';
                var arrayitem = self.templateVMs.length - 1;
                self.furthestComponentId = self.templateVMs[arrayitem].id;
            }
            self.drawlines(self.templateVMs);
        };
        TemplatebuildersvgController.prototype.drawlines = function (x) {
            var self = this;
            self.$timeout(function () {
                x.forEach(function (component) {
                    component.relatedcomponents.forEach(function (related) {
                        var newFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var newSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                        var x1 = $('#TemplateBuilderSVG #' + component.id).attr('x');
                        var y1 = $('#TemplateBuilderSVG #' + component.id).attr('y');
                        var x2 = $('#TemplateBuilderSVG #' + related.id).attr('x');
                        var y2 = $('#TemplateBuilderSVG #' + related.id).attr('y');
                        var lanechange = '';
                        var y1Number = 0;
                        var y2Number = 0;
                        if (y1 && y2) {
                            //Helps figure out if we're going up or down
                            y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                            y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                        }
                        if (component.type === 'cluster') {
                            lanechange = '38%';
                        }
                        if (component.type === 'server') {
                            lanechange = '58%';
                        }
                        if (component.type === 'storage') {
                            lanechange = '58%';
                        }
                        if (component.type === 'vm') {
                            lanechange = '18%';
                        }
                        //Are we drawing up?
                        if (y1Number > y2Number) {
                            if (component.type === 'cluster') {
                                lanechange = '10%';
                            }
                            if (component.type === 'server') {
                                lanechange = '38%';
                            }
                            if (component.type === 'vm' || component.type === 'cluster') {
                                lanechange = '18%';
                            }
                        }
                        if (x1 && y1 && x2 && y2) {
                            newFirstVertical.setAttribute('x1', x1);
                            newFirstVertical.setAttribute('y1', y1);
                            newFirstVertical.setAttribute('x2', x1);
                            newFirstVertical.setAttribute('y2', lanechange);
                            newHorizontal.setAttribute('x1', x1);
                            newHorizontal.setAttribute('y1', lanechange);
                            newHorizontal.setAttribute('x2', x2);
                            newHorizontal.setAttribute('y2', lanechange);
                            newSecondVertical.setAttribute('x1', x2);
                            newSecondVertical.setAttribute('y1', lanechange);
                            newSecondVertical.setAttribute('x2', x2);
                            newSecondVertical.setAttribute('y2', y2);
                        }
                        if (x2 && y2 && y1) {
                            newFirstVertical.className.baseVal = 'templateline ' + component.name;
                            newHorizontal.className.baseVal = 'templateline ' + component.name;
                            newSecondVertical.className.baseVal = 'templateline ' + component.name;
                            $('#TemplateBuilderSVGLines').append(newFirstVertical);
                            $('#TemplateBuilderSVGLines').append(newHorizontal);
                            $('#TemplateBuilderSVGLines').append(newSecondVertical);
                        }
                    });
                });
                self.changewidths();
                self.render = true;
            }, self.timerIntervals);
        };
        TemplatebuildersvgController.prototype.hoverLine = function (x) {
            var self = this;
            self.componentHover = x;
            x.relatedcomponents.forEach(function (related) {
                var HoverFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var HoverHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var HoverSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var x1 = $('#TemplateBuilderSVG #' + x.id).attr('x');
                var y1 = $('#TemplateBuilderSVG #' + x.id).attr('y');
                var x2 = $('#TemplateBuilderSVG #' + related.id).attr('x');
                var y2 = $('#TemplateBuilderSVG #' + related.id).attr('y');
                var lanechange = '';
                var y1Number = 0;
                var y2Number = 0;
                if (y1 && y2) {
                    //Helps figure out if we're going up or down
                    y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                    y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                }
                if (x.type === 'cluster') {
                    lanechange = '38%';
                }
                if (x.type === 'server') {
                    lanechange = '58%';
                }
                if (x.type === 'storage') {
                    lanechange = '58%';
                }
                if (x.type === 'vm') {
                    lanechange = '18%';
                }
                //Are we drawing up?
                if (y1Number > y2Number) {
                    if (x.type === 'cluster') {
                        lanechange = '10%';
                    }
                    if (x.type === 'server') {
                        lanechange = '38%';
                    }
                    if (x.type === 'vm' || x.type === 'cluster') {
                        lanechange = '18%';
                    }
                }
                if (x1 && y1 && x2 && y2) {
                    HoverFirstVertical.setAttribute('x1', x1);
                    HoverFirstVertical.setAttribute('y1', y1);
                    HoverFirstVertical.setAttribute('x2', x1);
                    HoverFirstVertical.setAttribute('y2', lanechange);
                    HoverHorizontal.setAttribute('x1', x1);
                    HoverHorizontal.setAttribute('y1', lanechange);
                    HoverHorizontal.setAttribute('x2', x2);
                    HoverHorizontal.setAttribute('y2', lanechange);
                    HoverSecondVertical.setAttribute('x1', x2);
                    HoverSecondVertical.setAttribute('y1', lanechange);
                    HoverSecondVertical.setAttribute('x2', x2);
                    HoverSecondVertical.setAttribute('y2', y2);
                }
                HoverFirstVertical.className.baseVal = 'hoverline ' + x.id;
                HoverHorizontal.className.baseVal = 'hoverline ' + x.id;
                HoverSecondVertical.className.baseVal = 'hoverline ' + x.id;
                if (x2 && y2 && y1) {
                    $('#TemplateBuilderSVGHoverLines').append(HoverFirstVertical);
                    $('#TemplateBuilderSVGHoverLines').append(HoverHorizontal);
                    $('#TemplateBuilderSVGHoverLines').append(HoverSecondVertical);
                }
            });
        };
        TemplatebuildersvgController.prototype.removeHovers = function () {
            var self = this;
            $('#TemplateBuilderSVGHoverLines').empty();
            self.componentHover = '';
        };
        TemplatebuildersvgController.prototype.removeSelection = function () {
            var self = this;
            $('#TemplateBuilderSVGSelectedLines').empty();
            self.selectedComponent = '';
        };
        TemplatebuildersvgController.prototype.selectLine = function (x) {
            var self = this;
            $('#TemplateBuilderSVGSelectedLines').empty();
            self.selectedComponent = x;
            $.each(x.relatedcomponents, function (index, related) {
                //x.relatedcomponents.forEach((related: any) => {
                var SelectedFirstVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var SelectedHorizontal = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var SelectedSecondVertical = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                var x1 = $('#TemplateBuilderSVG #' + x.id).attr('x');
                var y1 = $('#TemplateBuilderSVG #' + x.id).attr('y');
                var x2 = $('#TemplateBuilderSVG #' + related.id).attr('x');
                var y2 = $('#TemplateBuilderSVG #' + related.id).attr('y');
                var lanechange = '';
                var y1Number = 0;
                var y2Number = 0;
                if (y1 && y2) {
                    //Helps figure out if we're going up or down
                    y1Number = parseInt(y1.replace(/[^\w\s]/gi, ''));
                    y2Number = parseInt(y2.replace(/[^\w\s]/gi, ''));
                }
                if (x.type === 'cluster') {
                    lanechange = '38%';
                }
                if (x.type === 'server') {
                    lanechange = '58%';
                }
                if (x.type === 'storage') {
                    lanechange = '58%';
                }
                if (x.type === 'vm') {
                    lanechange = '18%';
                }
                //Are we drawing up?
                if (y1Number > y2Number) {
                    if (x.type === 'cluster') {
                        lanechange = '10%';
                    }
                    if (x.type === 'server') {
                        lanechange = '38%';
                    }
                    if (x.type === 'vm' || x.type === 'cluster') {
                        lanechange = '18%';
                    }
                }
                if (x1 && y1 && x2 && y2) {
                    SelectedFirstVertical.setAttribute('x1', x1);
                    SelectedFirstVertical.setAttribute('y1', y1);
                    SelectedFirstVertical.setAttribute('x2', x1);
                    SelectedFirstVertical.setAttribute('y2', lanechange);
                    SelectedHorizontal.setAttribute('x1', x1);
                    SelectedHorizontal.setAttribute('y1', lanechange);
                    SelectedHorizontal.setAttribute('x2', x2);
                    SelectedHorizontal.setAttribute('y2', lanechange);
                    SelectedSecondVertical.setAttribute('x1', x2);
                    SelectedSecondVertical.setAttribute('y1', lanechange);
                    SelectedSecondVertical.setAttribute('x2', x2);
                    SelectedSecondVertical.setAttribute('y2', y2);
                }
                SelectedFirstVertical.className.baseVal = 'selectedline ' + x.id;
                SelectedHorizontal.className.baseVal = 'selectedline ' + x.id;
                SelectedSecondVertical.className.baseVal = 'selectedline ' + x.id;
                if (x2 && y2 && y1) {
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedFirstVertical);
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedHorizontal);
                    $('#TemplateBuilderSVGSelectedLines').append(SelectedSecondVertical);
                }
            });
        };
        TemplatebuildersvgController.prototype.hasApplication = function (component) {
            if (component.type == 'storage' || component.type == 'cluster')
                return false;
            var hasApplication = false;
            $.each(component.relatedcomponents, function (index, model) {
                if (model.installOrder > 0) {
                    hasApplication = true;
                    return;
                }
            });
            return hasApplication;
        };
        TemplatebuildersvgController.prototype.addComponent = function (resourceType) {
            var self = this;
            if (resourceType == 'application') {
                var addApplicationWizard = self.Modal({
                    title: self.$translate.instant('ADDAPPLICATION_Title'),
                    modalSize: 'modal-lg',
                    templateUrl: 'views/addapplicationwizard.html',
                    controller: 'AddApplicationWizardController as Application',
                    onComplete: function () {
                        self.refresh();
                    },
                    params: {
                        template: self.template,
                        action: 'add'
                    },
                    onCancel: function () {
                        addApplicationWizard.modal.dismiss();
                    },
                });
                addApplicationWizard.modal.show();
            }
            else {
                var title = '';
                switch (resourceType) {
                    case 'storage':
                        title = self.$translate.instant('COMPONENTEDITOR_StorageComponent');
                        break;
                    case 'server':
                        title = self.$translate.instant('COMPONENTEDITOR_ServerComponent');
                        break;
                    case 'cluster':
                        title = self.$translate.instant('COMPONENTEDITOR_ClusterComponent');
                        break;
                    case 'vm':
                        title = self.$translate.instant('COMPONENTEDITOR_VMComponent');
                        break;
                }
                var adduserModal = self.Modal({
                    title: title,
                    modalSize: 'modal-lg',
                    templateUrl: 'views/addcomponentmodal.html',
                    controller: 'AddComponentController as AddComponent',
                    params: {
                        mode: 'edit',
                        action: 'add',
                        type: resourceType,
                        templateId: self.selectedTemplateId,
                        serviceId: null,
                        template: self.template
                    },
                    onComplete: function () {
                        self.getTemplateData();
                    }
                });
                adduserModal.modal.show();
            }
        };
        TemplatebuildersvgController.prototype.editComponent = function (component) {
            var self = this, title;
            $(".popover").remove();
            switch (component.type) {
                case 'storage':
                    title = self.$translate.instant('COMPONENTEDITOR_StorageComponent');
                    break;
                case 'server':
                    title = self.$translate.instant('COMPONENTEDITOR_ServerComponent');
                    break;
                case 'cluster':
                    title = self.$translate.instant('COMPONENTEDITOR_ClusterComponent');
                    break;
                case 'vm':
                    title = self.$translate.instant('COMPONENTEDITOR_VMComponent');
                    break;
            }
            var addComponentModal = self.Modal({
                title: title,
                modalSize: 'modal-lg',
                templateUrl: 'views/addcomponentmodal.html',
                controller: 'AddComponentController as AddComponent',
                params: {
                    mode: 'edit',
                    action: 'edit',
                    type: component.type,
                    templateId: self.selectedTemplateId,
                    template: angular.copy(self.template),
                    componentId: component.id,
                    component: component
                },
                onComplete: function () {
                    self.getTemplateData();
                }
            });
            addComponentModal.modal.show();
        };
        TemplatebuildersvgController.prototype.deleteComponent = function (id) {
            var self = this;
            $('.popover').remove();
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('TEMPLATEBUILDER_Areyousureyouwanttoremovethiscomponent')).then(function () {
                angular.forEach(self.template.components, function (component) {
                    _.remove(component.relatedcomponents, { id: id });
                });
                _.remove(self.template.components, { id: id });
                self.$http.post(self.Commands.data.templates.saveTemplate, self.template).then(function (data) {
                    self.getTemplateData();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        TemplatebuildersvgController.prototype.addAttachment = function () {
            var self = this;
            var addAttachmentModal = self.Modal({
                title: 'Add Attachment',
                modalSize: 'modal-lg',
                templateUrl: 'views/templates/templateaddattachmentModal.html',
                controller: 'AddAttachmentModalController as AddAttachemntModal',
                params: {
                    templateId: self.template.id
                },
                onComplete: function () {
                    self.getTemplateData();
                    //self.selectedItem = null;
                }
            });
            addAttachmentModal.modal.show();
        };
        TemplatebuildersvgController.prototype.deleteAttachment = function (attachment) {
            var self = this;
            self.jobRequest.requestObj.id = self.template.id;
            self.jobRequest.requestObj.name = attachment.name;
            var confirm = this.Dialog((self.$translate.instant('GENERIC_Confirm')), self.$translate.instant('TEMPLATEBUILDER_Areyousureyouwanttodeletethisattachment'));
            confirm.then(function (attachment) {
                self.$http.post(self.Commands.data.templates.deleteAttachment, { requestObj: self.jobRequest.requestObj })
                    .then(function () {
                    self.getTemplateData();
                    //self.selectedItem = null;
                })
                    .catch(function (data) {
                    //error is in data
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        TemplatebuildersvgController.prototype.downloadAttachment = function (attachment) {
            var self = this;
            var url = 'templates/downloadattachment?name=' + attachment.name + '&templateId=' + self.template.id;
            self.$window.open(url, '_blank');
            //self.config = {
            //    directPost: true,
            //    headers: { 'Content-Type': undefined },
            //    transformRequest: angular.identity
            //};
            //return self.$http.post('/templates/downloadattachment', attachment, self.config);
        };
        TemplatebuildersvgController.prototype.deployNewService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICES_NEW_SERVICE_DeployService'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/DeployService/DeployServiceWizard.html',
                controller: 'DeployServiceWizard as deployServiceWizard',
                params: {
                    //selectedService: self.selectedItem
                    selectedTemplate: self.template
                },
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function () {
                        addServiceWizard.modal.close();
                    });
                }
            });
            addServiceWizard.modal.show();
        };
        TemplatebuildersvgController.prototype.cloneTemplate = function () {
            var self = this;
            var createTemplateModal = self.Modal({
                title: 'Create Template',
                modalSize: 'modal-lg',
                templateUrl: 'views/createtemplate.html',
                controller: 'CreateTemplateModalController as createTemplateModalController',
                params: {
                    //selecteduser: modalUser
                    //templates: self.myTemplates,
                    type: 'clone',
                    selectedtemplate: self.template
                },
                onComplete: function () {
                },
                close: function () {
                    //self.getTemplateData();
                }
            });
            createTemplateModal.modal.show();
        };
        TemplatebuildersvgController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', 'GlobalServices', '$route',
            'localStorageService', '$routeParams', '$compile', '$scope', '$translate',
            '$location', '$window', 'Loading', '$rootScope', 'Commands'];
        return TemplatebuildersvgController;
    }());
    function templateBuilder() {
        return {
            restrict: 'E',
            templateUrl: 'views/templatebuildersvg.html',
            replace: true,
            transclude: false,
            controller: TemplatebuildersvgController,
            controllerAs: 'templatebuildersvg',
            scope: {
                selectedTemplateId: '=routeparam',
                mode: '=mode'
            },
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('templateBuilder', templateBuilder);
})(asm || (asm = {}));
//# sourceMappingURL=templatebuilderSVGdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var UsersController = (function () {
        function UsersController(Modal, Dialog, $http, $timeout, $q, GlobalServices, $route, localStorageService) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.GlobalServices = GlobalServices;
            this.$route = $route;
            this.localStorageService = localStorageService;
            this.activeTab = 'users';
            //this.tab();
        }
        UsersController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', 'GlobalServices', '$route', 'localStorageService'];
        return UsersController;
    }());
    function users() {
        return {
            restrict: 'E',
            templateUrl: 'views/users.html',
            replace: true,
            transclude: false,
            controller: UsersController,
            controllerAs: 'users',
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('users', users);
})(asm || (asm = {}));
//# sourceMappingURL=usersdirective.js.map
var asm;
(function (asm) {
    'use strict';
    var UserslistController = (function () {
        function UserslistController(Modal, Dialog, $http, $timeout, $q, $compile, $scope, $translate, GlobalServices, Commands) {
            //this.jobs = [
            //    { isSelected: false, "id": 0, "name": 'Scheduled Job 30', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' },
            //    { isSelected: false, "id": 1, "name": 'Scheduled Job 26', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' },
            //    { isSelected: false, "id": 2, "name": 'Scheduled Job 27', "state": 'Scheduled', "starttime": 'Today at 12:00', "timeelapsed": 'none' }
            //];
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$compile = $compile;
            this.$scope = $scope;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            var self = this;
            self.buttonActive = false;
            self.checkAllBox = false;
            self.selectedStates = [];
            self.selectedUserObjects = [];
            self.activeTab = 'userinfo';
            self.getDirectoryGroups();
            self.refresh();
        }
        UserslistController.prototype.refresh = function () {
            var self = this;
            //Get All users
            self.$http.post(self.Commands.data.users.getUsers, {}).then(function (data) {
                self.results = data.data.responseObj;
                self.displayedresults = [].concat(self.results);
                //self.filterbyGroup();
                //console.log(self.displayedresults);
                if (self.selectedUsers().length == 0) {
                    self.buttonActive = false;
                }
                self.selectedDetail = self.results[0];
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        UserslistController.prototype.getDirectoryGroups = function () {
            var self = this;
            //Get directory groups
            self.$http.post(self.Commands.data.users.getDirectoryGroups, null).then(function (data) {
                self.directoryGroups = data.data.responseObj;
                var item = { name: self.$translate.instant('SETTINGS_AllUsers'), id: 0 };
                self.directoryGroups.splice(0, 0, item);
                self.selectedGroup = self.directoryGroups[0];
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        UserslistController.prototype.filterbyGroup = function () {
            var self = this;
            if (self.selectedGroup.name == self.$translate.instant('SETTINGS_AllUsers')) {
                this.refresh();
            }
            else {
                self.$http.post(self.Commands.data.users.getDirectoryUsers, { requestObj: self.selectedGroup }).then(function (data) {
                    self.results = data.data.responseObj;
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            }
        };
        UserslistController.prototype.getUserDetails = function (user) {
            var self = this;
            self.$http.post(self.Commands.data.users.getUserById, { requestObj: user }).then(function (data) {
                self.selectedDetail = data.data.responseObj;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        UserslistController.prototype.selectedUsers = function () {
            var self = this;
            return _.filter(self.results, { 'isSelected': true });
        };
        //TODO: Need pattern for check all boxes
        UserslistController.prototype.checkAll = function () {
            var self = this;
            self.displayedresults.forEach(function (job) {
                if (self.checkAllBox) {
                    job.isSelected = true;
                }
                else {
                    job.isSelected = false;
                }
            });
        };
        UserslistController.prototype.disableButtonActive = function () {
            var returnVal = true;
            var self = this;
            self.results.forEach(function (x) {
                if (x.isSelected && x.state === self.$translate.instant('GENERIC_Disabled')) {
                    returnVal = false;
                }
            });
            return returnVal;
        };
        UserslistController.prototype.enableButtonActive = function () {
            var returnVal = true;
            var self = this;
            self.results.forEach(function (x) {
                if (x.isSelected && x.state === self.$translate.instant('GENERIC_Enabled')) {
                    returnVal = false;
                }
            });
            return returnVal;
        };
        //delete user
        UserslistController.prototype.deleteUser = function () {
            var self = this;
            var userIds = _.map(self.selectedUsers(), 'id');
            var userNames = _.map(self.selectedUsers(), function (u) {
                return '<li>' + u.username + '</li>';
            });
            var Names = (userNames.toString()).replace(/[, ]+/g, " ").trim();
            //Confirmation Dialog box that fires delete on confirmation
            var confirm = this.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_UserDeleteConfirm') + '<br> <ul class="selectedusers">' + Names + '</ul>'));
            confirm.then(function () {
                self.$http.post(self.Commands.data.users.deleteUser, { requestObj: userIds }).then(function (data) {
                    self.refresh();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        UserslistController.prototype.disableUser = function () {
            var self = this;
            var userIds = _.map(self.selectedUsers(), 'id');
            self.$http.post(self.Commands.data.users.disableUser, { requestObj: userIds }).then(function (data) {
                self.refresh();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        UserslistController.prototype.enableUser = function () {
            var self = this;
            var userIds = _.map(self.selectedUsers(), 'id');
            self.$http.post(self.Commands.data.users.enableUser, { requestObj: userIds }).then(function (data) {
                self.refresh();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        UserslistController.prototype.createuser = function () {
            var self = this;
            var adduserModal = self.Modal({
                title: self.$translate.instant('SETTINGS_CreateUser'),
                modalSize: 'modal-lg',
                templateUrl: 'views/createUserModal.html',
                controller: 'CreateUserModalController as createUser',
                params: {},
                onClose: function () {
                    adduserModal.modal.close();
                },
                onCancel: function () {
                    adduserModal.modal.dismiss();
                },
                onComplete: function (modalScope) {
                    self.refresh();
                }
            });
            adduserModal.modal.show();
        };
        UserslistController.prototype.edituser = function () {
            var self = this;
            var modalUser = self.selectedUsers();
            var adduserModal = self.Modal({
                title: self.$translate.instant('SETTINGS_EditUser'),
                modalSize: 'modal-lg',
                templateUrl: 'views/editUserModal.html',
                controller: 'EditUserModalController as editUser',
                params: {
                    selecteduser: modalUser
                },
                onClose: function () {
                    adduserModal.modal.close();
                },
                onCancel: function () {
                    adduserModal.modal.dismiss();
                },
                onComplete: function (modalScope) {
                    self.refresh();
                }
            });
            adduserModal.modal.show();
        };
        UserslistController.prototype.importactivedirectoryusers = function () {
            var self = this;
            var importuserModal = self.Modal({
                title: self.$translate.instant('SETTINGS_ImportActiveDirectoryUsers'),
                modalSize: 'modal-lg',
                templateUrl: 'views/importactivedirectoryusers.html',
                controller: 'ImportDirUsersModalController as ImportUsersModal',
                params: {},
                onComplete: function () {
                    self.refresh();
                },
                onClose: function () {
                    importuserModal.modal.close();
                },
                onCancel: function () {
                    importuserModal.modal.dismiss();
                }
            });
            importuserModal.modal.show();
        };
        UserslistController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$compile', '$scope', '$translate', 'GlobalServices', 'Commands'];
        return UserslistController;
    }());
    function usersList() {
        return {
            restrict: 'E',
            templateUrl: 'views/userslist.html',
            replace: true,
            transclude: false,
            controller: UserslistController,
            controllerAs: 'usersList',
            link: function (scope, element, attributes, controller) {
            }
        };
    }
    angular.module('app').
        directive('usersList', usersList);
})(asm || (asm = {}));
//# sourceMappingURL=userslistdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var VirtualApplianceManagementController = (function () {
        function VirtualApplianceManagementController(Dialog, $http, $window, $timeout, $scope, $q, $translate, Modal, Loading, Commands, $filter, GlobalServices, $rootScope) {
            this.Dialog = Dialog;
            this.$http = $http;
            this.$window = $window;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Commands = Commands;
            this.$filter = $filter;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.allSettings = { monitoringSettings: {} };
            this.refreshTimer = null;
            var self = this;
            self.refresh();
        }
        VirtualApplianceManagementController.prototype.$onDestroy = function () {
            var self = this;
            if (self.refreshTimer)
                self.$timeout.cancel(self.refreshTimer);
        };
        VirtualApplianceManagementController.prototype.canDeactivate = function () {
            var self = this;
            var allow = true;
            //Any logic to prevent navigating away (change allow to false to prevent)
            return allow;
        };
        VirtualApplianceManagementController.prototype.activate = function () {
            var self = this;
            self.refreshTimer = self.$timeout(function () {
                self.refresh();
            }, 10000);
        };
        VirtualApplianceManagementController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.$q.all([
                self.getNtpTimeZoneSettings()
                    .then(function (response) {
                    self.allSettings.ntpTimeZoneSettings = response.data.responseObj;
                }),
                self.getTimeZones()
                    .then(function (response) {
                    self.allSettings.timeZones = response.data.responseObj;
                }),
                self.getApplianceUpdateInfo()
                    .then(function (response) {
                    self.allSettings.applianceUpdateInfo = response.data.responseObj;
                }),
                self.getHttpProxySettings()
                    .then(function (response) {
                    self.allSettings.httpProxySettings = response.data.responseObj;
                }),
                self.getDhcpSettings()
                    .then(function (response) {
                    self.allSettings.dhcpSettings = response.data.responseObj;
                }),
                self.getApplianceCertInfo()
                    .then(function (response) {
                    self.allSettings.applianceCertInfo = response.data.responseObj;
                }),
                self.getLicenseData()
                    .then(function (response) {
                    self.allSettings.licenseData = response.data.responseObj;
                }),
                self.getServiceTag()
                    .then(function (response) {
                    self.allSettings.aboutData = response.data.responseObj;
                })
            ])
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                .finally(function () { return d.resolve(); });
        };
        VirtualApplianceManagementController.prototype.initialize = function () {
            var self = this;
            self.refresh();
        };
        VirtualApplianceManagementController.prototype.ntpModal = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETUPWIZARD_NTPSettingsTitle'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/NtpEditModal.html',
                controller: 'NtpEditModalController as ntpEditModalController',
                params: {
                    viewModel: angular.copy(self.allSettings)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.editRepoPath = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_UpdateRepositoryPath'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/EditRepoPathModal.html',
                controller: 'EditRepoPathModalController as editRepoPathModalController',
                params: {
                    applianceUpdateInfo: angular.copy(self.allSettings.applianceUpdateInfo)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.editProxySettings = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETUPWIZARD_ProxySettingsTitle'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/EditProxySettingsModal.html',
                controller: 'EditProxySettingsModalController as editProxySettingsModalController',
                params: {
                    httpProxySettings: angular.copy(self.allSettings.httpProxySettings)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.editDhcp = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_DHCPSettings'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/EditDhcpSettingsModal.html',
                controller: 'EditDhcpSettingsModalController as editDhcpSettingsModalController',
                params: {
                    settings: angular.copy(self.allSettings.dhcpSettings)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.generateCert = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_GenerateSigningRequest'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/GenerateCertificateModal.html',
                controller: 'GenerateCertModalController as generateCertModalController',
                params: {
                    settings: angular.copy(self.allSettings.applianceCertInfo)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.uploadCert = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_UploadSSLCertificate'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/UploadCertificateModal.html',
                controller: 'UploadCertificateModalController  as uploadCertificateModalController',
                params: {
                    settings: angular.copy(self.allSettings.applianceCertInfo)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.addLicense = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_AddLicense'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/AddLicenseModal.html',
                controller: 'AddLicenseModalController as addLicenseModalController',
                params: {
                    license: angular.copy(self.allSettings.licenseData)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.downloadCert = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_CertSignRequest'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/DownloadCertModal.html',
                controller: 'DownloadCertModalController as downloadCertModalController',
                params: {
                    certInfo: angular.copy(self.allSettings.applianceCertInfo)
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.updateVirtualAppliance = function () {
            var self = this;
            if (self.allSettings.applianceUpdateInfo.currentVersion ===
                self.allSettings.applianceUpdateInfo.availableVersion) {
                //versions are the same, ask if user still wants to perform update
                self.Dialog((self.$translate.instant('SETTINGS_VirtualApplianceManagement_Update_Not_Required')), (self.$translate.instant('SETTINGS_VirtualApplianceManagement_Update_Warning') +
                    '<br/><br/>' +
                    self.$translate.instant('SETTINGS_VirtualApplianceManagement_Update_Current_Version') +
                    self.allSettings.applianceUpdateInfo.currentVersion +
                    '<br/><br/>' +
                    self.$translate.instant('SETTINGS_VirtualApplianceManagement_Update_Confirm')))
                    .then(function () {
                    self.doUpdate();
                });
            }
            else {
                var d = self.$q.defer(), bullets = {};
                self.Loading(d.promise);
                self.$q.all([
                    self.getJobList()
                        .then(function (data) {
                        angular.merge(bullets, {
                            numScheduledJobs: _.filter(data.data.responseObj, { status: "scheduled" }).length
                        });
                    }),
                    self.getCurrentUsersAndJobs()
                        .then(function (data) {
                        angular.merge(bullets, {
                            numUsers: data.data.responseObj.currentusers,
                            numProgressJobs: data.data.responseObj.pendingjobs
                        });
                    })
                ])
                    .then(function () {
                    //passing bullets as a parameter to $translate to interpolate values into translation
                    self.Dialog(self.$translate.instant("GENERIC_Warning"), self.$translate.instant("UPDATE_VIRTUAL_APPLIANCE_Description", bullets), false)
                        .then(function () {
                        self.doUpdate();
                    });
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data);
                })
                    .finally(function () { return d.resolve(); });
            }
        };
        VirtualApplianceManagementController.prototype.doUpdate = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.applianceManagement.submitUpdateVirtualAppliance, self.allSettings.applianceUpdateInfo)
                .then(function (data) {
                d.resolve();
                self.$timeout(function () { self.$window.location.href = 'status.html#/status'; }, 500);
            }).catch(function (response) {
                d.resolve();
                self.GlobalServices.DisplayError(response.data);
            });
        };
        VirtualApplianceManagementController.prototype.editServiceTag = function () {
            var self = this;
            var d = self.$q.defer();
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_EditServiceTag'),
                modalSize: 'modal-lg',
                templateUrl: '/views/settings/virtualappliancemanagement/editServiceTag.html',
                controller: 'EditServiceTagController as editServiceTagController',
                params: {
                    serviceTag: self.allSettings.aboutData.serviceTag
                },
                onComplete: function () {
                    self.refresh();
                },
                onClose: function () {
                    modal.modal.close();
                },
                onCancel: function () {
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        VirtualApplianceManagementController.prototype.generateTroubleBundle = function () {
            var self = this;
            var d = self.$q.defer();
            self.$http.post(self.Commands.data.applianceManagement.exportTroubleshootingBundle, null)
                .then(function (response) {
                d.resolve();
                self.$timeout(function () { window.location = response.data.responseObj; }, 500);
                window.location = response.data.responseObj;
            }).catch(function (response) {
                d.resolve();
                self.GlobalServices.DisplayError(response.data);
            });
        };
        VirtualApplianceManagementController.prototype.getNtpTimeZoneSettings = function () {
            var self = this;
            return self.$http.get(self.Commands.data.environment.getNtpTimeZoneSettings);
        };
        VirtualApplianceManagementController.prototype.getTimeZones = function () {
            var self = this;
            return self.$http.get(self.Commands.data.environment.getTimeZones);
        };
        VirtualApplianceManagementController.prototype.getApplianceUpdateInfo = function () {
            var self = this;
            return self.$http.get(self.Commands.data.applianceManagement.getApplianceUpdateInfo);
        };
        VirtualApplianceManagementController.prototype.getHttpProxySettings = function () {
            var self = this;
            return self.$http.get(self.Commands.data.applianceManagement.getHttpProxySettings);
        };
        VirtualApplianceManagementController.prototype.getDhcpSettings = function () {
            var self = this;
            return self.$http.get(self.Commands.data.applianceManagement.getDhcpSettings);
        };
        VirtualApplianceManagementController.prototype.getApplianceCertInfo = function () {
            var self = this;
            return self.$http.get(self.Commands.data.applianceManagement.getCertificateInfo);
        };
        VirtualApplianceManagementController.prototype.getLicenseData = function () {
            var self = this;
            return self.$http.get(self.Commands.data.applianceManagement.getLicenseData);
        };
        VirtualApplianceManagementController.prototype.getServiceTag = function () {
            var self = this;
            return self.$http.post(self.Commands.data.about.getAboutData, '');
        };
        VirtualApplianceManagementController.prototype.getJobList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.jobs.getJobList, null);
        };
        VirtualApplianceManagementController.prototype.getCurrentUsersAndJobs = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getCurrentUsersAndJobs, null);
        };
        VirtualApplianceManagementController.$inject = ['Dialog', '$http', '$window', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Commands', '$filter', 'GlobalServices', '$rootScope'];
        return VirtualApplianceManagementController;
    }());
    angular.module('app')
        .component('virtualApplianceManagement', {
        templateUrl: "views/applianceManagement.html",
        controller: VirtualApplianceManagementController,
        controllerAs: 'virtualApplianceManagementController',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=virtualappliancemanagement.js.map
var asm;
(function (asm) {
    "use strict";
    var VirtualIdentityPoolsController = (function () {
        function VirtualIdentityPoolsController($http, $timeout, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.viewModel = {};
            this.selectedVIP = '';
            this.selectedSummary = {};
            this.displayedData = [];
            this.checkAllBox = false;
            var self = this;
            self.refresh(false);
        }
        VirtualIdentityPoolsController.prototype.activate = function () {
            var self = this;
            this.$timeout(function () {
                self.refresh(false);
            }, 10000);
        };
        VirtualIdentityPoolsController.prototype.refresh = function (calledFromUI) {
            var self = this;
            var data;
            if (calledFromUI) {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
            }
            //get the list
            self.$http.post(self.Commands.data.pools.getPools, null).then(function (data) {
                //self.$http.post('bogus', null).then(function (data: any) {
                self.viewModel = data.data.responseObj;
                self.displayedData = [].concat(self.viewModel);
                if (self.viewModel.length) {
                    if (self.selectedVIP)
                        self.onSelectedVIP(self.selectedVIP);
                    else
                        self.onSelectedVIP(self.viewModel[0]);
                }
                else {
                    // no data
                    self.selectedSummary = '';
                    self.selectedVIP = '';
                }
                if (calledFromUI)
                    deferred.resolve();
            }).catch(function (data) {
                //error
                self.viewModel = [];
                if (calledFromUI)
                    deferred.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        VirtualIdentityPoolsController.prototype.vipItemsSelected = function () {
            // used to enable/disable export & delete 
            // if any items are selected, return false (buttons will not be disabled
            // if no items are selected, return true (buttons will be disabled
            var self = this;
            return _.filter(self.displayedData, { 'isSelected': true });
        };
        VirtualIdentityPoolsController.prototype.canDelete = function () {
            var self = this;
            var retValue = true;
            for (var i = 0; i < self.displayedData.length; i++) {
                var currentItem = self.displayedData[i];
                if (currentItem.isSelected == true && currentItem.canDelete == false) {
                    retValue = false;
                    break;
                }
            }
            return retValue;
        };
        VirtualIdentityPoolsController.prototype.onCheckAllPools = function () {
            var self = this;
            self.displayedData.forEach(function (vip) {
                //automagically adds isSelected proeprty 
                //to data 
                vip.isSelected = self.checkAllBox;
            });
        };
        VirtualIdentityPoolsController.prototype.onSelectedVIP = function (selectedVIP) {
            var self = this;
            var data;
            //var deferred = self.$q.defer();
            //self.Loading(deferred.promise);
            data = { 'id': selectedVIP.id };
            self.$http.post(self.Commands.data.pools.getPoolById, { requestObj: data }).then(function (data) {
                //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                self.selectedSummary = data.data.responseObj;
                self.selectedVIP = selectedVIP;
                //deferred.resolve();
            }).catch(function (data) {
                //need to handle error
                //deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        VirtualIdentityPoolsController.prototype.doExport = function () {
            var self = this;
            var vipIds = _.map(self.vipItemsSelected(), 'id');
            var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('LISTPOOLS_Export_Confirmation'));
            confirm.then(function () {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
                self.$http.post(self.Commands.data.pools.exportPools, { requestObj: vipIds }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                    window.location = data.data.responseObj;
                    //var iframe;
                    //iframe = document.createElement('iframe');
                    //iframe.src = data.data.responseObj;
                    //iframe.style.display = 'none';
                    //document.body.appendChild(iframe);
                    ////document.body.appendChild("<iframe src='" + data.data.responseObj + "' style='display: none;' ></iframe>");
                    deferred.resolve();
                    self.refresh(false);
                }).catch(function (data) {
                    //need to handle error
                    deferred.resolve();
                    //data object is always empty
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        VirtualIdentityPoolsController.prototype.doDelete = function () {
            var self = this;
            var vipIds = _.map(self.vipItemsSelected(), 'id');
            var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('LISTPOOLS_Delete_Confirmation'));
            confirm.then(function () {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
                self.$http.post(self.Commands.data.pools.deletePools, { requestObj: vipIds }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                    self.selectItemAfterDelete();
                    deferred.resolve();
                    self.refresh(false);
                }).catch(function (data) {
                    //need to handle error
                    deferred.resolve();
                    //data object is always empty
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        VirtualIdentityPoolsController.prototype.selectItemAfterDelete = function () {
            var self = this;
            if (self.vipItemsSelected().length > 1) {
                self.selectedVIP = '';
            }
            else {
                // where was the item that we just deleted?
                var deleteItemNdx = self.displayedData.map(function (ds) { return ds.id; }).indexOf(self.selectedVIP.id);
                // top of list, pick next item down
                if (deleteItemNdx == 0) {
                    //self.displayedData[deleteItemNdx + 1]; may not exist (undefined), this is OK
                    self.selectedVIP = self.displayedData[deleteItemNdx + 1];
                }
                else {
                    if (deleteItemNdx >= 0) {
                        //self.displayedData[deleteItemNdx - 1]; may not exist (undefined), this is OK
                        self.selectedVIP = self.displayedData[deleteItemNdx - 1];
                    }
                }
            }
        };
        VirtualIdentityPoolsController.prototype.doUpdatePool = function (selectedType) {
            var self = this;
            var editModal = this.Modal({
                title: self.$translate.instant('LISTPOOLS_Update_Pool_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/pools/editPool.html',
                controller: 'EditPoolController as EditPoolController',
                params: {
                    'id': self.selectedVIP.id,
                    'type': selectedType
                },
                onComplete: function (modalScope) {
                    //modalScope.modal.dismiss();
                    self.refresh(false);
                }
            });
            editModal.modal.show();
        };
        VirtualIdentityPoolsController.prototype.doAddWizard = function () {
            var self = this;
            var addPoolWizard = self.Modal({
                title: self.$translate.instant('ADDPOOL_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/pools/addpoolwizard.html',
                controller: 'AddPoolWizardController as AddPoolWizardController',
                params: {},
                onCancel: function () {
                    //THIS FUNCTION IS CALLED ON MODAL.CANCEL, not WIZARD.CANCEL
                    //var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), 'Are you sure you want to cancel?');
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDPOOL_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        addPoolWizard.modal.dismiss();
                        self.refresh(false);
                    });
                },
                onComplete: function (modalScope) {
                    self.refresh(false); //When the modal is closed, update the data.
                }
            });
            addPoolWizard.modal.show();
        };
        VirtualIdentityPoolsController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return VirtualIdentityPoolsController;
    }());
    angular.module('app')
        .component('virtualidentitypools', {
        templateUrl: 'views/listpools.html',
        controller: VirtualIdentityPoolsController,
        controllerAs: 'VirtualIdentityPoolsController',
        bindings: {}
    });
})(asm || (asm = {}));
//# sourceMappingURL=virtualidentitypoolsdirective.js.map
var asm;
(function (asm) {
    "use strict";
    var VmVirtualDiskConfigurationController = (function () {
        function VmVirtualDiskConfigurationController(GlobalServices, constants) {
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.validityObj = {
                id: this.GlobalServices.NewGuid(),
                invalid: false
            };
            var self = this;
            self.invalidArray.push(self.validityObj);
            self.refresh();
        }
        VmVirtualDiskConfigurationController.prototype.refresh = function () {
            var self = this;
            if (!self.setting.value) {
                self.setting.value = {};
            }
            else {
                self.setting.value = typeof self.setting.value === 'string' ?
                    angular.fromJson(self.setting.value) :
                    self.setting.value;
            }
            self.setting.value.virtualdisks = self.setting.value.virtualdisks || [];
            self.checkAllDisks();
        };
        VmVirtualDiskConfigurationController.prototype.createDisk = function () {
            var self = this;
            self.setting.value.virtualdisks.push({
                id: self.GlobalServices.NewGuid()
            });
        };
        VmVirtualDiskConfigurationController.prototype.checkAllDisks = function () {
            var self = this;
            return self.validityObj.invalid = !self.readOnly && !self.setting.value.virtualdisks.length || !!_.find(self.setting.value.virtualdisks, function (disk) { return self.invalidDisk(disk, true); });
        };
        VmVirtualDiskConfigurationController.prototype.invalidDisk = function (disk, skip) {
            var self = this;
            skip || self.readOnly || self.checkAllDisks();
            return !self.readOnly && !disk.disksize;
        };
        VmVirtualDiskConfigurationController.$inject = ['GlobalServices', 'constants'];
        return VmVirtualDiskConfigurationController;
    }());
    angular.module('app')
        .component('vmVirtualDiskConfiguration', {
        templateUrl: 'views/vmvirtualdiskconfiguration.html',
        controller: VmVirtualDiskConfigurationController,
        controllerAs: 'diskConfiguration',
        bindings: {
            setting: '=',
            readOnly: '=readonly',
            invalidArray: '='
        }
    });
})(asm || (asm = {}));
//# sourceMappingURL=vmvirtualdiskconfiguration.js.map
angular.module('ASM.dataservices', ['ngResource']);

angular.module('ASM.dataservices')
    .service('CollectionService', [ function () {
        this.MergeObjects = function (baseObj, sourceObj) {
            var combinedObj = angular.copy({}, baseObj);
            combinedObj = angular.copy(combinedObj, sourceObj);
            return combinedObj;
        };
    }]);

angular.module('ASM.dataservices')
    .factory('Commands', function () {

        _.templateSettings = {
            interpolate: /\{(.+?)\}/g
        };

        var server = ''; //contains mock data

        //var server = 'https://172.31.59.168/'; //VM environment but has servers and some mock data in database
        //var server = 'https://172.31.62.233/'; //real environment, made by Hepfer
        //var server = 'https://172.31.59.190/'; //environment with jobs
        //var server = 'https://172.31.62.134/'; //environment with storage
        //var server = 'https://172.31.62.250/'; //Barsana's test environment (no fabric)
        //var server = 'https://172.31.62.249/'; //Barsana's test environment (has fabric)

        return {

            data: {
                about: {
                    getAboutData: 'about/getaboutdata'
                },
                svg: {
                    getData: 'topology/getTopologyData',
                    getTemplateData: 'topology/gettemplatetopology',
                    getServiceData: 'topology/getservicetopology',
                    chassissvg: 'images/svg/chassis.svg',
                    networksvg: 'images/svg/network.svg',
                    bladesvg: 'images/svg/blade.svg',
                    bladeexpandedsvg: 'images/svg/blade_expanded.svg',
                    iomsvg: 'images/svg/io_module.svg',
                    clustersvg: 'images/svg/cluster.svg',
                    hostsvg: 'images/svg/resource.svg',
                    vmsvg: 'images/svg/vm.svg',
                    canvassvg: 'images/svg/TempBuilder-canvas.svg',
                    componentsvg: 'images/svg/TempBuilder-components.svg',
                    networkiconsvg: 'images/svg/TB-network-barnacle.svg',
                    addiconsvg: 'images/svg/TB-addicon.svg',
                    serverPortView: 'images/svg/serverportview.svg',
                    applicationtextsvg: 'images/svg/applicationText.svg'
                },
                devices: {
                    getFirmwareById: 'devices/getfirmwarebyid',
                    saveFirmware: 'devices/savefirmware',
                    getComplianceCheckById: 'devices/getcompliancecheckbyid',
                    getFirmwareDeviceList: 'devices/getfirmwaredevicelist',
                    exportFirmware: 'devices/exportfirmware',
                    getDeviceList: 'devices/getdevicelist',
                    getEmcvnxStorageById: "devices/getemcvnxstoragebyid",
                    getAvailableCloneDeviceList: 'devices/getavailableclonedevicelist',
                    getVCenter: 'devices/getvcenter',
                    getSCVMM: 'devices/getscvmm',
                    getDeviceById: 'devices/getdevicebyid',
                    remove: 'devices/remove',
                    manage: 'devices/manage',
                    unmanage: 'devices/unmanage',
                    reserve: 'devices/reserve',			
                    powerOn: 'devices/poweron',
                    powerOff: 'devices/poweroff',
                    runInventory: 'devices/runinventory',
                    estimateFirmwareUpdate: 'devices/estimatefirmwareupdate',
                    updatedevicefirmware: 'devices/updatedevicefirmware',
                    getDeviceConfiguration: 'devices/getdeviceconfiguration',
                    configureDevice: 'devices/configuredevice'
                },
                equalLogicStorage: {
                    getEqualLogicStorageById: 'devices/getequallogicstoragebyid'
                },
                compellentStorage: {
                    getCompellentStorageById: 'devices/getcompellentstoragebyid'
                },
                netappStorage: {
                    getNetAppStorageById: 'devices/getnetappstoragebyid'
                },
                dellSwitch: {
                    getDellSwitchById: 'devices/getdellswitchbyid'
                },
                serverpools: {
                    getServerPools: 'serverpool/getserverpools',
                    getServerPoolById: 'serverpool/getserverpoolbyid',
                    saveServerPool: 'serverpool/saveserverpool',
                    remove: 'serverpool/remove'
                },
                firmwarepackages: {
                    getFirmwareBundleDevices: 'firmware/getfirmwarebundledevices',
                    getFirmwarePackages: 'firmware/getfirmwarepackages',
                    getAvailableFirmwarePackages: 'firmware/getavailablefirmwarepackages',
                    getFirmwarePackageById: 'firmware/getfirmwarepackagebyid',
                    getFirmwarePackageNameById: 'firmware/getfirmwarepackagenamebyid',
                    getFirmwareBundleById: 'firmware/getfirmwarebundlebyid',
                    getDefaultFirmwarePackage: 'firmware/getdefaultfirmwarepackage',
                    saveFirmwarePackage: 'firmware/savefirmwarepackage',
                    testFirmwarePackage: 'firmware/testfirmwarepackage',
                    setDefaultFirmwarePackage: 'firmware/setdefaultfirmwarepackage',
                    remove: 'firmware/remove',
                    removeFirmwareBundle: 'firmware/removefirmwarebundle',
                    saveFirmwareBundle: 'firmware/saveFirmwareBundle',
                    uploadFirmwarePackage: 'firmware/uploadfirmwarepackage'
                },
                addonmodules: {
                    getAddOnModules: 'addonmodule/getaddonmodules',
                    getAddOnModuleById: 'addonmodule/getaddonmodulebyid',
                    removeAddOnModule: 'addonmodule/removeaddonmodule',
                    saveAddOnModule: 'addonmodule/saveaddonmodule',
                    testAddOnModule: 'addonmodule/testaddonmodule',
                    uploadAddOnModule: 'addonmodule/uploadaddonmodule'
                },
                applianceManagement: {
                    getStatus: 'appliance/getstatus',
                    getCurrentUsersAndJobs: 'appliance/getcurrentusersandjobs',
                    setApplianceUpdate: 'appliance/setapplianceupdate',
                    submitUpdateVirtualAppliance: 'appliance/updatevirtualappliance',
                    submitLicenseUpdateForm: 'appliance/updatelicense',
                    verifylicense: 'appliance/verifylicense',
                    submitNtpSettingsForm: 'appliance/saventpsettings',
                    submitProxyInfoForm: 'appliance/setproxy',
                    submitDhcpSettingsForm: 'initialsetup/updatedhcp',
                    testProxySettings: 'appliance/testproxysettings',
                    submitCertificateSigReqForm: 'appliance/setappliancecertificateinfo',
                    getAvailableCountries: 'appliance/getavailablecountries',
                    uploadCertificate: 'appliance/uploadcertificate',
                    uploadCertificateConfirmation: 'appliance/uploadcertificateconfirmation',
                    updateServiceTag: 'appliance/updateServiceTag',

                    exportTroubleshootingBundle: 'appliance/exporttroubleshootingbundle',
                    getApplianceUpdateInfo: 'appliance/getapplianceupdateinfo',
                    getLicenseData: 'appliance/getlicensedata',
                    getGeneralSettings: 'appliance/getnetworkinfo',
                    getHttpProxySettings: 'appliance/getproxy',
                    getDhcpSettings: 'appliance/getdhcpsettings',
                    getNtpSettings: 'appliance/getntpsettings',
                    getCertificateInfo: 'appliance/getappliancecertificateinfo'
                },
                backupAndRestore: {
                    backupNow: 'backupandrestore/backupnow',
                    restore: 'backupandrestore/restore',
                    getRestoreStatus: 'backupandrestore/getrestorestatus',
                    getBackupSettings: 'backupandrestore/getbackupsettings',
                    getBackupScheduleInfo: 'backupandrestore/getbackupschedule',
                    saveBackupSettings: 'backupandrestore/savebackupsettings',
                    setBackupScheduleInfo: 'backupandrestore/setbackupschedule',
                    testBackupConnection: 'backupandrestore/testbackupconnection',
                    testRestoreConnection: 'backupandrestore/testrestoreconnection'
                },

                downloads: {
                    create: 'downloads/create',
                    status: 'downloads/status'
                },

                logs: {
                    getLogs: 'logs/getlogs',
                    purgeLogs: 'logs/purgelogs',
                    exportAllLogs: 'logs/exportalllogs',
                    exportFilteredLogs: 'logs/exportfilteredlogs'
                },

                chassis: {
                    getChassisSummariesByCredentialId: 'chassis/getchassissummariesbycredentialid',
                    getManagementTemplatesByCredentialId: 'chassis/getmanagementtemplatesbycredentialid',
                    getChassisById: 'chassis/getchassisbyid',
                    runInventory: 'chassis/runinventory',
                    //Where is configure and reapply template?
                    checkCompliance: 'chassis/checkcompliance',
                    removeChassis: 'chassis/removechassis',
                    resetCertificate: 'chassis/resetcertificate',

                },
                configureChassis: {
                    getChassisSetup: 'chassis/getchassissetupbychassisid',
                    getTemplates: 'managementtemplate/getreadymanagementtemplatesummaries',
                    getFabricPurposes: 'managementtemplate/getfabricpurposes',
                    getIdentityData: 'chassis/getidentitydata',
                    validateChassisIdentities: 'chassis/validatechassisidentities',
                    validateServerIdentities: 'chassis/validateserveridentities',
                    validateIOMIdentities: 'chassis/validateiomidentities',
                    saveConfigureChassis: 'chassis/saveconfigurechassis',
                    getConfigurableResources: 'configurechassis/getconfigurableresources',
                    uploadPortConfiguration: 'configurechassis/uploadportconfiguration',
                    configureResources: 'configurechassis/configureresources'
                },
                repository: {
                    getRepositoryList: 'repository/getrepositorylist',
                    getRepositoryById: 'repository/getrepositorybyid',
                    syncRepositoryById: 'repository/syncrepositorybyid',
                    syncRepository: 'repository/syncrepository',
                    saveRepository: 'repository/saverepository',
                    testRepository: 'repository/testrepository',
                    testFileRepository: 'repository/testfilerepository',
                    deleteRepository: 'repository/deleterepository',
                    deleteRepositoryList: 'repository/deleterepositorylist',
                    getRepositoryTypes: 'repository/getrepositorytypes'
                },
                serverTemplate: {
                    getDefaultTemplate: 'deploymenttemplate/getdefaulttemplate',
                    getServerTemplate: 'deploymenttemplate/getdeploymenttemplatebyid',
                    createServerTemplate: 'deploymenttemplate/createdeploymenttemplate',
                    saveServerTemplate: 'deploymenttemplate/savedeploymenttemplate',
                    getSystemProfiles: 'deploymenttemplate/getsystemprofiles',
                    getBootSequenceByBootType: 'deploymenttemplate/getbootsequencebyboottype'
                },
                serviceTemplate: {
                    getDefaultTemplate: 'servicetemplate/getdefaulttemplate',
                    getServiceTemplate: 'servicetemplate/getservicetemplatebyid',
                    createServiceTemplate: 'servicetemplate/createservicetemplate',
                    saveServiceTemplate: 'servicetemplate/saveservicetemplate',
                    getSystemProfiles: 'servicetemplate/getsystemprofiles',
                    getBootSequenceByBootType: 'servicetemplate/getbootsequencebyboottype'
                },
                configurationTemplate: {
                    getConfigurationTemplate: 'managementtemplate/getmanagementtemplate',
                    createConfigurationTemplate: 'managementtemplate/createmanagementtemplate',
                    saveConfigurationTemplate: 'managementtemplate/savemanagementtemplate',
                    getUserRoles: 'managementtemplate/getmanagementtemplateuserroles',

                    addTemplateUser: 'managementtemplate/addtemplateuser',
                    removeTemplateUser: 'managementtemplate/removetemplateuser',
                    updateTemplateUser: 'managementtemplate/updatetemplateuser',
                    addCMCTemplateUser: 'managementtemplate/addcmctemplateuser',
                    removeCMCTemplateUser: 'managementtemplate/removecmctemplateuser',
                    updateCMCTemplateUser: 'managementtemplate/updatecmctemplateuser'
                },
                credential: {
                    getCredentialList: 'credentials/getcredentiallist',
                    getCredentialSummaryList: 'credentials/getcredentialsummaries',
                    getCredentialByType: 'credentials/getcredentialsbytype',
                    //getCredentialDevices: 'credentials/getcredentialdevicesbyidandtype',
                    getCredentialById: 'credentials/getcredentialbyid',
                    saveCredential: 'credentials/savecredential',
                    deleteCredential: 'credentials/deletecredential'
                },
                dashboard: {
                    getDashboardLandingPageData: 'dashboard/getdashboardlandingpagedata',
                    getDashboardNotifications: 'dashboard/getdashboardnotifications',
                    getServicesDashboardData: 'dashboard/getservicesdashboarddata',
                    getDashboardStorageData: 'dashboard/getdashboardstoragedata',
                },
                deployment: {
                    attach: 'deployments/attach',
                    detach: 'deployments/detach',
                    migrate: 'deployments/migrate',
                    powerOn: 'deployments/poweron',
                    powerOff: 'deployments/poweroff',
                    getDeploymentSummaries: 'deployments/getdeploymentsummaries',
                    getDeploymentById: 'deployments/getdeploymentbyid',
                    deleteDeployment: 'deployments/deletedeployment',
                    getServerListByTemplateId: 'deployments/getserverlistbytemplateid'
                },
                deviceGroup: {
                    createDeviceGroup: 'discovery/createdevicegroup',
                    getDeviceGroupList: 'discovery/getdevicegrouplist'
                },
                discovery: {
                    getChassisConfigurations: 'discovery/getchassisconfigurations',
                    getChassisList: 'discovery/getchassislist',
                    saveChassisDiscovery: 'discovery/savechassisdiscovery',
                    submitDiscovery: 'discovery/submitdiscovery',
                    verifyConfiguration: 'discovery/verifyconfiguration',
                    getChassisConfigurationStatus: 'discovery/getchassisconfigurationsstatus',
                    getChassisListStatus: 'discovery/getchassisliststatus',
                },
                environment: {
                    getMonitoringSettings: 'environment/getmonitoringsettings',
                    setMonitoringSettings: 'environment/setmonitoringsettings',
                    getNtpTimeZoneSettings: 'environment/getntptimezonesettings',
                    getTimeZones: 'environment/gettimezones',
                    setNtpTimeZoneSettings: 'environment/setntptimezonesettings'
                },
                hardwareInventory: {
                    getHardwareInventoryLandingPage: 'hardwareinventory/gethardwareinventorylandingpagedata'
                },
                initialSetup: {
                    getInitialSetup: 'initialsetup/getinitialsetupdata',
                    completeInitialSetup: 'initialsetup/completeinitialsetup',
                    updateTimeData: 'initialsetup/updatetime',
                    updateDhcpData: 'initialsetup/updatedhcp',
                    updateLicenseData: 'appliance/updatelicense',
                    updateProxyData: 'initialsetup/updateproxy',
                    testProxy: 'initialsetup/testproxysettings',
                    gettingStarted: 'initialsetup/gettingstarted',
                    updateGettingStarted: 'initialsetup/updategettingstarted',
                },
                iom: {
                    getIOMSummariesByCredentialId: 'iom/getiomsummariesbycredentialid',
                    getManagementTemplatesByCredentialId: 'iom/getmanagementtemplatesbycredentialid',
                    getIOMById: 'iom/getiombyid',
                    runInventory: 'iom/runinventory',
                    remove: 'iom/remove',
                    //Where is reApplyTemplate?
                    checkCompliance: 'iom/checkcompliance',
                },
                jobs: {
                    getJobList: 'jobs/getjoblist',
                    getJobById: 'jobs/getjobbyid',
                    saveJobSchedule: 'jobs/savejobschedule',
                    getRecurrences: 'jobs/getrecurrences',
                    deleteJob: 'jobs/deletejob',
                    getSelectedJobId: 'jobs/getselectedjobid',
                    exportjobs: 'jobs/exportjobs'
                },
                managementTemplate: {
                    reApplyTemplate: 'managementtemplate/reapplytemplate'
                },
                pollingIntervals: {
                    getChassisInventoryPollingSettings: 'pollingintervals/getchassisinventorypollingsettings',
                    saveChassisInventoryPollingSettings: 'pollingintervals/savechassisinventorypollingsettings',

                    getStatusPollingSettings: 'pollingintervals/getstatuspollingsettings',
                    saveStatusPollingSettings: 'pollingintervals/savestatuspollingsettings'
                },

                servers: {
                    getServerSummariesByCredentialId: 'servers/getserversummariesbycredentialid',
                    getManagementTemplatesByCredentialId: 'servers/getmanagementtemplatesbycredentialid',
                    getServerById: 'servers/getserverbyid',
                    powerOn: 'servers/poweron',
                    powerOff: 'servers/poweroff',
                    runInventory: 'servers/runinventory',
                    checkCompliance: 'servers/checkcompliance',
                    resetCertificate: 'servers/resetcertificate',
                    remove: 'servers/remove',
                    resetPeakValues: 'servers/resetpeakvalues',
                    getServerPortViewById: 'servers/getserverportviewbyid',
                },

                serverTemplateModels: {
                    getServerTemplateModelList: 'servertemplatemodels/getservertemplatemodellist'
                },

                session: {
                    doLogin: 'login',
                    doLogout: 'login/dologout',
                    getSession: 'session/getsession',
                    updateSession: 'session/updatesession'
                },

                pools: {
                    getPools: 'pools/getpools',
                    getPoolById: 'pools/getpoolbyid',
                    deletePools: 'pools/deletepools',
                    validatePool: 'pools/validatepool',
                    createPool: 'pools/createpool',
                    updatePool: 'pools/updatepool',
                    getPoolPrefixList: 'pools/getpoolprefixlist',
                    exportPools: 'pools/exportpools'
                },

                services: {
                    getAdjustServiceComponents: 'services/getAdjustServiceComponents',
                    getServiceById: 'services/getservicebyid',
                    getServiceSettingsById: 'services/getservicesettingsbyid',
                    getUpdatableServiceSettingsById: 'services/getupdatableservicesettingsbyid',
                    getResourcesWithNetworksById: 'services/getresourceswithnetworksbyid',
                    adjustService: 'services/adjustservice',
                    updateComponents: 'services/updatecomponents',
                    getMigrateServersByServiceId: 'services/getmigrateserversbyserviceid',
                    getServiceList: 'services/getservicelist',
                    getServiceDropdown: 'services/getservicedropdown',
                    createService: 'services/createservice',
                    updateService: 'services/updateservice',
                    deleteService: 'services/deleteservice',
                    cancelService: 'services/cancelservice',
                    deleteResources: 'services/deleteresources',
                    retryService: 'services/retryservice',
                    previewService: 'services/previewservice',
                    getComponentData: 'services/getcomponentdata',
                    migrate: 'services/migrate',
                    updateservicefirmware: 'services/updateservicefirmware',
                    estimateFirmwareUpdate: 'services/estimatefirmwareupdate',
                    exportService: 'services/exportservice',
                    addNetworkToService: 'services/addnetworktoservice',
                    updateServiceNetworkResources: 'services/updateservicenetworkresources',
                    getPuppetLogs: 'services/getpuppetlogs',
                    exportPuppetLogs: 'services/exportpuppetlogs',
                    getExistingInfo: 'services/getexistinginfo',
                    getExistingService: 'services/getexistingservice',
                    addExistingService: 'services/addexistingservice',
                    updateServiceInventory: 'services/updateserviceinventory',
                    updateExistingService: 'services/updateexistingservice',
                    stopManagingApplications: 'services/stopmanagingapplications'
                },

                templates: {
                    getParsedConfigFile: 'templates/getparsedconfigfile',
                    getClonedComponentFromTemplate: 'templates/getclonedcomponentfromtemplate',
                    getTemplateById: 'templates/gettemplatebyid',
                    getManagementTemplateById: 'templates/getmanagementtemplatebyid',
                    getTemplateList: 'templates/gettemplatelist',
                    getTemplateBuilderList: 'templates/gettemplatebuilderlist',
                    getQuickTemplateList: 'templates/getquicktemplatelist',
                    getReadyTemplateList: 'templates/getreadytemplatelist',
                    deleteTemplate: 'servicetemplate/deleteservicetemplate',
                    copyTemplate: 'servicetemplate/copyservicetemplate',
                    createReferenceTemplate: 'servicetemplate/createreferenceservicetemplate',
                    addAttachment: 'templates/addattachment',
                    getTemplateBuilderById: 'templates/gettemplatebuilderbyid',
                    uploadTemplates: 'templates/uploadtemplate',


                    getTemplateBuilderComponents: 'templates/gettemplatebuildercomponents',
                    getUpdatedTemplateBuilderComponent: 'templates/getupdatedtemplatebuildercomponent',
                    getReferenceComponent: 'templates/getreferencecomponent',
                    loadTemplate: 'templates/gettemplatebuilderbyid',
                    loadTemplateDetails: 'templates/gettemplatedetails',
                    saveTemplate: 'templates/savetemplate',
                    saveTemplateAdditionalSettings: 'templates/savetemplateadditionalsettings',
                    createTemplate: 'templates/createtemplate',
                    validateTemplate: 'templates/validatetemplate',
                    validateSettings: 'templates/validatesettings',
                    discardTemplate: 'templates/discardtemplate',
                    deleteAttachment: 'templates/deleteattachment',
                    importTemplate: 'templates/importtemplate',
                    getFabricPurposes: 'templates/getfabricpurposes',
                    exportTemplate: 'templates/exporttemplate',
                    validateExport: 'templates/validateexport',
                    getVMWareComponent: 'templates/getvmwarecomponent'
                },
                timezones: {
                    getTimeZones: 'initialsetup/gettimezones'
                },
                users: {
                    getCurrentUser: 'users/getcurrentuser',
                    getUsers: 'users/getusers',
                    deleteUser: 'users/deleteuser',
                    disableUser: 'users/disableuser',
                    enableUser: 'users/enableuser',
                    getUserById: 'users/getuserbyid',
                    getUserByRole: 'users/getuserbyrole',
                    saveUser: 'users/saveuser',
                    getRoles: 'users/getroles',
                    getDirectoryList: 'users/getdirectorylist',
                    getDirectoryById: 'users/getdirectorybyid',
                    getDirectoryType: 'users/getdirectorytype',
                    getProtocolType: 'users/getprotocoltype',
                    saveDirectory: 'users/savedirectory',
                    deleteADUser: 'users/deleteaduser',
                    enabledisableDirectories: 'users/enabledisableDirectories',
                    saveImportUser: 'users/saveimportuser',
                    getImportDirectoryList: 'users/getimportdirectorylist',
                    getImportUserById: 'users/getimportuserbyid',
                    deleteImportUser: 'users/deleteimportuser',
                    saveImportDirectoryUsers: 'users/saveimportdirectoryusers',
                    getDirectoryUsers: 'users/getdirectoryusers',
                    getDirectoryGroups: 'users/getdirectorygroups',
                    //getDirectoryUserById: 'users/getdirectoryuserbyid',
                    getImportRoles: 'users/getimportroles',
                    updateImportUser: 'users/updateimportuser',
                    getGroupDetails: 'users/getgroupdetails',
                },
                networking: {
                    networks: {
                        saveNetwork: 'networks/savenetwork',
                        getNetworksList: 'networks/getnetworks',
                        getUplinkNetworksList: 'networks/getnonhardwaremanagementnetworks',
                        getServiceNetworksList: 'networks/getservicenetworkslist',
                        getServiceNetworkPortGroupList: 'networks/getservicenetworkportgrouplist',
                        getNetworkTypes: 'networks/getnetworktypes',
                        deleteNetwork: 'networks/deletenetwork',
                        getNetworkById: 'networks/getnetworkbyid',
                        getLanNetworks: 'networks/getlannetworks',
                        getSanIscsiNetworks: 'networks/getsaniscsinetworks',
                        getSanFcoeNetworks: 'networks/getsanfcoenetworks',
                        getNetworksByPurpose: 'networks/getnetworksbypurpose',
                        getNetworkTemplatesByNetworkId: '',
                        getHardwareManagementNetworks: 'networks/gethardwaremanagementnetworks'
                    }
                },
                deployTemplate: {
                    getDeploymentTemplateList: 'deploymenttemplate/getdeploymenttemplatelist',
                    getChassisListByTemplateId: 'deployments/getchassislistbytemplateid',
                    getNetworkListByTemplateId: 'deployments/getnetworklistbytemplateid',
                    saveDeployment: 'deployments/submitdeployment',
                    exportDeployTemplate: 'deployments/exportdeploytemplate',

                    addVirtualNic: 'deploymenttemplate/addvirtualnic',
                    removeVirtualNic: 'deploymenttemplate/removevirtualnic',
                    updateVirtualNic: 'deploymenttemplate/updatevirtualnic'
                },
                firmwareReport: {
                    getfirmwarereport: "firmware/getfirmwarereport"
                }


            },
            templates: {},

            help: {
                //none: 'help/index.html',
                none: 'help/GUID-C6B6B706-1D45-458E-B47D-1D14FC416C3D.html',

                //added for page level help
                resources: "help/GUID-DCE48024-1840-480A-823F-1C926332134A.html",
                backupandrestore: "help/GUID-D2C936AF-C242-45C1-BFE6-867819245ADE.html",
                gettingstarted: "help/GUID-C6B6B706-1D45-458E-B47D-1D14FC416C3D.html",

                serverpoolcreate: "help/GUID-0D3A9AE2-28E7-45E4-8407-F42A951D7E6A.html",
                serverpooledit: "help/GUID-982DFF2E-83DA-41B4-80FD-33EBC76A9B6A.html",
                discoverywizardwelcome: "help/GUID-4B948DC5-05D0-4B66-A887-1EA4C980EF58.html",
                discoverywizardfirmwaredefault: "help/GUID-4B948DC5-05D0-4B66-A887-1EA4C980EF58.html",
                discoverydiscoverresourcespage: "help/GUID-BE31B0EE-E144-4E52-B2BB-3D01367D86B3.html",
                discoveryaddiprangedialog: "help/GUID-279D9EB4-C9C1-4895-8F2C-2B56156CE2F5.html",
                discoverydiscovereddevices: "help/GUID-339DE4CE-CCB1-445D-8C54-54A9184C8C2E.html",
                discoverywizardfirmwarecompliance: "help/GUID-4B948DC5-05D0-4B66-A887-1EA4C980EF58.html",
                Settings: "help/GUID-92176BC4-A06B-4521-84A3-2644070F5F8C.html",
                networkslandingpage: "help/GUID-2002C7A9-44BF-473E-92AA-3A8364AF746D.html",
                networksaddingediting: "help/GUID-C89539DD-AAC1-4CA2-9DE1-9BB4F5ECB242.html",
                virtualidentitypoolslandingpage: "help/GUID-D748E7CD-9409-4C67-BFB6-647A7A111C09.html",
                virtualidentitypoolcreate: "help/GUID-BE4F327D-2A22-4DEC-8F2F-7EE0A0C1F39D.html",
                virtualidentitiespooladdingMAC: "help/GUID-B5AA5F58-D738-4D0A-A5D5-A61D29817004.html",
                virtualidentitiespooladdingIQN: "help/GUID-E45E5AE5-3472-4BFB-8A4F-B19AE3CB8A19.html",
                virualidentitypooladdingWWPN: "help/GUID-ED147BBA-A7BE-4AD5-85EC-663A15A0C4B5.html",
                virtualidentitypooladdingWWNN: "help/GUID-5B3464DB-8BA2-4676-9EBF-4C50D0B24702.html",
                SettingsUsersHomePage: "help/GUID-DE302F08-A5B3-4380-9138-8380C2009144.html",
                SettingsCreatingUser: "help/GUID-867D0995-352C-4DB4-B65A-602440BA6A94.html",
                SettingsUsersEditingUser: "help/GUID-1A4B7486-665C-42DE-BCEA-1E9511176DBA.html",
                SettingsUsersImportingUsers: "help/GUID-07289072-3699-4567-AA67-8D7AF94880A0.html",
                SetingsUsersDirectoryServicesConnectionSettings: "help/GUID-4EAFC0F8-4BD8-4A01-B5A5-A123D49C00A1.html",
                SettingsUsersDirectoryServicesAttributeSettings: "help/GUID-CB18BA64-A917-4A49-8534-F2A3791FB3CE.html",
                SettingsUsersDirectoryServicesSummary: "help/GUID-34C736F1-E753-4380-8D74-EB6F0E91B80D.html",
                credentialslandingpage: "help/GUID-B4C4600A-1B8A-49D1-9BE0-D8B75961FD65.html",
                creatingcredentials: "help/GUID-152B27C5-8165-4121-A126-5701E9046597.html",
                editingcredentials: "help/GUID-8C279792-C3A3-447F-BAA7-E90459206A7C.html",
                Logs: "help/GUID-9D0A415E-869C-4795-B5E6-E9906BCC2370.html",
                appliancemanagementhomepage: "help/GUID-3820906D-846E-4A8A-BD74-222B96F2412C.html",

                initialsetupwelcome: "help/GUID-0D32AB59-08F7-4EFE-9287-7992D615F2E2.html",
                initialsetuplicensing: "help/GUID-70E23B3C-854B-4867-ABF6-F44E3E111ED9.html",
                initialsetuptimezone: "help/GUID-432EC241-8D28-4EFB-A751-280A9FCA150B.html",
                initialsetupproxysettings: "help/GUID-879CE912-BE7B-4260-B65C-CA63B8A9C5CC.html",
                initalsetupnetworks: "help/GUID-13AC0B2C-05DB-4CD8-99C2-624DC01E82F9.html",
                initialsetupsummary: "help/GUID-F40CD627-3AA7-44C6-B110-0635A77BCDA6.html",
                dashboardoverview: "help/GUID-A23B7FFC-9E91-42D5-A3FE-1B32757B2AA9.html",
                dashboarddeploynewservice: "help/GUID-4F98D4A9-4E41-4831-B348-D59B46016463.html",
                templatesoverview: "help/GUID-BF3B9047-373C-486F-9D52-8A30133FBECE.html",
                templateshomepage: "help/GUID-CBFFF4B6-E4AD-475C-98C0-0A46371929B5.html",
                sampletemplates: "help/GUID-69B22C4F-C0BA-4CA1-9FD4-62E8CA50C8E8.html",
                creatingtemplate: "help/GUID-90061F56-B1A1-4664-A3A8-3F7457BAFAB9.html",
                cloningtemplate: "help/GUID-10CD78FB-ED63-4B82-AF27-642386E3B299.html",
                deployingserviceoverview: "help/GUID-6C347A4C-1851-446D-877B-B97E3C21985E.html",
                deployingservice: "help/GUID-08692DCB-BDB7-44A9-A78F-7CBF5E525E9F.html",
                deployservicesummary: "help/GUID-08337D59-513C-407B-A463-22740A1CFD6B.html",
                deployservicetemplatedetails: "help/GUID-B281A7F0-66B7-49B9-961A-85EA1C9B508B.html",

                services: "help/GUID-ECA74D5D-7553-463E-A847-62C6FE5447E3.html",
                servicesaddserver: "help/GUID-0B19223E-5C8A-41BE-B4CE-0ECD6064C157.html",
                servicesaddstorage: "help/GUID-CFA1E861-4921-4DAD-AC14-D3FBDD662795.html",
                servicesaddvm: "help/GUID-E584CE9F-30C1-4CEE-9ED6-F42A1A3CE272.html",

                adjustresources: "help/GUID-DA55E711-6BD6-4AEE-B3B0-DF00087B855C.html",
                migrateserver: "help/GUID-176D8738-1FDD-4211-A751-0945CD50255E.html",
                templatebuilder: "help/GUID-E95E031D-97A8-4AB2-8C20-9B9A767F8F3C.html",
                templatesettings: "help/GUID-10F9BC7E-8A2B-48E5-A9E5-3301C6866B641.html",
                addstorage: "help/GUID-8F6DFB36-A15F-461B-B05B-C24C3A5F587A.html",
                addserver: "help/GUID-06B0B10F-E4A0-4591-B5A8-A03E2B20C48A.html",
                addcluster: "help/GUID-EB2075D8-B964-4603-859F-A1AF4304C7F4.html",
                addappliance: "help/GUID-234AE139-8EDE-4742-AC73-68D22B18FF3B.html",
                addapplication: "help/GUID-DDFD7386-D614-4AB8-9DC2-40993F007B10.html",
                addapplicationservice: "help/GUID-6B9AFFA6-BFA5-4782-A396-B06AD1724DC6.html",
                importreferenceserver: "help/GUID-32CDCA7A-D22D-4F8D-9127-F3EB21F5CA1E.html",
                importtemplate: "help/GUID-EA0F30F3-7610-4E6B-88AD-DCD6FC48B983.html",
                createtemplate: "help/GUID-AD053629-1EB2-4129-9B03-0C1053EFB7FC.html",

                dhcp: "help/GUID-402DAFDC-4465-461B-A3D0-E0F11C2DC3C2.html",
                resourcesupdatingfirmware: "help/GUID-98DAF563-A44D-4C04-BA55-805A62994E4B.html",
                updatefirmwarewizard: "help/GUID-98DAF563-A44D-4C04-BA55-805A62994E4B.html",
                configurechassis: "help/GUID-7CB57D8F-2E95-4A8B-AD28-A4D97FEAEB34.html",
                repositories: "help/GUID-29778BCC-D293-4885-9B5A-786AEF8CF107.html",

                discoveryinitialchassisconfiguration: "help/GUID-44C740DE-D5B7-4DDC-AE67-C344A8FDC889.html",
                scheduledjobs: "help/GUID-DB7868BF-0260-47B6-99B5-E67542B3097C.html",

                //10-21-2014 Help Drop Integration

                configureDHCPsettings: "help/GUID-402DAFDC-4465-461B-A3D0-E0F11C2DC3C2.html",

                resourcedetails: "help/GUID-3DA30A19-1C38-4E26-960E-7AB6CF45952A.html",
                serverpools: "help/GUID-3CB7C7BE-8BE9-47DB-8117-98F28573B672.html",
                servicedetails: "help/GUID-09061359-0CFA-4480-9E81-BC461839BFC5.html",
                ServicesAddClusters: "help/GUID-ABAFCE3E-AABE-4BAD-BC8F-C06FB08B4B88.html",
                ServicesAddApplications: "help/GUID-DDFD7386-D614-4AB8-9DC2-40993F007B10.html",
                deleteservice: "help/GUID-6B1FEB89-27E7-4720-9D7C-566403BFD433.html",
                DeleteResources: "help/GUID-F1FCD4CA-8A26-4967-BBDD-4A50D9AC93F9.html",
                EditServiceInformation: "help/GUID-6FBA007F-1F1F-4B87-85E2-718DD23C981D.html",
                ViewDeploymentSettings: "help/GUID-072C70BF-F26C-4B48-8A15-1D3E7E6A362F.html",

                initialchassisconfiguration: "help/GUID-44C740DE-D5B7-4DDC-AE67-C344A8FDC889.html",

                configuringchassis: "help/GUID-7CB57D8F-2E95-4A8B-AD28-A4D97FEAEB34.html",
                configurechassisdiscoveredresources: "help/GUID-2768FB1F-FC4D-432D-99CA-BDBDB3EE0FCD.html",
                configurechassisconfiguredefaultrepository: "help/GUID-73665B98-3C81-4B29-87A6-AB986ED5E821.html",
                configurechassisfirmwarecompliance: "help/GUID-74403F65-DED9-4BBF-A6C0-B89A67EB011E.html",
                configurechassischassisglobal: "help/GUID-3416E41B-1961-44B7-8C15-45EFB7BCBBE5.html",
                ConfigureChassisAddCMCUser: "help/GUID-759745A8-B4D3-4B28-804E-26F31824EC72.html",
                ConfigureChassisiDRACUser: "help/GUID-DC1CAE28-9E4B-4DA4-BCDB-EFB5A011D180.html",
                configurechassisconfigurechassis: "help/GUID-55862FC4-5A15-4830-9C05-E6DDD2B91EC8.html",
                configurechassisconfigureserver: "help/GUID-64A7DFAF-BA33-4D57-9452-587390FEFDBC.html",
                configurechassisconfigureIOmodules: "help/GUID-D8071F08-4F4A-419A-8BC5-B7DB4D1DAD8A.html",
                configurechassiconfigureuplinks: "help/GUID-3E7F5240-5A9A-498F-BD6E-D3241D166BAB.html",
                configuechassisDefineuplinkdialog: "help/GUID-3C2E9886-1281-45A8-91AA-6A30E46CA0BF.html",
                ConfigureChassisSummary: "help/GUID-7E1DCE1D-CB66-4682-A3D8-A1C55F649528.html",

                viewfirmwarecompliance: "help/GUID-57681C39-16A9-49E8-AAA5-B83064D8CD31.html",
                viewfirmwarecomplianceservice: "help/GUID-B3DF3974-3512-4027-AD3C-06A23D397984.html",

                ImportingTemplates: "help/GUID-8B9AA354-34DE-4336-979A-D42D800748D3.html",
                TemplateEditingTemplateInformation: "help/GUID-24F76008-81FE-4F36-98BE-10284C22F296.html",

                repositorieshomepage: "help/GUID-29778BCC-D293-4885-9B5A-786AEF8CF107.html",
                AddOSImageRepository: "help/GUID-F2AFCFE6-F28E-4EA6-A26C-7E5CE94E09F1.html",
                EditOSImageRepository: "help/GUID-F13B2694-A391-4BD6-8D57-82F75CAC8E71.html",
                SyncOSImageRepository: "help/GUID-00C6E147-FF71-4EE3-851E-7EFFD89AD400.html",
                viewbundles: "help/GUID-95330B4B-072A-46E6-B0C7-2D085959F921.html",
                Addingfirmwarerepositories: "help/GUID-74B9EE18-16EE-4A35-99FA-5E449BDCA479.html",

                BackupNow: "help/GUID-25DAB7DA-314F-4FAE-927E-47F9A8ED1055.html",
                RestoreNow: "help/GUID-D46DFFA2-2CAC-44F1-9073-D031E1AA8FFF.html",
                EditingBackupSettingsAndDetails: "help/GUID-347E4F95-E735-466D-80E4-E5DE5E714F76.html",
                EditingAutomaticallyScheduledBackups: "help/GUID-0EA99976-B62D-4AC2-8A49-6A8529357678.html",

                EditingDefaultNTPSettings: "help/GUID-5635F5F5-CBAA-422B-BA36-A1047EE0C29A.html",
                EditingProxySettings: "help/GUID-E223F488-0D92-45A8-8F05-56F24B756FD2.html",
                EditingDHCPSettings: "help/GUID-1B478D09-7D69-4B87-9A82-E23A44993D22.html",
                UploadinganSSLCertificate: "help/GUID-90E8E840-A825-408C-8BEF-1F03A39F1F29.html",
                LicenseManagement: "help/GUID-AB959B7A-5D13-4ABD-8730-1118772710D2.html",

                exportingtemplate: 'help/GUID-0A6214EF-4D65-4612-BDE1-D522525C2EB1.html',
                uploadingtemplate: 'help/GUID-C14F691C-340C-4A1C-89EB-77E3B82F2E46.html',

                templateAddAttachment: 'help/GUID-30B43E75-29F5-4346-8153-7DA9DF532BD3.html',
                TemplateExportTemplate: 'help/GUID-0A6214EF-4D65-4612-BDE1-D522525C2EB1.html',
                Template_UploadExternalTemplate: 'help/GUID-C14F691C-340C-4A1C-89EB-77E3B82F2E46.html',
                Template_DeployService: 'help/GUID-E0E98DCC-F837-496C-8284-69612DDEDF68.html',

                DeployServiceAddNetwork: 'help/GUID-0957E277-D2F7-41C4-A718-CD1E15E3B71E.html',
                UpdateRepositoryPath: 'help/GUID-B476B03D-47C0-4562-919A-8ACD7DFD03D5.html',
                uploadServerConfigProfile: 'help/GUID-33E8F572-A039-48CC-8F15-E4D84F784F3F.html',
                addCustomBundle: 'help/GUID-1A989EA1-F5F0-486D-866A-8BDF30AF59BA.html',
                updateComponents: 'help/GUID-ADE94816-9B37-4E0F-80D8-3A28F1349E87.html',

                AddingAddonModules: "help/GUID-793C54ED-C3EC-446C-A108-FCEB2DE8D826.html",
                AddingExistingService: "help/GUID-5CCF9C2B-052F-4AA5-A70C-D1BA793E3FCE.html",
                addonmodules: "help/GUID-23A231BB-B4EA-4FA1-97BE-662CF68021A2.html"
            },


            GenerateUrl: function (command, params) {

                if (!command) return '';

                var url = this[command];
                if (!url) url = command;

                var template = _.template(url);
                return template(params);

            }

        };
    });
angular.module('Enums', [])
    .factory('Enum', function () {
        return {
            deviceHealth: function (value) {

                var deviceHealths = [
                        "unknown",
                        "green",
                        "yellow",
                        "red"
                ];
                return deviceHealths[value];
            },
            deviceType: function (value) {

                var deviceType = [
                    "Unknown",
                    "Rack Server",
                    "Blade Server",
                    "Chassis",
                    "Fabric",
                    "Switch",
                    "Internal Storage",
                    "External Storage",
                    "Controller"
                ];
                return deviceType[value];
            },
            serviceHealth: function (value) {
                
                var serviceHealths = [
                        "unknown",
                        "green",
                        "yellow",
                        "red"
                ];
                return serviceHealths[value];
            },
            serviceState: function (value) {

                var serviceState = [
                        "In Progress",
                        "Complete",
                        "Pending",
                        "Completed With Errors"
                ];
                return serviceState[value];
            },
            healthToColor: function (value) {
                var color = [
                    "bg-primary",
                    "bg-success",
                    "bg-warning",
                    "bg-danger"
                ];
                return color[value];
            },
            healthToColorText: function (value) {
                var color = [
                    "",
                    "text-success",
                    "text-warning",
                    "text-danger"
                ];
                return color[value];
            },
            slaToText: function (value) {
                var sla = [
                    "Bronze",
                    "Silver",
                    "Gold",
                    "Platinum"
                ];
                return sla[value];
            },

            StatusToText: function (value) {
                var status = [
                    "Unknown",
                    "Available",
                    "Pending"
                ];
                return status[value];
            },


            deviceStatusToText: function (value) {
                var devicestatus = [
                    "Unknown",
                    "Available",
                    "Pending"
                ];
                return devicestatus[value];
            },
            devicePowerStateToText: function (value) {
                var powerstate = [
                    "Off",
                    "On"
                ];
                return powerstate[value];
            },
            serviceDetailsHealthIcon: function (value) {
                var health = [
                    "ci-threshold-alert-clock",
                    "ci-ok-square-check",
                    "ci-status-warning",
                    "ci-critical-circle-x"
                ];
                return health[value];
            }
            
        }
    });
angular.module('ASM.dataservices')
    .filter('uppercaseFirstLetter', function () {
        return function (val) {
            return val ? val.substring(0, 1).toUpperCase() + val.substring(1).toLowerCase() : "";
        };
    })
    .filter('unique', [
        '$parse', function ($parse) {
            return function (input, filter) {
                if (angular.isArray(input)) {

                    //unique key
                    var getter = $parse(filter);

                    return _.uniq(input, function (elm) {
                        return getter(elm);
                    });
                }
                return input;
            };
        }
    ])
    .filter('lookup', function () {
        return function (list, key) {
            return list[key];
        };
    })
    .filter('ip2long', function () {
        return function (ipaddress) {
            var parts = ipaddress.split('.');
            var res = 0;

            res += (parseInt(parts[0], 10) << 24) >>> 0;
            res += (parseInt(parts[1], 10) << 16) >>> 0;
            res += (parseInt(parts[2], 10) << 8) >>> 0;
            res += parseInt(parts[3], 10) >>> 0;

            return res;
        };
    })
    .filter('ip2link', function () {
        return function (ipaddress) {
            var link = ipaddress;
            if (link != undefined && link !== '' && link.indexOf('http') !== 0) link = 'http://' + link;
            return link;
        };
    })
    .filter('toclassname', function () {
        return function (val) {

            if (!val) return '';

            return val.replace(/[^a-z0-9]/g, function (s) {
                var c = s.charCodeAt(0);
                if (c === 32) return '-';
                if (c >= 65 && c <= 90) return '_' + s.toLowerCase();
                return '__' + ('000' + c.toString(16)).slice(-4);
            });

        };
    })
    .filter('dependenciesMet', function () {
        return function (setting, component) {
            var returnVal = [];
            if (setting && component) {
                angular.forEach(setting, function (option) {
                    if (option.dependencyTarget && option.dependencyValue) {
                        var targetSetting = null;

                        angular.forEach(component.categories, function (c) {
                            var matchingSetting = $filter('filter')(c.settings, function (s) { return (s.id === option.dependencyTarget); }, true);

                            if (matchingSetting) {
                                targetSetting = matchingSetting;
                                return;
                            }
                        });

                        var matchingValue = false;

                        if (targetSetting && targetSetting.value != null) {
                            var settingvalues = option.dependencyValue.split(',');
                            angular.forEach(settingvalues, function (val) { if (val.toString() === targetSetting.value.toString()) matchingValue = true; });
                        }

                        if (matchingValue) returnVal.push(option);
                    } else {
                        returnVal.push(option);
                    }
                });
            }
            return returnVal;
        };
    })
    .filter('settingVisible', function () {
        var _isVisible = function (setting, component) {
            var isVisible = false;

            if (setting && component) {
                if (setting.dependencyTarget && setting.dependencyValue) {
                    var targetSetting = null;

                    angular.forEach(component.categories, function (c) {
                        var matchingSetting = $filter('filter')(c.settings, function (s) { return (s.id === option.dependencyTarget); }, true);

                        if (matchingSetting) {
                            targetSetting = matchingSetting;
                            return;
                        }
                    });

                    var matchingValue = false;

                    if (targetSetting && targetSetting.value != null) {
                        var settingvalues = setting.dependencyValue.split(',');
                        angular.forEach(settingvalues, function (val) { if (val.toString() === targetSetting.value.toString()) matchingValue = true; });
                    }

                    isVisible = (matchingValue && _isVisible(targetSetting, component));
                } else {
                    isVisible = true;
                }
            }

            return isVisible;
        };

        return function (settings, component) {
            var returnVal = [];
            angular.forEach(settings, function (setting) { if (_isVisible(setting, component)) returnVal.push(setting); });
            return returnVal;
        };
    })
    .filter('deviceHealth', [
        'constants', function (constants) {
            return function (id) {
                var match = _.find(constants.deviceHealth, { id: id }) || { name: '' };
                return match.name;
            };
        }
    ])
    //.filter('filteredDevices', [
    //    function () {
    //        return function (arr) {
    //            var ret = [];
    //            $.each(arr, function (index, device) {
    //                if (device.isChassis && device.chassisConfiguration.configChassis) {
    //                    ret.push(device);
    //                }
    //            });
    //            return ret;
    //        };
    //    }
    //])
    .filter('uplinkList', [
        function () {
            return function (arr, vltenabled) {
                var x = angular.copy(arr);
                if (vltenabled)
                    x.unshift({
                        id: 'VLT',
                        uplinkId: 'VLT',
                        uplinkName: 'VLT',
                        portChannel: '',
                        networks: [],
                        networkNames: []
                    });

                return x;
            };
        }
    ])
    .filter('deviceType', [
        'constants', function (constants) {
            return function (id) {
                var match = _.find(constants.deviceTypes, { id: id }) || { name: '' };
                return match.name;
            };
        }
    ])
    .filter('firmwareStatus', [
            'constants', function (constants) {
                return function (id) {
                    var match = _.find(constants.firmwareStatus, { id: id }) || { name: '' };
                    return match.name;
                };
            }
    ])
    .filter('deviceState', [
            'constants', function (constants) {
                return function (id) {
                    var match = _.find(constants.deviceState, { id: id }) || { name: '' };
                    return match.name;
                };
            }
    ])
    .filter('deviceManagementState', [
                'constants', function (constants) {
                    return function (id) {
                        var match = _.find(constants.resourceStateFilter, { id: id }) || { name: '' };
                        return match.name;
                    };
                }
    ])
    .filter('staticIPState', [
            'constants', function (constants) {
                return function (id) {
                    var match = _.find(constants.staticIPState, { id: id }) || { name: '' };
                    return match.name;
                };
            }
    ])
    .filter('availableResourceTypes', [
            'constants', function (constants) {
                return function (id) {
                    var match = _.find(constants.availableResourceTypes, { id: id }) || { name: '' };
                    return match.name;
                };
            }
    ])
    .filter('availableManagedStates', [
            'constants', function (constants) {
                return function (id) {
                    var match = _.find(constants.availableManagedStates, { id: id }) || { name: '' };
                    return match.name;
                };
            }
    ])
    .filter('healthToColor', [
        'Enum', function (Enum) {
            return function (health) {
                return Enum.healthToColor(health);
            };
        }
    ])
    .filter('healthToColorText', [
        'Enum', function (Enum) {
            return function (health) {
                return Enum.healthToColorText(health);
            };
        }
    ])
    .filter('serviceState', [
        'Enum', function (Enum) {
            return function (state) {
                return Enum.serviceState(state);
            };
        }
    ])
    .filter('StatusToText', [
        'Enum', function (Enum) {
            return function (status) {
                return Enum.StatusToText(status);
            };
        }
    ])
    .filter('deviceStatusToText', [
        'Enum', function (Enum) {
            return function (devicestatus) {
                return Enum.deviceStatusToText(devicestatus);
            };
        }
    ])
    .filter('devicePowerStateToText', [
        'Enum', function (Enum) {
            return function (powerstate) {
                return Enum.devicePowerStateToText(powerstate);
            };
        }
    ])
    .filter('slaToText', [
        'Enum', function (Enum) {
            return function (sla) {
                return Enum.slaToText(sla);
            };
        }
    ])
    .filter('serviceDetailsHealthIcon', [
        'Enum', function (Enum) {
            return function (health) {
                return Enum.serviceDetailsHealthIcon(health);
            };
        }
    ])
    .filter('sum', [
        function () {
            return function (items, prop) {
                return items.reduce(function (a, b) {
                    return a + b[prop];
                }, 0);
            };
        }
    ])
    .filter('ellipsis', [function () {
        return function (value, limit) {
            var returnVal = value;
            if (value.length > limit) {
                returnVal = value.substring(0, limit) + '...';
            }
            return returnVal;
        };
    }
    ])
    .filter('able', ["$translate", function ($translate) {
        return function (bool) {
            if (bool === true) {
                return $translate.instant('SETTINGS_Enabled');
            }
            if (bool === false) {
                return $translate.instant('SETTINGS_Disabled');
            }
            return $translate.instant('DEVICETYPE_Unknown');
        }
    }
    ])
    .filter('range', [function () {
        return function (input, min, max) {
            min = parseInt(min); //Make string input int
            max = parseInt(max);
            for (var i = min; i < max; i++) {
                if (i < 10) { i = "0" + i; }
                input.push(i.toString());
            }

            return input;
        };
    }
    ])
    .filter('percentage', [function () {
        return function (input) {
            var x = input.toFixed(2);
            return x + "%";
        };
    }])
    .filter('bool', ['$translate', function ($translate) {
        return function (bool) {
            return bool ? $translate.instant('SETTINGS_Repositories_True') :
                $translate.instant('SETTINGS_Repositories_False');
        };
    }
    ])
    .filter('yesNo', ['$translate', function ($translate) {
        return function (bool) {
            return bool ? $translate.instant('GENERIC_Yes') :
                $translate.instant('GENERIC_No');
        };
    }
    ])
    .filter('repoState', ['$translate', function ($translate) {
        return function (status) {
            switch (status) {
                case 'errors':
                    return $translate.instant('SETTINGS_Repositories_Error');
                case 'pending':
                    return $translate.instant('SETTINGS_Repositories_Pending');
                case 'copying':
                    return $translate.instant('SETTINGS_Repositories_Copying');
                case 'available':
                    return $translate.instant('SETTINGS_Repositories_Available');

            }
        }
    }])
.filter('deviceState', ['$translate', function ($translate) {
    return function (status) {
        switch (status) {
            case "poweringoff":
                return $translate.instant("TEMPLATEBUILDER_VALIDATE_PoweringOff");
            case "available":
                return $translate.instant("GENERIC_Available");
            case "reserved":
                return $translate.instant("TEMPLATEBUILDER_VALIDATE_Reserved");
            case "unknown":
                return $translate.instant("GENERIC_Unknown");
            case "unmanaged":
                return $translate.instant("TEMPLATEBUILDER_VALIDATE_Unmanaged");
            case "pending":
                return $translate.instant("GENERIC_Pending");

        }
    }
}])

.filter('jobState', ['$translate', function ($translate) {
    return function (status) {
        switch (status) {
            case 'running':
                return $translate.instant('GENERIC_Running');
            case 'scheduled':
                return $translate.instant('GENERIC_Scheduled');
            case 'completed':
                return $translate.instant('GENERIC_Completed');
            case 'error':
                return $translate.instant('GENERIC_Error');
        }
    }
}])
.filter('serviceHealth', ['$translate', function ($translate) {
    return function (health) {
        switch (health) {
            case 'green':
                return $translate.instant("GENERIC_Healthy");
            case 'yellow':
                return $translate.instant("GENERIC_Warning");
            case 'red':
                return $translate.instant("GENERIC_Critical");
            case 'orange':
                return $translate.instant("GENERIC_Cancelled");
            case 'blue':
            case 'unknown':
            case '':
                return $translate.instant("GENERIC_InProgress");
        }
    }
}])
    .filter('resourceHealth', ['$translate', function ($translate) {
        return function (health) {
            switch (health) {
                case 'green':
                    return $translate.instant("GENERIC_Healthy");
                case 'yellow':
                    return $translate.instant("GENERIC_Warning");
                case 'red':
                    return $translate.instant("GENERIC_Error");
                case 'orange':
                    return $translate.instant("GENERIC_Cancelled");
                case 'blue':
                case 'unknown':
                case '':
                    return $translate.instant("GENERIC_InProgress");
            }
        }
    }])
    .filter("onOff", ['$translate', function ($translate) {
        return function (bool) {
            return bool ? $translate.instant('GENERIC_On_') :
                $translate.instant('CONFIGURECHASSIS_DEVICE_CONFIG_Off');
        };
    }
    ])
    .filter("compliant", ['$translate', function ($translate) {
        return function (compliance) {
            switch (compliance) {
                case "compliant":
                    return $translate.instant("DEVICES_CompliantStatus_Compliant");
                case "noncompliant":
                    return $translate.instant("DEVICES_CompliantStatus_NonCompliant");
                case "updaterequired":
                    return $translate.instant("DEVICES_CompliantStatus_UpdateRequired");
                case "updatefailed":
                    return $translate.instant("DEVICES_CompliantStatus_UpdateFailed");
                case "updating":
                    return $translate.instant("DEVICES_CompliantStatus_PendingUpdates");
                default:
                    return $translate.instant("DEVICES_CompliantStatus_Unknown");
            }
        }
    }
    ])
    .filter('templatesettings', [function () {
        return function (arr) {
            var x = [];
            $.each(arr, function (index, model) {
                if (!model.hidefromtemplate)
                    x.push(model);
            });

            return x;
        }
    }])
    .filter('criticality', ['constants', function (constants) {
        return function (constant) {
            return constants.firmwareCriticality.filter(function (option) { return option.id === constant })[0].name;
        }
    }])
    .filter('isTypeChassis', [function () {
        return function (device) {
            return !!_.find(["ChassisM1000e", "ChassisVRTX", "ChassisFX"],
            function (val) { return val === device.resourceType });

        }
    }])
    .filter('filteredDevices', ["$filter", function ($filter) {
        return function (devices) {
            return $filter('filter')(devices,
                function (d) {
                    return $filter("isTypeChassis")(d) && d.chassisConfiguration.configChassis === true;
                });
        }
    }])
    .filter('policyFilter', ['constants', '$filter', function (constants, $filter) {
        return function (policies, devices) {
            var fxcount = 0,
                m1000count = 0,
                devices = $filter("filteredDevices")(devices),
                returnArray = [];

            angular.forEach(devices, function (device) {
                if (device.chassisConfiguration && device.chassisConfiguration.configChassis === true) {
                    if (device.resourceType === 'ChassisFX') {
                        fxcount++;
                    } else {
                        m1000count++;
                    }
                }
            });

            if (fxcount > 0 && m1000count > 0) {
                returnArray = policies;
            } else if (fxcount > 0) {
                returnArray.push(policies[2]);
            } else {
                returnArray.push(policies[3]);
            }
            return returnArray;
        }
    }])



    .directive('stringToNumber', function () {
        return {
            require: 'ngModel',
            link: function (scope, element, attrs, ngModel) {
                ngModel.$parsers.push(function (value) {
                    return '' + value;
                });
                ngModel.$formatters.push(function (value) {
                    return parseFloat(value, 10);
                });
            }
        };
    })
    .constant('donutChartConfig', {



        navigator: { enabled: false },
        credits: { enabled: false },
        exporting: { enabled: false },

        options: {
            chart: {
                events: {
                    load: function () {
                        $('.highcharts-container').css('z-index', '12');
                        $('.highcharts-background').attr('fill', 'none');
                    }
                }
            },
            tooltip: {
                backgroundColor: '#ffffff'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: false
                    }
                }
            }
        },

        title: {
            text: '',
            verticalAlign: 'bottom'
        },
        size: {
            width: 250,
            height: 200
        },
        series: [
            {
                type: 'pie',
                innerSize: '95%',
                name: '',
                data: []
            }
        ]
    })
.factory('GlobalServices', [
    '$rootScope', 'localStorageService', '$timeout', '$window', '$q', '$http', 'URLs', '$translate', '$filter', '$location', '$injector', '$resource', 'Enums', '$route',
    function ($rootScope, localStorage, $timeout, $window, $q, $http, URLs, $translate, $filter, $location, $injector, $resource, Enums, $route) {
        $rootScope.ASM = this;

        $rootScope.ASM.CurrentUser = null;

        $rootScope.ASM.Enums = Enums;

        $rootScope.ASM.IsInRole = function (role) {
            if ($rootScope.ASM.CurrentUser == null) {
                var currentUser = localStorage.get('ASM.currentUserObject');
                $rootScope.ASM.CurrentUser = angular.copy(currentUser);
            }
            return ($rootScope.ASM.CurrentUser && $rootScope.ASM.CurrentUser.roleId && $rootScope.ASM.CurrentUser.roleId.toLowerCase() === role.toLowerCase());
        };

        $rootScope.ASM.NewGuid = function () {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        };

        $rootScope.ASM.showHelp = function (helptoken) {
            var helpToken = helptoken || 'none';

            var helpUrl = URLs.help[helpToken];

            var width = 820;
            var height = 600;

            if (height > screen.height) {
                height = screen.height - 20;
            }

            var left = Math.round((screen.width - width) / 2);
            var top = Math.round((screen.height - height) / 2);

            var winHelp = window.open(helpUrl, 'winHelp', 'width=' + width + ',height=' + height + ',top=' + top + ',left=' + left + ',scrollbars=1,resizable=1,location=1,toolbar=1');
            if (winHelp.focus) {
                winHelp.focus();
            }
        };

        $rootScope.ASM.servicesData = {
            cancelled: 0,
            error: 0,
            healthy: 0,
            inprogress: 0,
            warning: 0
        };

        $rootScope.ASM.loadNavigation = function (serviceData) {

            return [
                {
                    guid: 'nav_dashboard_home',
                    label: $translate.instant('DASHBOARD_Title'),
                    icon: 'ci-grid-dashboard',
                    href: '#/home',
                    children: [
                    ]
                },
                {
                    guid: 'nav_services',
                    label: $translate.instant('GENERIC_Services'),
                    icon: 'ci-deploy',
                    href: '#/services',
                    children: [
                        { guid: 'nav_services_cancelled', label: $translate.instant('GENERIC_Cancelled') + ' (' + serviceData.cancelled + ')', href: '/services/Cancelled', disabled: serviceData.cancelled >= 1 ? false:true},
                        { guid: 'nav_services_error', label: $translate.instant('GENERIC_Critical') + ' (' + serviceData.error + ')', href: '/services/Critical', disabled: serviceData.error >=1 ? false:true},
                        { guid: 'nav_services_healthy', label: $translate.instant('GENERIC_Healthy') + ' (' + serviceData.healthy + ')', href: '/services/Healthy', disabled: serviceData.healthy >=1 ? false:true},
                        { guid: 'nav_services_inprogress', label: $translate.instant('GENERIC_InProgress') + ' (' + serviceData.inprogress + ')', href: '/services/In Progress', disabled: serviceData.inprogress >=1 ? false:true},
                        { guid: 'nav_services_warning', label: $translate.instant('GENERIC_Warning') + ' (' + serviceData.warning + ')', href: '/services/Warning', disabled: serviceData.warning >= 1 ? false:true}
                    ]
                },
                {
                    guid: 'nav_templates',
                    label: $translate.instant('NAVIGATION_Templates'),
                    href: '/templates',
                    icon: 'ci-device-templates-blank-stacked',
                    children: [
                        { guid: 'nav_templates_mytemplates', label: $translate.instant('NAVIGATION_MyTemplates'), href: '/templates/mytemplates' },
                        { guid: 'nav_templates_sampletemplates', label: $translate.instant('NAVIGATION_SampleTemplates'), href: '/templates/sampletemplates' }
                    ]
                },
                {
                    guid: 'nav_resources',
                    label: $translate.instant('NAVIGATION_Resources'),
                    href: '/devices',
                    icon: 'ci-device-tower',
                    children: [
                        { guid: 'nav_resources_allresources', label: $translate.instant('NAVIGATION_AllResources'), href: '/devices' },
                        { guid: 'nav_resources_serverpools', label: $translate.instant('NAVIGATION_ServerPools'), href: '/devices/serverpools' }
                    ]
                }
                //,                {
                //    guid: 'nav_settings',
                //    label: $translate.instant('Settings'),
                //    icon: 'ci-settings-square',
                //    href: '/settings',
                //    hideintopmenu: true,
                //    pinright: true
                //}
            ];
        }

        $rootScope.ASM.navigation = $rootScope.ASM.loadNavigation($rootScope.ASM.servicesData);

        $rootScope.$watch('ASM.servicesData', function (serviceData) {
            $rootScope.ASM.navigation = $rootScope.ASM.loadNavigation(serviceData);
            $rootScope.$broadcast('navigationUpdated', $rootScope.ASM.navigation);
        });



        //$rootScope.ASM.showMenuItems = function () {
        //    $rootScope.$broadcast('navigationUpdated', $rootScope.ASM.navigation);
        //};

        //$rootScope.ASM.hideMenuItems = function () {
        //    $rootScope.$broadcast('navigationUpdated', []);
        //};



        $rootScope.ASM.ClearErrors = function (errorArray) {

            if (errorArray)
                errorArray.splice(0, errorArray.length);
            else
                errorArray = [];

            return errorArray;
        };

        $rootScope.ASM.RemoveError = function (error) {
            var errorArray = angular.extend({}, $rootScope.errors);
            angular.forEach(errorArray, function (e) {
                if (e.refId !== error.refId) errorArray.push(e);
            });

            $rootScope.errors = errorArray;
        };

        $rootScope.ASM.DisplayError = function (error, errorArray) {

            if (!error) return;
            if (!errorArray) errorArray = $rootScope.errors;

            angular.forEach(errorArray, function (e, index) {
                if (e.refId === error.refId)
                    errorArray.splice(index, 1);
            });

            error.id = $rootScope.ASM.NewGuid();
            errorArray.push(error);




        };

        $rootScope.ASM.setTab = function (tabgroup, tabname) {
            var params = $route.current.params;
            if (tabgroup && tabname) {
                params[tabgroup] = tabname;
            } else {
                if (tabgroup) {
                    delete params[tabgroup];
                }
            }
            $route.updateParams(params);
        }

        $rootScope.errors = [];

        //$rootScope.$watch('errors', function () { $rootScope.ASM.ErrorDetailsHeight(); }, true);
        //clear out errors because we navigated away
        $rootScope.$on('$locationChangeStart', function () { $rootScope.errors = []; });
        //Mark added this so we can clear errors after specific events like closing a modal
        $rootScope.$on('clearErrors', function () { $rootScope.errors = []; });

        $rootScope.ASM.anyChecked = function (arr) {

            if (!arr) return false;

            var val = false;

            $.each(arr, function (index, value) {
                if (value.isChecked) {
                    val = true;
                    return;
                }
            });
            return val;
        };

        $rootScope.ASM.onlyChecked = function (arr, prop, values) {

            //If only passed single valid property, turn it into an array
            if (typeof value == 'string') {
                values = [values];
            }

            //default return value to true. We will be checking for invalid
            var ret = true;
            $.each(arr, function (index, value) {
                //if row is checked and its property is not in the values array
                if (value.isChecked && values.indexOf(value[prop]) == -1) {
                    ret = false;
                    return;
                }
            });

            return ret;
        };


        $rootScope.ASM.IsDeviceType = function (deviceType, targetDeviceType) {

            var dt = deviceType;
            var tdt = targetDeviceType;

            switch (tdt) {
                case 'Switch':
                    return dt.indexOf('switch') != -1 || dt.indexOf('IOM') != -1;
                case 'IOM':
                    return dt.indexOf('IOM') != -1;
                case 'Server':
                    return dt.indexOf('Server') != -1;
                case 'RackServer':
                    return dt.indexOf('RackServer') != -1;
                case 'BladeServer':
                    return dt.indexOf('BladeServer') != -1;
                case 'FXServer':
                    return dt.indexOf('FXServer') != -1;
                case 'Chassis':
                    return dt.indexOf('Chassis') != -1;
                case 'Storage':
                    return dt == 'storage' || dt == 'compellent' || dt == 'equallogic' || dt == 'netapp';
                case 'VM':
                    return dt == 'vm';
                case 'vCenter':
                    return dt == 'vcenter';
                case 'SCVMM':
                    return dt == 'scvmm';
            }

            return false;
        };


        return $rootScope.ASM;
    }
])


;

angular.module('ASM.dataservices')
    .service('SearchService', ['$http', '$q', '$filter', 'Commands', function ($http, $q, $filter, Commands) {
        this.search = function (term, limit) {

            if (!limit) limit = 0;


            var request = {
                requestObj: null,
                criteriaObj: null
            }

            var servicePromise = $http.post(Commands.data.services.getServiceList, request);
            var devicePromise = $http.post(Commands.data.devices.getDeviceList, null);
            var templatePromise = $http.post(Commands.data.templates.getTemplateList, request);

            var promise = $q.all([servicePromise, devicePromise, templatePromise])
                //load data
                .then(
                    function (data) {

                        var services = data[0].data.responseObj;
                        var devices = data[1].data.responseObj;
                        var templates = data[2].data.responseObj;

                        var matchServices = $filter('filter')(services, term);
                        var matchDevices = $filter('filter')(devices, term);
                        var matchTemplates = $filter('filter')(templates, term);

                        if (limit > 0) {
                            matchServices = $filter('limitTo')(matchServices, limit);
                            matchDevices = $filter('limitTo')(matchDevices, limit);
                            matchTemplates = $filter('limitTo')(matchTemplates, limit);
                        }

                        return { services: matchServices, devices: matchDevices, templates: matchTemplates };

                    },
                    function (data) {
                        return { services: [], devices: [], templates: [] };
                    }
                )
                .then(function (matches) {

                    var deviceResults = [];
                    var serviceResults = [];
                    var templatesResults = [];

                    angular.forEach(matches.devices, function (d) {
                        deviceResults.push({
                            id: d.id,
                            name: d.name,
                            target: '#/device/' + d.id + '/' + d.deviceType,
                            relevance: null,
                            subcategory: 'Resource'
                        });
                    });

                    angular.forEach(matches.services, function (d) {
                        serviceResults.push({
                            id: d.id,
                            name: d.name,
                            target: '#/service/' + d.id,
                            relevance: null,
                            subcategory: null
                        });
                    });

                    angular.forEach(matches.templates, function (d) {
                        templatesResults.push({
                            id: d.id,
                            name: d.name,
                            target: '#/templatebuilder/' + d.id,
                            relevance: null,
                            subcategory: null
                        });
                    });

                    var results = {
                        searchedTerm: term,
                        totalResults: matches.services.length + matches.devices.length + matches.templates.length,
                        categories: [
                            { name: 'Resources', icon: 'ci-hardware-tower', items: deviceResults, totalItems: deviceResults.length },
                            { name: 'Services', icon: 'ci-deployment', items: serviceResults, totalItems: serviceResults.length },
                            { name: 'Templates', icon: 'ci-hardware-tower', items: templatesResults, totalItems: templatesResults.length }
                        ]
                    };
                    return results;
                });

            return promise;

        };
    }]);

angular.module('ASM.dataservices').run(['$templateCache', function ($templateCache) {

    //override templates here or add if necessary

}]);


var asm;
(function (asm) {
    var AddNetworkModalController = (function () {
        function AddNetworkModalController($http, $timeout, $scope, $q, $translate, loading, Dialog, commands, GlobalServices, $filter, MessageBox, modal, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.MessageBox = MessageBox;
            this.modal = modal;
            this.constants = constants;
            this.toBeAdded = new Array();
            var self = this;
            self.refresh();
        }
        AddNetworkModalController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.loading(d.promise);
            self.$q.all([
                self.getServiceNetworksList().then(function (response) {
                    self.serviceNetworks = response.data.responseObj;
                }),
                self.getServiceNetworkPortGroupList().then(function (response) {
                    self.portGroups = response.data.responseObj;
                    self.portGroups.unshift({ portGroup: self.$translate.instant('NETWORKS_ADD_NewPortGroup'), newPortGroup: true });
                }),
                self.getResourcesWithNetworksById(self.$scope.modal.params.serviceId).then(function (response) {
                    self.resources = response.data.responseObj;
                    //test to fill all resources with both test networks
                    //angular.forEach(self.resources, (resource) => { self.resources.indexOf(resource) % 2 === 0 ? resource.networks = ["f3b21fbc-afb9-433a-ad59-29e94243e8d3", "608799be-bbbd-47b0-b602-7310632c2784"]: null });
                })
            ]).then(function () {
                self.resources = self.getCorespondingNetworkNames(self.resources, self.serviceNetworks);
                self.uniqueDeployedNetworks = _.uniqBy(_.flatMap(self.resources, function (resource) { return resource.networks; }), "id");
                self.disableFullOrUsedNetworks();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        AddNetworkModalController.prototype.newNetwork = function () {
            var self = this;
            self.toBeAdded.push({
                id: self.GlobalServices.NewGuid(),
                networkid: self.selectedNetwork.id,
                networkname: self.selectedNetwork.name,
                portgroupid: null,
                portgroupname: null,
                //all resources with those that are already using this network marked disabled (view only)
                resourceNames: self.getResources(self.selectedNetwork, angular.copy(self.resources)),
                //model of which resources were choosen
                resources: []
            });
            self.disableFullOrUsedNetworks();
        };
        AddNetworkModalController.prototype.defineNewNetwork = function () {
            var self = this;
            var editNetworkModal = self.modal({
                title: self.$translate.instant('NETWORKS_Edit_CreateTitle'),
                modalSize: 'modal-lg',
                templateUrl: "views/networking/networks/editNetwork.html",
                controller: "EditNetworkModalController as editNetwork",
                params: {
                    editMode: "CREATE",
                    id: ""
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            editNetworkModal.modal.show();
        };
        AddNetworkModalController.prototype.removeNetwork = function (resource) {
            var self = this;
            self.toBeAdded.splice(self.toBeAdded.indexOf(resource), 1);
            self.disableFullOrUsedNetworks();
        };
        AddNetworkModalController.prototype.getResources = function (selectedNetwork, resources) {
            //resource will be disabled for a network if it is already in use by the network
            //returns an array of resources marked on whether they're disabled
            return _.map(resources, function (resource) {
                return _.assign(resource, { disabled: !!_.find(resource.networks, { name: selectedNetwork.name }), included: false });
            });
        };
        AddNetworkModalController.prototype.disableFullOrUsedNetworks = function () {
            var self = this;
            //A network is disabled from being selected if one of each kind of resource is using it OR it is in the toBeAdded array
            _.forEach(self.serviceNetworks, function (network) {
                network.disabled = !_.find(self.resources, function (resource) {
                    return !_.find(resource.networks, { id: network.id });
                }) || !!_.find(self.toBeAdded, { networkid: network.id });
            });
        };
        AddNetworkModalController.prototype.getCorespondingNetworkNames = function (resources, networks) {
            //loops through resources and fills each resource's networks array with the full coresponding network object
            _.forEach(resources, function (resource) {
                resource.networks = _.map(resource.networks, function (network) {
                    return _.find(networks, { id: network });
                });
            });
            return resources;
        };
        AddNetworkModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.loading(d.promise);
            _.forEach(self.toBeAdded, function (network) {
                //if existing portgroup choosen
                if (network.portgroup.id) {
                    //remove all resource names that have included of false
                    _.pullAll(network.resourceNames, _.filter(network.resourceNames, { included: false }));
                    //push all remaining networks' ids into resourceNames array
                    _.forEach(network.resourceNames, function (resource) { network.resources.push(resource.id); });
                }
                else {
                    //if creating new portgroup, set resources to be an array containing only the id of the server resource, set portgroupid to -1
                    angular.extend(network, {
                        resources: [_.find(network.resourceNames, function (resource) { return resource.resourcetype === "Server"; }).id],
                        portgroupid: -1
                    });
                }
            });
            self.updateServiceNetworkResources(self.toBeAdded).then(function () {
                d.resolve();
                self.close();
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        AddNetworkModalController.prototype.getServiceNetworksList = function () {
            var self = this;
            return self.$http.post(self.commands.data.networking.networks.getServiceNetworksList, {});
        };
        AddNetworkModalController.prototype.getServiceNetworkPortGroupList = function () {
            var self = this;
            return self.$http.post(self.commands.data.networking.networks.getServiceNetworkPortGroupList, {});
        };
        AddNetworkModalController.prototype.getResourcesWithNetworksById = function (id) {
            var self = this;
            return self.$http.post(self.commands.data.services.getResourcesWithNetworksById, { id: id, uid: self.GlobalServices.NewGuid() });
        };
        AddNetworkModalController.prototype.updateServiceNetworkResources = function (networks) {
            var self = this;
            return self.$http.post(self.commands.data.services.updateServiceNetworkResources, { networks: networks, serviceId: self.$scope.modal.params.serviceId });
        };
        AddNetworkModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddNetworkModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddNetworkModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog',
            'Commands', 'GlobalServices', '$filter', 'Messagebox', 'Modal', 'constants'];
        return AddNetworkModalController;
    }());
    asm.AddNetworkModalController = AddNetworkModalController;
    angular
        .module('app')
        .controller('AddNetworkModalController', AddNetworkModalController);
})(asm || (asm = {}));
//# sourceMappingURL=addNetworkModal.js.map
var asm;
(function (asm) {
    var EditNetworkModalController = (function () {
        function EditNetworkModalController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $filter, MessageBox) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.MessageBox = MessageBox;
            this.calledFromDiscoverWizard = false;
            var self = this;
            //create or edit
            self.editMode = $scope.modal.params.editMode;
            //if create then id is blank, if edit then id is selectedNetworkId
            self.selectedNetworkId = $scope.modal.params.id;
            self.isScaleUp = false;
            self.networkTypes = [];
            self.network = {};
            self.ipRange = {};
            if ($scope.modal.params.type) {
                self.typeId = $scope.modal.params.type;
            }
            else {
                self.typeId = '';
            }
            if ($scope.modal.params.calledFromDiscoverWizard) {
                self.calledFromDiscoverWizard = $scope.modal.params.calledFromDiscoverWizard;
                self.typeId = 'HARDWARE_MANAGEMENT';
            }
            //testing
            //self.typeId = 'HARDWARE_MANAGEMENT';
            //self.typeId = 'HYPERVISOR_MANAGEMENT';
            if ($scope.modal.params.mgmtonly) {
                self.networktypelocked = true;
            }
            else {
                self.networktypelocked = false;
            }
            //testing
            //self.networktypelocked = true;
            self.submitForm = false;
            self.activate();
        }
        EditNetworkModalController.prototype.activate = function () {
            var self = this;
            self.loadNetworkTypes();
            self.setSelectedNetworkType();
            if (self.selectedNetworkId) {
                self.editMode = 'edit';
                self.$http.post(self.Commands.data.networking.networks.getNetworkById, { 'id': self.selectedNetworkId })
                    .then(function (data) {
                    self.network = data.data.responseObj;
                    //this must be called here so that it runs upon return from this call
                    self.setSelectedNetworkType();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            }
            else {
                self.editMode = 'create';
                // new network, set some defaults
                self.network.ipaddressranges = [];
                self.network.staticipaddressdetails = [];
                self.network.addressPools = [];
                self.network.networkTemplateUsages = [];
            }
        };
        EditNetworkModalController.prototype.loadNetworkTypes = function () {
            var self = this;
            self.$http.post(self.Commands.data.networking.networks.getNetworkTypes, { 'scaleup': self.isScaleUp })
                .then(function (data) {
                self.networkTypes = data.data.responseObj;
                //this must be called here so that it runs upon return from this call
                self.setSelectedNetworkType();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        EditNetworkModalController.prototype.setSelectedNetworkType = function () {
            var self = this;
            if (self.networkTypes.length == 0)
                return;
            if (!self.network.typeid && self.typeId)
                self.network.typeid = self.typeId;
            var networkType = _.find(self.networkTypes, { id: self.network.typeid });
            if (networkType) {
                if (networkType.disableStaticOrDHCP == true) {
                    self.network.staticordhcp = 'DHCP';
                    self.network.configurestatic = false;
                }
                if (networkType.id == 'HARDWARE_MANAGEMENT') {
                    self.network.configurestatic = true;
                    self.network.vlanid = null;
                }
                if (networkType.id == 'HYPERVISOR_MANAGEMENT') {
                    self.network.configurestatic = true;
                }
            }
            self.selectedNetworkType = networkType;
            //this must be called here so that it runs at the end of this call
            self.setConfigureStatic(self.network.configurestatic);
        };
        EditNetworkModalController.prototype.setConfigureStatic = function (newVal) {
            var self = this;
            if (newVal == undefined)
                return;
            var form = self.network;
            if (newVal == false) {
                form.staticordhcp = 'DHCP';
                form.subnet = null;
                form.gateway = null;
                form.primarydns = null;
                form.secondarydns = null;
                form.dnssuffix = null;
                form.ipaddressranges = [];
            }
            else {
                form.staticordhcp = 'Static';
            }
        };
        EditNetworkModalController.prototype.doSave = function (formHasErrors) {
            var self = this;
            if (formHasErrors) {
                self.submitForm = true;
                return;
            }
            if (self.network.type == null) {
                self.network.type = angular.copy(self.selectedNetworkType);
            }
            var validIPrange = true;
            angular.forEach(self.network.ipaddressranges, function (ipRange) {
                if (ipRange.startingIpAddress && ipRange.endingIpAddress) {
                    var ipaddress1 = self.$filter('ip2long')(ipRange.startingIpAddress);
                    var ipaddress2 = self.$filter('ip2long')(ipRange.endingIpAddress);
                    if (ipaddress1 > ipaddress2) {
                        validIPrange = false;
                    }
                }
            });
            if (!validIPrange) {
                //note that this is asynchronous
                var confirm = self.MessageBox((self.$translate.instant('GENERIC_Alert')), (self.$translate.instant('NETWORKS_Edit_AlertSaveIPCheck')));
            }
            if (validIPrange) {
                var myScope = this.$scope;
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
                self.$http.post(self.Commands.data.networking.networks.saveNetwork, { requestObj: self.network })
                    .then(function (data) {
                    self.objectId = data.data.responseObj.id;
                    deferred.resolve();
                    myScope.modal.close();
                }).catch(function (data) {
                    deferred.resolve();
                    //error is in data
                    self.GlobalServices.DisplayError(data.data);
                });
            }
        };
        EditNetworkModalController.prototype.iprange_add = function () {
            var self = this;
            var x = angular.copy(self.ipRange);
            x.id = _.uniqueId();
            self.network.ipaddressranges.push(x);
        };
        EditNetworkModalController.prototype.iprange_remove = function (range) {
            var self = this;
            var index = self.network.ipaddressranges.indexOf(range);
            self.network.ipaddressranges.splice(index, 1);
        };
        EditNetworkModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditNetworkModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog',
            'Commands', 'GlobalServices', '$filter', 'Messagebox'];
        return EditNetworkModalController;
    }());
    asm.EditNetworkModalController = EditNetworkModalController;
    angular
        .module('app')
        .controller('EditNetworkModalController', EditNetworkModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editNetworkModal.js.map
var asm;
(function (asm) {
    var AddLicenseModalController = (function () {
        function AddLicenseModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $rootScope) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.settings = {};
            this.countries = new Array();
            this.licenseFile = {};
            this.license = {};
            this.fileIsUploaded = false;
            var self = this;
            self.initialize();
        }
        //help url: ASM.urlConfig.help.LicenseManagement
        AddLicenseModalController.prototype.initialize = function () {
            var self = this;
            self.setupData = self.$scope.modal.params.license;
            //Wrap in a timeout to give screen time to render.  ////TODO: Replace with $onInit or similar.
            self.$timeout(function () {
                document.getElementById('idLocationFileUpload').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    self.licenseFile = element.files[0];
                    if (!self.setupData.licenseData) {
                        self.setupData.licenseData = {};
                    }
                    ;
                    self.setupData.licenseData.licensefile = element.value;
                    self.$timeout(function () { self.verifyLicense(); }, 10); //Wrap in a timeout to trigger a digest cycle.
                };
            }, 500);
        };
        AddLicenseModalController.prototype.verifyLicense = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.applianceManagement.verifylicense, self.setupData.licenseData)
                .then(function (data) {
                self.setupData.licenseData = data.data.responseObj;
                self.fileIsUploaded = true;
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            })
                .finally(function () { return d.resolve(); });
        };
        AddLicenseModalController.prototype.updateLicense = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.initialSetup.updateLicenseData, { requestObj: self.setupData.licenseData })
                .then(function () {
                d.resolve();
                self.close();
            }).catch(function (response) {
                d.resolve();
                self.GlobalServices.DisplayError(response.data);
            });
            return d;
        };
        AddLicenseModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddLicenseModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddLicenseModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope'];
        return AddLicenseModalController;
    }());
    asm.AddLicenseModalController = AddLicenseModalController;
    angular
        .module('app')
        .controller('AddLicenseModalController', AddLicenseModalController);
})(asm || (asm = {}));
//# sourceMappingURL=addLicense.js.map
var asm;
(function (asm) {
    var ApplianceUpdateController = (function () {
        function ApplianceUpdateController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.currentVersion = '';
            var self = this;
            self.initialize();
        }
        ApplianceUpdateController.prototype.initialize = function () {
            var self = this;
            self.currentVersion = self.$scope.modal.params.currentVersion;
        };
        ApplianceUpdateController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ApplianceUpdateController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        ApplianceUpdateController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ApplianceUpdateController;
    }());
    asm.ApplianceUpdateController = ApplianceUpdateController;
    angular
        .module('app')
        .controller('ApplianceUpdateController', ApplianceUpdateController);
})(asm || (asm = {}));
//# sourceMappingURL=applianceUpdateModal.js.map
var asm;
(function (asm) {
    var EditDhcpSettingsModalController = (function () {
        function EditDhcpSettingsModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.settings = {};
            this.ranges = {
                days: 31,
                hours: 24,
                minutes: 60,
                seconds: 60
            };
            var self = this;
            self.initialize();
        }
        //help url: ASM.urlConfig.help.EditingProxySettings
        EditDhcpSettingsModalController.prototype.initialize = function () {
            var self = this;
            self.settings = self.$scope.modal.params.settings;
        };
        EditDhcpSettingsModalController.prototype.activate = function () {
        };
        EditDhcpSettingsModalController.prototype.testProxy = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.setProxyTest(self.settings).then(function (response) {
                //test successful
                d.resolve();
            }).catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        EditDhcpSettingsModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.saveApplianceUpdate(self.settings).then(function (response) {
                d.resolve();
                self.close();
            }).catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        EditDhcpSettingsModalController.prototype.saveApplianceUpdate = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.submitDhcpSettingsForm, { requestObj: update });
        };
        EditDhcpSettingsModalController.prototype.setProxyTest = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.testProxy, { requestObj: update });
        };
        EditDhcpSettingsModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditDhcpSettingsModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditDhcpSettingsModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return EditDhcpSettingsModalController;
    }());
    asm.EditDhcpSettingsModalController = EditDhcpSettingsModalController;
    angular
        .module('app')
        .controller('EditDhcpSettingsModalController', EditDhcpSettingsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=dhcp.js.map
var asm;
(function (asm) {
    var DownloadCertModalController = (function () {
        function DownloadCertModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.cert = {};
            this.countries = new Array();
            this.showLink = false;
            var self = this;
            self.initialize();
        }
        DownloadCertModalController.prototype.initialize = function () {
            var self = this;
            self.cert = self.$scope.modal.params.certInfo;
        };
        DownloadCertModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DownloadCertModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        DownloadCertModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return DownloadCertModalController;
    }());
    asm.DownloadCertModalController = DownloadCertModalController;
    angular
        .module('app')
        .controller('DownloadCertModalController', DownloadCertModalController);
})(asm || (asm = {}));
//# sourceMappingURL=downloadCert.js.map
var asm;
(function (asm) {
    var EditRepoPathModalController = (function () {
        function EditRepoPathModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.applianceUpdateInfo = {};
            var self = this;
            self.initialize();
        }
        //help url: ASM.urlConfig.help.UpdateRepositoryPath
        EditRepoPathModalController.prototype.initialize = function () {
            var self = this;
            self.applianceUpdateInfo = self.$scope.modal.params.applianceUpdateInfo;
        };
        EditRepoPathModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.saveApplianceUpdate(self.applianceUpdateInfo).then(function (response) {
                d.resolve();
                self.close();
            }).catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        EditRepoPathModalController.prototype.saveApplianceUpdate = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.setApplianceUpdate, { requestObj: update });
        };
        EditRepoPathModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditRepoPathModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditRepoPathModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return EditRepoPathModalController;
    }());
    asm.EditRepoPathModalController = EditRepoPathModalController;
    angular
        .module('app')
        .controller('EditRepoPathModalController', EditRepoPathModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editRepoPath.js.map
var asm;
(function (asm) {
    var EditServiceTagController = (function () {
        function EditServiceTagController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $rootScope) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.serviceTag = '';
            var self = this;
            self.initialize();
        }
        EditServiceTagController.prototype.initialize = function () {
            var self = this;
            self.serviceTag = self.$scope.modal.params.serviceTag ? self.$scope.modal.params.serviceTag : '';
        };
        EditServiceTagController.prototype.updateServiceTag = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.applianceManagement.updateServiceTag, { requestObj: self.serviceTag })
                .then(function () {
                d.resolve();
                self.close();
            }).catch(function (response) {
                d.resolve();
                self.GlobalServices.DisplayError(response.data);
            });
            return d;
        };
        EditServiceTagController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditServiceTagController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditServiceTagController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope'];
        return EditServiceTagController;
    }());
    asm.EditServiceTagController = EditServiceTagController;
    angular
        .module('app')
        .controller('EditServiceTagController', EditServiceTagController);
})(asm || (asm = {}));
//# sourceMappingURL=editServiceTag.js.map
var asm;
(function (asm) {
    var GenerateCertModalController = (function () {
        function GenerateCertModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.settings = {};
            this.countries = new Array();
            this.showLink = false;
            var self = this;
            self.initialize();
        }
        GenerateCertModalController.prototype.initialize = function () {
            var self = this;
            self.settings = self.$scope.modal.params.settings;
            self.getCountries().then(function (response) {
                self.countries = response.data.responseObj;
                self.countries.unshift({ name: self.$translate.instant('SETTINGS_SelectaCountry'), id: null });
            });
        };
        GenerateCertModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.saveCert(self.settings).then(function (response) {
                d.resolve();
                self.showLink = true;
                //self.close();
            }).catch(function (response) { d.reject(); self.GlobalServices.DisplayError(response.data); });
        };
        GenerateCertModalController.prototype.saveCert = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.submitCertificateSigReqForm, { requestObj: update });
        };
        GenerateCertModalController.prototype.getCountries = function () {
            var self = this;
            return self.$http.get(self.Commands.data.applianceManagement.getAvailableCountries);
        };
        GenerateCertModalController.prototype.downloadCert = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_CertSignRequest'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/virtualappliancemanagement/DownloadCertModal.html',
                controller: 'DownloadCertModalController as downloadCertModalController',
                params: {
                    certInfo: angular.copy(self.settings)
                },
                onComplete: function () {
                }
            });
            modal.modal.show();
        };
        GenerateCertModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        GenerateCertModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        GenerateCertModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return GenerateCertModalController;
    }());
    asm.GenerateCertModalController = GenerateCertModalController;
    angular
        .module('app')
        .controller('GenerateCertModalController', GenerateCertModalController);
})(asm || (asm = {}));
//# sourceMappingURL=generateCertificate.js.map
var asm;
(function (asm) {
    var UpdateApplianceModalController = (function () {
        function UpdateApplianceModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.settings = {};
            var self = this;
            self.initialize();
        }
        //help url: ASM.urlConfig.help.EditingProxySettings
        UpdateApplianceModalController.prototype.initialize = function () {
            var self = this;
            self.settings = self.$scope.modal.params.settings;
        };
        UpdateApplianceModalController.prototype.testProxy = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.setProxyTest(self.settings).then(function (response) {
                //test successful
                d.resolve();
            }).catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        UpdateApplianceModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.saveApplianceUpdate(self.settings).then(function (response) {
                d.resolve();
                self.close();
            }).catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        UpdateApplianceModalController.prototype.saveApplianceUpdate = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.submitDhcpSettingsForm, { requestObj: update });
        };
        UpdateApplianceModalController.prototype.setProxyTest = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.testProxy, { requestObj: update });
        };
        UpdateApplianceModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        UpdateApplianceModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UpdateApplianceModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return UpdateApplianceModalController;
    }());
    asm.UpdateApplianceModalController = UpdateApplianceModalController;
    angular
        .module('app')
        .controller('UpdateApplianceModalController', UpdateApplianceModalController);
})(asm || (asm = {}));
//# sourceMappingURL=genericController.js.map
var asm;
(function (asm) {
    var EditProxySettingsModalController = (function () {
        function EditProxySettingsModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.settings = {};
            var self = this;
            self.initialize();
        }
        //help url: ASM.urlConfig.help.EditingProxySettings
        EditProxySettingsModalController.prototype.initialize = function () {
            var self = this;
            self.settings = self.$scope.modal.params.httpProxySettings;
        };
        EditProxySettingsModalController.prototype.testProxy = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.setProxyTest(self.settings)
                .then(function (response) {
                //test successful
                self.Dialog(self.$translate.instant('GENERIC_Success'), self.$translate.instant('SETTINGS_TestSuccessful'), true);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            })
                .finally(function () { return d.resolve(); });
        };
        EditProxySettingsModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.saveApplianceUpdate(self.settings).then(function (response) {
                d.resolve();
                self.close();
            }).catch(function (response) { d.resolve(); self.GlobalServices.DisplayError(response.data); });
        };
        EditProxySettingsModalController.prototype.saveApplianceUpdate = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.submitProxyInfoForm, update);
        };
        EditProxySettingsModalController.prototype.setProxyTest = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.testProxy, update);
        };
        EditProxySettingsModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditProxySettingsModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        EditProxySettingsModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return EditProxySettingsModalController;
    }());
    asm.EditProxySettingsModalController = EditProxySettingsModalController;
    angular
        .module('app')
        .controller('EditProxySettingsModalController', EditProxySettingsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=proxySettings.js.map
var asm;
(function (asm) {
    var UploadCertificateConfirmModalController = (function () {
        function UploadCertificateConfirmModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.initialize();
        }
        UploadCertificateConfirmModalController.prototype.initialize = function () {
            var self = this, d = self.$q.defer(), bullets = {};
            self.Loading(d.promise);
            self.$q.all([
                self.getJobList()
                    .then(function (data) {
                    angular.merge(bullets, {
                        numScheduledJobs: _.filter(data.data.responseObj, { status: "scheduled" }).length
                    });
                }),
                self.getCurrentUsersAndJobs()
                    .then(function (data) {
                    angular.merge(bullets, {
                        numUsers: data.data.responseObj.currentusers,
                        numProgressJobs: data.data.responseObj.pendingjobs
                    });
                })
            ])
                .then(function () {
                //passing bullets as a parameter to $translate to interpolate values into translation
                self.message = self.$translate.instant("UPDATE_VIRTUAL_APPLIANCE_Description", bullets);
            })
                .catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            })
                .finally(function () { return d.resolve(); });
        };
        UploadCertificateConfirmModalController.prototype.getJobList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.jobs.getJobList, null);
        };
        UploadCertificateConfirmModalController.prototype.getCurrentUsersAndJobs = function () {
            var self = this;
            return self.$http.post(self.Commands.data.applianceManagement.getCurrentUsersAndJobs, null);
        };
        UploadCertificateConfirmModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        UploadCertificateConfirmModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UploadCertificateConfirmModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return UploadCertificateConfirmModalController;
    }());
    asm.UploadCertificateConfirmModalController = UploadCertificateConfirmModalController;
    angular
        .module('app')
        .controller('UploadCertificateConfirmModalController', UploadCertificateConfirmModalController);
})(asm || (asm = {}));
//# sourceMappingURL=sslConfirmModal.js.map
var asm;
(function (asm) {
    var UploadCertificateModalController = (function () {
        function UploadCertificateModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $rootScope, FileUploader, $window) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.FileUploader = FileUploader;
            this.$window = $window;
            var self = this;
            self.initialize();
        }
        UploadCertificateModalController.prototype.initialize = function () {
            var self = this;
            //Wrap in a timeout to give screen time to render.  ////TODO: Replace with $onInit or similar.
            self.$timeout(function () {
                document.getElementById('idLocationFileUpload').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    var file = element.files[0];
                    self.file = element.value;
                    self.$timeout(function () { self.uploadCert(); }, 10); //Wrap in a timeout to trigger a digest cycle.
                };
            }, 500);
        };
        UploadCertificateModalController.prototype.uploadCert = function () {
            var self = this, fd = new FormData(), d = self.$q.defer();
            self.Loading(d.promise);
            fd.append('file', self.file);
            self.save(fd)
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                .finally(function () { return d.resolve(); });
        };
        UploadCertificateModalController.prototype.saveUpdates = function () {
            var self = this, d = self.$q.defer();
            var modal = self.Modal({
                title: self.$translate.instant('SETUPWIZARD_ProxySettingsTitle'),
                modalSize: 'modal-lg',
                templateUrl: '/views/settings/virtualappliancemanagement/licensingConfirmModal.html',
                controller: 'UploadCertificateConfirmModalController as uploadCertificateConfirmModalController',
                params: {},
                onComplete: function () {
                    self.close();
                    self.$timeout(function () { self.$window.location.href = 'status.html#/status'; }, 500);
                }
            });
            modal.modal.show();
        };
        UploadCertificateModalController.prototype.save = function (form) {
            var self = this, config = {
                directPost: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            };
            return self.$http.post(self.Commands.data.applianceManagement.uploadCertificate, form, config);
        };
        UploadCertificateModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        UploadCertificateModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UploadCertificateModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope', 'FileUploader', '$window'];
        return UploadCertificateModalController;
    }());
    asm.UploadCertificateModalController = UploadCertificateModalController;
    angular
        .module('app')
        .controller('UploadCertificateModalController', UploadCertificateModalController);
})(asm || (asm = {}));
//# sourceMappingURL=uploadCertificate.js.map
var asm;
(function (asm) {
    var AssignUsersModalController = (function () {
        function AssignUsersModalController($http, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, MessageBox) {
            this.$http = $http;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.MessageBox = MessageBox;
            var self = this;
            self.availableUsers = {};
            self.displayedAvailableUsers = {};
            self.includeUsers = false;
            if ($scope.modal.params.selectedUsers) {
                self.selectedUsers = $scope.modal.params.selectedUsers;
            }
            else {
                self.selectedUsers = [];
            }
            if ($scope.modal.params.roleId) {
                self.roleId = $scope.modal.params.roleId;
            }
            else {
                self.roleId = 'standard';
            }
            self.checkAllBox = false;
            self.activate();
        }
        AssignUsersModalController.prototype.activate = function () {
            var self = this;
            if (self.selectedUsers) {
                //TODO: need to confirm how to handle the filter; the below is taken from the old code; refer to ImportDirUsersModalController.ts
                //var filterObj = [{ field: 'roleId', op: '=', opTarget: [self.roleId] }];
                //self.availableUsers.criteriaObj().filterObj( filterObj );
                self.$http.post(self.Commands.data.users.getUsers, null)
                    .then(function (data) {
                    //remove any user that has already been selected (i.e. passed in)
                    var filtered_users = [];
                    angular.forEach(data.data.responseObj, function (u, idx) {
                        //TODO: change the way this is done with the use of jquery grep?
                        var match = $.grep(self.selectedUsers, function (s, i) { return u.id == s.id; });
                        if (match == undefined || match.length == 0) {
                            filtered_users.push(u);
                        } //if not matched, include this user in the list
                    });
                    //apply sort on username
                    var sortedData = _.sortBy(filtered_users, function (n) {
                        return n.username.toLowerCase();
                    });
                    self.availableUsers = angular.copy(sortedData);
                    self.displayedAvailableUsers = [].concat(self.availableUsers);
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            }
        };
        AssignUsersModalController.prototype.checkAll = function () {
            var self = this;
            self.displayedAvailableUsers.forEach(function (user) {
                if (self.checkAllBox) {
                    user.isSelected = true;
                }
                else {
                    user.isSelected = false;
                }
            });
        };
        AssignUsersModalController.prototype.getSelectedUsers = function () {
            var self = this;
            return _.filter(self.availableUsers, { 'isSelected': true });
        };
        AssignUsersModalController.prototype.save = function () {
            var self = this;
            //pass list of selected users back to calling page
            self.includeUsers = true;
            self.$scope.modal.params.includeUsers = self.includeUsers;
            self.$scope.modal.params.selectedUsers = self.getSelectedUsers();
            self.$scope.modal.close();
        };
        AssignUsersModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        AssignUsersModalController.$inject = ['$http', '$scope', '$q', '$translate', 'Loading', 'Dialog',
            'Commands', 'GlobalServices', 'Messagebox'];
        return AssignUsersModalController;
    }());
    asm.AssignUsersModalController = AssignUsersModalController;
    angular
        .module('app')
        .controller('AssignUsersModalController', AssignUsersModalController);
})(asm || (asm = {}));
//# sourceMappingURL=assignUsersModal.js.map
var asm;
(function (asm) {
    /*
    View-
    Parameters: Bundle, type

    Edit-
    Parameters: Bundle, repo, type

    Create-
    Parameters: Repo, type
    */
    var AddEditViewBundleModalController = (function () {
        function AddEditViewBundleModalController(modal, $http, $timeout, $scope, $q, $translate, loading, dialog, Commands, globalServices, constants, FileUploader) {
            this.modal = modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.dialog = dialog;
            this.Commands = Commands;
            this.globalServices = globalServices;
            this.constants = constants;
            this.FileUploader = FileUploader;
            //this is only here for reference of what's in bundle
            this.bundle = {
                packageId: "",
                bundleId: "",
                bundleName: undefined,
                bundleDescription: undefined,
                deviceType: undefined,
                deviceModel: undefined,
                bundleVersion: undefined,
                criticality: "",
            };
            this.config = {};
            this.data = { fileChanged: false };
            var self = this;
            self.initialize();
            var uploader = $scope.uploader = new FileUploader({
                url: 'firmware/savefirmwarebundle',
            });
        }
        AddEditViewBundleModalController.prototype.initialize = function () {
            var self = this;
            self.repo = self.$scope.modal.params.repo;
            self.type = self.$scope.modal.params.type;
            if (self.$scope.modal.params.bundle && self.$scope.modal.params.bundle.firmwarecomponents) {
                delete self.$scope.modal.params.bundle.firmwarecomponents[0].id;
                self.bundle = angular.extend({}, self.bundle, self.$scope.modal.params.bundle, self.$scope.modal.params.bundle.firmwarecomponents[0], { bundleId: self.$scope.modal.params.bundle.id });
            }
            angular.extend(self.bundle, {
                packageId: self.repo.id
            });
            //send in repo
            self.getBundleDevices().then(function (response) {
                response.data.responseObj.unshift(self.constants.genericSelectOption);
                self.bundleDevices = angular.copy(response.data.responseObj);
                if (self.type !== 'view') {
                    self.bundleDeviceChanged(true);
                }
            }).catch(function (response) { self.globalServices.DisplayError(response.data); });
            ////TODO: Replace with $onInit or similar.
            self.$timeout(function () {
                document.getElementById('firmwarepackagefile').onchange = function (evt) {
                    //set whether the file has changed, this 
                    //helps determine if the angular uploader needs to be used or not
                    var element = angular.element(evt.target)[0];
                    self.$timeout(function () { self.data.fileChanged = !!element.files.length; }, 10); //Wrap in a timeout to trigger a digest cycle.
                };
            }, 500);
        };
        AddEditViewBundleModalController.prototype.bundleDeviceChanged = function (preventClearOfDeviceModel) {
            var self = this;
            if (!preventClearOfDeviceModel) {
                self.bundle.deviceModel = undefined;
            }
            self.bundleChildrenOptions = angular.copy(_.find(self.bundleDevices, function (listDevice) {
                return listDevice.id === self.bundle.deviceType;
            }).children);
        };
        AddEditViewBundleModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.loading(d.promise);
            if (self.bundle.deviceType.toLowerCase() === 'storage' || !self.data.fileChanged) {
                //do old fashioned post (not angular-upload) if no file to upload
                self.postFormNoFile(d, self.bundle);
            }
            else {
                //using angular uploader
                self.$scope.uploader.formData.push(self.bundle);
                //set error and success callbacks 
                angular.extend(self.$scope.uploader, {
                    onErrorItem: function (fileItem, response, status, headers) {
                        d.resolve();
                        self.globalServices.DisplayError(response.data);
                    },
                    onCompleteAll: function (fileItem, response, status, headers) {
                        self.close(d);
                    },
                    onBeforeUploadItem: function (item) {
                        item.formData = angular.copy(item.uploader.formData);
                    }
                });
                self.$scope.uploader.uploadAll();
            }
        };
        AddEditViewBundleModalController.prototype.postFormNoFile = function (d, bundle) {
            var self = this;
            var fd = new FormData();
            fd.append('packageId', bundle.packageId);
            fd.append('bundleId', bundle.bundleId);
            fd.append('bundleName', bundle.bundleName);
            fd.append('bundleDescription', bundle.bundleDescription);
            fd.append('deviceType', bundle.deviceType);
            fd.append('deviceModel', bundle.deviceModel);
            fd.append('bundleVersion', bundle.bundleVersion);
            bundle.deviceType.toLowerCase() === 'switch' && fd.append('criticality', bundle.criticality);
            fd.append('file', "");
            self.saveBundle(fd).then(function () {
                self.close(d);
            });
        };
        AddEditViewBundleModalController.prototype.getBundleDevices = function () {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.getFirmwareBundleDevices, {});
        };
        AddEditViewBundleModalController.prototype.saveBundle = function (form) {
            var self = this;
            self.config = {
                directPost: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            };
            return self.$http.post(self.Commands.data.firmwarepackages.saveFirmwareBundle, form, self.config);
        };
        AddEditViewBundleModalController.prototype.setProxyTest = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.initialSetup.testProxy, update);
        };
        AddEditViewBundleModalController.prototype.close = function (d) {
            var self = this;
            d && d.resolve();
            self.$scope.modal.close();
        };
        AddEditViewBundleModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        AddEditViewBundleModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants', 'FileUploader'];
        return AddEditViewBundleModalController;
    }());
    asm.AddEditViewBundleModalController = AddEditViewBundleModalController;
    angular
        .module('app')
        .controller('AddEditViewBundleModalController', AddEditViewBundleModalController);
})(asm || (asm = {}));
//# sourceMappingURL=addEditViewBundle.js.map
var asm;
(function (asm) {
    var AddFirmwareBundleModalController = (function () {
        function AddFirmwareBundleModalController(modal, $http, $timeout, $scope, $q, $translate, loading, dialog, Commands, globalServices) {
            this.modal = modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.dialog = dialog;
            this.Commands = Commands;
            this.globalServices = globalServices;
            this.repo = { packagesource: "import" };
            this.repoFile = { file: null };
            this.ftpSource = 'ftp.dell.com';
            this.submitForm = false;
            var self = this;
            self.initialize();
        }
        //help url: ASM.urlConfig.help.EditingProxySettings
        AddFirmwareBundleModalController.prototype.initialize = function () {
            var self = this;
            //Wrap in a timeout to give screen time to render.  ////TODO: Replace with $onInit or similar.
            self.$timeout(function () {
                document.getElementById('idLocationFileUpload').onchange = function (evt) {
                    console.log(evt);
                    var element = angular.element(evt.target)[0];
                    self.repoFile.fileData = element.value;
                    self.repoFile.file = element.files[0];
                    self.$timeout(function () { self.uploadFile(self.repoFile.fileData); }, 10); //Wrap in a timeout to trigger a digest cycle.
                };
            }, 500);
        };
        AddFirmwareBundleModalController.prototype.activate = function () {
        };
        AddFirmwareBundleModalController.prototype.testConnection = function () {
            var self = this, d = self.$q.defer();
            self.loading(d.promise);
            self.setProxyTest(self.repo)
                .then(function (response) {
                //test successful
                if (response.data.responseObj === "Success") {
                    self.dialog(self.$translate.instant('SETTINGS_Repositories_Success'), self.$translate.instant('SETTINGS_Repositories_TestSuccess'), true);
                }
                else {
                    self.dialog(self.$translate.instant('SETTINGS_Repositories_Failure'), self.$translate.instant('SETTINGS_Repositories_TestFailed'), true);
                }
            })
                .catch(function (response) {
                self.globalServices.DisplayError(response.data);
            })
                .finally(function () { return d.resolve(); });
        };
        AddFirmwareBundleModalController.prototype.save = function () {
            var self = this, d = self.$q.defer();
            self.cleanForms(self.repo);
            self.loading(d.promise);
            self.savePackage(self.repo).then(function (response) {
                d.resolve();
                self.close();
            }).catch(function (response) {
                d.resolve();
                self.globalServices.DisplayError(response.data);
            });
        };
        AddFirmwareBundleModalController.prototype.containsFile = function () {
            return !!$('input#idLocationFileUpload').val().length;
        };
        AddFirmwareBundleModalController.prototype.uploadFile = function (file) {
            var self = this, d = self.$q.defer();
            self.upload(file).then(function (response) {
                response.data.responseObj.packagesource = self.repo.packagesource;
                self.repo = response.data.responseObj;
            }).catch(function (response) {
                self.globalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        AddFirmwareBundleModalController.prototype.cleanForms = function (repo) {
            var self = this;
            if (repo.packagesource === 'import' || repo.packagesource === 'file') {
                repo.filepath = repo.username = repo.password = "";
            }
            else {
                // 'network'
                repo.source = self.ftpSource;
            }
        };
        AddFirmwareBundleModalController.prototype.savePackage = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.saveFirmwarePackage, update);
        };
        AddFirmwareBundleModalController.prototype.setProxyTest = function (update) {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.testFirmwarePackage, update);
        };
        AddFirmwareBundleModalController.prototype.upload = function (file) {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.uploadFirmwarePackage, { requestObj: file });
        };
        AddFirmwareBundleModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddFirmwareBundleModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        AddFirmwareBundleModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return AddFirmwareBundleModalController;
    }());
    asm.AddFirmwareBundleModalController = AddFirmwareBundleModalController;
    angular
        .module('app')
        .controller('AddFirmwareBundleModalController', AddFirmwareBundleModalController);
})(asm || (asm = {}));
//# sourceMappingURL=addFirmwareBundle.js.map
var asm;
(function (asm) {
    var EditRepoModalController = (function () {
        function EditRepoModalController(modal, $http, $timeout, $scope, $q, $translate, loading, dialog, commands, globalServices, constants, submitForm, $rootScope) {
            this.modal = modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.loading = loading;
            this.dialog = dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.constants = constants;
            this.submitForm = submitForm;
            this.$rootScope = $rootScope;
            this.repo = {};
            var self = this;
            self.initialize();
        }
        EditRepoModalController.prototype.initialize = function () {
            var self = this;
            self.repo = self.$scope.modal.params.repo;
            self.type = self.$scope.modal.params.type;
        };
        EditRepoModalController.prototype.testConnection = function (isValid) {
            var self = this;
            if (!isValid) {
                self.submitForm = true;
                return;
            }
            var d = self.$q.defer();
            self.loading(d.promise);
            self.testFileRepo(self.repo)
                .then(function (response) {
                if (response.data.responseObj === "Success") {
                    self.dialog(self.$translate.instant('SETTINGS_Repositories_Success'), self.$translate.instant('SETTINGS_Repositories_TestSuccess'), true);
                }
                else {
                    self.dialog(self.$translate.instant('SETTINGS_Repositories_Failure'), self.$translate.instant('SETTINGS_Repositories_TestFailed'), true);
                }
            })
                .catch(function (response) { self.globalServices.DisplayError(response.data); })
                .finally(function () { return d.resolve(); });
        };
        EditRepoModalController.prototype.save = function (isValid) {
            var self = this;
            if (!isValid) {
                self.submitForm = true;
                return;
            }
            var d = self.$q.defer();
            self.loading(d.promise);
            if (self.type === 'sync') {
                self.syncRepo(self.repo).then(function (response) {
                    d.resolve();
                    self.close();
                }).catch(function (response) {
                    d.resolve();
                    self.globalServices.DisplayError(response.data);
                });
            }
            else {
                self.saveRepo(self.repo).then(function (response) {
                    d.resolve();
                    self.close();
                }).catch(function (response) {
                    d.resolve();
                    self.globalServices.DisplayError(response.data);
                });
            }
        };
        EditRepoModalController.prototype.saveRepo = function (repo) {
            var self = this;
            return self.$http.post(self.commands.data.repository.saveRepository, { requestObj: repo });
        };
        EditRepoModalController.prototype.testFileRepo = function (repo) {
            var self = this;
            return self.$http.post(self.commands.data.repository.testFileRepository, { requestObj: repo });
        };
        EditRepoModalController.prototype.syncRepo = function (repo) {
            var self = this;
            return self.$http.post(self.commands.data.repository.syncRepository, { requestObj: repo });
        };
        EditRepoModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditRepoModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        EditRepoModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants', '$rootScope'];
        return EditRepoModalController;
    }());
    asm.EditRepoModalController = EditRepoModalController;
    angular
        .module('app')
        .controller('EditRepoModalController', EditRepoModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editRepoModal.js.map
var asm;
(function (asm) {
    var ShowBundleController = (function () {
        //public availableCredentials: any[];
        //public editMode: any;
        //public credentialId: any;
        //public credentialName: any;
        //public submitForm: boolean;
        function ShowBundleController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.viewModel = {};
            var self = this;
            this.viewData = {
                availableCredentials: [
                    { "id": "notselected", "name": "Select a Credential Type..." },
                    { "id": "chassis", "name": "Chassis" },
                    { "id": "server", "name": "Server" },
                    { "id": "iom", "name": "Switch" },
                    { "id": "vcenter", "name": "vCenter" },
                    { "id": "scvmm", "name": "SCVMM" },
                    { "id": "storage", "name": "Storage" },
                    { "id": "em", "name": "Element Manager" }
                ],
                credentialId: $scope.modal.params.id,
                credentialName: '',
                submitForm: false,
                model: $scope.modal.params.model
            };
            // notselected = 'Select a Credential Type...'
            self.viewModel.typeId = 'notselected';
            self.activate();
        }
        ShowBundleController.prototype.activate = function () {
            var self = this;
            if (self.viewData.credentialId) {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
                // exsits - go get it
                var data;
                data = { 'id': self.viewData.credentialId };
                self.$http.post(self.Commands.data.credential.getCredentialById, { requestObj: data }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                    self.viewModel = data.data.responseObj;
                    self.viewData.credentialName = _.find(self.viewData.availableCredentials, function (o) { return o.id == self.viewModel.typeId; }).name;
                    deferred.resolve();
                })
                    .catch(function (data) {
                    //need to handle error
                    deferred.resolve();
                    //error is in data
                    self.GlobalServices.DisplayError(data.data);
                });
            }
            else {
                // new item, set some defaults
                self.viewModel.candelete = true;
                self.viewModel.canedit = true;
                self.viewModel.communityString = "public";
                self.viewModel.credentialProtocol = "ssh";
                self.viewModel.enableCertificateCheck = false;
                self.viewModel.numberOfDevices = "0";
                self.viewModel.username = "root";
            }
        };
        ShowBundleController.prototype.doSave = function (formHasErrors) {
            var self = this;
            if (formHasErrors)
                return;
            var myScope = this.$scope;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            //this will do an update/create
            self.$http.post(self.Commands.data.credential.saveCredential, { requestObj: self.viewModel }).then(function (data) {
                //self.$http.post('bogus', { requestObj: self.viewModel }).then(function (data: any) {
                deferred.resolve();
                myScope.modal.close();
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ShowBundleController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'loading', 'dialog', 'Commands', 'GlobalServices'];
        return ShowBundleController;
    }());
    asm.ShowBundleController = ShowBundleController;
    angular
        .module('app')
        .controller('ShowBundleController', ShowBundleController);
})(asm || (asm = {}));
//# sourceMappingURL=showBundle.js.map
var asm;
(function (asm) {
    var ViewBundlesController = (function () {
        //public availableCredentials: any[];
        //public editMode: any;
        //public credentialId: any;
        //public credentialName: any;
        //public submitForm: boolean;
        function ViewBundlesController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.viewModel = {};
            var self = this;
            this.viewData = {
                availableCredentials: [
                    { "id": "notselected", "name": "Select a Credential Type..." },
                    { "id": "chassis", "name": "Chassis" },
                    { "id": "server", "name": "Server" },
                    { "id": "iom", "name": "Switch" },
                    { "id": "vcenter", "name": "vCenter" },
                    { "id": "scvmm", "name": "SCVMM" },
                    { "id": "storage", "name": "Storage" },
                    { "id": "em", "name": "Element Manager" }
                ],
                credentialId: $scope.modal.params.id,
                credentialName: '',
                submitForm: false,
                model: $scope.modal.params.model
            };
            // notselected = 'Select a Credential Type...'
            self.viewModel.typeId = 'notselected';
            self.activate();
        }
        ViewBundlesController.prototype.activate = function () {
            var self = this;
            if (self.viewData.credentialId) {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
                // exsits - go get it
                var data;
                data = { 'id': self.viewData.credentialId };
                self.$http.post(self.Commands.data.credential.getCredentialById, { requestObj: data }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                    self.viewModel = data.data.responseObj;
                    self.viewData.credentialName = _.find(self.viewData.availableCredentials, function (o) { return o.id == self.viewModel.typeId; }).name;
                    deferred.resolve();
                })
                    .catch(function (data) {
                    //need to handle error
                    deferred.resolve();
                    //error is in data
                    self.GlobalServices.DisplayError(data.data);
                });
            }
            else {
                // new item, set some defaults
                self.viewModel.candelete = true;
                self.viewModel.canedit = true;
                self.viewModel.communityString = "public";
                self.viewModel.credentialProtocol = "ssh";
                self.viewModel.enableCertificateCheck = false;
                self.viewModel.numberOfDevices = "0";
                self.viewModel.username = "root";
            }
        };
        ViewBundlesController.prototype.doSave = function (formHasErrors) {
            var self = this;
            if (formHasErrors)
                return;
            var myScope = this.$scope;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            //this will do an update/create
            self.$http.post(self.Commands.data.credential.saveCredential, { requestObj: self.viewModel }).then(function (data) {
                //self.$http.post('bogus', { requestObj: self.viewModel }).then(function (data: any) {
                deferred.resolve();
                myScope.modal.close();
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ViewBundlesController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'loading', 'dialog', 'Commands', 'GlobalServices'];
        return ViewBundlesController;
    }());
    asm.ViewBundlesController = ViewBundlesController;
    angular
        .module('app')
        .controller('ViewBundlesController', ViewBundlesController);
})(asm || (asm = {}));
//# sourceMappingURL=showBundles.js.map
var asm;
(function (asm) {
    var ViewBundleDetailsController = (function () {
        function ViewBundleDetailsController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, $rootScope) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.viewModel = {};
            var self = this;
            this.viewData = {
                firmwarePackageId: '',
                firmwareBundleId: '',
                displayedData: {},
                viewType: ''
            };
            this.viewData.firmwarePackageId = $scope.modal.params.firmwarePackageId;
            this.viewData.firmwareBundleId = $scope.modal.params.firmwareBundleId;
            this.viewData.viewType = $scope.modal.params.viewType;
            self.refresh();
        }
        ViewBundleDetailsController.prototype.activate = function () {
        };
        ViewBundleDetailsController.prototype.refresh = function () {
            var self = this;
            self.$rootScope.$broadcast('clearErrors');
            //self.GlobalServices.ClearErrors(self.errors);
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            //{ "requestObj":{ "firmwarePackageId":"a4685379-4124-4264-8cb7-79643b496b92", "firmwareBundleId":"a13d9cf6-9fe0-420b-a230-13d8c8a43176" } }
            var postData = {
                'firmwarePackageId': self.viewData.firmwarePackageId,
                'firmwareBundleId': self.viewData.firmwareBundleId
            };
            self.$http.post(self.Commands.data.firmwarepackages.getFirmwareBundleById, { requestObj: postData }).then(function (data) {
                self.viewModel = data.data.responseObj;
                self.viewData.displayedData = [].concat(self.viewModel);
                //self.viewData.displayedData = data.data.responseObj;
                deferred.resolve();
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //data object is always empty
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ViewBundleDetailsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ViewBundleDetailsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope'];
        return ViewBundleDetailsController;
    }());
    asm.ViewBundleDetailsController = ViewBundleDetailsController;
    angular
        .module('app')
        .controller('ViewBundleDetailsController', ViewBundleDetailsController);
})(asm || (asm = {}));
//# sourceMappingURL=viewBundleDetails.js.map
var asm;
(function (asm) {
    var ViewBundlesController = (function () {
        function ViewBundlesController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, $rootScope) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.viewModel = {};
            var self = this;
            this.viewData = {
                firmwarePackageId: '',
                displayedData: {},
                selectedPackageBundle: '',
                selectedCustomBundle: '',
                viewBundles: 'firmware'
            };
            this.viewData.firmwarePackageId = $scope.modal.params.id;
            self.refresh();
        }
        ViewBundlesController.prototype.activate = function () {
        };
        ViewBundlesController.prototype.refresh = function () {
            var self = this;
            self.$rootScope.$broadcast('clearErrors');
            //self.GlobalServices.ClearErrors(self.errors);
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            var postData = { 'id': self.viewData.firmwarePackageId };
            self.$http.post(self.Commands.data.firmwarepackages.getFirmwarePackageById, { requestObj: postData }).then(function (data) {
                self.viewModel = data.data.responseObj;
                self.viewData.displayedData = [].concat(self.viewModel);
                //self.viewData.displayedData = data.data.responseObj;
                deferred.resolve();
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //data object is always empty
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ViewBundlesController.prototype.onSelectedPackageBundle = function (selectedItem) {
            var self = this;
            self.viewData.selectedPackageBundle = selectedItem;
        };
        ViewBundlesController.prototype.onSelectedCustomBundle = function (selectedItem) {
            var self = this;
            self.viewData.selectedCustomBundle = selectedItem;
        };
        ViewBundlesController.prototype.onClickViewPackageBundleDetails = function (selectedItem) {
            var self = this;
            var theModal = this.Modal({
                title: selectedItem.bundleName,
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/viewBundleDetails.html',
                controller: 'ViewBundleDetailsController as vbd',
                params: {
                    firmwarePackageId: self.viewData.firmwarePackageId,
                    firmwareBundleId: selectedItem.id,
                    viewType: self.viewData.viewBundles
                },
                onComplete: function (modalScope) {
                    self.refresh(false);
                }
            });
            theModal.modal.show();
        };
        ViewBundlesController.prototype.onClickViewCustomBundleDetails = function (selectedItem) {
            var self = this;
            var modal = this.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_AddCustomBundle'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/addEditViewBundle.html',
                controller: 'AddEditViewBundleModalController as c',
                params: {
                    repo: angular.copy(self.viewModel),
                    bundle: angular.copy(selectedItem),
                    type: 'view'
                },
                onComplete: function () {
                    self.refresh(false);
                }
            });
            modal.modal.show();
        };
        ViewBundlesController.prototype.onClickEditCustomBundleDetails = function (selectedItem) {
            var self = this;
            var modal = this.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_AddCustomBundle'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/addEditViewBundle.html',
                controller: 'AddEditViewBundleModalController as c',
                params: {
                    repo: angular.copy(self.viewModel),
                    bundle: angular.copy(selectedItem),
                    type: 'edit'
                },
                onComplete: function () {
                    self.refresh(false);
                }
            });
            modal.modal.show();
        };
        ViewBundlesController.prototype.onClickDeleteCustomBundle = function (selectedItem) {
            var self = this;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            var postData = {
                'packageId': self.viewData.firmwarePackageId,
                'bundleId': selectedItem.id
            };
            //this will do an update/create
            self.$http.post(self.Commands.data.firmwarepackages.removeFirmwareBundle, { requestObj: postData }).then(function (data) {
                //self.$http.post('bogus', { requestObj: self.viewModel }).then(function (data: any) {
                deferred.resolve();
                self.refresh();
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ViewBundlesController.prototype.doSave = function (formHasErrors) {
            var self = this;
            if (formHasErrors)
                return;
            var myScope = this.$scope;
        };
        ViewBundlesController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ViewBundlesController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$rootScope'];
        return ViewBundlesController;
    }());
    asm.ViewBundlesController = ViewBundlesController;
    angular
        .module('app')
        .controller('ViewBundlesController', ViewBundlesController);
})(asm || (asm = {}));
//# sourceMappingURL=viewBundles.js.map
var asm;
(function (asm) {
    var AboutController = (function () {
        function AboutController($http, $timeout, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, $routeParams, constants, $location, $window) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$routeParams = $routeParams;
            this.constants = constants;
            this.$location = $location;
            this.$window = $window;
            this.someData = 'hello page';
            var self = this;
            self.refresh();
        }
        AboutController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.$http.post(self.Commands.data.about.getAboutData, {}).then(function (data) {
                self.about = data.data.responseObj;
                console.log(self.about);
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        AboutController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$routeParams', 'constants', '$location', '$window'];
        return AboutController;
    }());
    asm.AboutController = AboutController;
    angular
        .module("app")
        .controller("AboutController", AboutController);
})(asm || (asm = {}));
//# sourceMappingURL=about.js.map
angular.module('app')
    .controller('AppController',
    [
       '$rootScope', '$q', '$filter', '$route', '$window', '$http', '$templateCache', '$scope', '$log', '$resource', '$translate', 'GlobalServices', '$location', 'Commands', '$cookies', 'Modal', 'localStorageService', 'SearchService', 'Dialog', '$timeout',
        function ($rootScope, $q, $filter, $route, $window, $http, $templateCache, $scope, $log, $resource, $translate, GlobalServices, $location, Commands, $cookies, Modal, localStorageService, SearchService, Dialog, $timeout) {

            $scope.navigation = GlobalServices.navigation;
            $scope.$on('navigationUpdated', function (evt, navigation) {
                $scope.navigation = navigation;
            });

            $scope.frontPageImages = {
                first: true,
                second: false,
                third: false
            };

            $scope.data = {
                showPinNavigation: true,
                alerts: [
                    {
                        id: 1,
                        description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',
                        severity: 'warning',
                        source: 'admin',
                        date: "12/31/2015 12:59 PM"
                    },
                    {
                        id: 1,
                        description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',
                        severity: 'critical',
                        source: 'admin',
                        date: "12/31/2015 12:59 PM"
                    }
                ]
            };
            
            $rootScope.$on('pin', function () {
                $scope.pinnav = true;
            });

            $rootScope.$on('unpin', function () {
                $scope.pinnav = false;
            });

            $scope.updateNavigation = function (menuItems) {
                var newMenu = [];
                //Add the first menu item (Home) to the top.  If there is only one Global menu item, save it for the end.
                if (GlobalServices.navigation.length >= 2) newMenu.push(GlobalServices.navigation[0]);
                menuItems.sort(function (a, b) {
                    var compare = 0;
                    if (a['order'] == undefined || b['order'] == undefined) compare = 0;
                    else compare = a['order'] - b['order'];
                    if (compare === 0) {
                        if (a['label'] < b['label']) compare = -1;
                        if (a['label'] > b['label']) compare = 1;
                    }
                    return compare;
                });
                newMenu = newMenu.concat(menuItems);
                //Add any other global menu items to the end (start with 0 if there is only 1, start with 1 if there are at least two)
                for (var i = (GlobalServices.navigation.length >= 2) ? 1 : 0; i < GlobalServices.navigation.length; i++) {
                    newMenu.push(GlobalServices.navigation[i]);
                }
                $scope.navigation = newMenu;
                if ($location.path() == undefined || $location.path() === '') {
                    var newHash = $scope.navigation[0]['href'];
                    if (newHash.indexOf('#') === 0) newHash = newHash.slice(1, newHash.length); //Strip off the leading hash
                    if (newHash.indexOf('/') !== 0) newHash = '/' + newHash; //Ensure path starts with a slash
                    $location.path(newHash);
                }
            };

            $scope.about = function () {
                var aboutModal = Modal({
                    modalSize: 'modal-md',
                    templateUrl: 'views/about.html',
                    controller: 'AboutController as aboutController'
                });

                aboutModal.modal.show();
                aboutModal.$on('modal:closed', function () {
                    //$scope.initialize();
                });
            };

            $scope.help = function () {
                GlobalServices.showHelp();
            };

            $scope.logout = function () {


                $http.post(Commands.data.session.doLogout, {})
                    .success(function (data, status, headers, config) {
                        delete $window.sessionStorage.token;
                        window.location = data.responseObj.url;
                    })
                    .error(function (data, status, headers, config) {
                        delete $window.sessionStorage.token;
                        window.location = '/';
                    });
            };

            $scope.editUser = function () {

                var editUser = Modal({
                    title: $translate.instant('SETTINGS_EditUser'),
                    modalSize: 'modal-md',
                    templateUrl: 'views/settings/modals/edituser.html',
                    controller: 'EditUserController',
                    params: {
                        user: angular.copy($scope.data.currentUser)
                    }
                });

                editUser.modal.show();
                editUser.$on('modal:closed', function () {
                    $scope.initialize();
                }); //When the modal is closed, update the data.

            };


            $scope.onSearch = function (term, limit) {
                return SearchService.search(term, 5);
            };

            $scope.mockServices = function () {
                //$http.get(Commands.mockServices)
                //    .success(function (data, status, headers, config) {
                //        $route.reload();
                //        $rootScope.$emit('MenuTop::Hide', 'AppController.mockServices()');
                //    })
                //    .error(function (data, status, headers, config) {
                //        $route.reload();
                //        $rootScope.$emit('MenuTop::Hide', 'AppController.mockServices()');
                //    });
            };

            $scope.createTemplate = function() {
                var createTemplateModal = Modal({
                    title: $translate.instant('TEMPLATES_CreateTemplate'),
                    modalSize: 'modal-lg',
                    templateUrl: 'views/createtemplate.html',
                    controller: 'CreateTemplateModalController as createTemplateModalController',
                    params: {
                        type: 'new'
                    }
                });
                createTemplateModal.modal.show();
            }

            $scope.addExistingService = function () {
                var addServiceWizard = Modal({
                    title: $translate.instant('SERVICE_ADD_EXISTING_SERVICE_Title'),
                    modalSize: 'modal-lg',
                    templateUrl: 'views/services/AddExistingService.html',
                    controller: 'AddExistingServiceController as addExistingServiceController',
                    params: {
                    },
                    onCancel: function () {
                        var confirm = Dialog($translate.instant('GENERIC_Confirm'), $translate.instant('SERVICE_ADD_EXISTING_SERVICE_Cancel_Confirmation'));
                        confirm.then(function (modalScope) {
                            addServiceWizard.modal.dismiss();
                        });
                    }
                });
                addServiceWizard.modal.show();
            }

            $scope.deployNewService = function() {
                var addServiceWizard = Modal({
                    title: $translate.instant('SERVICES_NEW_SERVICE_DeployService'),
                    modalSize: 'modal-lg',
                    templateUrl: 'views/services/DeployService/DeployServiceWizard.html',
                    controller: 'DeployServiceWizard as deployServiceWizard',
                    params: {
                    },

                    onCancel: function() {
                        Dialog($translate.instant('GENERIC_Confirm'), $translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function() {
                            addServiceWizard.modal.close();
                        });
                    }
                });
                addServiceWizard.modal.show();
            }

            $scope.setActiveMenu = function () {
                //check for current page and set nav item to active class
                var currentpage = '#' + $location.path();

                angular.forEach($scope.navigation, function (menuItem) {
                    if (currentpage === menuItem.href) {
                        menuItem.activeitem = true;
                    } else {
                        menuItem.activeitem = false;
                    }

                    if (menuItem.children) {
                        angular.forEach(menuItem.children, function (subMenuItem) {
                            if (currentpage === subMenuItem.href) {
                                subMenuItem.activeitem = true;
                            } else {
                                subMenuItem.activeitem = false;
                            }
                        });
                    }
                });
            };
            //set active navigation by tabs
            $rootScope.$on('$locationChangeSuccess', function () { $scope.setActiveMenu(); });
            //$rootScope.$on('$routeChangeSuccess', function () { $scope.setActiveMenu(); });

            $scope.loadServiceData = function () {

                $http.post(Commands.data.dashboard.getServicesDashboardData, {})
                    .success(function (data, status, headers, config) {

                        var response = data.responseObj;

                        //'Error', red, self.viewmodel.servicesData.servicecriticalcount()
                        //'Healthy', green, self.viewmodel.servicesData.servicesuccesscount()
                        //'In Progress', unknown/blue, self.viewmodel.servicesData.serviceunknowncount()
                        //'Warning', yellow, self.viewmodel.servicesData.servicewarningcount()
                        //'Cancelled', orange, self.viewmodel.servicesData.servicecancelledcount()

                        $rootScope.ASM.servicesData = {
                            cancelled: response.servicecancelledcount,
                            error: response.servicecriticalcount,
                            healthy: response.servicesuccesscount,
                            inprogress: response.serviceunknowncount,
                            warning: response.servicewarningcount
                        };

                        window.setTimeout(function () { $scope.loadServiceData() }, 30000);

                    })
                    .error(function (data, status) {

                        //$scope.displayError(status);
                        window.setTimeout(function () { $scope.loadServiceData() }, 30000);

                    });
            };
            $scope.initialize = function () {

                $scope.loadServiceData();

                //load current user, get role, send role in to get list of permissions
                $http.post(Commands.GenerateUrl(Commands.data.users.getCurrentUser, {}))
                    .success(function (data) {

                        var user = data.responseObj;
                        $scope.data.currentUser = angular.copy(user);
                        localStorageService.set('ASM.currentUserObject', angular.copy(user));


                        //show password modal
                        if ($scope.data.currentUser.showdefaultpasswordprompt && (!$window.sessionStorage.passwordDialogShown || $window.sessionStorage.passwordDialogShown !== 'true')) {
                            $window.sessionStorage.passwordDialogShown = 'true';

                            var self = this;

                            var defaultPasswordModal = Modal({
                                title: $translate.instant('DEFAULTPASSWORD_Title'),
                                //modalSize: 'modal-sm',
                                templateUrl: 'views/defaultPasswordModal.html',
                                controller: 'DefaultPasswordModalController as defaultPassword',
                                onComplete: function (modalScope) {
                                    if (defaultPasswordModal.defaultPassword.checked) {

                                        $scope.data.currentUser.showdefaultpasswordprompt = false;

                                        $http.post(Commands.data.users.saveUser, $scope.data.currentUser)
                                            .success(function (data) {

                                            });

                                    }
                                }
                            });

                            defaultPasswordModal.modal.show();

                        }
                    })
                    .error(function () {
                    });


                $(document).on('shown.bs.tab', function (e) {

                    //fire resize event on tab change to give time to repaint modal static backdrop
                    window.setTimeout(function () {
                        $(window).trigger('resize');
                    }, 500);

                    var tab = e.target;
                    var key = $(tab).closest('.nav-tabs')[0].id;
                    var val = $(tab).attr('aria-controls');
                    if (!val)
                        val = $(tab).attr('data-target').replace('#', '');

                    var tabstate = localStorageService.get('tabstate') || {};

                    tabstate[key] = val;
                    localStorageService.set('tabstate', tabstate);

                });


            };

            $scope.initialize();

        }
    ])


;

angular.module('app-login')
    .controller('AppLoginController',
    [
        '$window', '$http', '$scope', '$log', '$resource', '$translate', 'localStorageService', 'Commands', '$cookies',
        function ($window, $http, $scope, $log, $resource, $translate, localStorage, Commands, $cookies) {

            $scope.verifyingCredentials = false;
            $scope.failedLogin = false;
            $scope.message = '';
            $scope.shouldNextButtonBeEnabled = false;

            var rememberUser = function (userdata) {
                if (userdata && $scope.data.settings.rememberMe) {
                    var currentUser = {
                        username: userdata.username,
                        domain: userdata.domain
                    };

                    localStorage.set('ASM.currentUser', currentUser);
                } else {
                    localStorage.remove('ASM.currentUser');
                }
            };

            $scope.data = {
                loginalert: true,
                settings: {
                    username: '',
                    rememberMe: false,
                    applicationName: $translate.instant('ApplicationTitle'),
                    //applicationLogo: 'images/icee_icon.svg',
                    appIcon: 'ci-logo-asm',
                    messageIcon: '',
                    messageIconColor: '',
                    messageText: 'Powered by Dell',
                    signInLabel: $translate.instant('GENERIC_Login'),
                    showRememberMe: true,
                    rememberMeText: $translate.instant('GENERIC_RememberMe')
                }
            };

            $scope.displayError = function (status, message) {

                delete $window.sessionStorage.token;

                var error = $translate.instant('GENERIC_LoginFailed');

                if (status === 404) {
                    error = $translate.instant('GENERIC_NoConnection');
                }

                if (status == 200 && message) {
                    error = message;
                }

                $scope.data.settings.isSpinning = false;
                $scope.failedLogin = true;
                $scope.data.settings.showMessage = true;
                $scope.data.settings.messageText = error;

            };

            $scope.actions = {
                clickLogin: function (userdata) {

                    $scope.data.settings.isSpinning = true;
                    $scope.data.settings.showMessage = false;

                    $scope.verifyingCredentials = true;

                    localStorage.clearAll();

                    $http.post(Commands.data.session.doLogin, { Username: userdata.username, Password: userdata.password })
                        .success(function (data, status, headers, config) {

                            var response = data.responseObj;

                            if (!response.success) {
                                var errorMessage = data.errorObj && data.errorObj.errorMessage ? data.errorObj.errorMessage : null;
                                $scope.displayError(status, errorMessage);
                                return;
                            }

                            rememberUser(userdata); //Only remember if successful
                            $scope.verifyingCredentials = false;

                            $window.sessionStorage.token = headers('JSESSIONID');
                            $window.sessionStorage.currentUser = userdata.username;

                            $scope.verifyingCredentials = false;

                            $cookies.put('username', userdata.username);

                            var url = response.url;

                            if (response.route.length > 0) {
                                url += '#' + response.route;
                                url = url.replace('##', '#');
                            }
                            window.location = url;


                        })
                        .error(function (data, status) {

                            $scope.displayError(status, null);

                        });

                }
            };

            $scope.initialize = function () {
                var currentUser = localStorage.get('ASM.currentUser');
                if (currentUser != undefined) {
                    $scope.data.settings.username = currentUser.username;
                    $scope.data.settings.rememberMe = true;
                }

                localStorage.remove('ASM.currentUserObject');

                ////dummy call to force certificate acceptance (can be replaced with get version eventually)
                //$http.get(Commands.users)
                //    .success(function(data, status, headers, config) {
                //    })
                //    .error(function(data, status, headers, config) {
                //    });


            };
            $scope.initialize();
        }
    ])


;

angular.module('app')
    .controller('DashboardController',
    [
        '$scope', '$rootScope', '$route', '$http', '$compile', '$window', '$log', '$q', '$location', '$translate', '$timeout', 'Commands', 'Modal', 'Messagebox', 'GlobalServices',
        function ($scope, $rootScope, $route, $http, $compile, $window, $log, $q, $location, $translate, $timeout, Commands, Modal, MessageBox, GlobalServices) {

            //HACK: Used to force discovery to show
            $scope.showDiscovery = $route.current.params.showDiscovery === 'true' || false;
            if ($rootScope.discoveryShown) $scope.showDiscovery = false;

            $scope.data = {
                //chart: true,
                //devicealerts: false,

                services: [],
                servers: [],
                alerts: [
                    { state: 'critical', message: 'Server 6 cabling error. View Details', timestamp: new Date() },
                    { state: 'warning', message: '2 device warnings found.', timestamp: new Date() }
                ],
                activities: [
                    { state: '', message: 'Service VMware Cluster 2 has deployed. 4 Servers, 1TB Storage.', timestamp: new Date() },
                    { state: '', message: 'Service VMware ESXi 13 is deploying.', timestamp: new Date() }
                ],
                tickets: [
                    { message: 'Update on Ticket #12345 for Asset ABCDEF', timestamp: new Date() },
                    { message: 'Update on Ticket #12345 for Asset ABCDEF', timestamp: new Date() }
                ],
                entityClicked: '',
                selectedService: null,
                selectedServer: null,
                selectedStorage: null,
                selectedNetwork: null,
                serverExpanded: false,
                storageExpanded: false,
                networkExpanded: false,
                LeftStorageActive: false,
                LeftComputeActive: false,
                LeftFabricActive: false,
                messages: '',
                poll: null
            };

            $scope.viewmodel = {
                getPopoverTemplate: function () {
                    var html = '<div class="popover popover-blue" role="tooltip"><div class="popover-content"></div></div>';
                    return html;
                },

                getSolutionAlerts: function () {

                    var alerts = [];
                    angular.forEach($scope.data.services, function (service) {

                        angular.forEach(service.servers, function (server) {
                            alerts = alerts.concat(server.alerts || []);
                        });

                        angular.forEach(service.storage, function (storage) {
                            alerts = alerts.concat(storage.alerts || []);
                        });
                    });

                    alerts = _.sortBy(alerts, 'createdTime').reverse();
                    return alerts;
                },

                getServiceAlerts: function (service) {

                    var alerts = [];

                    angular.forEach(service.servers, function (server) {
                        alerts = alerts.concat(server.alerts || []);
                    });

                    angular.forEach(service.storage, function (storage) {
                        alerts = alerts.concat(storage.alerts || []);
                    });

                    alerts = _.sortBy(alerts, 'createdTime').reverse();
                    return alerts;
                },

                getServiceAlertsAllServers: function (service) {

                    var alerts = [];

                    angular.forEach(service.servers, function (server) {
                        alerts = alerts.concat(server.alerts || []);
                    });

                    alerts = _.sortBy(alerts, 'createdTime').reverse();

                    return alerts;
                }
            };

            var ws;
            $scope.pinnav = Boolean;
            $rootScope.$on('pin', function () {
                $scope.pinnav = true;
            });
            $rootScope.$on('unpin', function () {
                $scope.pinnav = false;
            });

            $scope.actions = {

                Connect: function () {
                    $scope.messages = 'Connecting...';
                    ws = new WebSocket('ws://localhost:14444/api/WebSocket');
                    ws.onopen = function () {
                        $scope.messages = 'Connected.';
                    };
                    ws.onmessage = function (evt) {
                        $scope.messages = evt.data;
                    };
                    ws.onerror = function (evt) {
                        $scope.messages = evt.message;
                    };
                    ws.onclose = function () {
                        $scope.messages = 'Disconnected.';
                    };
                },
                SendMessage: function () {
                    if (ws.readyState === WebSocket.OPEN) {
                        ws.send('Test');
                    }
                    else {
                        $scope.messages = 'Connection is closed.';
                    }
                },
                createService: function () {
                    $location.path('/deploy/service');
                    return;
                },

                viewService: function (id) {
                    $location.path('/services/' + id);
                    return;
                },

                viewStorage: function (id) {
                    $location.path('/storage/' + id);
                    return;
                },

                viewServer: function (id) {
                    $location.path('/server/' + id);
                    return;
                },

                expandServers: function () {

                    $scope.data.serverExpanded = !$scope.data.serverExpanded;
                    $scope.data.storageExpanded = false;
                    $scope.data.networkExpanded = false;
                    $scope.data.selectedServer = null;
                    $scope.data.selectedStorage = null;
                    $scope.data.selectedNetwork = null;

                    $scope.data.entityClicked = '';
                    $scope.data.entityClicked = 'servers';

                    if ($scope.data.serverExpanded) {
                        $timeout(function () {

                            $('.expanded-server, .expanded-network, .expanded-storage').velocity({
                                opacity: [0]
                            }, { duration: 0 });

                            //when selecting a service expand height of svg to accomodate
                            $('#concourseMain').velocity({
                                height: [600]
                            }, { duration: 1000, delay: 250 });

                            $('.expanded-server').velocity({
                                /* Coordinate animation works. */
                                height: ['100%', '0%'],
                                opacity: [1, 0]
                            }, { duration: 1000, delay: 0 });

                        }, 0);


                    } else {

                        $('.expanded-server, .expanded-network, .expanded-storage').velocity({
                            opacity: [0]
                        }, { duration: 0 });

                        $('#concourseMain').velocity({
                            height: [400],
                            marginTop: [0]
                        }, { duration: 1000, delay: 250 });

                    }
                },

                expandNetworking: function () {

                    $scope.data.serverExpanded = false;
                    $scope.data.storageExpanded = false;
                    $scope.data.networkExpanded = !$scope.data.networkExpanded;
                    $scope.data.selectedServer = null;
                    $scope.data.selectedStorage = null;
                    $scope.data.selectedNetwork = null;

                    $scope.data.entityClicked = '';
                    $scope.data.entityClicked = 'networking';

                    if ($scope.data.networkExpanded) {
                        $timeout(function () {

                            $('.expanded-server, .expanded-network, .expanded-storage').velocity({
                                opacity: [0]
                            }, { duration: 0 });

                            //when selecting a service expand height of svg to accomodate
                            $('#concourseMain').velocity({
                                height: [600]
                            }, { duration: 1000, delay: 250 });

                            $('.expanded-network').velocity({
                                /* Coordinate animation works. */
                                height: ['100%', '0%'],
                                opacity: [1, 0]
                            }, { duration: 1000, delay: 0 });

                        }, 0);


                    } else {

                        $('.expanded-server, .expanded-network, .expanded-storage').velocity({
                            opacity: [0]
                        }, { duration: 0 });

                        $('#concourseMain').velocity({
                            height: [400],
                            marginTop: [0]
                        }, { duration: 1000, delay: 250 });

                    }
                },

                expandStorage: function () {

                    $scope.data.serverExpanded = false;
                    $scope.data.storageExpanded = !$scope.data.storageExpanded;
                    $scope.data.networkExpanded = false;
                    $scope.data.selectedServer = null;
                    $scope.data.selectedStorage = null;
                    $scope.data.selectedNetwork = null;

                    $scope.data.entityClicked = 'storages';

                    if ($scope.data.storageExpanded) {
                        $timeout(function () {


                            $('.expanded-server, .expanded-network, .expanded-storage').velocity({
                                opacity: [0]
                            }, { duration: 0 });

                            //when selecting a service expand height of svg to accomodate
                            $('#concourseMain').velocity({
                                height: [600]
                            }, { duration: 1000, delay: 250 });

                            $('.expanded-storage').velocity({
                                /* Coordinate animation works. */
                                height: ['100%', '0%'],
                                opacity: [1, 0]
                            }, { duration: 1000, delay: 0 });

                        }, 0);
                    } else {

                        $('.expanded-network, .expanded-storage').velocity({
                            opacity: [0]
                        }, { duration: 0 });

                        $('#concourseMain').velocity({
                            height: [400],
                            marginTop: [0]
                        }, { duration: 1000, delay: 250 });

                    }
                },

                selectServer: function (server) {
                    $scope.data.entityClicked = '';
                    $scope.data.entityClicked = 'server';
                    $scope.data.selectedServer = angular.copy(server);
                },

                selectIndStorage: function (storage) {
                    $scope.data.entityClicked = '';
                    $scope.data.entityClicked = 'storage';
                    $scope.data.selectedStorage = angular.copy(storage);
                },

                selectIndNetwork: function (network) {
                    $scope.data.entityClicked = '';
                    $scope.data.entityClicked = 'network';
                    $scope.data.selectedNetwork = angular.copy(network);
                },

                selectService: function (service) {

                    $scope.data.LeftStorageActive = false;
                    $scope.data.LeftComputeActive = false;
                    $scope.data.LeftFabricActive = false;

                    if ($scope.data.selectedService && $scope.data.selectedService.id === service.id) {
                        //already selected so close it

                        $scope.data.entityClicked = '';

                        $scope.data.selectedService = null;

                        angular.forEach($scope.data.services, function (s) {
                            s.selected = false;
                        });

                        //when selecting a service expand height of svg to accomodate
                        $('#concourseMain').velocity({
                            height: [350],
                            marginTop: [0]
                        }, { duration: 1000, delay: 250 });

                        $('.fabricChart, .storageChart, .computeChart, #TopLineFabricTabs, #TopLineComputeTabs, #TopLineStorageTabs, #TopLine, #LeftTabCompute, #LeftTabStorage, #LeftTabFabric').velocity({
                            opacity: [0]
                        }, { duration: 250, display: 'none' });

                        return;
                    }

                    $scope.data.entityClicked = '';
                    $scope.data.entityClicked = 'service';

                    angular.forEach($scope.data.services, function (s) {
                        s.selected = false;
                    });

                    service.selected = true;

                    $scope.data.selectedService = angular.copy(service);

                    $scope.data.serverExpanded = false;
                    $scope.data.storageExpanded = false;
                    $scope.data.networkExpanded = false;


                    //set timeout to give time for angular to bind...
                    $timeout(function () {

                        //when selecting a service expand height of svg to accomodate
                        $('#concourseMain').velocity({
                            height: [400],
                            marginTop: [0]
                        }, { duration: 1000, delay: 250 });

                        //$('#servicelines').velocity({
                        //    translateX: [-1 * 200 * index]
                        //}, { duration: 2000 });


                        $('.expanded-service').velocity({
                            /* Coordinate animation works. */
                            height: ['100%', '0%'],
                            opacity: [1, 0]
                        }, { duration: 1000, delay: 250 });

                        //$('.expanded-server').velocity({
                        //    /* Coordinate animation works. */
                        //    height: ['0%'],
                        //    opacity: [0]
                        //}, { duration: 250, delay: 250 });

                        $('.fabricChart, .storageChart, .computeChart, #TopLineFabricTabs, #TopLineComputeTabs, #TopLineStorageTabs, #TopLine, #LeftTabCompute, #LeftTabStorage, #LeftTabFabric').velocity({
                            opacity: [0]
                        }, { duration: 250, display: 'none' });

                    }, 0);
                },

                closeLeftTabs: function () {

                    $scope.data.entityClicked = '';

                    $scope.data.LeftStorageActive = false;
                    $scope.data.LeftComputeActive = false;
                    $scope.data.LeftFabricActive = false;

                    //when selecting a service expand height of svg to accomodate
                    $('#concourseMain').velocity({
                        height: [350],
                        marginTop: [0]
                    }, { duration: 1000, delay: 250 });

                    $('.fabricChart, .storageChart, .computeChart, #TopLineFabricTabs, #TopLineComputeTabs, #TopLineStorageTabs, #TopLine, #LeftTabCompute, #LeftTabStorage, #LeftTabFabric').velocity({
                        opacity: [0]
                    }, { duration: 250, display: 'none' });

                },
                selectFabric: function () {

                    $scope.data.entityClicked = '';

                    if ($scope.data.LeftFabricActive) {
                        $scope.actions.closeLeftTabs();
                        return;
                    }

                    $scope.data.LeftStorageActive = false;
                    $scope.data.LeftComputeActive = false;
                    $scope.data.LeftFabricActive = true;


                    $timeout(function () {

                        angular.forEach($scope.data.services, function (s) {
                            s.selected = false;
                        });

                        $('.expanded-service').velocity({
                            /* Coordinate animation works. */
                            height: ['0%'],
                            opacity: [0]
                        }, { duration: 250 });

                        $('.storageChart, .computeChart, .fabricChart, #TopLineFabricTabs, #TopLine, #LeftTabCompute, #LeftTabStorage, #LeftTabFabric').velocity({
                            opacity: [0]
                        }, { duration: 0, delay: 0, display: 'none' });

                        //when selecting a service expand height of svg to accomodate
                        $('#concourseMain').velocity({
                            height: [350],
                            marginTop: [40]
                        }, { duration: 500 });

                        $('.fabricChart, #TopLineFabricTabs, #TopLine, #LeftTabFabric').velocity({
                            opacity: [1, 0]
                        }, { duration: 1000, delay: 500, display: 'block' });

                    }, 0);


                },

                selectStorage: function () {
                    $scope.data.entityClicked = '';

                    if ($scope.data.LeftStorageActive) {
                        $scope.actions.closeLeftTabs();
                        return;
                    }

                    $scope.data.LeftStorageActive = true;
                    $scope.data.LeftComputeActive = false;
                    $scope.data.LeftFabricActive = false;

                    $timeout(function () {


                        angular.forEach($scope.data.services, function (s) {
                            s.selected = false;
                        });

                        $('.expanded-service').velocity({
                            /* Coordinate animation works. */
                            height: ['0%'],
                            opacity: [0]
                        }, { duration: 250 });

                        $('.fabricChart, .computeChart, .storageChart, #TopLineFabricTabs, #TopLine, #LeftTabCompute, #LeftTabStorage, #LeftTabFabric').velocity({
                            opacity: [0]
                        }, { duration: 0, delay: 0, display: 'none' });

                        //when selecting a service expand height of svg to accomodate
                        $('#concourseMain').velocity({
                            height: [350],
                            marginTop: [40]
                        }, { duration: 500 });

                        $('.storageChart, #TopLineFabricTabs, #TopLine, #LeftTabStorage').velocity({
                            opacity: [1, 0]
                        }, { duration: 1000, delay: 500, display: 'block' });

                    }, 0);


                },

                selectCompute: function () {
                    $scope.data.entityClicked = '';

                    if ($scope.data.LeftComputeActive) {
                        $scope.actions.closeLeftTabs();
                        return;
                    }

                    $scope.data.LeftStorageActive = false;
                    $scope.data.LeftComputeActive = true;
                    $scope.data.LeftFabricActive = false;

                    $timeout(function () {
                        angular.forEach($scope.data.services, function (s) {
                            s.selected = false;
                        });

                        $('.expanded-service').velocity({
                            /* Coordinate animation works. */
                            height: ['0%'],
                            opacity: [0]
                        }, { duration: 250 });

                        $('.fabricChart, .storageChart, .computeChart, #TopLineFabricTabs, #TopLine, #LeftTabCompute, #LeftTabStorage, #LeftTabFabric').velocity({
                            opacity: [0]
                        }, { duration: 0, delay: 0, display: 'none' });

                        //when selecting a service expand height of svg to accomodate
                        $('#concourseMain').velocity({
                            height: [350],
                            marginTop: [40]
                        }, { duration: 500 });

                        $('.computeChart, #TopLineFabricTabs, #TopLine, #LeftTabCompute').velocity({
                            opacity: [1, 0]
                        }, { duration: 1000, delay: 500, display: 'block' });

                    }, 0);

                }


            };


            $scope.loadData = function () {

                GlobalServices.ClearErrors($rootScope.errors);
        
                //$http.get(Commands.services)
                //    .success(function (data, status, headers, config) {

                //        //services already exist so update state
                //        if ($scope.data.services.length > 0) {

                //            angular.forEach(data.data, function (updatedService) {
                //                angular.forEach($scope.data.services, function (existingService) {
                //                    if (updatedService.id === existingService.id) {
                //                        existingService.state = updatedService.state;
                //                    }
                //                });
                //            });

                //        } else {

                //            $scope.data.storageAllocation = 0;

                //            $scope.data.services = data.data;
                //            angular.forEach($scope.data.services, function (service) {

                //                $scope.data.storageAllocation += service.storageAllocation;

                //                if (!service.managementNetworks)
                //                    service.managementNetworks = [
                //                        { id: 1, name: 'Mgmt1', vlan: 25, bandwidth: '5 Mbps', health: 1, type: 'Management', model: 'IF1148', serviceTag: 'ABC12345' },
                //                        { id: 2, name: 'VMotion2', vlan: 26, bandwidth: '4 Mbps', health: 1, type: 'vMotion', model: 'IF1148', serviceTag: 'ABC12345' },
                //                        { id: 3, name: 'VMgroup3', vlan: 27, bandwidth: '4 Mbps', health: 1, type: 'Virtual Machine', model: 'IF1148', serviceTag: 'ABC12345' },
                //                        { id: 4, name: 'StorGrp4', vlan: 28, bandwidth: '4 Mbps', health: 1, type: 'Storage', model: 'IF1148', serviceTag: 'ABC12345' }
                //                    ];

                //                service.storageId = service.storage[0].id;

                //                service.storage = [
                //                        { id: 1, name: 'DataStore1', vlan: 25, bandwidth: '5 Mbps', overallHealth: 'OK', type: 'Management', model: 'IF1148', serviceTag: 'ABC12345' },
                //                        { id: 2, name: 'DataStore2', vlan: 25, bandwidth: '5 Mbps', overallHealth: 'OK', type: 'Management', model: 'IF1148', serviceTag: 'ABC12345' },
                //                        { id: 3, name: 'DataStore3', vlan: 25, bandwidth: '5 Mbps', overallHealth: 'OK', type: 'Management', model: 'IF1148', serviceTag: 'ABC12345' },
                //                        { id: 4, name: 'DataStore4', vlan: 25, bandwidth: '5 Mbps', overallHealth: 'OK', type: 'Management', model: 'IF1148', serviceTag: 'ABC12345' }
                //                ];

                //            });

                //            $scope.data.storageAllocation = $scope.data.storageAllocation / 1000;

                //        }
                //    })
                //    .error(function (data, status, headers, config) {
                //        GlobalServices.DisplayError(data, $rootScope.errors);
                //    });

                //var serverPromise = $http.get(Commands.servers);
                //var chassisPromise = $http.get(Commands.chassis);

                //$q.all([serverPromise, chassisPromise]).then(
                //    function (data) {

                //        var servers = _.filter(data[0].data.data, function (s) { return s.status !== 'ONBOARDING'; });
                //        var chassis = data[1].data.data;

                //        angular.forEach(servers, function (server) {
                //            if (server.chassisId) {
                //                server.chassis = _.findWhere(chassis, { id: server.chassisId });
                //            }
                //        });

                //        var updateCharts = false;

                //        if ($scope.data.servers.length !== servers.length) updateCharts = true;

                //        $scope.data.servers = servers;

                //        $scope.data.totalServers = servers.length;
                //        $scope.data.availableServers = _.where(servers, { state: 1 }).length;
                //        $scope.data.notAvailableServers = $scope.data.totalServers - $scope.data.availableServers;

                //        if (updateCharts)
                //            $scope.renderCharts();

                //    },
                //    function (data) {
                //        GlobalServices.DisplayError(data.data, $rootScope.errors);
                //        $log.debug(data.data);

                //    }
                //);

                
     

                $scope.data.poll = $timeout(function () {
                    $scope.loadData();
                }, 10000);

                $scope.$on(
                      '$destroy',
                      function (event) {
                          $timeout.cancel($scope.data.poll);
                      }
                     
                  );

            };

            $scope.renderCharts = function () {

                //#chartExample

                // Create the fabric chart
                var fabricChart = new Highcharts.Chart({
                    tooltip: {
                        enabled: false
                    },
                    credits: {
                        enabled: false
                    },
                    exporting: {
                        enabled: false
                    },
                    chart: {
                        height: 75,
                        width: 75,
                        renderTo: 'fabricChart',
                        type: 'pie',
                        spacing: [0, 0, 0, 0],
                        backgroundColor: 'rgba(255,255,255,0.002)'
                    },
                    title: {
                        text: null
                    },
                    colors: ['#4CA5E9', '#264A68'],
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            cursor: 'pointer',
                            dataLabels: {
                                enabled: false
                            },
                            showInLegend: false,
                            borderColor: '#2A5273'
                        },

                    },
                    series: [
                        {
                            type: 'pie',
                            innerSize: 40,
                            name: 'Ports',
                            data: [
                                { name: 'Used', y: 91 },
                                { name: 'Available', y: 5 }
                            ],

                        }
                    ],
                    legend: {
                        enabled: false
                    }
                });

                // Create the compute chart
                var computeChart = new Highcharts.Chart({
                    tooltip: {
                        enabled: false
                    },
                    credits: {
                        enabled: false
                    },
                    exporting: {
                        enabled: false
                    },
                    chart: {
                        height: 75,
                        width: 75,
                        renderTo: 'computeChart',
                        type: 'pie',
                        backgroundColor: 'rgba(255,255,255,0.002)',
                        spacing: [0, 0, 0, 0]
                    },
                    title: {
                        text: null
                    },
                    colors: ['#4CA5E9', '#264A68'],
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            cursor: 'pointer',
                            dataLabels: {
                                enabled: false
                            },
                            showInLegend: false,
                            borderColor: '#2A5273'
                        }
                    },
                    series: [
                        {
                            type: 'pie',
                            innerSize: 40,
                            name: 'Servers',
                            data: [
                                { name: 'In Service', y: $scope.data.notAvailableServers },
                                { name: 'Available', y: $scope.data.availableServers }
                            ]
                        }
                    ],
                    legend: {
                        enabled: false
                    }
                });



            };


            $scope.discoverDevices = function () {
                var discoverDevices = Modal({
                    title: $translate.instant('GETTINGSTARTED_DiscoveryAndOnboarding'),
                    modalSize: 'modal-lg',
                    templateUrl: 'views/first/firstrun_autodiscovery.html',
                    controller: 'FirstRunAutoDiscoveryController'
                });

                discoverDevices.modal.show();

                $rootScope.discoveryShown = true;
            }

            $scope.initialize = function () {
                $scope.pinnav = $rootScope.pinnav;

                //var cachebuster = Math.round(new Date().getTime() / 1000);
                //$http.get('/views/svg/concourse.html?ts=' + cachebuster)
                //    .success(function (data) {

                //        var tpl = $compile(data)($scope);
                //        $('#svg-container').append(tpl);
                //        $scope.loadData();

                //        var beforePan = function (oldPan, newPan) {

                //            //allow any X, but prevent any Y
                //            var customPan = {}
                //            customPan.x = newPan.x;
                //            customPan.y = oldPan.y;

                //            return customPan;
                //        }

                //        $scope.data.svgControls = svgPanZoom('#concourseMain', {
                //            viewportSelector: '#servicelines',
                //            panEnabled: true,
                //            zoomEnabled: false,
                //            controlIconsEnabled: false,
                //            fit: false,
                //            center: false,
                //            contain: false,
                //            beforePan: beforePan,
                //            dblClickZoomEnabled: false
                //        });

                //        $scope.data.svgControls.setBeforePan(beforePan);

                //        initSMIL();

                //        //  $scope.loadData();
                //        $timeout(function () {
                //            if ($scope.showDiscovery) {
                //                $scope.discoverDevices();
                //            };
                //        }, 1000);



                //    });

 

            };

            $scope.animation = {
                animate1: function () {

                    //$('.link')
                    //    .velocity({ 'stroke-dashoffset': 0 }, { duration: 1000, delay: 10 });

                },
                animate2: function () {
                    //$('.link2')
                    //    .velocity({ 'stroke-dashoffset': 0 }, { duration: 1000, delay: 500 });

                },
                animate3: function () {
                    //$('.link3')
                    //    .velocity({ 'stroke-dashoffset': 0 }, { duration: 1000, delay: 700 });

                },
                animate4: function () {
                    //$('.link4')
                    //    .velocity({ 'stroke-dashoffset': 0 }, { duration: 1000, delay: 800 });

                }
            };


            $scope.initialize();

        }
    ])



    .controller('FirstRunAutoDiscoveryController',
        ['$window', '$scope', '$log', '$resource', '$translate', 'localStorageService', '$filter', '$timeout', 'Commands', '$http',
            function ($window, $scope, $log, $resource, $translate, localStorage, $filter, $timeout, Commands, $http) {

                $scope.discoveringDevices = 0;
                $timeout(function () {
                    $scope.discoveringDevices = 1;
                }, 4000);

                $scope.viewmodel = {
                    devices: []
                };

                $scope.data = {
                    serverdiscovery: [
                        { overallHealth: 'OK', servicetag: 'ABCEDF1', model: 'PowerEdge FX2', memory: '512GB', processor: 'Intel® Xeon® E5-2670', type: 'Chassis', state: 'Available' },
                        { overallHealth: 'OK', servicetag: 'ABCEDF2', model: 'PowerEdge FX2', memory: '512GB', processor: 'Intel® Xeon® E5-2670', type: 'Chassis', state: 'Available' },
                        { overallHealth: 'OK', servicetag: 'ABCEDF3', model: 'PowerEdge FC630', memory: '512GB', processor: 'Intel® Xeon® E5-2670', type: 'Server', state: 'Available' },
                        { overallHealth: 'OK', servicetag: 'ABCEDF4', model: 'PowerEdge FC630', memory: '512GB', processor: 'Intel® Xeon® E5-2670', type: 'Server', state: 'Available' },
                        { overallHealth: 'OK', servicetag: 'ABCEDF5', model: 'PowerEdge FC630', memory: '512GB', processor: 'Intel® Xeon® E5-2670', type: 'Server', state: 'Available' },
                        { overallHealth: 'OK', servicetag: 'ABCEDF6', model: 'PowerEdge FC630', memory: '512GB', processor: 'Intel® Xeon® E5-2670', type: 'Server', state: 'Available' },
                        { overallHealth: 'OK', servicetag: 'ABCEDF7', model: 'PowerEdge FC630', memory: '512GB', processor: 'Intel® Xeon® E5-2670', type: 'Server', state: 'Available' },
                        { overallHealth: 'OK', servicetag: 'ABCEDF8', model: 'PowerEdge FC630', memory: '512GB', processor: 'Intel® Xeon® E5-2670', type: 'Server', state: 'Available' },
                        { overallHealth: 'OK', servicetag: 'ABCEDF9', model: 'PowerEdge FC630', memory: '512GB', processor: 'Intel® Xeon® E5-2670', type: 'Server', state: 'Available' },
                        { overallHealth: 'OK', servicetag: 'ABCEDF0', model: 'PowerEdge FC630', memory: '512GB', processor: 'Intel® Xeon® E5-2670', type: 'Server', state: 'Available' },
                        { overallHealth: 'OK', servicetag: 'ADZYRE7', model: 'SC4020', memory: '128GB', processor: 'Intel® Xeon® E5-2620', type: 'Storage', state: 'Available' }
                    ]
                };

                $scope.actions = {

                };


                $scope.initialize = function () {


                };

                $scope.initialize();

                //replace with $http call if necessary

                //Device.query().$promise
                //    .then(function (data) {
                //        $scope.data.serverdata = data;
                //        //copy the references (you could clone ie angular.copy but then have to go through a dirty checking for the matches)
                //        $scope.data.displayedserverdata = [].concat($scope.data.serverdata);
                //    })

                //$scope.parseDiscoveredDevices = function () {
                //    $scope.totalDiscovered = $scope.viewmodel.devices.length;
                //    $scope.totalPending = 0;
                //    $scope.totalErrors = 0;
                //    $.each($scope.viewmodel.devices, function (index, device) {
                //        if ($filter('deviceHealth')(device.health) == "red") {
                //            $scope.totalErrors++;
                //        }
                //    });
                //    $scope.totalPending = ($scope.totalDiscovered - $scope.totalErrors);
                //};

                //DiscoverDevice.query().$promise.then(function (data) {
                //    $scope.viewmodel.devices = data;

                //    //copy the references (you could clone ie angular.copy but then have to go through a dirty checking for the matches)
                //    $scope.viewmodel.displayeddevices = [].concat($scope.viewmodel.devices);

                //    $scope.parseDiscoveredDevices();
                //}).catch(function (error) {
                //    var z = 0;
                //});
            }])





;
var asm;
(function (asm) {
    var DefaultPasswordModalController = (function () {
        function DefaultPasswordModalController($scope, $translate) {
            this.$scope = $scope;
            this.$translate = $translate;
            this.checked = false;
            var self = this;
            self.initialize();
        }
        DefaultPasswordModalController.prototype.initialize = function () {
            var self = this;
        };
        DefaultPasswordModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DefaultPasswordModalController.$inject = ['$scope', '$translate'];
        return DefaultPasswordModalController;
    }());
    asm.DefaultPasswordModalController = DefaultPasswordModalController;
    angular
        .module('app')
        .controller('DefaultPasswordModalController', DefaultPasswordModalController);
})(asm || (asm = {}));
//# sourceMappingURL=defaultpassword.js.map
var asm;
(function (asm) {
    var DeviceController = (function () {
        function DeviceController($http, $translate, $routeParams, GlobalServices, $timeout, constants, Commands, Loading, $q) {
            this.$http = $http;
            this.$translate = $translate;
            this.$routeParams = $routeParams;
            this.GlobalServices = GlobalServices;
            this.$timeout = $timeout;
            this.constants = constants;
            this.Commands = Commands;
            this.Loading = Loading;
            this.$q = $q;
            this.deviceType = "";
            this.deviceIpAddress = "";
            this.deviceServiceTag = "";
            this.devicePowerState = "";
            this.deviceHealth = "";
            this.ipaddressurl = "";
            this.overallSystemUsage = null;
            this.memorySystemUsage = null;
            this.cpuSystemUsage = null;
            this.ioSystemUsage = null;
            this.systemUsageHistoricalData = null;
            this.memoryUsageHistoricalData = null;
            this.cpuUsageHistoricalData = null;
            this.ioUsageHistoricalData = null;
            this.storageCapacityChartConfig = null;
            this.storagePoolsChart = null;
            this.netAppChartConfig = null;
            this.groupDiskSpaceChart = null;
            this.chartContainerExpanded = false;
            this.systemUsageSelectedTimeframe = null;
            this.cpuUsageSelectedTimeframe = null;
            this.memoryUsageSelectedTimeframe = null;
            this.ioUsageSelectedTimeframe = null;
            this.tabs = {
                summary: "Summary",
                portView: "PortView",
                networkInterfaces: "NetworkInterfaces",
                firmwareRevisions: "FirmwareRevisions",
                cpus: "CPUs",
                memory: "Memory",
                blades: "Blades",
                iOModules: "IOModules",
                chassisController: "ChassisController",
                iKVM: "IKVM",
                powerSupplies: "PowerSupplies",
                equallogicVolumes: "EquallogicVolumes",
                compellentVolumes: "CompellentVolumes",
                netAppVolumes: "NetAppVolumes"
            };
            var self = this;
            self.id = self.$routeParams.id;
            self.deviceType = self.$routeParams.resourceType;
            self.deviceTypes = constants.deviceTypes;
            self.activeTab = self.tabs.summary;
        }
        DeviceController.prototype.activate = function () {
            var self = this, callToMake;
            if (self.deviceType) {
                if (self.isServer()) {
                    callToMake = self.$http.post(self.Commands.data.servers.getServerById, { id: self.id })
                        .then(function (data) {
                        var serverObj = data.data.responseObj;
                        self.device = serverObj;
                        self.deviceIpAddress = serverObj.ipaddress;
                        self.deviceServiceTag = serverObj.servicetag;
                        self.devicePowerState = serverObj.serverpowerstate;
                        self.deviceHealth = serverObj.health;
                        self.ipaddressurl = serverObj.ipaddressurl;
                        //Only want the first 5 activity logs and 3 alert logs
                        self.activityLogs = _.take(serverObj.activityLogs, 5);
                        self.alertLogs = _.take(serverObj.alertLogs, 3);
                        if (serverObj.systemusage) {
                            self.systemUsageDataSet = serverObj.systemusage.historicaldata[0];
                        }
                        if (serverObj.memoryusage) {
                            self.memoryUsageDataSet = serverObj.memoryusage.historicaldata[0];
                        }
                        if (serverObj.cpuusage) {
                            self.cpuUsageDataSet = serverObj.cpuusage.historicaldata[0];
                        }
                        if (serverObj.iousage) {
                            self.ioUsageDataSet = serverObj.iousage.historicaldata[0];
                        }
                        self.showNIC = serverObj.nics.length > 0;
                        self.showCPU = serverObj.cpudata.length > 0;
                        self.showMemory = serverObj.memorydata.length > 0;
                        //if (self.dataChanged)
                        //    self.dataChanged.valueHasMutated();
                        self.overallSystemUsage = angular.merge(self.getPieChartObject(self.device.systemusage, { innerSize: "90%" }), {
                            size: {
                                height: 230,
                                width: undefined
                            }
                        });
                        self.overallSystemUsage2 = self.getPieChartObject(self.device.systemusage);
                        self.cpuSystemUsage = self.getPieChartObject(self.device.cpuusage);
                        self.memorySystemUsage = self.getPieChartObject(self.device.memoryusage);
                        self.ioSystemUsage = self.getPieChartObject(self.device.iousage);
                        if (self.device.systemusage) {
                            self.systemUsageHistoricalData = self
                                .getLineChartObject({ requestObj: self.device.systemusage.historicaldata[0] });
                            self.systemUsageSelectedTimeframe = self.device.systemusage.historicaldata[0];
                            self.device.systemusage.currentvalue = Math.round(Number(self.device.systemusage.currentvalue));
                            self.updateSystemUsage();
                        }
                        if (self.device.memoryusage) {
                            self.memoryUsageHistoricalData = self
                                .getLineChartObject({ requestObj: self.device.memoryusage.historicaldata[0] });
                            self.memoryUsageSelectedTimeframe = self.device.memoryusage.historicaldata[0];
                            self.device.memoryusage.currentvalue = Math.round(Number(self.device.memoryusage.currentvalue));
                            self.updateMemoryUsage();
                        }
                        if (self.device.cpuusage) {
                            self.cpuUsageHistoricalData = self
                                .getLineChartObject({ requestObj: self.device.cpuusage.historicaldata[0] });
                            self.cpuUsageSelectedTimeframe = self.device.cpuusage.historicaldata[0];
                            self.device.cpuusage.currentvalue = Math.round(Number(self.device.cpuusage.currentvalue));
                            self.updateCPUUsage();
                        }
                        if (self.device.iousage) {
                            self.ioUsageHistoricalData = self
                                .getLineChartObject({ requestObj: self.device.iousage.historicaldata[0] });
                            self.ioUsageSelectedTimeframe = self.device.iousage.historicaldata[0];
                            self.device.iousage.currentvalue = Math.round(Number(self.device.iousage.currentvalue));
                            self.updateIOUsage();
                        }
                    });
                }
                if (self.isChassis()) {
                    callToMake = self.$http.post(self.Commands.data.chassis.getChassisById, { id: self.id })
                        .then(function (data) {
                        var chassisObj = data.data.responseObj;
                        self.device = chassisObj;
                        self.deviceIpAddress = chassisObj.ipaddress;
                        self.deviceServiceTag = chassisObj.servicetag;
                        self.ipaddressurl = chassisObj.ipaddressurl;
                        self.activityLogs = _.take(chassisObj.activityLogs, 5);
                        self.alertLogs = _.take(chassisObj.alertLogs, 3);
                    });
                }
                if (self.isIOM()) {
                    callToMake = self.$http.post(self.Commands.data.iom.getIOMById, { id: self.id })
                        .then(function (data) {
                        var ioModuleObj = data.data.responseObj;
                        self.device = ioModuleObj;
                        self.deviceIpAddress = ioModuleObj.ipaddress;
                        self.deviceServiceTag = ioModuleObj.servicetag;
                        self.devicePowerState = ioModuleObj.iompowerstate;
                        self.deviceHealth = ioModuleObj.health;
                        self.ipaddressurl = ioModuleObj.ipaddressurl;
                        self.activityLogs = _.take(ioModuleObj.activityLogs, 5);
                        self.alertLogs = _.take(ioModuleObj.alertLogs, 3);
                    });
                }
                if (self.isDellSwitch()) {
                    callToMake = self.$http.post(self.Commands.data.dellSwitch.getDellSwitchById, { id: self.id })
                        .then(function (data) {
                        var dellSwitchObj = data.data.responseObj;
                        self.device = dellSwitchObj;
                        self.deviceIpAddress = dellSwitchObj.ipaddress;
                        self.ipaddressurl = dellSwitchObj.ipaddressurl;
                        self.activityLogs = _.take(dellSwitchObj.activityLogs, 5);
                    });
                }
                if (self.isEqualLogic()) {
                    callToMake = self.$http.post(self.Commands.data.equalLogicStorage.getEqualLogicStorageById, { id: self.id })
                        .then(function (data) {
                        var equalLogicObj = data.data.responseObj;
                        self.device = equalLogicObj;
                        self.deviceIpAddress = equalLogicObj.ipAddress;
                        self.ipaddressurl = equalLogicObj.ipaddressurl;
                        self.activityLogs = _.take(equalLogicObj.activityLogs, 5);
                        self.storagePoolsChart = self.updateStoragePoolsChart(self.device.storagepool);
                        self.groupDiskSpaceChart = self.updateGroupDiskSpaceChart();
                    });
                }
                if (self.isCompellent()) {
                    callToMake = self.$http.post(self.Commands.compellentStorage.getCompellentStorageById, { id: self.id })
                        .then(function (data) {
                        var compellentObj = data.data.responseObj;
                        self.device = compellentObj;
                        self.deviceIpAddress = compellentObj.ipAddress;
                        self.ipaddressurl = compellentObj.ipaddressurl;
                        self.activityLogs = _.take(compellentObj.activityLogs, 5);
                        self.storageCapacityChartConfig = self.updateStorageCapacityChart();
                    });
                }
                if (self.isEmcvnx()) {
                    callToMake = self.$http.post(self.Commands.data.devices.getEmcvnxStorageById, { id: self.id })
                        .then(function (data) {
                        var compellentObj = data.data.responseObj;
                        self.device = compellentObj;
                        self.deviceIpAddress = compellentObj.ipAddress;
                        self.ipaddressurl = compellentObj.ipaddressurl;
                        self.activityLogs = _.take(compellentObj.activityLogs, 5);
                        self.storagePoolsChart = self.updateStoragePoolsChart(self.device.storagepools);
                        self.storageCapacityChartConfig = self.updateStorageCapacityChart();
                    });
                }
                if (self.isNetApp()) {
                    callToMake = self.$http.post(self.Commands.data.netappStorage.getNetAppStorageById, { id: self.id })
                        .then(function (data) {
                        var netappObj = data.data.responseObj;
                        self.device = netappObj;
                        self.deviceIpAddress = netappObj.ipAddress;
                        self.ipaddressurl = netappObj.ipaddressurl;
                        self.activityLogs = _.take(netappObj.activityLogs, 5);
                        self.netAppChartConfig = self.updateNetAppStorageCapacityChart();
                    });
                }
                callToMake && self.Loading(callToMake);
                callToMake
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            }
        };
        DeviceController.prototype.updateSystemUsage = function () {
            var self = this;
            self.systemUsageHistoricalData = self.getLineChartObject(self.systemUsageSelectedTimeframe);
        };
        DeviceController.prototype.updateCPUUsage = function () {
            var self = this;
            self.cpuUsageHistoricalData = self.getLineChartObject(self.cpuUsageSelectedTimeframe);
        };
        DeviceController.prototype.updateMemoryUsage = function () {
            var self = this;
            self.memoryUsageHistoricalData = self.getLineChartObject(self.memoryUsageSelectedTimeframe);
        };
        DeviceController.prototype.updateIOUsage = function () {
            var self = this;
            self.ioUsageHistoricalData = self.getLineChartObject(self.ioUsageSelectedTimeframe);
        };
        DeviceController.prototype.getPieChartObject = function (UsageData, customOptions) {
            return {
                options: {
                    chart: {
                        type: 'pie',
                        animation: false
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            innerSize: 100,
                            dataLabels: { enabled: false },
                            borderWidth: 3
                        }
                    }
                },
                size: {
                    height: 170,
                    width: 170
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: [
                            { name: this.$translate.instant('DEVICEDETAILS_CurrentUtilization'), y: Math.round(Number(UsageData.currentvalue)), color: UsageData.currentvalue <= UsageData.threshold ? '#7AB800' : '#f0ad4e' },
                            { name: this.$translate.instant('DEVICEDETAILS_CurrentAvailable'), y: Math.round(100 - UsageData.currentvalue), color: '#ccc' }
                        ],
                        innerSize: customOptions && customOptions.innerSize || '95%'
                    }]
            };
        };
        DeviceController.prototype.getLineChartObject = function (UsageDataSeries) {
            var self = this;
            var config = {
                options: {
                    chart: {
                        type: 'area',
                        animation: true,
                        height: 130,
                        borderWidth: 0,
                    },
                    title: {
                        text: ''
                    },
                },
                xAxis: {
                    labels: { enabled: false },
                    //tickInterval: 1,
                    type: 'datetime',
                    tickPositioner: function () {
                        var positions = [];
                        $.each(UsageDataSeries.data, function (idx, point) {
                            var position = moment(point.timestamp).toDate().getTime();
                            positions.push(position);
                        });
                        return positions;
                    },
                    lineColor: '#ececec',
                    tickColor: '#ececec',
                    title: { margin: 10, style: { color: '#888888' }, text: UsageDataSeries.chartlabel }
                },
                yAxis: {
                    gridLineColor: "#cecece",
                    title: null,
                    tickInterval: 20,
                    plotLines: [{
                            value: 0,
                            width: 1,
                            color: '#808080'
                        }],
                    min: 0,
                    max: 100
                },
                tooltip: {
                    useHTML: true,
                    //  shared: true,
                    enabled: true,
                    formatter: function () {
                        var datelabel = moment(this.x).format('LLL');
                        var val = Number(this.y.toFixed(2));
                        return "Value: " + (val) + '%' + '<br />Date: ' + datelabel;
                    }
                },
                legend: {
                    enabled: false
                },
                series: [{
                        showInLegend: false,
                        name: 'Usage',
                        data: self.convertLineChartData(UsageDataSeries.data),
                        fillColor: {
                            linearGradient: [0, 0, 0, 75],
                            stops: [
                                [0, 'rgba(220,231,251,0.5)'],
                                [1, 'rgba(255,255,255,0.5)']
                            ]
                        },
                        marker: {
                            radius: 2
                        }
                    }],
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0
            };
            return config;
        };
        DeviceController.prototype.updateGroupDiskSpaceChart = function () {
            var self = this;
            if (this.deviceType == 'equallogic') {
                var config = {
                    options: {
                        chart: {
                            type: 'pie',
                            animation: false
                        },
                        title: {
                            text: ''
                        },
                        plotOptions: {
                            pie: {
                                allowPointSelect: true,
                                innerSize: '75%',
                                dataLabels: { enabled: false },
                                borderWidth: 3,
                                showInLegend: true
                            }
                        },
                        legend: {
                            enabled: true,
                            layout: 'vertical',
                            align: 'right',
                            verticalAlign: 'top',
                            borderWidth: 0,
                            width: 200,
                            height: 250,
                            left: 0,
                            itemStyle: {
                                fontSize: '10px',
                            },
                            labelFormatter: function () {
                                return this.name + ': <br/>' + this.y + ' GB (' + Math.round(this.percentage * 100) / 100 + '%)';
                            }
                        }
                    },
                    size: {
                        height: 200,
                        width: 350
                    },
                    spacingBottom: 0,
                    spacingTop: 0,
                    spacingLeft: 0,
                    spacingRight: 0,
                    series: [{
                            data: [
                                { name: self.$translate.instant('DEVICEDETAILS_VolumeReserve'), y: parseFloat(self.device.volumereserve), color: '#0085C3' },
                                { name: self.$translate.instant('DEVICEDETAILS_SnapshotReserve'), y: parseFloat(self.device.snapshotreserve), color: '#6E2585' },
                                { name: self.$translate.instant('DEVICEDETAILS_ReplicationReserve'), y: parseFloat(self.device.replicationreserve), color: '#dc5034' },
                                { name: self.$translate.instant('DEVICEDETAILS_Delegated'), y: parseFloat(self.device.delegated), color: '#71c6c1' },
                                { name: self.$translate.instant('DEVICEDETAILS_Free'), y: parseFloat(self.device.freegroupspace), color: '#cccccc' }
                            ],
                            innerSize: '75%'
                        }]
                };
                return config;
            }
            return null;
        };
        DeviceController.prototype.updateStoragePoolsChart = function (pools) {
            var self = this;
            var seriesData = _.map(pools, function (pool) {
                return { name: pool.name, y: parseFloat(pool.size) };
            });
            return {
                options: {
                    chart: {
                        type: 'pie',
                        animation: false
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            innerSize: '75%',
                            dataLabels: { enabled: false },
                            borderWidth: 3,
                            colors: ['#0085C3', '#6E2585', '#dc5034', '#71c6c1', '#cccccc'],
                            showInLegend: true
                        }
                    },
                    legend: {
                        enabled: true,
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'top',
                        borderWidth: 0,
                        width: 200,
                        height: 170,
                        left: 0,
                        itemStyle: {
                            fontSize: '10px',
                        },
                        labelFormatter: function () {
                            return this.name + ': <br/>' + this.y + ' GB (' + Math.round(this.percentage * 100) / 100 + '%)';
                        }
                    }
                },
                size: {
                    height: 150,
                    width: 350
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: seriesData,
                        innerSize: '75%'
                    }]
            };
        };
        DeviceController.prototype.updateNetAppStorageCapacityChart = function () {
            var self = this;
            if (this.deviceType == 'netapp') {
                var config = {
                    options: {
                        chart: {
                            type: 'pie',
                            animation: false
                        },
                        title: {
                            text: ''
                        },
                        plotOptions: {
                            pie: {
                                allowPointSelect: true,
                                innerSize: '75%',
                                dataLabels: { enabled: false },
                                borderWidth: 3
                            }
                        },
                        legend: {
                            enabled: true,
                            layout: 'vertical',
                            align: 'right',
                            verticalAlign: 'top',
                            borderWidth: 0,
                            width: 200,
                            height: 170,
                            left: 0,
                            itemStyle: {
                                fontSize: '10px',
                            },
                            labelFormatter: function () {
                                return this.name + ': <br/>' + this.y + ' GB (' + Math.round(this.percentage * 100) / 100 + '%)';
                            }
                        }
                    },
                    size: {
                        height: 150,
                        width: 350
                    },
                    spacingBottom: 0,
                    spacingTop: 0,
                    spacingLeft: 0,
                    spacingRight: 0,
                    series: [{
                            data: [
                                { name: self.$translate.instant('UsedDiskSpace'), y: parseFloat(self.device.useddiskspacepercent), color: '#0085C3' },
                                { name: self.$translate.instant('FreeDiskSpace'), y: parseFloat(self.device.freediskspacepercent), color: '#CCCCCC' }
                            ],
                            innerSize: '75%'
                        }]
                };
                return config;
            }
            return null;
        };
        DeviceController.prototype.updateStorageCapacityChart = function () {
            var self = this;
            return {
                options: {
                    chart: {
                        type: 'pie',
                        animation: false
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            innerSize: '75%',
                            dataLabels: { enabled: false },
                            borderWidth: 3,
                            showInLegend: true
                        },
                    },
                    legend: {
                        enabled: true,
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'top',
                        borderWidth: 0,
                        width: 200,
                        height: 170,
                        left: 0,
                        itemStyle: {
                            fontSize: '10px',
                        },
                        labelFormatter: function () {
                            return this.name + ': <br/>' + this.y + ' GB (' + Math.round(this.percentage * 100) / 100 + '%)';
                        }
                    }
                },
                size: {
                    height: 150,
                    width: 350
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: [
                            { name: self.$translate.instant('UsedDiskSpace'), y: parseFloat(self.device.useddiskspacepercent), color: '#0085C3' },
                            { name: self.$translate.instant('FreeDiskSpace'), y: parseFloat(self.device.freediskspacepercent), color: '#CCCCCC' }
                        ],
                        innerSize: '75%'
                    }]
            };
        };
        DeviceController.prototype.convertLineChartData = function (data) {
            var returnVal = [];
            $.each(data, function (idx, point) {
                returnVal.push([moment(point.timestamp).toDate().getTime(), point.value]);
            });
            return returnVal;
        };
        DeviceController.prototype.launchGroupManager = function () {
            alert("TODO: Launch Group manager");
        };
        DeviceController.prototype.isChassis = function () {
            return (this.deviceType === 'ChassisM1000e' || this.deviceType === 'ChassisVRTX' || this.deviceType === 'ChassisFX');
        };
        DeviceController.prototype.isFX2 = function () {
            return (this.deviceType === 'ChassisFX');
        };
        DeviceController.prototype.isIOM = function () {
            return (this.deviceType === 'AggregatorIOM' || this.deviceType === 'MXLIOM' || this.deviceType === 'FXIOM');
        };
        DeviceController.prototype.isServer = function () {
            return (this.deviceType === 'RackServer' || this.deviceType === 'TowerServer' || this.deviceType === 'BladeServer' || this.deviceType === 'FXServer' || this.deviceType === 'Server');
        };
        DeviceController.prototype.isEqualLogic = function () {
            return (this.deviceType === 'equallogic');
        };
        DeviceController.prototype.isCompellent = function () {
            return (this.deviceType === 'compellent');
        };
        DeviceController.prototype.isEmcvnx = function () {
            return this.deviceType === "emcvnx";
        };
        DeviceController.prototype.isNetApp = function () {
            return (this.deviceType === 'netapp');
        };
        DeviceController.prototype.isDellSwitch = function () {
            return (this.deviceType === 'dellswitch' || this.deviceType === 'genericswitch');
        };
        DeviceController.$inject = ['$http', '$translate', '$routeParams', 'GlobalServices', '$timeout', 'constants', "Commands", "Loading", "$q"];
        return DeviceController;
    }());
    asm.DeviceController = DeviceController;
    angular
        .module("app")
        .controller("DeviceController", DeviceController);
})(asm || (asm = {}));
//# sourceMappingURL=device.js.map
var asm;
(function (asm) {
    /*
    Notes:
    use self.selectedDevices() to get checked items
     */
    var DevicesController = (function () {
        function DevicesController($http, $window, $translate, $timeout, Dialog, Loading, $q, Modal, Commands, GlobalServices, MessageBox, $rootScope, $routeParams, $filter, constants) {
            this.$http = $http;
            this.$window = $window;
            this.$translate = $translate;
            this.$timeout = $timeout;
            this.Dialog = Dialog;
            this.Loading = Loading;
            this.$q = $q;
            this.Modal = Modal;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.MessageBox = MessageBox;
            this.$rootScope = $rootScope;
            this.$routeParams = $routeParams;
            this.$filter = $filter;
            this.constants = constants;
            this.selectorConfig = {};
            this.safeSources = { serverPoolsTab: { servers: [], users: [] } };
            var self = this;
            self.currentView = '';
            self.currentHealthView = '';
            self.currentStateView = '';
            self.availableManagedStates = self.constants.availableManagedStates;
            self.availableManagedStates.unshift({
                name: self.$translate.instant("DEVICES_ChangeResourceTypeTo"), id: ''
            });
            self.resourceState = '';
            self.activeTab = 'AllResources';
            self.serverPoolActiveTab = 'Servers';
            self.removeEnabled = true;
            self.loadingDetails = false;
            self.showFilters = false;
            self.selectedDevice = {};
            self.selectedServerPool = {};
            self.selectedServerPoolId = '';
            self.serverpoolslist = [];
            //self.$watch('selectedDevice', function (newValue, oldValue) {
            //    alert("here");
            //});
            self.buttonoverflow = [];
            if (self.$routeParams.resourceType === 'serverpools') {
                self.activeTab = 'ServerPools';
                self.showFilters = false;
                if (self.$routeParams.health) {
                    self.selectedServerPoolId = self.$routeParams.health;
                }
            }
            else {
                if (self.$routeParams.resourceType) {
                    self.activeTab = 'AllResources';
                    self.showFilters = true;
                    self.currentView = self.$routeParams.resourceType;
                }
                if (self.$routeParams.health) {
                    self.activeTab = 'AllResources';
                    self.showFilters = true;
                    self.currentHealthView = self.$routeParams.health;
                }
            }
        }
        Object.defineProperty(DevicesController.prototype, "currentView", {
            get: function () { var self = this; return self._currentView; },
            set: function (val) { var self = this; self._currentView = val; self.filterDevices(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DevicesController.prototype, "currentHealthView", {
            get: function () { var self = this; return self._currentHealthView; },
            set: function (val) { var self = this; self._currentHealthView = val; self.filterDevices(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DevicesController.prototype, "currentServiceView", {
            get: function () { var self = this; return self._currentServiceView; },
            set: function (val) { var self = this; self._currentServiceView = val; self.filterDevices(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DevicesController.prototype, "currentStateView", {
            get: function () { var self = this; return self._currentStateView; },
            set: function (val) { var self = this; self._currentStateView = val; self.filterDevices(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DevicesController.prototype, "currentServerPoolView", {
            get: function () { var self = this; return self._currentServerPoolView; },
            set: function (val) { var self = this; self._currentServerPoolView = val; self.filterDevices(); },
            enumerable: true,
            configurable: true
        });
        DevicesController.prototype.calcButtonOverflow = function () {
            var self = this;
            self.buttonoverflow = [];
            var collapsibleBars = $('.collapsible-button-bar');
            angular.forEach(collapsibleBars, function (b) {
                var taskbar = $(b);
                var currentWidth = 0;
                var taskbarWidth = taskbar.width();
                var buttons = taskbar.find('li');
                angular.forEach(buttons, function (button) {
                    var bWidth;
                    if ($(button).data('current-width'))
                        bWidth = parseInt($(button).data('current-width'));
                    else {
                        bWidth = $(button).width();
                        $(button).data('current-width', bWidth);
                    }
                    currentWidth += bWidth;
                    if (button.id && currentWidth > (taskbarWidth - 375))
                        self.buttonoverflow.push(button.id);
                });
            });
        };
        DevicesController.prototype.activate = function () {
            var self = this;
            // self.checkSelected = self.checkselected();
            $(window).resize(function () {
                if (self.resizetimer)
                    self.$timeout.cancel(self.resizetimer);
                self.resizetimer = self.$timeout(function () {
                    self.calcButtonOverflow();
                }, 300);
            });
            self.refresh();
            self.refreshDiscoveryJobs();
            self.$http.post(self.Commands.data.services.getServiceDropdown, null).then(function (data) {
                //sort by name, then add All at top
                var sortedData = _.sortBy(data.data.responseObj, function (n) {
                    return n.name.toLowerCase();
                });
                self.services = sortedData;
                self.currentServiceView = '';
            }).catch(function () {
            });
            angular.element(self.$window).bind('scroll', function () {
                self.scrollPos();
            });
            angular.element(self.$window).bind('resize', function () {
                self.scrollPos();
            });
        };
        DevicesController.prototype.scrollPos = function () {
            var self = this;
            self.$timeout.cancel(self.animate);
            self.animate = self.$timeout(function () {
                var currentPos = self.$window.pageYOffset;
                var panelHeight = $('#devicePanel').height();
                var sidebarHeight = $('#deviceInfo').height();
                var adjust = (sidebarHeight + currentPos) - panelHeight;
                if (adjust > 0 && currentPos >= adjust)
                    currentPos -= adjust;
                if (sidebarHeight > panelHeight)
                    currentPos = 0;
                $('#deviceInfo').animate({ 'margin-top': currentPos + 'px' }, 'slow');
            }, 100);
        };
        DevicesController.prototype.selectedDevices = function () {
            var self = this;
            return _.filter(this.devices, { 'isChecked': true });
        };
        DevicesController.prototype.removeDisabled = function () {
            var self = this;
            //return !!(_.find(self.selectedDevices(), ['availability', 'inuse']) ||
            //    _.find(self.selectedDevices(), ['status', 'pendingupdates']));
            return !!(_.find(self.selectedDevices(), ['status', 'ready']) ||
                _.find(self.selectedDevices(), ['status', 'pendingupdates']));
            //return !!(_.find(self.selectedDevices(), ['status', 'deploying']) || _.find(self.selectedDevices(), ['status', 'pendingupdates']));
        };
        DevicesController.prototype.filterDevices = function () {
            var self = this;
            if (!self.alldevices || self.alldevices.length === 0) {
                self.devices = [];
                self.displayeddevices = [];
                return;
            }
            //filter devices
            var filteredDevices = angular.copy(self.alldevices);
            filteredDevices = self.$filter('filter')(filteredDevices, {
                deviceType: self.currentView,
                health: self.currentHealthView,
                displayservicelist: self.currentServiceView,
                state: self.currentStateView,
                displayserverpools: self.currentServerPoolView
            });
            self.devices = [].concat(filteredDevices);
            self.displayeddevices = [].concat(filteredDevices);
            var x = null;
            if (self.selectedDeviceId != null) {
                x = _.find(self.displayeddevices, { id: self.selectedDeviceId });
            }
            if (!x) {
                x = self.displayeddevices[0];
            }
            if (x) {
                self.selectedDeviceId = x.id;
                self.selectedDevice = angular.copy(x);
            }
        };
        //Reusable refresh method that we can put on a timeout
        DevicesController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise).then(function () {
                self.$timeout(self.calcButtonOverflow, 500);
            });
            self.$q.all([
                self.$http.post(self.Commands.data.devices.getDeviceList, null).then(function (data) {
                    //sort by deviceType
                    var sortedData = _.sortBy(data.data.responseObj, function (n) {
                        return n.deviceType.toLowerCase();
                    });
                    self.alldevices = sortedData;
                    angular.forEach(self.alldevices, function (device) {
                        device.displayservicelist = device.servicelist.join(',');
                        device.displayserverpools = device.displayserverpools || "";
                    });
                    self.filterDevices();
                }),
                self.$http.post(self.Commands.data.serverpools.getServerPools, null).then(function (data) {
                    //sort by name, then add All at top
                    var sortedData = _.sortBy(data.data.responseObj, function (n) {
                        return n.name.toLowerCase();
                    });
                    self.serverpools = sortedData;
                    self.safeSources.serverPoolsTab.serverPools = [].concat(self.serverpools);
                    //load up drop down list for server filter
                    angular.copy(self.serverpools, self.serverpoolslist);
                    self.currentServerPoolView = '';
                    if (self.serverpools.length) {
                        self.selectServerPoolRow(self.selectedServerPoolId
                            ? _.find(self.serverpools, { id: self.selectedServerPoolId })
                            : self.serverpools[0]);
                    }
                })
            ]).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        DevicesController.prototype.viewDetailsShown = function () {
        };
        DevicesController.prototype.getManageStateOptions = function () {
            var self = this;
            if (!self.devices)
                return null;
            var states = self.constants.availableManagedStates.slice();
            var manage = true;
            var unmanage = true;
            var reserved = true;
            $.each(self.devices, function (index, device) {
                if (device.isChecked) {
                    if (manage && device.state === 'managed') {
                        manage = false;
                    }
                    else if (unmanage && device.state === 'unmanaged') {
                        unmanage = false;
                    }
                    else if (reserved && device.state === 'reserved') {
                        reserved = false;
                    }
                }
            });
            if (!reserved)
                states.splice(3, 1);
            if (!unmanage)
                states.splice(2, 1);
            if (!manage)
                states.splice(1, 1);
            //self.resourceState = '';
            return states;
        };
        DevicesController.prototype.updateManagedState = function () {
            var self = this;
            var confirmMsg = '';
            var action = '';
            if (self.resourceState === '')
                return;
            else if (self.resourceState === 'managed') {
                action = 'manage';
                confirmMsg = self.$translate.instant('DEVICES_ConfirmManage');
            }
            else if (self.resourceState === 'unmanaged') {
                action = 'unmanage';
                confirmMsg = self.$translate.instant('DEVICES_ConfirmUnmanage');
            }
            else if (self.resourceState === 'reserved') {
                action = 'reserve';
                confirmMsg = self.$translate.instant('DEVICES_ConfirmReserve');
            }
            var confirm = self.Dialog((self.$translate.instant('GENERIC_Confirm')), confirmMsg);
            confirm.then(function () {
                var selectedDevices = [];
                $.each(self.devices, function (index, model) {
                    if (model.isChecked)
                        selectedDevices.push(model.id);
                });
                self.$http.post('devices/' + action, selectedDevices).then(function () {
                    //refresh also clears the checked items
                    self.refresh();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            });
            //reset change resource state message whether confirmed or not
            self.resourceState = '';
        };
        DevicesController.prototype.selectRow = function (device) {
            var self = this;
            angular.copy(device, self.selectedDevice);
            //            self.loadingDetails = true;
            self.$http.post(self.Commands.data.devices.getDeviceById, { id: device.id }).then(function (data) {
                //                self.selectedDevice = data.data.responseObj;
                angular.extend(self.selectedDevice, data.data.responseObj);
                self.selectedDeviceId = self.selectedDevice.id;
                //                self.loadingDetails = false;
            });
            if (self.selectedDevice.deviceType === 'vcenter') {
                self.$http.post(self.Commands.data.devices.getVCenter, device.id).then(function (data) {
                    self.vcenter = data.data.responseObj;
                });
            }
            if (self.selectedDevice.deviceType === 'scvmm') {
                self.$http.post(self.Commands.data.devices.getSCVMM, device.id).then(function (data) {
                    self.scvmm = data.data.responseObj;
                });
            }
            switch (self.selectedDevice.deviceType) {
                case 'ChassisM1000e':
                case 'ChassisVRTX':
                case 'ChassisFX':
                case 'BladeServer':
                case 'RackServer':
                case 'TowerServer':
                case 'FXServer':
                case 'AggregatorIOM':
                case 'MXLIOM':
                case 'FXIOM':
                case 'Server':
                case 'dellswitch':
                case 'compellent':
                case 'equallogic':
                case 'emcvnx':
                    self.viewDetailsAvailable = true;
                    break;
                default:
                    self.viewDetailsAvailable = false;
            }
        };
        DevicesController.prototype.selectServerPoolRow = function (serverPool) {
            var self = this;
            self.serverPoolActiveTab = 'Servers';
            angular.copy(serverPool, self.selectedServerPool);
            angular.extend(self.safeSources.serverPoolsTab, {
                servers: angular.copy(serverPool.servers),
                users: angular.copy(serverPool.users)
            });
        };
        DevicesController.prototype.refreshDiscoveryJobs = function () {
            var self = this;
            self.$http.post(self.Commands.data.initialSetup.gettingStarted, null).then(function (data) {
                //Show navmenu when initial setup is completed instead of checking all steps - Requested by Donna                            
                //if (response.initialSetupCompleted && response.discoveryCompleted && response.templateCompleted && response.networksCompleted && response.configurationCompleted) {
                self.gettingStarted = data.data.requestObj;
            }).catch(function () {
            });
        };
        DevicesController.prototype.remove = function () {
            var self = this;
            var confirm = self.Dialog(('Confirm'), self.$translate.instant('DEVICES_RemoveConfirm'));
            confirm.then(function () {
                var ids = [];
                self.displayeddevices.forEach(function (device) {
                    if (device.isChecked) {
                        ids.push(device.id);
                    }
                });
                self.$http.post(self.Commands.data.devices.remove, { requestObj: ids })
                    .success(function () {
                    self.refresh();
                })
                    .error(function () {
                    //error
                });
            });
        };
        DevicesController.prototype.clearFilter = function () {
            var self = this;
            self.currentView = '';
            self.currentHealthView = '';
            self.currentServiceView = '';
            self.currentStateView = '';
            self.currentServerPoolView = '';
        };
        DevicesController.prototype.createNewServerPool = function () {
            var self = this;
            var createnewServerPoolModal = self.Modal({
                title: self.$translate.instant('RESOURCE_CREATE_SERVER_POOL_CreateServerPool'),
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/NewServerPoolWizard.html',
                controller: 'NewServerPoolWizardController as newServerPoolWizardController',
                params: {},
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function () {
                        console.log('closing');
                        createnewServerPoolModal.modal.close();
                    });
                },
                //TODO: make onfinish actually fire
                onComplete: function () {
                    self.refresh();
                }
            });
            createnewServerPoolModal.modal.show();
        };
        DevicesController.prototype.editServerPool = function () {
            var self = this, createnewServerPoolModal = self.Modal({
                title: self.$translate.instant('RESOURCE_EDIT_SERVER_POOL_EditServerPool'),
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/NewServerPoolWizard.html',
                controller: 'NewServerPoolWizardController as newServerPoolWizardController',
                params: {
                    pool: angular.copy(self.getChecked(self.serverpools)[0]),
                    editMode: true
                },
                onCancel: function (noConfirm) {
                    if (noConfirm)
                        createnewServerPoolModal.modal.close();
                    else {
                        self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function () {
                            createnewServerPoolModal.modal.close();
                        });
                    }
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            createnewServerPoolModal.modal.show();
        };
        DevicesController.prototype.removeServerPool = function () {
            var self = this;
            var confirm = self.Dialog(('Confirm'), self.$translate.instant('SERVERPOOLS_RemoveConfirm'));
            confirm.then(function () {
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.serverpools.remove, self.getCheckedIds(self.serverpools)).then(function () {
                    self.refresh();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                }).finally(function () {
                    d.resolve();
                });
            });
        };
        DevicesController.prototype.toggleAll = function (array) {
            var self = this, allSelected = self.getNumChecked(array) === array.length;
            angular.forEach(array, function (user) {
                user.isChecked = !allSelected;
            });
        };
        DevicesController.prototype.canDeleteAll = function (array) {
            var self = this;
            return !_.find(self.getChecked(array), { canDelete: false });
        };
        DevicesController.prototype.getChecked = function (array) {
            return _.filter(array, { isChecked: true });
        };
        DevicesController.prototype.getCheckedIds = function (array) {
            var self = this;
            return self.getChecked(array).map(function (pool) { return pool.id; });
        };
        DevicesController.prototype.isTypeChassis = function (type) {
            return !!_.find(['ChassisM1000e', 'ChassisVRTX', 'ChassisFX'], function (val) { return val === type; });
        };
        DevicesController.prototype.configureChassisButtonDisabled = function () {
            var self = this;
            var configurableCheckedChassis = self.getConfigurableCheckedChassis();
            return !configurableCheckedChassis || configurableCheckedChassis.length !== self.getChecked(self.devices).length;
        };
        DevicesController.prototype.getConfigurableCheckedChassis = function () {
            var self = this;
            var checkedDevices = self.getChecked(self.devices);
            return checkedDevices.length ? _.filter(checkedDevices, function (device) {
                return self.isTypeChassis(device.deviceType) && device.status !== 'updating';
            }).map(function (chassis) { return chassis.id; }) : undefined;
        };
        DevicesController.prototype.getNumChecked = function (array) {
            var self = this;
            return self.getChecked(array).length;
        };
        DevicesController.prototype.launchDiscoverWizard = function () {
            var self = this;
            var discoveryWizard = self.Modal({
                title: self.$translate.instant('DISCOVERY_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/discoverywizard.html',
                controller: 'DiscoveryWizardController as DiscoveryWizard',
                params: {
                    mode: 'resources'
                },
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DISCOVERY_Cancel_Confirmation'));
                    confirm.then(function () {
                        discoveryWizard.modal.dismiss();
                    });
                }
            });
            discoveryWizard.modal.show();
        };
        DevicesController.prototype.configureChassis = function () {
            var self = this;
            var configChassis = self.Modal({
                title: self.$translate.instant('DEVICES_CONFIGURE_CHASSIS_ConfigureChassis'),
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/ConfigureChassisWizard.html',
                controller: 'ConfigureChassisWizardController as ConfigureChassis',
                params: {
                    id: self.selectedDeviceId,
                    devices: self.getConfigurableCheckedChassis()
                },
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DEVICES_Apply_Firmware_Updates_Cancel_Confirmation')).then(function () {
                        configChassis.modal.dismiss();
                    });
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            configChassis.modal.show();
        };
        DevicesController.prototype.runInventory = function () {
            var self = this;
            self.$http.post(self.Commands.data.devices.runInventory, { requestObj: { id: self.selectedDeviceId } })
                .then(function () {
                //note that this is asynchronous
                self.MessageBox((self.$translate.instant('GENERIC_Alert')), (self.$translate.instant('DEVICES_Alert_RunInventorySuccess')));
                self.refresh();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        DevicesController.prototype.updateFirmware = function () {
            var self = this;
            var updateFirmware = self.Modal({
                title: self.$translate.instant('DEVICES_Apply_Resource_Updates_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/updateservicefirmware.html',
                controller: 'UpdateServiceFirmwareController as UpdateServiceFirmware',
                params: {
                    id: self.selectedDeviceId
                },
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DEVICES_Apply_Firmware_Updates_Cancel_Confirmation'));
                    confirm.then(function () {
                        updateFirmware.modal.dismiss();
                        self.refresh();
                    });
                },
                onComplete: function () {
                    self.refresh(); //When the modal is closed, update the data.
                }
            });
            updateFirmware.modal.show();
        };
        DevicesController.prototype.exportAll = function () {
            var self = this;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            self.doDownloadRequests('initial', '', deferred);
        };
        DevicesController.prototype.doDownloadRequests = function (call, id, deferred) {
            var self = this;
            var urlToCall;
            var data;
            urlToCall = self.Commands.data.downloads.status;
            data = { 'id': id };
            if (call === 'initial') {
                urlToCall = self.Commands.data.downloads.create;
                data = { 'type': 'devices' };
            }
            self.$http.post(urlToCall, { requestObj: data })
                .then(function (data) {
                switch (data.data.responseObj.status) {
                    case 'NOT_READY':
                        self.$timeout(function () {
                            self.doDownloadRequests('status', data.data.responseObj.id, deferred);
                        }, 5000);
                        break;
                    case 'READY':
                        window.location = 'downloads/getfile/' + data.data.responseObj.id;
                        deferred.resolve();
                        break;
                    case 'ERROR':
                        deferred.resolve();
                        var errorObj = { message: self.$translate.instant('DEVICES_ExportAll_ErrorExportingDevices'), details: '' };
                        self.GlobalServices.DisplayError(errorObj);
                        break;
                }
            }).catch(function (data) {
                deferred.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        DevicesController.prototype.openFirmwareReport = function (deviceId) {
            var self = this;
            if (!self.GlobalServices.IsInRole('administrator')) {
                return;
            }
            var firmwareReportModal = self.Modal({
                title: self.$translate.instant('SERVICES_RESOURCE_FirmwareReportTitle'),
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/ResourceComplianceReport.html',
                controller: 'ResourceComplianceReportController as resourceComplianceReportController',
                params: {
                    id: deviceId
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            firmwareReportModal.modal.show();
        };
        DevicesController.prototype.jobsModal = function () {
            var self = this;
            var jobsModal = self.Modal({
                title: 'Jobs',
                modalSize: 'modal-lg',
                templateUrl: 'views/jobsModal.html',
                controller: 'JobsModalController as jobs',
                params: {},
                onComplete: function () {
                }
            });
            jobsModal.modal.show();
        };
        DevicesController.prototype.disableUpdateResourcesButton = function () {
            var self = this, count, selectedDevices = self.selectedDevices();
            return !selectedDevices.length || !!_.find(selectedDevices, function (device) {
                if ((device.availability != 'notinuse' && device.status != 'ready') || device.state == 'unmanaged')
                    return true;
                if (device.availability == 'inuse' && self.isServer(device))
                    return true;
                if (device.compliant == 'compliant' || device.compliant == 'updating')
                    return true;
                if (self.isChassis(device) || self.isDellSwitch(device) || self.isServer(device)) {
                    count++;
                    if (count > 1)
                        return true;
                }
                if (self.isStorage(device))
                    return true;
                //if (self.isFirmwareUpdated()) {
                //    returnVal = false;
                //    self.isFirmwareUpdated(false);
                //}
                //return returnVal;
            });
        };
        DevicesController.prototype.isChassis = function (device) {
            return (device.deviceType === 'ChassisM1000e' || device.deviceType === 'ChassisVRTX' || device.deviceType === 'ChassisFX');
        };
        DevicesController.prototype.isFX2 = function (device) {
            return (device.deviceType === 'ChassisFX');
        };
        DevicesController.prototype.isIOM = function (device) {
            return (device.deviceType === 'AggregatorIOM' || device.deviceType === 'MXLIOM' || device.deviceType === 'FXIOM');
        };
        DevicesController.prototype.isServer = function (device) {
            return (device.deviceType === 'RackServer' || device.deviceType === 'TowerServer' || device.deviceType === 'BladeServer' || device.deviceType === 'FXServer' || device.deviceType === 'Server');
        };
        DevicesController.prototype.isStorage = function (device) {
            return device.deviceType == 'storage' || device.deviceType == 'compellent' || device.deviceType == 'equallogic' || device.deviceType == 'netapp' || device.deviceType == 'emcvnx';
        };
        DevicesController.prototype.isEqualLogic = function (device) {
            return (device.deviceType === 'equallogic');
        };
        DevicesController.prototype.isCompellent = function (device) {
            return (device.deviceType === 'compellent');
        };
        DevicesController.prototype.isEmcvnx = function (device) {
            return device.deviceType === "emcvnx";
        };
        DevicesController.prototype.isNetApp = function (device) {
            return (device.deviceType === 'netapp');
        };
        DevicesController.prototype.isDellSwitch = function (device) {
            return (device.deviceType === 'dellswitch' || device.deviceType === 'genericswitch');
        };
        DevicesController.$inject = ['$http', '$window', '$translate',
            '$timeout', 'Dialog', 'Loading',
            '$q', 'Modal', 'Commands',
            'GlobalServices', 'Messagebox', '$rootScope',
            '$routeParams', '$filter', 'constants'];
        return DevicesController;
    }());
    asm.DevicesController = DevicesController;
    angular
        .module('app')
        .controller('DevicesController', DevicesController);
})(asm || (asm = {}));
//# sourceMappingURL=devices.js.map
var asm;
(function (asm) {
    "use strict";
    var DeviceSummaryController = (function () {
        function DeviceSummaryController($http) {
            this.$http = $http;
            this.refresh();
        }
        DeviceSummaryController.prototype.activate = function () {
            var self = this;
        };
        DeviceSummaryController.prototype.refresh = function () {
            var self = this;
            //Get All Jobs
        };
        DeviceSummaryController.$inject = ['$http'];
        return DeviceSummaryController;
    }());
    asm.DeviceSummaryController = DeviceSummaryController;
    angular.module('app').
        controller('DeviceSummaryController', DeviceSummaryController);
})(asm || (asm = {}));
//# sourceMappingURL=devicesummary.js.map
var asm;
(function (asm) {
    var GettingstartedController = (function () {
        function GettingstartedController(Modal, $rootScope, $http, $timeout, Commands, $location, $translate, Dialog, GlobalServices) {
            this.Modal = Modal;
            this.$rootScope = $rootScope;
            this.$http = $http;
            this.$timeout = $timeout;
            this.Commands = Commands;
            this.$location = $location;
            this.$translate = $translate;
            this.Dialog = Dialog;
            this.GlobalServices = GlobalServices;
            this.oobe = {};
            this.refreshTimer = null;
            this.urlList = {
                publishTemplates: "/templates",
                asm: "",
                asmCommunity: ""
            };
            var self = this;
            self.refresh();
        }
        GettingstartedController.prototype.$onDestroy = function () {
            var self = this;
            if (self.refreshTimer)
                self.$timeout.cancel(self.refreshTimer);
        };
        GettingstartedController.prototype.canDeactivate = function () {
            var self = this;
            var allow = true;
            //Any logic to prevent navigating away (change allow to false to prevent)
            return allow;
        };
        GettingstartedController.prototype.refresh = function () {
            var self = this;
            self.$http.post(self.Commands.data.initialSetup.gettingStarted, null)
                .then(function (data) {
                if (self.refreshTimer)
                    self.$timeout.cancel(self.refreshTimer);
                self.oobe = data.data.responseObj;
                if (!self.oobe.initialSetupCompleted) {
                    self.setupWizard();
                }
                else {
                    self.refreshTimer = self.$timeout(function () { self.refresh(); }, 30000);
                }
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        GettingstartedController.prototype.update = function () {
            var self = this;
            self.$http.post(self.Commands.data.initialSetup.updateGettingStarted, self.oobe)
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        GettingstartedController.prototype.launchDiscoverWizard = function () {
            var self = this;
            var discoveryWizard = self.Modal({
                title: self.$translate.instant('DISCOVERY_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/discoverywizard.html',
                controller: 'DiscoveryWizardController as DiscoveryWizard',
                params: {
                    mode: 'gettingstarted'
                },
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DISCOVERY_Cancel_Confirmation'));
                    confirm.then(function () {
                        discoveryWizard.modal.dismiss();
                    });
                }
            });
            discoveryWizard.modal.show();
        };
        GettingstartedController.prototype.setupWizard = function () {
            var self = this;
            var setupWizard = self.Modal({
                title: self.$translate.instant('SETUPWIZARD_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/setupwizard.html',
                controller: 'SetupWizardController as SetupWizard',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            setupWizard.modal.show();
        };
        GettingstartedController.prototype.addNetworks = function () {
            var self = this;
            var addNetworks = self.Modal({
                title: self.$translate.instant('GENERIC_Networks'),
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/DefineNetworksModal.html',
                controller: 'DefineNetworksController as defineNetworksController',
                params: {},
                onComplete: function () {
                    self.refresh();
                }
            });
            addNetworks.modal.show();
        };
        GettingstartedController.prototype.addExistingService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/AddExistingService.html',
                controller: 'AddExistingServiceController as addExistingServiceController',
                onCancel: function () {
                    var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        addServiceWizard.modal.dismiss();
                        self.refresh();
                    });
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            addServiceWizard.modal.show();
        };
        GettingstartedController.prototype.configResources = function () {
            var self = this;
            var configResources = self.Modal({
                title: self.$translate.instant('DEVICES_CONFIGURE_CHASSIS_ConfigureChassis'),
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/ConfigureChassisWizard.html',
                controller: 'ConfigureChassisWizardController as ConfigureChassis',
                params: {
                    mode: 'global'
                },
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DEVICES_Apply_Firmware_Updates_Cancel_Confirmation')).then(function () {
                        configResources.modal.dismiss();
                    });
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            configResources.modal.show();
        };
        GettingstartedController.prototype.restoreFromBackup = function () {
            var self = this;
            var backupAndRestore = self.Modal({
                title: self.$translate.instant('BACKUPANDRESTORE_btnrestorenow'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/backupandrestore/restorenow.html',
                controller: 'RestoreNowModalController as restoreNow',
                params: {},
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('DEVICES_Apply_Firmware_Updates_Cancel_Confirmation')).then(function () {
                        backupAndRestore.modal.dismiss();
                    });
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            backupAndRestore.modal.show();
        };
        GettingstartedController.prototype.goTo = function (url) {
            var self = this;
            self.$location.path(url);
        };
        GettingstartedController.$inject = ['Modal', '$rootScope', '$http',
            '$timeout', 'Commands', '$location', '$translate', 'Dialog', 'GlobalServices'
        ];
        return GettingstartedController;
    }());
    asm.GettingstartedController = GettingstartedController;
    angular
        .module('app')
        .controller('GettingstartedController', GettingstartedController);
})(asm || (asm = {}));
//# sourceMappingURL=gettingStarted.js.map
var asm;
(function (asm) {
    var HomeController = (function () {
        function HomeController($http, $filter, $translate, $timeout, GlobalServices, Modal, $location, dialog, Commands) {
            this.$http = $http;
            this.$filter = $filter;
            this.$translate = $translate;
            this.$timeout = $timeout;
            this.GlobalServices = GlobalServices;
            this.Modal = Modal;
            this.$location = $location;
            this.dialog = dialog;
            this.Commands = Commands;
            this.wedge = 'red';
            this.popoverbuttontext = 'Test';
            this.wsMessages = [];
            var self = this;
            // this.wedge = "red";
            this.loadingServerUtilization = true;
            this.loadingServerHealth = true;
            this.servicesDataCriteriaObj = {
                paginationObj: { currentPage: 0, rowCountPerPage: 9999, currentCount: 0, totalItemsCount: 0 }
            };
            this.viewByOptions = [
                this.$translate.instant('DASHBOARD_AllDeployments'),
                this.$translate.instant('DASHBOARD_LastTen'),
                this.$translate.instant('DASHBOARD_LastWeek'),
                this.$translate.instant('DASHBOARD_LastMonth'),
                this.$translate.instant('DASHBOARD_LastSixMonths'),
                this.$translate.instant('DASHBOARD_LastYear')
            ];
            this.viewBy = $translate.instant('DASHBOARD_AllDeployments');
            this.config = {};
            this.serverHealth = {
                green: 0,
                unknown: 0,
                yellow: 0,
                red: 0
            };
            this.parseServerPoolsProxy = function (data) {
                self.parseServerPools(data);
            };
            this.servicesData = { servicecount: 12, servicecriticalcount: 5, servicewarningcount: 2, serviceunknowncount: 5, servicesuccesscount: 0, servicecancelledcount: 0 };
            this.licenseDataLoaded = false;
            this.isDeployServiceEnabled = false;
        }
        HomeController.prototype.activate = function () {
            var self = this;
            //service overview config
            this.config = {
                options: {
                    chart: {
                        type: 'pie',
                        renderTo: 'serviceOverviewPie',
                        animation: false
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            size: '100%',
                            //innerSize: '75%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3,
                            point: {
                                events: {
                                    click: function (evt) {
                                        self.updateWedge(this.name);
                                    }
                                }
                            }
                        }
                    }
                },
                size: {
                    height: 260,
                    width: 260
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: [
                            { name: 'Deployed', y: this.servicesData.servicesuccesscount, color: '#7AB800', sliced: false, selected: false },
                            { name: 'In Progress', y: this.servicesData.serviceunknowncount, color: '#0085c3', sliced: false, selected: false },
                            { name: 'Warning', y: this.servicesData.servicewarningcount, color: '#efb106', sliced: false, selected: false },
                            { name: 'Error', y: this.servicesData.servicecriticalcount, color: '#d00e28', sliced: false, selected: false },
                            { name: 'Cancelled', y: this.servicesData.servicecancelledcount, color: '#ee6411', sliced: false, selected: false }
                        ],
                        innerSize: '75%'
                    }]
            };
            //server health config
            this.serverHealthConfig = {
                options: {
                    chart: {
                        type: 'pie',
                        renderTo: 'serverHealthPie',
                        animation: false
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            size: '100%',
                            //innerSize: '75%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3
                        }
                    }
                },
                size: {
                    height: 200,
                    width: 200
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: [],
                        innerSize: '75%'
                    }]
            };
            //server utilization
            this.serverUtilizationConfig = {
                options: {
                    chart: {
                        type: 'pie',
                        renderTo: 'serverUtilizationPie',
                        animation: false
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            size: '100%',
                            //innerSize: '75%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3
                        }
                    }
                },
                size: {
                    height: 200,
                    width: 200
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: [],
                        innerSize: '75%'
                    }]
            };
            //Storage Capacity
            this.storageCapacityConfig = {
                options: {
                    chart: {
                        type: 'pie',
                        renderTo: 'dashboardStorageCapacityPie',
                        animation: false
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            size: '100%',
                            //innerSize: '75%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3
                        }
                    },
                    tooltip: {
                        formatter: function () {
                            return "<b>" + this.key + ": </b>" + this.y + "%";
                        }
                    }
                },
                size: {
                    height: 200,
                    width: 200
                },
                spacingBottom: 0,
                spacingTop: 0,
                spacingLeft: 0,
                spacingRight: 0,
                series: [{
                        data: [],
                        innerSize: '75%'
                    }]
            };
            //base server pool usage bar - possible service
            this.serverPoolUsageBaseConfig = {
                options: {
                    chart: {
                        type: 'bar',
                        animation: false,
                        style: { 'font-family': 'inherit', },
                        height: 30,
                        spacingTop: 0,
                        spacingBottom: 0,
                        margin: [0, 0, 0, 0]
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        bar: {
                            allowPointSelect: true,
                            size: '100%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3,
                            stacking: 'percent'
                        }
                    },
                    legend: { enabled: false },
                    xAxis: { labels: { enabled: false }, gridLineWidth: 0, lineColor: 'transparent', tickLength: 0 },
                    yAxis: { labels: { enabled: false }, gridLineWidth: 0, lineColor: 'transparent', tickLength: 0, title: '' },
                    tooltip: { enabled: false }
                },
                margin: 0,
                padding: 0,
                series: []
            };
            this.serverPoolUsageConfigs = [];
            this.dashboardStorageUsageConfig_equallogic = {
                options: {
                    chart: {
                        type: 'bar',
                        animation: false,
                        style: { 'font-family': 'inherit', },
                        height: 30,
                        spacingTop: 0,
                        spacingBottom: 0,
                        margin: [0, 0, 0, 0]
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        bar: {
                            allowPointSelect: true,
                            size: '100%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3,
                            stacking: 'percent'
                        }
                    },
                    legend: { enabled: false },
                    xAxis: { labels: { enabled: false }, gridLineWidth: 0, lineColor: 'transparent', tickLength: 0 },
                    yAxis: { labels: { enabled: false }, gridLineWidth: 0, lineColor: 'transparent', tickLength: 0, title: '' },
                    tooltip: { enabled: false }
                },
                margin: 0,
                padding: 0,
                series: []
            };
            this.dashboardStorageUsageConfig_compellent = {
                options: {
                    chart: {
                        type: 'bar',
                        animation: false,
                        style: { 'font-family': 'inherit', },
                        height: 30,
                        spacingTop: 0,
                        spacingBottom: 0,
                        margin: [0, 0, 0, 0]
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        bar: {
                            allowPointSelect: true,
                            size: '100%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3,
                            stacking: 'percent'
                        }
                    },
                    legend: { enabled: false },
                    xAxis: { labels: { enabled: false }, gridLineWidth: 0, lineColor: 'transparent', tickLength: 0 },
                    yAxis: { labels: { enabled: false }, gridLineWidth: 0, lineColor: 'transparent', tickLength: 0, title: '' },
                    tooltip: { enabled: false }
                },
                margin: 0,
                padding: 0,
                series: []
            };
            this.dashboardStorageUsageConfig_netapp = {
                options: {
                    chart: {
                        type: 'bar',
                        animation: false,
                        style: { 'font-family': 'inherit', },
                        height: 30,
                        spacingTop: 0,
                        spacingBottom: 0,
                        margin: [0, 0, 0, 0]
                    },
                    title: {
                        text: ''
                    },
                    plotOptions: {
                        bar: {
                            allowPointSelect: true,
                            size: '100%',
                            dataLabels: { enabled: false },
                            states: { select: { borderColor: '#0085c3' } },
                            borderWidth: 3,
                            stacking: 'percent'
                        }
                    },
                    legend: { enabled: false },
                    xAxis: { labels: { enabled: false }, gridLineWidth: 0, lineColor: 'transparent', tickLength: 0 },
                    yAxis: { labels: { enabled: false }, gridLineWidth: 0, lineColor: 'transparent', tickLength: 0, title: '' },
                    tooltip: { enabled: false }
                },
                margin: 0,
                padding: 0,
                series: []
            };
            this.refresh('all');
        };
        //Reusable refresh method that we can put on a timeout
        HomeController.prototype.refresh = function (mode) {
            var self = this;
            this.loadingServiceOverview = true;
            var getServicesDashboardData = false;
            var getServices = false;
            var filterObj = [];
            if (self.viewBy != '' && self.viewBy != self.$translate.instant('DASHBOARD_AllDeployments')) {
                switch (self.viewBy) {
                    case this.$translate.instant('DASHBOARD_LastTen'):
                        self.servicesDataCriteriaObj.paginationObj.rowCountPerPage = 10;
                        filterObj = [];
                        break;
                    case this.$translate.instant('DASHBOARD_LastWeek'):
                        var week = moment().subtract('week', 6).toISOString();
                        self.servicesDataCriteriaObj.paginationObj.rowCountPerPage = 9999;
                        filterObj.push({ field: 'deployedOn', op: '>=', opTarget: [week] });
                        break;
                    case this.$translate.instant('DASHBOARD_LastMonth'):
                        var month = moment().subtract('month', 1).toISOString();
                        self.servicesDataCriteriaObj.paginationObj.rowCountPerPage = 9999;
                        filterObj.push({ field: 'deployedOn', op: '>=', opTarget: [month] });
                        break;
                    case this.$translate.instant('DASHBOARD_LastSixMonths'):
                        var sixmonths = moment().subtract('month', 6).toISOString();
                        self.servicesDataCriteriaObj.paginationObj.rowCountPerPage = 9999;
                        filterObj.push({ field: 'deployedOn', op: '>=', opTarget: [sixmonths] });
                        break;
                    case this.$translate.instant('DASHBOARD_LastYear'):
                        var oneyear = moment().subtract('year', 1).toISOString();
                        self.servicesDataCriteriaObj.paginationObj.rowCountPerPage = 9999;
                        filterObj.push({ field: 'deployedOn', op: '>=', opTarget: [oneyear] });
                        break;
                    default:
                        self.servicesDataCriteriaObj.paginationObj.rowCountPerPage = 9999;
                        break;
                }
            }
            self.servicesDataCriteriaObj.filterObj = filterObj;
            //self.services.criteriaObj.filterObj = filterObj;
            var request = {
                requestObj: null,
                criteriaObj: self.servicesDataCriteriaObj
            };
            this.$http.post(self.Commands.data.dashboard.getServicesDashboardData, request).then(function (data) {
                self.servicesData = data.data.responseObj;
                self.config.series.data = self.config.series.data;
                self.config.series[0].data[0].y = self.servicesData.servicesuccesscount;
                self.config.series[0].data[1].y = self.servicesData.serviceunknowncount;
                self.config.series[0].data[2].y = self.servicesData.servicewarningcount;
                self.config.series[0].data[3].y = self.servicesData.servicecriticalcount;
                self.config.series[0].data[4].y = self.servicesData.servicecancelledcount;
                getServicesDashboardData = true;
                if (getServicesDashboardData && getServices)
                    self.loadingServiceOverview = false;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
            this.$http.post(self.Commands.data.services.getServiceList, request).then(function (data) {
                self.services = data.data.responseObj;
                getServices = true;
                if (getServicesDashboardData && getServices)
                    self.loadingServiceOverview = false;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
            if (mode == "all") {
                this.loadingServerUtilization = true;
                this.loadingServerHealth = true;
                this.loadingStorageCapacity = true;
                this.loadingNotifications = true;
                this.$http.post(self.Commands.data.dashboard.getDashboardLandingPageData, null).then(function (data) {
                    self.dashboard = data.data.responseObj;
                    //JUST FOR LICENSE TESTING - PLEASE REMOVE
                    self.dashboard.licenseData.availablenodes = 0;
                    self.dashboard.licenseData.expiressoon = true;
                    self.licenseDataLoaded = true;
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
                this.$http.post(self.Commands.data.serverpools.getServerPools, null).then(function (data) {
                    self.parseServerPoolsProxy(data);
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
                this.$http.post(self.Commands.data.dashboard.getDashboardStorageData, null).then(function (data) {
                    self.storageUtilization = data.data.responseObj;
                    self.storageCapacityConfig.series[0].data = [];
                    self.storageCapacityConfig.series[0].data.push({ name: 'Storage Used', y: self.storageUtilization.total_pctused, color: '#0685C2' }, { name: 'Storage Available', y: self.storageUtilization.total_pctfree, color: '#CCCCCC' });
                    self.dashboardStorageUsageConfig_equallogic.series.push({ name: 'Unused', data: [self.storageUtilization.equallogic_pctfree], color: '#CCCCCC', id: 'unused', states: { hover: { enabled: false } } }, { name: 'In Use', data: [self.storageUtilization.equallogic_pctused], color: '#0685C2', id: 'inuse', states: { hover: { enabled: false } } });
                    self.dashboardStorageUsageConfig_compellent.series.push({ name: 'Unused', data: [self.storageUtilization.compellent_pctfree], color: '#CCCCCC', id: 'unused', states: { hover: { enabled: false } } }, { name: 'In Use', data: [self.storageUtilization.compellent_pctused], color: '#0685C2', id: 'inuse', states: { hover: { enabled: false } } });
                    self.dashboardStorageUsageConfig_netapp.series.push({ name: 'Unused', data: [self.storageUtilization.netapp_pctfree], color: '#CCCCCC', id: 'unused', states: { hover: { enabled: false } } }, { name: 'In Use', data: [self.storageUtilization.netapp_pctused], color: '#0685C2', id: 'inuse', states: { hover: { enabled: false } } });
                    this.loadingStorageCapacity = false;
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
                this.$http.post(self.Commands.data.templates.getQuickTemplateList, null).then(function (data) {
                    self.templates = data.data.responseObj.forEach(function (template) {
                        if (template.draft == false)
                            self.isDeployServiceEnabled = true;
                    });
                }).catch(function (data) {
                    self.isDeployServiceEnabled = true;
                    self.GlobalServices.DisplayError(data.data);
                });
                this.$http.post(self.Commands.data.dashboard.getDashboardNotifications, null).then(function (data) {
                    self.loadingNotifications = false;
                }).catch(function (data) {
                    self.loadingNotifications = false;
                    self.GlobalServices.DisplayError(data.data);
                });
                this.$http.post(self.Commands.data.initialSetup.gettingStarted, null).then(function (data) {
                    //Show navmenu when initial setup is completed instead of checking all steps - Requested by Donna                            
                    //if (response.initialSetupCompleted && response.discoveryCompleted && response.templateCompleted && response.networksCompleted && response.configurationCompleted) {
                    self.gettingStarted = data.data.requestObj;
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            }
        };
        HomeController.prototype.parseServerPools = function (response) {
            var self = this;
            var data = response.data.responseObj;
            var serverHealth = {
                green: 0,
                yellow: 0,
                red: 0,
                unknown: 0,
                total: 0
            };
            var serverUtilization = {
                available: 0,
                deployed: 0,
                pending: 0,
                unknown: 0,
                deploying: 0,
                errors: 0,
                poweringoff: 0,
                poweringon: 0,
                reserved: 0,
                totalavailable: 0,
                totalinuse: 0,
                totalservers: 0,
                pctavailable: 0,
                pctinuse: 0,
                serverpools: [],
                currentview: 'inuse'
            };
            var servers = [];
            //foreach serverpool
            data.forEach(function (pool) {
                var serverpool = {
                    id: pool.id,
                    name: pool.name,
                    available: 0,
                    deployed: 0,
                    pending: 0,
                    unknown: 0,
                    deploying: 0,
                    errors: 0,
                    poweringoff: 0,
                    poweringon: 0,
                    reserved: 0,
                    totalavailable: 0,
                    totalinuse: 0,
                    totalservers: 0
                };
                pool.servers.forEach(function (server) {
                    var newServer = false;
                    if (servers.indexOf(server.id) == -1) {
                        servers.push(server.id);
                        newServer = true;
                    }
                    if (newServer) {
                        switch (server.health.toLowerCase()) {
                            case "green":
                                serverHealth.green++;
                                break;
                            case "yellow":
                                serverHealth.yellow++;
                                break;
                            case "red":
                                serverHealth.red++;
                                break;
                            default:
                                serverHealth.unknown++;
                                break;
                        }
                        serverHealth.total++;
                    }
                    switch (server.state) {
                        case 'available':
                            serverpool.available++;
                            serverpool.totalavailable++;
                            serverpool.totalservers++;
                            if (newServer) {
                                serverUtilization.available++;
                                serverUtilization.totalavailable++;
                                serverUtilization.totalservers++;
                            }
                            break;
                        case 'deployed':
                            serverpool.deployed++;
                            serverpool.totalinuse++;
                            serverpool.totalservers++;
                            if (newServer) {
                                serverUtilization.deployed++;
                                serverUtilization.totalinuse++;
                                serverUtilization.totalservers++;
                            }
                            break;
                        case 'pending':
                            serverpool.pending++;
                            serverpool.totalavailable++;
                            serverpool.totalservers++;
                            if (newServer) {
                                serverUtilization.pending++;
                                serverUtilization.totalavailable++;
                                serverUtilization.totalservers++;
                            }
                            break;
                        case 'deploying':
                            serverpool.deploying++;
                            serverpool.totalinuse++;
                            serverpool.totalservers++;
                            if (newServer) {
                                serverUtilization.deploying++;
                                serverUtilization.totalinuse++;
                                serverUtilization.totalservers++;
                            }
                            break;
                        case 'errors':
                            serverpool.errors++;
                            serverpool.totalinuse++;
                            serverpool.totalservers++;
                            if (newServer) {
                                serverUtilization.errors++;
                                serverUtilization.totalinuse++;
                                serverUtilization.totalservers++;
                            }
                            break;
                        case 'poweringoff':
                            serverpool.poweringoff++;
                            serverpool.totalavailable++;
                            serverpool.totalservers++;
                            if (newServer) {
                                serverUtilization.poweringoff++;
                                serverUtilization.totalavailable++;
                                serverUtilization.totalservers++;
                            }
                            break;
                        case 'poweringon':
                            serverpool.poweringon++;
                            serverpool.totalavailable++;
                            serverpool.totalservers++;
                            if (newServer) {
                                serverUtilization.poweringon++;
                                serverUtilization.totalavailable++;
                                serverUtilization.totalservers++;
                            }
                            break;
                        case 'reserved':
                            serverpool.reserved++;
                            serverpool.totalinuse++;
                            serverpool.totalservers++;
                            if (newServer) {
                                serverUtilization.reserved++;
                                serverUtilization.totalinuse++;
                                serverUtilization.totalservers++;
                            }
                            break;
                        case 'unknown':
                        default:
                            serverpool.unknown++;
                            serverpool.totalavailable++;
                            serverpool.totalservers++;
                            if (newServer) {
                                serverUtilization.unknown++;
                                serverUtilization.totalavailable++;
                                serverUtilization.totalservers++;
                            }
                            break;
                    }
                });
                serverUtilization.serverpools.push(serverpool);
            });
            if (serverUtilization.totalservers > 0) {
                serverUtilization.pctavailable = Math.floor(100 * serverUtilization.totalavailable / serverUtilization.totalservers);
                serverUtilization.pctinuse = Math.floor(100 * serverUtilization.totalinuse / serverUtilization.totalservers);
            }
            if (serverUtilization.totalavailable > 0)
                serverUtilization.currentview = 'available';
            self.serverPoolUtilization = serverUtilization;
            self.serverHealth = serverHealth;
            self.serverHealthConfig.series.data = self.serverHealthConfig.series.data;
            self.loadingServerUtilization = false;
            self.loadingServerHealth = false;
            self.serverHealthConfig.series[0].data = [];
            self.serverHealthConfig.series[0].data.push({ name: 'Healthy', y: self.serverHealth.green, color: '#7AB800', sliced: false, selected: false }, { name: 'Unknown', y: self.serverHealth.unknown, color: '#cccccc', sliced: false, selected: false }, { name: 'Warning', y: self.serverHealth.yellow, color: '#efb106', sliced: false, selected: false }, { name: 'Critical', y: self.serverHealth.red, color: '#d00e28', sliced: false, selected: false });
            self.serverUtilizationConfig.series[0].data = [];
            self.serverUtilizationConfig.series[0].data.push({ name: 'Servers In Use', y: self.serverPoolUtilization.totalinuse, color: '#0685C2' }, { name: 'Servers Available', y: self.serverPoolUtilization.totalavailable, color: '#CCCCCC' });
            self.buildServerPoolBarGraphs();
            //reset loading watchers
            this.loadingServerUtilization = false;
            this.loadingServerHealth = false;
        };
        HomeController.prototype.buildServerPoolBarGraphs = function () {
            var self = this;
            self.serverPoolUtilization.serverpools.forEach(function (pool) {
                var graphConfig = {};
                angular.copy(self.serverPoolUsageBaseConfig, graphConfig);
                graphConfig.series.push({ name: 'Unused', data: [pool.totalavailable], color: '#CCCCCC', id: 'unused', states: { hover: { enabled: false } } });
                graphConfig.series.push({ name: 'In Use', data: [pool.totalinuse], color: '#0685C2', id: 'inuse', states: { hover: { enabled: false } } });
                self.serverPoolUsageConfigs.push(graphConfig);
            });
        };
        HomeController.prototype.updateWedge = function (name) {
            var self = this;
            //wrap in timeout to get angular to run a digest
            this.$timeout(function () {
                if (name === "Deployed")
                    self.wedge = 'green';
                if (name === "In Progress")
                    self.wedge = "unknown";
                if (name === "Warning")
                    self.wedge = 'yellow';
                if (name === "Error")
                    self.wedge = 'red';
                if (name === "Cancelled")
                    self.wedge = 'orange';
            }, 0);
        };
        HomeController.prototype.changeType = function () {
            if (this.config.options.chart.type == 'pie') {
                this.config.options.chart.type = 'line';
            }
            else {
                this.config.options.chart.type = 'pie';
            }
        };
        HomeController.prototype.viewByChanged = function () {
            this.refresh('services');
        };
        HomeController.prototype.createTemplate = function () {
            var self = this;
            var createTemplateModal = self.Modal({
                title: self.$translate.instant('TEMPLATES_CreateTemplate'),
                modalSize: 'modal-lg',
                templateUrl: 'views/createtemplate.html',
                controller: 'CreateTemplateModalController as createTemplateModalController',
                params: {
                    type: 'new'
                },
                onComplete: function (id) {
                    self.$timeout(function () {
                        self.$location.path('templatebuilder/' + id + '/edit');
                    }, 500);
                },
            });
            createTemplateModal.modal.show();
        };
        HomeController.prototype.addExistingService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/AddExistingService.html',
                controller: 'AddExistingServiceController as addExistingServiceController',
                params: {},
                onCancel: function () {
                    //THIS FUNCTION IS CALLED ON MODAL.CANCEL, not WIZARD.CANCEL
                    //var confirm : self.Dialog(self.$translate.instant('GENERIC_Confirm'), 'Are you sure you want to cancel?');
                    var confirm = self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        addServiceWizard.modal.dismiss();
                        self.$timeout(function () {
                            self.activate();
                        }, 500);
                    });
                },
                onComplete: function () {
                    self.$timeout(function () {
                        self.activate(); //When the modal is closed, update the data.
                    }, 500);
                }
            });
            addServiceWizard.modal.show();
        };
        HomeController.prototype.deployNewService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICES_NEW_SERVICE_DeployService'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/DeployService/DeployServiceWizard.html',
                controller: 'DeployServiceWizard as deployServiceWizard',
                params: {},
                onCancel: function () {
                    self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function () {
                        console.log('closing');
                        addServiceWizard.modal.close();
                    });
                }
            });
            addServiceWizard.modal.show();
        };
        HomeController.prototype.testing123 = function () {
            if (this.wedge != 'red')
                this.wedge = 'red';
            else
                this.wedge = 'unknown';
        };
        HomeController.prototype.Connect = function () {
            var self = this;
            self.wsMessages.messages = 'Connecting...';
            self.ws = new WebSocket('ws://localhost:1750/api/WebSocket');
            self.ws.onopen = function () {
                self.wsMessages = 'Connected.';
            };
            self.ws.onmessage = function (evt) {
                self.$timeout(function () {
                    self.wsMessages = evt.data;
                }, 100);
            };
            self.ws.onerror = function (evt) {
                self.wsMessages = evt.message;
            };
            self.ws.onclose = function () {
                self.wsMessages = 'Disconnected.';
            };
        };
        HomeController.prototype.SendMessage = function () {
            var self = this;
            if (self.ws.readyState === WebSocket.OPEN) {
                self.ws.send('Test');
            }
            else {
                self.wsMessages = 'Connection is closed.';
            }
        };
        HomeController.prototype.goTo = function (route) {
            var self = this;
            self.$location.path(route);
        };
        HomeController.$inject = ['$http', '$filter', '$translate', '$timeout', 'GlobalServices', 'Modal', '$location', 'Dialog', 'Commands'];
        return HomeController;
    }());
    asm.HomeController = HomeController;
    angular
        .module("app")
        .controller("HomeController", HomeController);
})(asm || (asm = {}));
//# sourceMappingURL=home.js.map
var asm;
(function (asm) {
    var ServiceController = (function () {
        function ServiceController($http, $timeout, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, $routeParams, constants, $location, $window) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$routeParams = $routeParams;
            this.constants = constants;
            this.$location = $location;
            this.$window = $window;
            this.activeTab = 'serviceDetails';
            var self = this;
            self.serviceId = self.$routeParams.id;
            self.firmwarereport = self.$routeParams.firmwarereport;
            self.refresh();
        }
        ServiceController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.getService(self.serviceId).then(function (data) {
                self.service = data.data.responseObj;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        ServiceController.prototype.editService = function () {
            var self = this;
            var editServiceModal = self.Modal({
                title: self.$translate.instant('SERVICE_DETAIL_EditServiceInformation'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/editService.html',
                controller: 'EditServiceModalController as editService',
                params: {
                    id: self.service.id
                },
                onComplete: function () {
                    self.refreshService = !self.refreshService;
                }
            });
            editServiceModal.modal.show();
        };
        ServiceController.prototype.showPortView = function (tab, server) {
            var self = this;
            self.activeTab = tab;
            //set server id
            self.portviewServer = server;
        };
        ServiceController.prototype.getService = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.services.getServiceById, { id: id });
        };
        ServiceController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$routeParams', 'constants', '$location', '$window'];
        return ServiceController;
    }());
    asm.ServiceController = ServiceController;
    angular
        .module("app")
        .controller("ServiceController", ServiceController);
})(asm || (asm = {}));
//# sourceMappingURL=service.js.map
var asm;
(function (asm) {
    var ServicesController = (function () {
        function ServicesController($http, $timeout, $q, $translate, Modal, Loading, dialog, Commands, GlobalServices, $location, constants, $routeParams, $rootScope, $route) {
            var _this = this;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.dialog = dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$location = $location;
            this.constants = constants;
            this.$routeParams = $routeParams;
            this.$rootScope = $rootScope;
            this.$route = $route;
            this.smartTableOptions = {
                pages: 7,
                itemsPerPage: 10
            };
            this.tileView = false;
            this.actions = {
                viewDetails: function () { return _this.viewDetails(); },
                exportService: function () { return _this.exportService(); },
                updateFirmware: function () { return _this.updateFirmware(); }
            };
            this.dropdownOptions = angular.copy(this.constants.serviceHealths);
            var self = this;
            var health = _.find(self.constants.serviceHealths, { alias: self.$routeParams.health });
            self.filterBy = health ? health.id : undefined;
            self.dropdownOptions.unshift({ id: undefined, name: self.$translate.instant("SERVICES_All") });
            self.refresh();
        }
        Object.defineProperty(ServicesController.prototype, "safeSource", {
            get: function () {
                var self = this;
                return self._safeSource;
            },
            set: function (value) {
                var self = this;
                self._safeSource = value;
            },
            enumerable: true,
            configurable: true
        });
        ServicesController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            // get all services
            self.$q.all([
                self.getServiceList().then(function (data) {
                    //Copy for filter to reference to reset safe source
                    self.unFilteredServiceList = angular.copy(data.data.responseObj);
                    //copy for smart table to sort on and for controller to filter on (final result)
                    self.displayedData = angular.copy(data.data.responseObj);
                    //copy for smart table to reference that will be filtered
                    self.safeSource = angular.copy(data.data.responseObj);
                    self.groupStates();
                    self.filterSafeSource();
                }),
                self.getReadyTemplateList().then(function (data) {
                    self.readyTemplateList = data.data.responseObj;
                })
            ]).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        ServicesController.prototype.viewDetails = function () {
            var self = this;
            self.$location.path('service/' + self.selectedService.id + '/details');
        };
        //filters smart table's safe source, allows paging to be accurate
        ServicesController.prototype.filterSafeSource = function () {
            var self = this;
            //reset safeSource to original value
            self.safeSource = angular.copy(self.unFilteredServiceList);
            //filter safeSource
            if (self.filterBy) {
                self.safeSource = _.filter(self.safeSource, { health: self.filterBy });
            }
        };
        ServicesController.prototype.exportService = function () {
            var self = this;
            window.location = 'services/exportservice/' + self.selectedService.id;
        };
        ServicesController.prototype.downloadAll = function () {
            var self = this;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            self.processDownloadRequests('initial', '', deferred);
        };
        ServicesController.prototype.processDownloadRequests = function (type, id, deferred) {
            var self = this;
            var urlToCall;
            var data;
            urlToCall = self.Commands.data.downloads.status;
            data = { 'id': id };
            if (type == 'initial') {
                urlToCall = self.Commands.data.downloads.create;
                data = { 'type': 'services' };
            }
            self.$http.post(urlToCall, { requestObj: data }).then(function (data) {
                switch (data.data.responseObj.status) {
                    case 'NOT_READY':
                        self.$timeout(function () {
                            self.processDownloadRequests('status', data.data.responseObj.id, deferred);
                        }, 5000);
                        break;
                    case 'READY':
                        window.location = 'downloads/getfile/' + data.data.responseObj.id;
                        deferred.resolve();
                        break;
                    case 'ERROR':
                        //handle error
                        var x = 0;
                        deferred.resolve();
                        self.GlobalServices.DisplayError(data.data);
                        break;
                }
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        //creates the display of tiles for the "all" filter
        ServicesController.prototype.groupStates = function () {
            var self = this;
            self.groups = [];
            self.groups = _.map(self.constants.serviceHealths, function (health) {
                return {
                    count: _.filter(self.unFilteredServiceList, { health: health.id }).length,
                    name: health.name,
                    health: health.id
                };
            });
        };
        ServicesController.prototype.updateFirmware = function () {
            var self = this;
            var updateFirmware = self.Modal({
                title: self.$translate.instant('SERVICE_APPLY_FIRMWARE_UPDATES_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/updateservicefirmware.html',
                controller: 'UpdateServiceFirmwareController as UpdateServiceFirmware',
                params: {
                    id: self.selectedService.id
                },
                onCancel: function () {
                    //THIS FUNCTION IS CALLED ON MODAL.CANCEL, not WIZARD.CANCEL
                    //var confirm : self.Dialog(self.$translate.instant('GENERIC_Confirm'), 'Are you sure you want to cancel?');
                    var confirm = self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICE_APPLY_FIRMWARE_UPDATES_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        updateFirmware.modal.dismiss();
                        self.refresh();
                    });
                },
                onComplete: function (modalScope) {
                    self.refresh(); //When the modal is closed, update the data.
                }
            });
            updateFirmware.modal.show();
        };
        ServicesController.prototype.addExistingService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/AddExistingService.html',
                controller: 'AddExistingServiceController as addExistingServiceController',
                params: {},
                onCancel: function () {
                    //THIS FUNCTION IS CALLED ON MODAL.CANCEL, not WIZARD.CANCEL
                    //var confirm : self.Dialog(self.$translate.instant('GENERIC_Confirm'), 'Are you sure you want to cancel?');
                    var confirm = self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICE_ADD_EXISTING_SERVICE_Cancel_Confirmation'));
                    confirm.then(function (modalScope) {
                        addServiceWizard.modal.dismiss();
                    });
                },
                onComplete: function (modalScope) {
                    self.refresh(); //When the modal is closed, update the data.
                }
            });
            addServiceWizard.modal.show();
        };
        ServicesController.prototype.deployNewService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICES_NEW_SERVICE_DeployService'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/DeployService/DeployServiceWizard.html',
                controller: 'DeployServiceWizard as deployServiceWizard',
                params: {},
                onCancel: function () {
                    self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function () {
                        console.log('closing');
                        addServiceWizard.modal.close();
                    });
                }
            });
            addServiceWizard.modal.show();
        };
        ServicesController.prototype.getServiceList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.services.getServiceList, {});
        };
        ServicesController.prototype.getReadyTemplateList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.templates.getReadyTemplateList, {});
        };
        ServicesController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', '$location', 'constants', '$routeParams', "$rootScope", "$route"];
        return ServicesController;
    }());
    asm.ServicesController = ServicesController;
    angular
        .module("app")
        .controller("ServicesController", ServicesController);
})(asm || (asm = {}));
//# sourceMappingURL=services.js.map
var asm;
(function (asm) {
    var SettingslistController = (function () {
        function SettingslistController(Modal, Dialog, $http, $timeout, $q, $router, $location, $routeParams) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$router = $router;
            this.$location = $location;
            this.$routeParams = $routeParams;
            this.sections = {
                addOnModule: "AddOnModule",
                backupAndRestore: "BackupAndRestore",
                credentialsManagement: "CredentialsManagement",
                gettingStarted: "GettingStarted",
                jobs: "Jobs",
                logs: "Logs",
                networks: "Networks",
                repositories: "Repositories",
                initialApplianceSetup: "InitialApplianceSetup",
                users: "Users",
                virtualApplianceManagement: "VirtualApplianceManagement",
                virtualIdentityPools: "VirtualIdentityPools"
            };
            var self = this;
            self.changeSection(self.$routeParams
                .settingType
                ? self.$routeParams.settingType
                : self.sections.addOnModule);
        }
        SettingslistController.prototype.changeSection = function (section) {
            var self = this;
            self.showSection = section;
            self.$location.path("settings/" + section);
        };
        SettingslistController.prototype.getStarted = function () {
            var self = this;
            self.$location.path("/gettingstarted");
        };
        SettingslistController.prototype.setupWizard = function () {
            var self = this;
            var setupWizard = self.Modal({
                title: 'Setup Wizard',
                modalSize: 'modal-lg',
                templateUrl: 'views/setupwizard.html',
                controller: 'SetupWizardController as SetupWizard',
                params: {}
            });
            setupWizard.modal.show();
        };
        SettingslistController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$router', "$location", "$routeParams"];
        return SettingslistController;
    }());
    asm.SettingslistController = SettingslistController;
    angular
        .module('app')
        .controller('SettingslistController', SettingslistController);
})(asm || (asm = {}));
//# sourceMappingURL=settingslist.js.map
var asm;
(function (asm) {
    var StatusController = (function () {
        function StatusController($window, $http, $timeout, $q, $router, Commands) {
            this.$window = $window;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$router = $router;
            this.Commands = Commands;
            this.refreshTimer = null;
            this.getApplianceStatus();
        }
        StatusController.prototype.$onDestroy = function () {
            var self = this;
            if (self.refreshTimer)
                self.$timeout.cancel(self.refreshTimer);
        };
        StatusController.prototype.canDeactivate = function () {
            var self = this;
            var allow = true;
            //Any logic to prevent navigating away (change allow to false to prevent)
            return allow;
        };
        StatusController.prototype.getApplianceStatus = function () {
            var self = this;
            self.$http.post(self.Commands.data.applianceManagement.getStatus, null)
                .success(function (data, status, headers, config) {
                self.status = data.responseObj;
                if (self.status === 'ready') {
                    self.$window.location.href = 'login.html';
                    return;
                }
                self.refreshTimer = self.$timeout(function () {
                    self.getApplianceStatus();
                }, 15000);
            })
                .error(function (data, status, headers, config) {
                self.status = 'notready';
                self.refreshTimer = self.$timeout(function () {
                    self.getApplianceStatus();
                }, 15000);
            });
        };
        StatusController.$inject = ['$window', '$http', '$timeout', '$q', '$router', 'Commands'];
        return StatusController;
    }());
    asm.StatusController = StatusController;
    angular
        .module('app')
        .controller('StatusController', StatusController);
})(asm || (asm = {}));
//# sourceMappingURL=status.js.map
var asm;
(function (asm) {
    var TemplateBuilderController = (function () {
        function TemplateBuilderController($http, $translate, $routeParams, GlobalServices, $timeout) {
            this.$http = $http;
            this.$translate = $translate;
            this.$routeParams = $routeParams;
            this.GlobalServices = GlobalServices;
            this.$timeout = $timeout;
            var self = this;
            self.activate();
        }
        TemplateBuilderController.prototype.activate = function () {
            var self = this;
            self.selectedTemplateId = self.$routeParams.id;
            self.mode = self.$routeParams.mode;
        };
        TemplateBuilderController.$inject = ['$http', '$translate', '$routeParams', 'GlobalServices', '$timeout'];
        return TemplateBuilderController;
    }());
    asm.TemplateBuilderController = TemplateBuilderController;
    angular
        .module("app")
        .controller("TemplatebuilderController", TemplateBuilderController);
})(asm || (asm = {}));
//# sourceMappingURL=templatebuilder.js.map
var asm;
(function (asm) {
    var TemplatesController = (function () {
        function TemplatesController(Modal, Dialog, $http, $timeout, $q, $compile, $translate, GlobalServices, Loading, Commands, $location, $filter, constants, $window, $routeParams, dialog) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$compile = $compile;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.Loading = Loading;
            this.Commands = Commands;
            this.$location = $location;
            this.$filter = $filter;
            this.constants = constants;
            this.$window = $window;
            this.$routeParams = $routeParams;
            this.dialog = dialog;
            this.activeTab = 'MyTemplates';
            this.filterBy = '';
            this.invalidTemplates = false;
            var self = this;
            self.view = 'ListView';
            if (!self.$routeParams.category || self.$routeParams.category === 'mytemplates') {
                self.activeTab = 'MyTemplates';
                self.filterBy = '';
            }
            else if (self.$routeParams.category === 'sampletemplates') {
                self.activeTab = 'SampleTemplates';
                self.filterBy = '';
            }
            else {
                self.activeTab = 'MyTemplates';
                self.filterBy = self.$routeParams.category;
            }
            self.refresh();
            self.actions = {
                deleteTemplate: self.deleteTemplate,
                viewDetails: self.viewDetails,
                exportTemplate: self.exportTemplate,
                addAttachment: self.addAttachment,
                cloneTemplate: self.cloneTemplate
            };
        }
        TemplatesController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.templates.getTemplateList, {}).then(function (data) {
                self.myTemplates = self.$filter('filter')(data.data.responseObj, { 'isLocked': false }, true);
                self.myTemplatesSafe = angular.copy(self.myTemplates);
                self.myTemplatesConst = angular.copy(self.myTemplates);
                self.drafts = _.filter(self.myTemplates, { 'draft': true });
                self.draftsSafe = angular.copy(self.drafts);
                self.draftsConst = angular.copy(self.drafts);
                self.published = _.filter(self.myTemplates, { 'draft': false });
                self.publishedSafe = angular.copy(self.published);
                self.publishedConst = angular.copy(self.published);
                self.sampleTemplates = self.$filter('filter')(data.data.responseObj, { 'isLocked': true }, true);
                self.sampleTemplatesSafe = angular.copy(self.sampleTemplates);
                self.sampleTemplatesConst = angular.copy(self.sampleTemplates);
                self.invalidTemplates = !!_.find(self.myTemplates, { isTemplateValid: false });
                self.templateCategories = [{ id: '', name: 'All Categories' }].concat(_.map(_.uniqBy(self.myTemplates, function (template) { return template.category || ''; }), function (category) { return { id: category.category, name: category.category }; }));
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        TemplatesController.prototype.updateArrays = function () {
            //this is called when category dropdown is changed or a category tile is clicked
            var self = this;
            self.myTemplates = self.$filter('filter')(self.myTemplatesConst, { category: self.filterBy });
            self.myTemplatesSafe = angular.copy(self.myTemplates);
            self.drafts = self.$filter('filter')(self.draftsConst, { category: self.filterBy });
            self.draftsSafe = angular.copy(self.drafts);
            self.published = self.$filter('filter')(self.publishedConst, { category: self.filterBy });
            self.publishedSafe = angular.copy(self.published);
        };
        TemplatesController.prototype.editTemplate = function () {
            var self = this;
            if (!self.GlobalServices.IsInRole('readonly')) {
                self.$location.path("/templatebuilder/" + self.selectedItem.id + "/edit");
            }
        };
        TemplatesController.prototype.viewDetails = function () {
            var self = this;
            if (!self.GlobalServices.IsInRole('readonly')) {
                self.$location.path("/templatebuilder/" + self.selectedItem.id + "/view");
            }
        };
        //viewDetails() {
        //    var self: TemplatesController = this,
        //        modal = self.Modal({
        //            title: self.$translate.instant('TEMPLATES_TEMPLATESETTINGS_MODAL_TemplateSettings'),
        //            modalSize: 'modal-lg',
        //            templateUrl: '/views/templatebuilder/ViewTemplateDetailsModal.html',
        //            controller: 'ViewTemplateDetailsModalController as viewTemplateDetailsModalController',
        //            params: {
        //                template: self.selectedItem,
        //                getTemplate: true
        //            }
        //        });
        //    modal.modal.show();
        //}
        TemplatesController.prototype.getUniqueCategories = function () {
            var self = this;
            return self.templateCategories || [];
        };
        TemplatesController.prototype.exportTemplate = function () {
            var self = this, exportModal = self.Modal({
                title: self.$translate.instant('TEMPLATES_TEMPLATESETTINGS_MODAL_ExportTemplate'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templates/exportTemplate.html',
                controller: 'ExportTemplateController as ExportTemplateController',
                params: {
                    templateId: self.selectedItem.id
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            exportModal.modal.show();
        };
        TemplatesController.prototype.deleteTemplate = function () {
            var self = this, d = self.$q.defer();
            self.dialog(('Confirm'), self.$translate.instant('TEMPLATEBUILDER_DiscardConfirm'))
                .then(function () {
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.templates.discardTemplate, [self.selectedItem.id.toString()])
                    .then(function () {
                    self.refresh();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        TemplatesController.prototype.uploadExternalTemplate = function () {
            var self = this;
            var uploadtemplateModal = self.Modal({
                title: self.$translate.instant('TEMPLATES_UploadExternalModal_UploadExternalTemplate'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templates/uploadtemplateModal.html',
                controller: 'UploadTemplateModalController as UploadTemplateModal',
                params: {
                    templates: self.myTemplates
                },
                onComplete: function (category) {
                }
            });
            uploadtemplateModal.modal.show();
        };
        TemplatesController.prototype.addAttachment = function () {
            var self = this;
            var addAttachmentModal = self.Modal({
                title: self.$translate.instant('TEMPLATES_AddAttachment'),
                modalSize: 'modal-lg',
                templateUrl: 'views/templates/templateaddattachmentModal.html',
                controller: 'AddAttachmentModalController as AddAttachemntModal',
                params: {
                    templateId: self.selectedItem.id
                },
                onComplete: function (attachments) {
                    self.selectedItem.attachments = attachments;
                }
            });
            addAttachmentModal.modal.show();
        };
        TemplatesController.prototype.deleteAttachment = function (attachment) {
            var self = this, d = self.$q.defer();
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('TEMPLATES_DeleteAttachments')))
                .then(function () {
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.templates.deleteAttachment, { id: self.selectedItem.id, name: attachment.name })
                    .then(function () {
                    _.remove(self.selectedItem.attachments, { id: attachment.id });
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        TemplatesController.prototype.downloadAttachment = function (attachment) {
            var self = this;
            self.$window.open("templates/downloadattachment?name=" + attachment.name + "&templateId=" + self.selectedItem.id, '_blank');
        };
        TemplatesController.prototype.createTemplate = function () {
            var self = this;
            var createTemplateModal = self.Modal({
                title: self.$translate.instant('TEMPLATES_CreateTemplate'),
                modalSize: 'modal-lg',
                templateUrl: 'views/createtemplate.html',
                controller: 'CreateTemplateModalController as createTemplateModalController',
                params: {
                    type: 'new'
                }
            });
            createTemplateModal.modal.show();
        };
        TemplatesController.prototype.cloneTemplate = function () {
            var self = this;
            var createTemplateModal = self.Modal({
                title: 'Clone Template - ' + self.selectedItem.name,
                modalSize: 'modal-lg',
                templateUrl: 'views/createtemplate.html',
                controller: 'CreateTemplateModalController as createTemplateModalController',
                params: {
                    type: 'clone',
                    selectedtemplate: self.selectedItem
                },
                close: function () {
                    self.refresh();
                }
            });
            createTemplateModal.modal.show();
        };
        TemplatesController.prototype.deployNewService = function () {
            var self = this;
            var addServiceWizard = self.Modal({
                title: self.$translate.instant('SERVICES_NEW_SERVICE_DeployService'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/DeployService/DeployServiceWizard.html',
                controller: 'DeployServiceWizard as deployServiceWizard',
                params: {
                    selectedTemplate: self.selectedItem
                },
                onCancel: function () {
                    self.dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function () {
                        console.log('closing');
                        addServiceWizard.modal.close();
                    });
                }
            });
            addServiceWizard.modal.show();
        };
        TemplatesController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$compile', '$translate', 'GlobalServices', 'Loading', 'Commands', '$location', '$filter', 'constants', '$window', '$routeParams', 'Dialog'];
        return TemplatesController;
    }());
    asm.TemplatesController = TemplatesController;
    angular
        .module('app')
        .controller('TemplatesController', TemplatesController);
})(asm || (asm = {}));
//# sourceMappingURL=templates.js.map
var asm;
(function (asm) {
    var AddApplicationWizardController = (function () {
        function AddApplicationWizardController(Modal, $scope, Dialog, $http, $translate, Loading, $q, $timeout, Commands, $rootScope, globalServices) {
            this.Modal = Modal;
            this.$scope = $scope;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Commands = Commands;
            this.$rootScope = $rootScope;
            this.globalServices = globalServices;
            this.template = null;
            this.editComponent = null;
            this.service = null;
            this.mode = 'template';
            this.action = 'edit';
            this.id = '';
            this.targetComponents = [];
            this.selectedApplication = -1;
            this.applications = [];
            this.applicationsCopy = [];
            this.addedApplications = [];
            //Index offset is created for services so that we can keep install orders correct because already added applications are hidden
            this.indexOffset = 0;
            var self = this;
            if (self.$scope.modal.params.template) {
                self.template = self.$scope.modal.params.template;
            }
            else {
                self.service = self.$scope.modal.params.service;
                self.template = self.service;
                self.mode = "service";
            }
            self.action = self.$scope.modal.params.action;
            if (self.action == 'edit') {
                self.id = self.$scope.modal.params.id;
                $.each(self.template.components, function (index, comp) {
                    if (self.id == comp.id) {
                        comp.duplicateApplication = true;
                        self.editComponent = comp;
                    }
                });
                if (self.service != null) {
                    $.each(self.editComponent.relatedcomponents, function (index, model) {
                        if (model.installOrder > 0)
                            self.indexOffset++;
                    });
                }
            }
            else {
                $.each(self.template.components, function (index, comp) {
                    if (comp.type == 'vm' || comp.type == 'server') {
                        var hasApplication = false;
                        $.each(comp.relatedcomponents, function (index, rc) {
                            if (rc.installOrder > 0) {
                                hasApplication = true;
                                return;
                            }
                        });
                        if (!hasApplication) {
                            comp.duplicateApplication = false;
                            self.targetComponents.push(comp);
                        }
                    }
                });
            }
            self.$http.post(self.Commands.data.templates.getTemplateBuilderComponents, { id: 'application', templateId: self.template.id, serviceId: null }).then(function (data) {
                self.applications = data.data.responseObj;
                self.applicationsCopy = angular.copy(self.applications);
                self.applications.unshift({ id: -1, name: self.$translate.instant('GENERIC_select') });
                if (self.action == 'edit')
                    self.filterApplications();
            }).catch(function (data) {
            });
        }
        AddApplicationWizardController.prototype.filterApplications = function () {
            var self = this;
            if (self.service == null) {
                var apps = new Array(self.template.components.length - 1);
                $.each(self.editComponent.relatedcomponents, function (index, rc) {
                    if (rc.installOrder > 0) {
                        var r = rc;
                        $.each(self.template.components, function (index2, comp) {
                            if (rc.id == comp.id) {
                                //comp.isNew = false;
                                apps[rc.installOrder - 1] = comp;
                            }
                        });
                    }
                });
                $.each(apps, function (index, model) {
                    if (model) {
                        self.addedApplications.push(model);
                        if (model.subtype != 'type')
                            self.removeApp(model.name);
                    }
                    else {
                        return false;
                    }
                });
            }
            else {
                $.each(self.editComponent.relatedcomponents, function (index, model) {
                    if (model.installOrder > 0) {
                        var x = model;
                        $.each(self.applications, function (index2, app) {
                            if (app.name == model.name && model.subtype != 'type') {
                                self.applications.splice(index2, 1);
                                return false;
                            }
                        });
                    }
                });
            }
        };
        AddApplicationWizardController.prototype.removeApp = function (name) {
            var self = this;
            $.each(self.applications, function (index, model) {
                if (model.name == name) {
                    self.applications.splice(index, 1);
                    return false;
                }
            });
        };
        AddApplicationWizardController.prototype.categoryVisible = function (category, component) {
            var self = this;
            if (!category || !component)
                return true;
            var visible = false;
            $.each(category.settings, function (ix, s) {
                if (!s.hideFromTemplate && !visible && self.settingVisible(s, component))
                    visible = true;
            });
            return visible;
        };
        AddApplicationWizardController.prototype.settingVisible = function (setting, component) {
            var self = this;
            if (!setting || !component || !setting.dependencyTarget)
                return true;
            if (setting.dependencyTarget && setting.dependencyValue) {
                var targetSetting = null;
                $.each(component.categories, function (ix, c) {
                    var matchingSetting = _.find(c.settings, function (s) {
                        return (s.id == setting.dependencyTarget);
                    });
                    if (matchingSetting) {
                        targetSetting = matchingSetting;
                        return;
                    }
                });
                var matchingValue = false;
                if (targetSetting && targetSetting.value != null) {
                    var settingvalues = setting.dependencyValue.split(',');
                    $.each(settingvalues, function (idx, val) {
                        if (val.toString() == targetSetting.value.toString())
                            matchingValue = true;
                    });
                }
                return matchingValue && self.settingVisible(targetSetting, component);
            }
            return true;
        };
        AddApplicationWizardController.prototype.addApplication = function () {
            var self = this;
            var app = _.findIndex(self.applications, function (o) { return o.id == self.selectedApplication; });
            var x = angular.copy(self.applications[app]);
            x.id = self.$rootScope.ASM.NewGuid();
            x.isNew = true;
            self.addedApplications.push(x);
            if (x.subtype != "type") {
                self.applications.splice(app, 1);
                self.selectedApplication = -1;
            }
        };
        AddApplicationWizardController.prototype.removeApplication = function (app) {
            var self = this;
            var index = _.findIndex(self.addedApplications, function (o) { return o.id == app.id; });
            var cloneIndex = _.findIndex(self.applicationsCopy, function (o) { return o.name == app.name; });
            self.applications.push(angular.copy(self.applicationsCopy[cloneIndex]));
            self.addedApplications.splice(index, 1);
        };
        AddApplicationWizardController.prototype.moveUp = function (index) {
            var self = this;
            var x = self.addedApplications[index];
            self.addedApplications[index] = self.addedApplications[index - 1];
            self.addedApplications[index - 1] = x;
        };
        AddApplicationWizardController.prototype.moveDown = function (index) {
            var self = this;
            var x = self.addedApplications[index];
            self.addedApplications[index] = self.addedApplications[index + 1];
            self.addedApplications[index + 1] = x;
        };
        AddApplicationWizardController.prototype.identifyResourcesInvalid = function () {
            var self = this;
            var invalid = true;
            $.each(self.targetComponents, function (index, comp) {
                if (comp.duplicateApplication) {
                    invalid = false;
                    return;
                }
            });
            return invalid;
        };
        AddApplicationWizardController.prototype.requiredFieldsRemaining = function () {
            var self = this, count = 0;
            angular.forEach(self.addedApplications, function (application) {
                angular.forEach(application.categories, function (category) {
                    count += _.filter(category.settings, function (setting) {
                        return setting.required && self.settingVisible(setting, application) && !setting.value;
                    }).length;
                });
            });
            self.formInvalid = !!count || self.globalServices.IsInRole('standard') || self.globalServices.IsInRole('readonly');
            return count;
        };
        //cancelWizard() {
        //    //THIS FUNCTION IS CALLED ON WIZARD.CANCEL, not MODAL.CANCEL, if you need this logic when clicking the X in the modal move it to the modal definition.
        //    //THE WAY THIS IS CODED WILL LEAD TO 2 CONFIRM DIALOGS, 1 for the Wizard and then another one for the Modal.
        //    //var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDPOOL_Cancel_Confirmation'));
        //    //confirm.then(function () {
        //    //    self.$scope.modal.cancel();
        //    //});
        //}
        AddApplicationWizardController.prototype.cancelWizard = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddApplicationWizardController.prototype.finishWizard = function () {
            var self = this;
            var newComponents = [];
            if (self.service == null) {
                if (self.action == 'add') {
                    //find all components that we are relating to
                    $.each(self.template.components, function (index, component) {
                        if (component.duplicateApplication) {
                            var c = component;
                            //clone each application as a new component to add to template/service
                            $.each(self.addedApplications, function (index2, model) {
                                var x = angular.copy(model);
                                x.id = self.$rootScope.ASM.NewGuid();
                                newComponents.push(x);
                                //add corresponding related component to existing component
                                c.relatedcomponents.push({
                                    id: x.id,
                                    name: x.name,
                                    installOrder: index2 + 1
                                });
                            });
                            component.duplicateApplication = false;
                        }
                    });
                    $.each(newComponents, function (index, model) {
                        self.template.components.push(model);
                    });
                }
                else if (self.action == 'edit') {
                    //for edit, we will clean out all existing application objects and recreate. Existing ones should retain same id
                    var idsToDelete = [];
                    //find target ids
                    var newRelatedComponents = [];
                    $.each(self.editComponent.relatedcomponents, function (index, model) {
                        if (model.installOrder > 0)
                            idsToDelete.push(model.id);
                        else
                            newRelatedComponents.push(model);
                    });
                    //reset the related
                    self.editComponent.relatedcomponents = newRelatedComponents;
                    //delete all old components
                    var newComponents = [];
                    $.each(self.template.components, function (index, model) {
                        if (idsToDelete.indexOf(model.id) == -1)
                            newComponents.push(model);
                    });
                    //reset components
                    self.template.components = newComponents;
                    //readd correct components and relatedcomponents
                    $.each(self.addedApplications, function (index, model) {
                        if (model.isNew)
                            model.id = self.$rootScope.ASM.NewGuid();
                        self.template.components.push(model);
                        self.editComponent.relatedcomponents.push({
                            id: model.id,
                            name: model.name,
                            installOrder: index + 1
                        });
                    });
                }
                //self.template.components.concat(newComponents);
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.templates.saveTemplate, { requestObj: self.template }).then(function (data) {
                    d.resolve();
                    self.$scope.modal.close();
                }).catch(function (data) {
                    d.resolve();
                });
            }
            else {
                var listOfChanged = [];
                if (self.action == 'add') {
                    //find all components that we are relating to
                    $.each(self.template.components, function (index, component) {
                        if (component.duplicateApplication) {
                            var c = component;
                            //clone each application as a new component to add to template/service
                            $.each(self.addedApplications, function (index2, model) {
                                var x = angular.copy(model);
                                x.id = self.$rootScope.ASM.NewGuid();
                                //add new app to changed items
                                listOfChanged.push(x);
                                //add corresponding related component to existing component
                                c.relatedcomponents.push({
                                    id: x.id,
                                    name: x.name,
                                    installOrder: index2 + 1
                                });
                            });
                            //add component as changed item
                            listOfChanged.push(c);
                        }
                    });
                }
                else if (self.action == 'edit') {
                    //add new related components and update original component
                    $.each(self.addedApplications, function (index, model) {
                        model.id = self.$rootScope.ASM.NewGuid();
                        self.editComponent.relatedcomponents.push({
                            id: model.id,
                            name: model.name,
                            installOrder: index + 1 + self.indexOffset
                        });
                        listOfChanged.push(model);
                    });
                    listOfChanged.push(self.editComponent);
                }
                $.each(listOfChanged, function (index, model) {
                    if (model.device)
                        model.device = {};
                });
                var params = {
                    serviceId: self.service.id,
                    componentId: null,
                    components: listOfChanged
                };
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.services.adjustService, { requestObj: params }).then(function (data) {
                    d.resolve();
                    self.$scope.modal.close();
                }).catch(function (data) {
                    d.resolve();
                });
            }
        };
        ;
        AddApplicationWizardController.$inject = ['Modal', '$scope', 'Dialog', '$http', '$translate', 'Loading', '$q', '$timeout', 'Commands', '$rootScope', "GlobalServices"];
        return AddApplicationWizardController;
    }());
    asm.AddApplicationWizardController = AddApplicationWizardController;
    angular
        .module('app')
        .controller('AddApplicationWizardController', AddApplicationWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=addapplicationwizard.js.map
var asm;
(function (asm) {
    var AddComponentController = (function () {
        function AddComponentController($scope, $http, $q, Loading, Commands, GlobalServices) {
            this.$scope = $scope;
            this.$http = $http;
            this.$q = $q;
            this.Loading = Loading;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.$scope.modal.params.availableComponents = [];
            self.loadComponents();
        }
        AddComponentController.prototype.loadComponents = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            var params = {
                id: self.$scope.modal.params.type,
                templateId: self.$scope.modal.params.templateId,
                serviceId: self.$scope.modal.params.serviceId,
            };
            self.$http.post(self.Commands.data.templates.getTemplateBuilderComponents, params).then(function (data) {
                self.$scope.modal.params.availableComponents = data.data.responseObj;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        AddComponentController.prototype.save = function (data) {
            var self = this;
            return self.$http.post(self.Commands.data.templates.saveTemplate, data.config.template);
        };
        AddComponentController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddComponentController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddComponentController.$inject = ['$scope', '$http', '$q', 'Loading', 'Commands', 'GlobalServices'];
        return AddComponentController;
    }());
    asm.AddComponentController = AddComponentController;
    angular
        .module('app')
        .controller('AddComponentController', AddComponentController);
})(asm || (asm = {}));
//# sourceMappingURL=addcomponent.js.map
var asm;
(function (asm) {
    var AddModuleModalController = (function () {
        function AddModuleModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.Commands = Commands;
            this.errors = new Array();
            var self = this;
            self.deferred = self.$q.defer();
            var uploader = $scope.uploader = new FileUploader({
                url: self.Commands.data.addonmodules.uploadAddOnModule,
            });
            self.$timeout(function () {
                document.getElementById('addonmodulefile').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    self.$timeout(function () { self.fileModel = element.files[0]; });
                };
            }, 500);
        }
        AddModuleModalController.prototype.save = function () {
            var self = this;
            self.Loading(self.deferred.promise);
            angular.merge(self.$scope.uploader, {
                onCompleteItem: function (fileItem, response, status, headers) {
                    self.pollingId = response.responseObj.id;
                    self.poll();
                },
                onErrorItem: function (fileItem, response, status, headers) {
                    self.deferred.resolve();
                    self.GlobalServices.DisplayError(response.data, self.errors);
                }
            });
            self.$scope.uploader.uploadAll();
        };
        AddModuleModalController.prototype.poll = function () {
            var self = this;
            self.$http.post(self.Commands.data.addonmodules.saveAddOnModule, self.pollingId).then(function (data) {
                if (data.data.responseObj == 'COMPLETE') {
                    console.log('Module successfully added');
                    self.$scope.modal.close();
                    self.deferred.resolve();
                }
                else {
                    self.$timeout(function () {
                        self.poll();
                    }, 5000);
                }
            }).catch(function (data) {
                self.deferred.resolve();
                self.GlobalServices.DisplayError(data.data, self.errors);
            });
        };
        AddModuleModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddModuleModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', 'Commands'];
        return AddModuleModalController;
    }());
    asm.AddModuleModalController = AddModuleModalController;
    angular
        .module('app')
        .controller('AddModuleModalController', AddModuleModalController);
})(asm || (asm = {}));
//# sourceMappingURL=addmoduleModal.js.map
var asm;
(function (asm) {
    var AddPoolWizardController = (function () {
        function AddPoolWizardController(Modal, $scope, Dialog, $http, $translate, Loading, $q, $timeout, Commands, $rootScope, GlobalServices) {
            this.Modal = Modal;
            this.$scope = $scope;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Commands = Commands;
            this.$rootScope = $rootScope;
            this.GlobalServices = GlobalServices;
            //jek 3.30.2016 = set some defaults for the wizard pages
            //the page will automagically add a few properties 
            //along the way such as viewModel.name and 
            //viewModel.description; I didn't want to bury 
            //these in the markup via ng-init
            this.pool = {
                name: '',
                description: '',
                virtualMACIdentityCount: 0,
                virtualMACUserPrefixSelection: '00',
                virtualMACAutoGenerateOnDeploy: true,
                virtualIQNIdentityCount: 0,
                virtualIQNUserPrefix: '',
                virtualIQNAutoGenerateOnDeploy: true,
                virtualWWPNIdentityCount: 0,
                virtualWWPNUserPrefixSelection: '00',
                virtualWWPNAutoGenerateOnDeploy: true,
                virtualWWNNIdentityCount: 0,
                virtualWWNNUserPrefixSelection: '00',
                virtualWWNNAutoGenerateOnDeploy: true
            };
            this.poolPrefixList = [];
            var self = this;
            self.refresh();
        }
        AddPoolWizardController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            // jek 3.30.2016 : ASM.old always provided id = null
            // within the Wizard
            self.$http.post(self.Commands.data.pools.getPoolPrefixList, { 'id': null })
                .then(function (data) {
                self.poolPrefixList = data.data.responseObj;
                //set these to the first item in poolPrefixList
                var x = self.poolPrefixList[0];
                if (x) {
                    self.pool.virtualMACUserPrefixSelection = x.id;
                    self.pool.virtualWWPNUserPrefixSelection = x.id;
                    self.pool.virtualWWNNUserPrefixSelection = x.id;
                }
                //// add 'Select' to the list
                //var newItem = { id: 'select', name: 'Select' };
                //self.poolPrefixList.splice(0, 0, newItem);
            })
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            })
                .finally(function () { return d.resolve(); });
        };
        AddPoolWizardController.prototype.validatePool = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.pools.validatePool, self.pool)
                .then(function (data) {
                var x = data.data.responseObj;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            })
                .finally(function () { return d.resolve(); });
        };
        //cancelWizard() {
        //    //THIS FUNCTION IS CALLED ON WIZARD.CANCEL, not MODAL.CANCEL, if you need this logic when clicking the X in the modal move it to the modal definition.
        //    //THE WAY THIS IS CODED WILL LEAD TO 2 CONFIRM DIALOGS, 1 for the Wizard and then another one for the Modal.
        //    //var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDPOOL_Cancel_Confirmation'));
        //    //confirm.then(function () {
        //    //    self.$scope.modal.cancel();
        //    //});
        //    var self: AddPoolWizardController = this;
        //    self.$scope.modal.cancel();
        //}
        AddPoolWizardController.prototype.finishWizard = function () {
            var self = this;
            self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('ADDPOOL_Submit_Confirmation'))
                .then(function () {
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.pools.createPool, self.pool)
                    .then(function () {
                    d.resolve();
                    self.$scope.modal.close();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                })
                    .finally(function () { return d.resolve(); });
            });
            //})
        };
        AddPoolWizardController.prototype.getVirtualMACPrefix = function () {
            var self = this;
            return "00:0E:AA:" + self.pool.virtualMACUserPrefixSelection;
        };
        AddPoolWizardController.prototype.getVirtualWWPNPrefix = function () {
            var self = this;
            return "20:01:00:0E:" + self.pool.virtualWWPNUserPrefixSelection;
        };
        AddPoolWizardController.prototype.getVirtualWWNNPrefix = function () {
            var self = this;
            return "20:00:00:0E:" + self.pool.virtualWWNNUserPrefixSelection;
        };
        AddPoolWizardController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddPoolWizardController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddPoolWizardController.$inject = ['Modal', '$scope', 'Dialog', '$http', '$translate', 'Loading', '$q', '$timeout', 'Commands', '$rootScope', 'GlobalServices'];
        return AddPoolWizardController;
    }());
    asm.AddPoolWizardController = AddPoolWizardController;
    angular
        .module('app')
        .controller('AddPoolWizardController', AddPoolWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=addpoolwizard.js.map
var asm;
(function (asm) {
    var AddUsersController = (function () {
        function AddUsersController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.allSelected = false;
            var self = this;
            self.users = $scope.modal.params.users;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.getUsers().then(function (response) {
                self.userList = _.uniqBy(_.filter(response.data.responseObj, function (user) {
                    return !_.find(self.users, { id: user.id });
                }), "id");
                self.userListSafe = angular.copy(self.userList);
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () {
                d.resolve();
            });
        }
        AddUsersController.prototype.toggleAll = function () {
            var self = this;
            angular.forEach(self.userListSafe, function (device) {
                device.selected = self.allSelected;
            });
        };
        AddUsersController.prototype.getUsers = function () {
            var self = this;
            return self.$http.post(self.Commands.data.users.getUsers, {
                criteriaObj: {
                    filterObj: [
                        {
                            field: "roleId",
                            op: "=",
                            opTarget: ["standard"]
                        }]
                }
            });
        };
        AddUsersController.prototype.save = function () {
            var self = this;
            self.close(_.union(_.filter(self.userListSafe, { selected: true }), self.users));
        };
        AddUsersController.prototype.close = function (params) {
            var self = this;
            self.$scope.modal.close(params);
        };
        AddUsersController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddUsersController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return AddUsersController;
    }());
    asm.AddUsersController = AddUsersController;
    angular
        .module('app')
        .controller('AddUsersController', AddUsersController);
})(asm || (asm = {}));
//# sourceMappingURL=addUsers.js.map
var asm;
(function (asm) {
    var BackupNowModalController = (function () {
        function BackupNowModalController($scope, Modal, Dialog, $http, $translate, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.Commands = Commands;
            this.submitform = false;
            this.getBackupSettings();
        }
        BackupNowModalController.prototype.getBackupSettings = function () {
            var self = this;
            self.$http.post(self.Commands.data.backupAndRestore.getBackupSettings, null)
                .success(function (data, status, headers, config) {
                self.backupSettings = data.responseObj;
            })
                .error(function (data, status, headers, config) {
                //TODO: Add error messaging
                var x = 0;
            });
        };
        BackupNowModalController.prototype.backup = function (isValid) {
            var self = this;
            if (!isValid) {
                return self.submitform = true;
            }
            self.$http.post(self.Commands.data.backupAndRestore.backupNow, { requestObj: this.backupSettings })
                .success(function (data, status, headers, config) {
                self.$scope.modal.close();
            })
                .error(function (data, status, headers, config) {
                //TODO: Add error messaging
                var x = 0;
            });
        };
        BackupNowModalController.prototype.testBackupNowConnection = function (isValid) {
            var self = this;
            if (!isValid) {
                self.submitform = true;
                return;
            }
            self.$http.post(self.Commands.data.backupAndRestore.testBackupConnection, { requestObj: this.backupSettings })
                .success(function (data, status, headers, config) {
                var confirm = self.Dialog((self.$translate.instant('BACKUPNOW_testconnection_title')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('The test was successful')), true);
            })
                .error(function (data, status, headers, config) {
                //TODO: Add error messaging
                var x = 0;
            });
        };
        BackupNowModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        BackupNowModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        BackupNowModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$translate', 'Commands'];
        return BackupNowModalController;
    }());
    asm.BackupNowModalController = BackupNowModalController;
    angular
        .module('app')
        .controller('BackupNowModalController', BackupNowModalController);
})(asm || (asm = {}));
//# sourceMappingURL=backupNowModal.js.map
var asm;
(function (asm) {
    var ConfirmModalController = (function () {
        function ConfirmModalController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $filter, MessageBox) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.MessageBox = MessageBox;
            var self = this;
            self.confirm =
                {
                    id: '',
                    text: '',
                    html: '',
                    items: [],
                    alert: false,
                    icontype: 'warning',
                    titletext: '',
                    footnote: '',
                    alternateActionText: ''
                };
            self.confirmed = false;
            self.alternateAction = false;
            if ($scope.modal.params.confirm) {
                self.confirm = angular.copy($scope.modal.params.confirm);
            }
            self.activate();
        }
        ConfirmModalController.prototype.activate = function () {
            var self = this;
            //this.$el.addClass( 'confirmation' );
            //if ( self.selectedNetworkId )
            //{
            //    self.$http.post( 'networks/getnetworkbyid', { 'id': self.selectedNetworkId })
            //        .then( function ( data: any )
            //        {
            //            self.network = data.data.responseObj;
            //            //this must be called here so that it runs upon return from this call
            //            self.setSelectedNetworkType();                        
            //        }).catch( function ( data )
            //        {
            //            self.GlobalServices.DisplayError( data.data );
            //        });
            //}
            //else
            //{
            //    self.editMode = 'create';
            //    // new network, set some defaults
            //    self.network.ipaddressranges = [];
            //    self.network.staticipaddressdetails = [];
            //    self.network.addressPools = [];
            //    self.network.networkTemplateUsages = [];
            //}
        };
        ConfirmModalController.prototype.save = function () {
            var self = this;
            self.confirmed = true;
            self.$scope.modal.params.confirmed = self.confirmed;
            self.$scope.modal.close();
        };
        ConfirmModalController.prototype.doAlternateAction = function () {
            var self = this;
            self.alternateAction = true;
            self.$scope.modal.params.alternateAction = self.alternateAction;
            self.$scope.modal.close();
        };
        ConfirmModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ConfirmModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'loading', 'dialog',
            'Commands', 'GlobalServices', '$filter', 'messagebox'];
        return ConfirmModalController;
    }());
    asm.ConfirmModalController = ConfirmModalController;
    angular
        .module('app')
        .controller('ConfirmModalController', ConfirmModalController);
})(asm || (asm = {}));
//# sourceMappingURL=confirmModal.js.map
var asm;
(function (asm) {
    var CreateTemplateModalController = (function () {
        function CreateTemplateModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, $translate, constants, commands, $location, $filter) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.$translate = $translate;
            this.constants = constants;
            this.commands = commands;
            this.$location = $location;
            this.$filter = $filter;
            this.errors = new Array();
            //public templates: any = this.$scope.modal.params.templates;
            this.templates = new Array();
            this.type = this.$scope.modal.params.type;
            this.selectedTemplate = this.$scope.modal.params.selectedtemplate;
            this.template = {
                "id": null,
                "name": null,
                "description": "",
                "type": "new",
                "cloneexistingtemplateid": null,
                "category": null,
                "manageFirmware": false,
                "firmwarePackageId": null,
                "updateServerFirmware": false,
                "updateNetworkFirmware": false,
                "updateStorageFirmware": false,
                "enableApps": false,
                "enableVMs": false,
                "enableCluster": false,
                "enableServer": false,
                "enableStorage": false,
                "allStandardUsers": false,
                "assignedUsers": []
            };
            this.cloneoption = { "id": null };
            this.categories = new Array();
            this.firmwares = new Array();
            this.submitform = false;
            var self = this;
            self.activate();
        }
        CreateTemplateModalController.prototype.activate = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$q.all([
                self.getTemplateList().then(function (data) {
                    self.templates = self.$filter("filter")(data.data.responseObj, { 'isLocked': false }, true);
                    if (self.type === "edit") {
                        self.template = self.$scope.modal.params.template;
                    }
                    else {
                        self.template.type = self.type;
                    }
                    if (self.type === "clone") {
                        //self.getNetworkList();
                        self.cloneoption = _.find(data.data.responseObj, { 'id': self.selectedTemplate.id });
                        self.template.cloneexistingtemplateid = self.cloneoption.id;
                    }
                    self.managePermissions = (self.template.allStandardUsers || self.template.assignedUsers.length > 0);
                    self.setCategories();
                }),
                self.getAvailableFirmwarePackages().then(function (response) {
                    self.firmwares = response.data.responseObj;
                })
            ]).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { d.resolve(); });
        };
        CreateTemplateModalController.prototype.setCategories = function () {
            var self = this;
            self.categoryOption = self.template.category || undefined;
            var x = _.groupBy(self.templates, "category");
            for (var categoryName in x) {
                if (x.hasOwnProperty(categoryName)) {
                    self.categories.push({ name: categoryName, id: categoryName });
                }
            }
            self.categories = self.categories.concat([
                { name: "____________________", id: null, disabled: true },
                { name: self.$translate.instant("TEMPLATES_CreateNewCategory"), id: "new" }]);
        };
        CreateTemplateModalController.prototype.save = function (isValid, wizardFinish) {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            if (self.categoryOption !== "new") {
                //user has chosen existing category
                self.template.category = self.categoryOption;
            }
            if (!self.template.manageFirmware) {
                self.template.firmwarePackageId = null;
            }
            if (self.template.allStandardUsers === true) {
                self.template.assignedUsers = [];
            }
            if (wizardFinish) {
                if (self.type == 'new') {
                    self.createTemplate(self.template)
                        .then(function (response) {
                        d.resolve();
                        self.goToTemplateBuilder(response.data.responseObj.id);
                        self.close();
                    })
                        .catch(function (data) {
                        d.resolve();
                        self.GlobalServices.DisplayError(data.data);
                    });
                }
                else if (self.type === 'clone') {
                    angular.forEach([
                        self.template.templateAdditionalSetting.networkSettings,
                        self.template.templateAdditionalSetting.osSettings,
                        self.template.templateAdditionalSetting.serverPoolSettings,
                        self.template.templateAdditionalSetting.storageSettings,
                        self.template.templateAdditionalSetting.clusterSettings
                    ], function (settingSet) {
                        angular.forEach(settingSet, function (setting) { setting.type = setting.selectedOption; });
                    });
                    self.saveTemplateAdditionalSettings(self.template)
                        .then(function (response) {
                        d.resolve();
                        self.goToTemplateBuilder(response.data.responseObj.id);
                        self.close();
                    })
                        .catch(function (data) {
                        d.resolve();
                        self.GlobalServices.DisplayError(data.data);
                    });
                }
                else {
                    self.saveTemplate(self.template)
                        .then(function (response) {
                        d.resolve();
                        self.goToTemplateBuilder(response.data.responseObj.id);
                        self.close();
                    })
                        .catch(function (data) {
                        d.resolve();
                        self.GlobalServices.DisplayError(data.data);
                    });
                }
            }
            else {
                //clone
                self.createTemplate(self.template)
                    .then(function (data) {
                    self.template = data.data.responseObj;
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                })
                    .finally(function () { return d.resolve(); });
            }
        };
        CreateTemplateModalController.prototype.goToTemplateBuilder = function (id) {
            var self = this;
            self.$timeout(function () {
                self.$location.path("templatebuilder/" + id + "/edit");
            }, 500);
        };
        CreateTemplateModalController.prototype.viewComponents = function (selected) {
            var self = this, modal = self.Modal({
                title: 'View components for ' + selected.name,
                modalSize: 'modal-lg',
                templateUrl: '/views/templates/viewcomponents.html',
                controller: 'ViewComponentsController as viewComponents',
                params: {
                    selected: selected
                },
            });
            modal.modal.show();
        };
        CreateTemplateModalController.prototype.getTemplateList = function () {
            var self = this;
            return self.$http.post(self.commands.data.templates.getTemplateList, {});
        };
        CreateTemplateModalController.prototype.getAvailableFirmwarePackages = function () {
            var self = this;
            return self.$http.post(self.commands.data.firmwarepackages.getAvailableFirmwarePackages, {});
        };
        CreateTemplateModalController.prototype.saveAddOnModule = function (pollingId) {
            var self = this;
            return self.$http.post(self.commands.data.addonmodules.saveAddOnModule, pollingId);
        };
        CreateTemplateModalController.prototype.saveTemplate = function (template) {
            var self = this;
            return self.$http.post(self.commands.data.templates.saveTemplate, template);
        };
        CreateTemplateModalController.prototype.saveTemplateAdditionalSettings = function (template) {
            var self = this;
            return self.$http.post(self.commands.data.templates.saveTemplateAdditionalSettings, template);
        };
        CreateTemplateModalController.prototype.createTemplate = function (template) {
            var self = this;
            return self.$http.post(self.commands.data.templates.createTemplate, template);
        };
        CreateTemplateModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        CreateTemplateModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        CreateTemplateModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', '$translate', 'constants', 'Commands', '$location', '$filter'];
        return CreateTemplateModalController;
    }());
    asm.CreateTemplateModalController = CreateTemplateModalController;
    angular
        .module('app')
        .controller('CreateTemplateModalController', CreateTemplateModalController);
})(asm || (asm = {}));
//# sourceMappingURL=createtemplateModal.js.map
var asm;
(function (asm) {
    var CreateUserModalController = (function () {
        function CreateUserModalController($scope, Modal, Dialog, $http, GlobalServices, $rootScope, commands, loading, $q, $translate) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.commands = commands;
            this.loading = loading;
            this.$q = $q;
            this.$translate = $translate;
            var self = this;
            self.newUser = {
                currentpassword: '',
                email: '',
                enabled: false,
                firstname: '',
                id: '',
                lastname: '',
                locale: '',
                password: '',
                phone: '',
                roleId: '',
                rolename: '',
                serverName: '',
                showdefaultpasswordprompt: false,
                state: '',
                username: '',
            };
            this.submitform = false;
            this.userRole = 'Select a Role...';
            this.roles = [];
            this.currentPassword = false;
            this.refresh();
        }
        CreateUserModalController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.loading(d.promise);
            self.getRoles().then(function (data) {
                self.roles = data.data.responseObj;
                var item = { id: 'Select', name: self.$translate.instant('SETTINGS_USERS_SelectARole') };
                self.roles.splice(0, 0, item);
                self.userRole = self.roles[0];
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { d.resolve(); });
        };
        CreateUserModalController.prototype.saveUser = function (isValid) {
            var self = this;
            if (!isValid) {
                self.submitform = true;
                return;
            }
            if (self.userRole.id != 'Select') {
                angular.extend(self.newUser, {
                    roleId: self.userRole.id,
                    rolename: self.userRole.name
                });
                var d = self.$q.defer();
                self.loading(d.promise);
                self.postUser(self.newUser).then(function (data) {
                    self.$scope.modal.close();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                }).finally(function () { d.resolve(); });
            }
        };
        CreateUserModalController.prototype.getRoles = function () {
            var self = this;
            return self.$http.post(self.commands.data.users.getRoles, {});
        };
        CreateUserModalController.prototype.postUser = function (user) {
            var self = this;
            return self.$http.post(self.commands.data.users.saveUser, user);
        };
        CreateUserModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        CreateUserModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', 'GlobalServices', '$rootScope', "Commands", "Loading", "$q", "$translate"];
        return CreateUserModalController;
    }());
    asm.CreateUserModalController = CreateUserModalController;
    angular
        .module('app')
        .controller('CreateUserModalController', CreateUserModalController);
})(asm || (asm = {}));
//# sourceMappingURL=createuserModal.js.map
var asm;
(function (asm) {
    var DefineNetworksController = (function () {
        function DefineNetworksController($http, $timeout, $q, Modal, Dialog, $filter, Loading, $translate, Commands, GlobalServices, constants, $scope) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$filter = $filter;
            this.Loading = Loading;
            this.$translate = $translate;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$scope = $scope;
            var self = this;
            self.networkTypes = [];
            self.currentView = "all";
            self.StaticIPAddressDetailsViews = constants.staticIPAddressDetailsViews;
            self.deferred = self.$q.defer();
            self.refresh();
        }
        DefineNetworksController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.$q.all([
                self.loadNetworkTypes()
                    .then(function (data) {
                    self.networkTypes = data.data.responseObj;
                }),
                self.getNetworksList().then(function (data) {
                    //apply default sort so selecting first will work
                    var sortedData = _.sortBy(data.data.responseObj, function (n) {
                        return n.name.toLowerCase();
                    });
                    self.networkData = sortedData;
                    self.displayedNetworkData = [].concat(self.networkData);
                    var selectedNet = null;
                    if (self.selectedNetworkId != null) {
                        selectedNet = _.find(self.networkData, { id: self.selectedNetworkId });
                    }
                    if (selectedNet == null) {
                        selectedNet = self.displayedNetworkData[0];
                    }
                    self.onNetworkSelected(selectedNet);
                })
            ])
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                .finally(function () { return d.resolve(); });
        };
        ;
        DefineNetworksController.prototype.onNetworkSelected = function (network, ipRange) {
            var self = this;
            if (network) {
                var d = self.$q.defer();
                //self.Loading(d.promise);
                //this call must be async: false
                self.getNetworkById(network.id)
                    .then(function (data) {
                    self.selectedNetwork = data.data.responseObj;
                    self.selectedNetworkId = self.selectedNetwork.id;
                    if (self.selectedNetwork.staticordhcp == 'Static') {
                        //update static ip address details counts on network selection, based on selectedNetwork
                        self.totalIPAddresses_display = self.selectedNetwork.staticipaddressdetails.length;
                        self.inUseIPAddresses_display = _.filter(self.selectedNetwork.staticipaddressdetails, { state: 'inuse' }).length;
                        self.staticipaddressdetails_copy = self.selectedNetwork.staticipaddressdetails.slice(0, self.selectedNetwork.staticipaddressdetails.length);
                        if (self.selectedElement == 'filterDetails') {
                            self.totalIPAddresses_display = ipRange.totalIPAddresses;
                            self.inUseIPAddresses_display = ipRange.inUseIPAddresses;
                            //if one of the in use links was clicked, reset filter to inuse
                            self.currentView = 'inuse';
                            self.updateClientFilter();
                        }
                        else {
                            //reset the filter to all with each network row change or same-row click that is not on a link
                            //if one of the in use links was not clicked, reset filter to all
                            self.currentView = 'all';
                            self.updateClientFilter();
                        }
                    }
                }).catch(function (response) { self.GlobalServices.DisplayError(response.data); })
                    .finally(function () { return d.resolve(); });
            }
        };
        DefineNetworksController.prototype.updateClientFilter = function () {
            var self = this;
            var ipaddress1;
            var ipaddress2;
            if (self.staticipaddressdetails_copy.length == 0)
                return;
            self.selectedNetwork.staticipaddressdetails = [];
            self.selectedNetwork.staticipaddressdetails = self.staticipaddressdetails_copy.slice(0, self.staticipaddressdetails_copy.length);
            if (self.startingIpAddress != null && self.endingIpAddress != null) {
                ipaddress1 = self.$filter('ip2long')(self.startingIpAddress);
                ipaddress2 = self.$filter('ip2long')(self.endingIpAddress);
            }
            var filteredData = self.selectedNetwork.staticipaddressdetails.filter(function (item) {
                return (((self.currentView == 'all' && (item.state == 'available' || item.state == 'inuse')) || (item.state == self.currentView)) &&
                    ((ipaddress1 == '' && ipaddress2 == '') || (self.$filter('ip2long')(item.ipAddress) >= ipaddress1 && self.$filter('ip2long')(item.ipAddress) <= ipaddress2)));
            });
            self.selectedNetwork.staticipaddressdetails = [];
            self.selectedNetwork.staticipaddressdetails = filteredData.slice(0, filteredData.length);
            //smart table works by starting with data from st-safe-src (treating that one as safe), and then uses data from st-table for the actual display and paging of the data,
            //so another array is needed for this displayed data source
            self.selectedNetwork.staticipaddressdetails_displayed = [].concat(self.selectedNetwork.staticipaddressdetails);
        };
        DefineNetworksController.prototype.click_tableRow = function (clickedItem) {
            //click on TR
            //self.selectedNetwork = network;
            var self = this;
            var network = clickedItem;
            self.selectedElement = 'row';
            self.startingIpAddress = '';
            self.endingIpAddress = '';
            //var currentTarget = evt.target;
            //while (currentTarget.nodeName != 'TR') {
            //    //we are on a child node
            //    currentTarget = currentTarget.parentNode;
            //}
            ////we are now on the TR node so dataFor will now apply to the correct element
            //var network = ko.dataFor(currentTarget);
            self.onNetworkSelected(network);
        };
        DefineNetworksController.prototype.click_IPAddressRange = function (clickedItem1, clickedItem2) {
            //click on class filterDetails
            var self = this;
            var network = clickedItem1;
            var ipRange = clickedItem2;
            self.selectedElement = 'filterDetails';
            self.startingIpAddress = ipRange.startingIpAddress;
            self.endingIpAddress = ipRange.endingIpAddress;
            //self.Loading(self.deferred.promise);
            self.onNetworkSelected(network, ipRange);
            //self.totalIPAddresses_display = ipRange.totalIPAddresses;
            //self.inUseIPAddresses_display = ipRange.inUseIPAddresses;
        };
        DefineNetworksController.prototype.deleteNetwork = function () {
            var self = this;
            //Confirmation Dialog box that fires delete on confirmation
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('NETWORKS_ConfirmDelete'))).then(function () {
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.deleteNetworkById(self.selectedNetwork.id)
                    .then(function (data) {
                    self.refresh();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        DefineNetworksController.prototype.doDownload = function (type) {
            var self = this;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            self.processDownloadRequests('initial', '', type, deferred);
        };
        DefineNetworksController.prototype.processDownloadRequests = function (call, id, type, deferred) {
            var self = this;
            var urlToCall;
            var data;
            urlToCall = self.Commands.data.downloads.status;
            data = { 'id': id };
            if (call == 'initial') {
                urlToCall = self.Commands.data.downloads.create;
                if (type == 'networkdetails') {
                    data = { 'type': type, 'id': self.selectedNetworkId };
                }
                else {
                    data = { 'type': type };
                }
            }
            self.$http.post(urlToCall, { requestObj: data })
                .then(function (data) {
                switch (data.data.responseObj.status) {
                    case 'NOT_READY':
                        self.$timeout(function () {
                            self.processDownloadRequests('status', data.data.responseObj.id, type, deferred);
                        }, 5000);
                        break;
                    case 'READY':
                        window.location = 'downloads/getfile/' + data.data.responseObj.id;
                        deferred.resolve();
                        break;
                    case 'ERROR':
                        deferred.resolve();
                        self.GlobalServices.DisplayError(data.data);
                        break;
                }
            }).catch(function (data) {
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        DefineNetworksController.prototype.doUpdates = function (updateType) {
            var self = this;
            var title;
            //add/create or edit
            switch (updateType.toUpperCase()) {
                case 'CREATE':
                    //title = 'Define Network';
                    title = self.$translate.instant('NETWORKS_Edit_CreateTitle');
                    self.selectedNetworkId = '';
                    break;
                case 'EDIT':
                    //title = 'Edit Network';
                    title = self.$translate.instant('NETWORKS_Edit_EditTitle');
                    break;
            }
            var editNetworkModal = this.Modal({
                title: title,
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/editNetwork.html',
                controller: 'EditNetworkModalController as editNetwork',
                params: {
                    editMode: updateType,
                    id: self.selectedNetworkId
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            editNetworkModal.modal.show();
        };
        DefineNetworksController.prototype.loadNetworkTypes = function () {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworkTypes, { 'scaleup': false });
        };
        DefineNetworksController.prototype.getNetworksList = function () {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworksList, {});
        };
        DefineNetworksController.prototype.getNetworkById = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getNetworkById, { id: id });
        };
        DefineNetworksController.prototype.deleteNetworkById = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.deleteNetwork, { id: id });
        };
        DefineNetworksController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DefineNetworksController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        DefineNetworksController.$inject = ['$http', '$timeout', '$q', 'Modal', 'Dialog', '$filter',
            'Loading', '$translate', 'Commands', 'GlobalServices', 'constants', '$scope'];
        return DefineNetworksController;
    }());
    asm.DefineNetworksController = DefineNetworksController;
    angular
        .module('app')
        .controller('DefineNetworksController', DefineNetworksController);
})(asm || (asm = {}));
//# sourceMappingURL=defineNetworks.js.map
var asm;
(function (asm) {
    var DirectoryWizardController = (function () {
        function DirectoryWizardController(Modal, Dialog, $http, Loading, $q, $timeout, $scope, GlobalServices, $translate, Commands) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.GlobalServices = GlobalServices;
            this.$translate = $translate;
            this.Commands = Commands;
            this.directorymodalcopy = {};
            var self = this;
            self.editmode = !!self.$scope.modal.params.editmode;
            if (self.editmode) {
                self.directory = self.$scope.modal.params.directory[0];
            }
            self.refresh();
        }
        DirectoryWizardController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.$q.all([
                self.$http.post(self.Commands.data.users.getDirectoryType, null)
                    .then(function (data) {
                    self.directorytypelist = data.data.responseObj;
                    self.directorymodalcopy.directoryName = self.directorytypelist[0].directoryName;
                }),
                //Get protocol list
                self.$http.post(self.Commands.data.users.getProtocolType, null)
                    .then(function (data) {
                    self.protocollist = data.data.responseObj;
                    self.directorymodalcopy.protocolName = self.protocollist[0].protocolName;
                }),
                self.editmode &&
                    self.$http.post(self.Commands.data.users.getDirectoryById, self.directory)
                        .then(function (data) {
                        self.directory = data.data.responseObj;
                        self.directorymodalcopy = angular.copy(self.directory);
                    })
            ])
                .catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            })
                .finally(function () { d.resolve(); });
        };
        DirectoryWizardController.prototype.finishWizard = function () {
            var self = this, d = self.$q.defer(), match = _.find(self.directorytypelist, { directoryName: self.directorymodalcopy.directoryName });
            self.directorymodalcopy.typeId = match.typeId;
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_DirectorySerivcesConfirmDir')))
                .then(function () {
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.users.saveDirectory, self.directorymodalcopy)
                    .then(function (data) {
                    self.$scope.modal.close();
                })
                    .catch(function (error) {
                    self.GlobalServices.DisplayError(error.data);
                })
                    .finally(function () { d.resolve(); });
            });
        };
        DirectoryWizardController.prototype.cancelWizard = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        DirectoryWizardController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DirectoryWizardController.$inject = ['Modal', 'Dialog', '$http', 'Loading', '$q', '$timeout', '$scope', 'GlobalServices', '$translate', 'Commands'];
        return DirectoryWizardController;
    }());
    asm.DirectoryWizardController = DirectoryWizardController;
    angular
        .module('app')
        .controller('DirectoryWizardController', DirectoryWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=directorywizard.js.map
var asm;
(function (asm) {
    var DiscoverDevice = (function () {
        function DiscoverDevice() {
            //startingIpAddress: string = '';
            //endingIpAddress: string = '';
            //deviceGroupId: string = '';
            //credentialId: string = '';
            //managedstate: string = 'managed';
            //resourcetype: string = 'all';
            //serverPoolId: string = '';
            //serverCredentialId: string = '';
            //chassisCredentialId: string =  '';
            //bladeCredentialId: string = '';
            //iomCredentialId: string = '';
            //storageCredentialId: string = '';
            //vcenterCredentialId: string = '';
            //scvmmCredentialId: string = '';
            //emCredentialId: string = '';
            //torCredentialId: string = '';
            this.id = _.uniqueId();
            this.resourcetype = 'all';
            this.ipaddresstype = 'single';
            this.startingIpAddress = '';
            this.endingIpAddress = '';
            this.serverCredentialId = '';
            this.chassisCredentialId = '';
            this.bladeCredentialId = '';
            this.iomCredentialId = '';
            this.storageCredentialId = '';
            this.vcenterCredentialId = '';
            this.scvmmCredentialId = '';
            this.emCredentialId = '';
            this.torCredentialId = '';
            this.deviceGroupId = '';
            this.includeServers = false;
            this.includeChassis = false;
            this.includeStorage = false;
            this.includeVCenter = false;
            this.includeSCVMM = false;
            this.includeHypervisor = false;
            this.includeTOR = false;
            this.managedstate = 'managed';
            this.serverPoolId = '';
            this.totalIPAddresses = 0;
            this.inUseIPAddresses = 0;
        }
        return DiscoverDevice;
    }());
    asm.DiscoverDevice = DiscoverDevice;
    var DiscoveryWizardController = (function () {
        function DiscoveryWizardController(Modal, Dialog, $http, $translate, GlobalServices, $timeout, $scope, constants, $q, commands, loading) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.constants = constants;
            this.$q = $q;
            this.commands = commands;
            this.loading = loading;
            this.iresources = [];
            this.serverpools = [];
            this.AvailableResourceTypes = [];
            this.AvailableManagedStates = [];
            this.bladeCredentials = [];
            this.serverCredentials = [];
            this.chassisCredentials = [];
            this.storageCredentials = [];
            this.switchCredentials = [];
            this.vcenterCredentials = [];
            this.scvmmCredentials = [];
            this.torCredentials = [];
            this.emCredentials = [];
            this.networks = [];
            this.hasChassis = false;
            this.chassisDevices = {};
            this.configureDeviceInvalid = true;
            this.globalConfiguration = { configurationmode: "onboarding" };
            var self = this;
            self.wizardMode = self.$scope.modal.params.mode;
            self.AvailableResourceTypes = constants.availableResourceTypes;
            self.AvailableManagedStates = constants.availableManagedStates;
            self.AvailableManagedStates.unshift({
                name: self.$translate.instant("GENERIC_select"), id: ""
            });
            self.$q.all([
                self.$http.post(self.commands.data.networking.networks.getHardwareManagementNetworks, null).then(function (data) {
                    self.networks = data.data.responseObj;
                }),
                self.$http.post(self.commands.data.serverpools.getServerPools, null).then(function (data) {
                    self.serverpools = data.data.responseObj;
                    self.serverpools.unshift({
                        name: self.$translate.instant('DISCOVERY_SelectServerPool'), id: ""
                    });
                }),
                self.getCredentials('server').then(function (data) {
                    self.serverCredentials = data.data.responseObj;
                }),
                self.getCredentials('chassis').then(function (data) {
                    self.chassisCredentials = data.data.responseObj;
                }),
                self.getCredentials('storage').then(function (data) {
                    self.storageCredentials = data.data.responseObj;
                }),
                self.getCredentials('vcenter').then(function (data) {
                    self.vcenterCredentials = data.data.responseObj;
                }),
                self.getCredentials('scvmm').then(function (data) {
                    self.scvmmCredentials = data.data.responseObj;
                }),
                self.getCredentials('iom').then(function (data) {
                    self.torCredentials = data.data.responseObj;
                }),
                self.getCredentials('em').then(function (data) {
                    self.emCredentials = data.data.responseObj;
                })
            ]).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        }
        DiscoveryWizardController.prototype.getCredentials = function (type) {
            var self = this;
            return self.$http.post(self.commands.data.credential.getCredentialByType, { id: type });
        };
        DiscoveryWizardController.prototype.activate = function () {
            var self = this;
        };
        DiscoveryWizardController.prototype.getPlaceholder = function (row) {
            var self = this;
            switch (row.resourcetype) {
                case 'server': return self.$translate.instant('DISCOVERY_PlaceholderServer');
                case 'storage': return self.$translate.instant('DISCOVERY_PlaceholderStorage');
                case 'switch': return self.$translate.instant('DISCOVERY_PlaceholderSwitch');
                case 'vcenter': return self.$translate.instant('DISCOVERY_PlaceholderVCenter');
                case 'scvmm': return self.$translate.instant('DISCOVERY_PlaceholderSCVMM');
                case 'chassis': return self.$translate.instant('DISCOVERY_PlaceholderChassis');
                default:
                    return '';
            }
        };
        DiscoveryWizardController.prototype.getServerPoolValue = function (row) {
            var self = this;
            if (row.serverPoolId == '')
                return '';
            var ret = '';
            $.each(self.serverpools, function (index, sp) {
                if (sp.id == row.serverPoolId) {
                    ret = sp.name;
                    return;
                }
            });
            return ret;
        };
        DiscoveryWizardController.prototype.getSelectedCredential = function (id, type) {
            var self = this;
            if (id) {
                var list = [];
                switch (type) {
                    case 'chassis':
                        list = self.chassisCredentials;
                        break;
                    case 'blade':
                        list = self.serverCredentials;
                        break;
                    case 'iom':
                        list = self.torCredentials;
                        break;
                    case 'server':
                        list = self.serverCredentials;
                        break;
                    case 'storage':
                        list = self.storageCredentials;
                        break;
                    case 'switch':
                        list = self.torCredentials;
                        break;
                    case 'vcenter':
                        list = self.vcenterCredentials;
                        break;
                    case 'scvmm':
                        list = self.scvmmCredentials;
                        break;
                    case 'em':
                        list = self.emCredentials;
                        break;
                }
                var credential = $.grep(list, function (c) {
                    return c.id == id;
                });
                return credential.length > 0 ? credential[0].credentialsName : '';
            }
        };
        DiscoveryWizardController.prototype.getSelectedNetwork = function (id) {
            var self = this;
            if (id) {
                var network = $.grep(self.networks, function (n) {
                    return n.id == id;
                });
                return network.length > 0 ? network[0].name : '';
            }
        };
        DiscoveryWizardController.prototype.showChassisConfig = function () {
            var self = this;
            var result = false;
            if (self.iresources.length > 0) {
                var chassis = $.grep(self.iresources, function (ch) {
                    return (ch.resourcetype == 'chassis' || ch.resourcetype == 'all');
                });
                if (!self.chassisDevices.chassisConfigurations)
                    return false;
                var selectedChassis = $.grep(self.chassisDevices.chassisConfigurations, function (ch) {
                    return (ch["configureDevice"] == true);
                });
                result = (chassis.length > 0 && selectedChassis.length > 0);
            }
            return result;
        };
        DiscoveryWizardController.prototype.configurableDevice = function () {
            var self = this;
            return !!_.find(self.chassisDevices.chassisConfigurations, { configureDevice: true });
        };
        DiscoveryWizardController.prototype.checkForChassis = function () {
            var self = this;
            self.hasChassis = !!_.find(self.iresources, function (resource) {
                return (resource.resourcetype === "all" || resource.resourcetype === "chassis");
            });
        };
        DiscoveryWizardController.prototype.configureDeviceShown = function () {
            var self = this;
            self.chassisDevices.chassisConfigurations = [];
            self.chassisDevices.pending = true;
            self.configureDeviceInvalid = true;
            self.$http.post(self.commands.data.discovery.getChassisList, self.iresources).then(function (data) {
                self.getChassisStatuses();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data);
            });
        };
        DiscoveryWizardController.prototype.doCreateServerPool = function (rowIndex) {
            var self = this;
            var createServerPoolModal = self.Modal({
                title: self.$translate.instant('RESOURCE_CREATE_SERVER_POOL_CreateServerPool'),
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/NewServerPoolWizard.html',
                controller: 'NewServerPoolWizardController as newServerPoolWizardController',
                params: {
                    calledFromDiscoverWizard: true
                },
                onCancel: function () {
                    self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('SERVICES_DEPLOY_ConfirmWizardClosing')).then(function () {
                        console.log('closing');
                        createServerPoolModal.modal.close();
                    });
                },
                onComplete: function (modalScope) {
                    if (modalScope.newServerPoolWizardController.objectId) {
                        self.$http.post(self.commands.data.serverpools.getServerPools, null).then(function (data) {
                            self.serverpools = data.data.responseObj;
                            self.serverpools.unshift({
                                name: self.$translate.instant('DISCOVERY_SelectServerPool'), id: ""
                            });
                            self.iresources[rowIndex].serverPoolId = modalScope.newServerPoolWizardController.objectId;
                        });
                    }
                },
                //TODO: make onfinish actually fire
                onFinish: function () {
                    //self.refresh();
                }
            });
            createServerPoolModal.modal.show();
        };
        DiscoveryWizardController.prototype.doManageCredentials = function (updateType, credentialName, rowIndex) {
            var self = this;
            var title;
            var theId;
            var theName;
            switch (updateType.toUpperCase()) {
                case 'CREATE':
                    title = self.$translate.instant('CREDENTIALS_CreateTitle');
                    break;
                case 'EDIT':
                    title = self.$translate.instant('CREDENTIALS_EditTitle');
                    break;
            }
            //theName = _.upperFirst(_.toLower(credentialName))
            switch (credentialName) {
                case 'chassis':
                    theId = updateType.toUpperCase() == 'CREATE' ? '' : self.iresources[rowIndex].chassisCredentialId;
                    break;
                case 'blade':
                    theId = updateType.toUpperCase() == 'CREATE' ? '' : self.iresources[rowIndex].bladeCredentialId;
                    break;
                case 'iom':
                    theId = updateType.toUpperCase() == 'CREATE' ? '' : self.iresources[rowIndex].iomCredentialId;
                    break;
                case 'server':
                    theId = updateType.toUpperCase() == 'CREATE' ? '' : self.iresources[rowIndex].serverCredentialId;
                    break;
                case 'storage':
                    theId = updateType.toUpperCase() == 'CREATE' ? '' : self.iresources[rowIndex].storageCredentialId;
                    break;
                case 'switch':
                    theId = updateType.toUpperCase() == 'CREATE' ? '' : self.iresources[rowIndex].torCredentialId;
                    break;
                case 'scvmm':
                    theId = updateType.toUpperCase() == 'CREATE' ? '' : self.iresources[rowIndex].scvmmCredentialId;
                    break;
                case 'vcenter':
                    theId = updateType.toUpperCase() == 'CREATE' ? '' : self.iresources[rowIndex].vcenterCredentialId;
                    break;
                case 'em':
                    theId = updateType.toUpperCase() == 'CREATE' ? '' : self.iresources[rowIndex].emCredentialId;
                    break;
            }
            var theModal = this.Modal({
                title: title,
                modalSize: 'modal-lg',
                templateUrl: 'views/credentials/editCredentials.html',
                controller: 'EditCredentialsController as creds',
                params: {
                    id: theId,
                    editMode: updateType,
                    //blade needs to be server
                    //switch needs to be iom
                    editName: credentialName == 'blade' ? 'server' : credentialName == 'switch' ? 'iom' : credentialName
                },
                onClose: function () {
                    var self = this;
                    self.$scope.modal.close();
                },
                onCancel: function () {
                    var self = this;
                    self.$scope.modal.dismiss();
                },
                onComplete: function (modalScope) {
                    // should be id of credential
                    //console.log(modalScope.creds.viewData.objectId);              
                    switch (credentialName) {
                        case 'chassis':
                            self.getCredentials('chassis').then(function (data) {
                                self.chassisCredentials = data.data.responseObj;
                                self.iresources[rowIndex].chassisCredentialId = modalScope.creds.viewData.objectId;
                            });
                            break;
                        case 'blade':
                            self.getCredentials('server').then(function (data) {
                                self.serverCredentials = data.data.responseObj;
                                self.iresources[rowIndex].bladeCredentialId = modalScope.creds.viewData.objectId;
                            });
                            break;
                        case 'iom':
                            self.getCredentials('iom').then(function (data) {
                                self.torCredentials = data.data.responseObj;
                                self.iresources[rowIndex].iomCredentialId = modalScope.creds.viewData.objectId;
                            });
                            break;
                        case 'server':
                            self.getCredentials('server').then(function (data) {
                                self.serverCredentials = data.data.responseObj;
                                self.iresources[rowIndex].serverCredentialId = modalScope.creds.viewData.objectId;
                            });
                            break;
                        case 'storage':
                            self.getCredentials('storage').then(function (data) {
                                self.storageCredentials = data.data.responseObj;
                                self.iresources[rowIndex].storageCredentialId = modalScope.creds.viewData.objectId;
                            });
                            break;
                        case 'switch':
                            self.getCredentials('iom').then(function (data) {
                                self.torCredentials = data.data.responseObj;
                                self.iresources[rowIndex].torCredentialId = modalScope.creds.viewData.objectId;
                            });
                            break;
                        case 'scvmm':
                            self.getCredentials('scvmm').then(function (data) {
                                self.scvmmCredentials = data.data.responseObj;
                                self.iresources[rowIndex].scvmmCredentialId = modalScope.creds.viewData.objectId;
                            });
                            break;
                        case 'vcenter':
                            self.getCredentials('vcenter').then(function (data) {
                                self.vcenterCredentials = data.data.responseObj;
                                self.iresources[rowIndex].vcenterCredentialId = modalScope.creds.viewData.objectId;
                            });
                            break;
                        case 'em':
                            self.getCredentials('em').then(function (data) {
                                self.emCredentials = data.data.responseObj;
                                self.iresources[rowIndex].emCredentialId = modalScope.creds.viewData.objectId;
                            });
                            break;
                    }
                }
            });
            theModal.modal.show();
        };
        DiscoveryWizardController.prototype.getChassisStatuses = function () {
            var self = this;
            self.$http.post(self.commands.data.discovery.getChassisListStatus, self.chassisDevices).then(function (data) {
                var isPending = data.data.responseObj.pending;
                self.configureDeviceInvalid = isPending;
                if (isPending) {
                    self.timeout = self.$timeout(function () {
                        self.getChassisStatuses();
                    }, 10000);
                }
                else {
                    self.chassisDevices = data.data.responseObj;
                    var chassislist = self.chassisDevices.chassisConfigurations;
                    $.each(chassislist, function (index, model) {
                        model.configureDevice = true;
                    });
                }
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data);
            });
        };
        DiscoveryWizardController.prototype.chassisConfigurationSelected = function () {
            var self = this;
            return !!_.find(self.chassisDevices.chassisConfigurations, { configureDevice: true });
        };
        DiscoveryWizardController.prototype.addResourceRow = function () {
            var x = new DiscoverDevice();
            var self = this;
            //x.chassisCredentialId = self.chassisCredentials[0].id;
            //x.bladeCredentialId = self.serverCredentials[0].id;
            //x.iomCredentialId = self.torCredentials[0].id;
            //x.serverCredentialId = self.serverCredentials[0].id;
            //x.storageCredentialId = self.storageCredentials[0].id;
            //x.torCredentialId = self.torCredentials[0].id;
            //x.scvmmCredentialId = self.scvmmCredentials[0].id;
            //x.vcenterCredentialId = self.vcenterCredentials[0].id;
            //x.emCredentialId = self.emCredentials[0].id;
            self.iresources.push(x);
        };
        DiscoveryWizardController.prototype.deleteResourceRow = function (i) {
            var self = this;
            self.iresources.splice(i, 1);
        };
        DiscoveryWizardController.prototype.finishWizard = function () {
            var self = this;
            var message;
            if (self.chassisConfigurationSelected()) {
                message = self.$translate.instant('DISCOVERY_LongRunningNotice');
            }
            else {
                message = self.$translate.instant('DISCOVERY_LongRunningNotice_NoChassis');
            }
            var confirm = this.Dialog((self.$translate.instant('GENERIC_Confirm')), message).then(function () {
                var chassislist = self.chassisDevices.chassisConfigurations;
                var selectedchassis = [];
                if (self.hasChassis) {
                    for (var i = 0; i < chassislist.length; i++) {
                        selectedchassis.push({
                            chassisConfigurationId: chassislist[i].chassisConfigurationId,
                            deviceid: chassislist[i].deviceid,
                            ipAddress: chassislist[i].ipAddress,
                            configureDevice: chassislist[i].configureDevice
                        });
                    }
                }
                var d = self.$q.defer();
                self.loading(d.promise);
                self.$http.post(self.commands.data.discovery.submitDiscovery, {
                    requestObj: {
                        chassisdata: {
                            jobId: self.chassisDevices.jobId,
                            pending: false,
                            chassisConfigurations: selectedchassis
                        },
                        ipdata: self.iresources,
                        chassisconfig: self.globalConfiguration
                    }
                })
                    .then(function (data) {
                    d.resolve();
                    self.closeWizard();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                    d.resolve();
                });
            });
        };
        DiscoveryWizardController.prototype.cancelWizard = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        DiscoveryWizardController.prototype.closeWizard = function () {
            var self = this;
            self.$scope.modal.close();
        };
        DiscoveryWizardController.$inject = ['Modal', 'Dialog', '$http', '$translate', 'GlobalServices', '$timeout', '$scope', 'constants', '$q', 'Commands', 'Loading'];
        return DiscoveryWizardController;
    }());
    asm.DiscoveryWizardController = DiscoveryWizardController;
    angular
        .module('app')
        .controller('DiscoveryWizardController', DiscoveryWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=discoverywizard.js.map
var asm;
(function (asm) {
    var BackupSettingsAndDetailsModalController = (function () {
        function BackupSettingsAndDetailsModalController($scope, Modal, Dialog, $http, $translate, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.Commands = Commands;
            this.submitform = false;
            this.getBackupSettings();
        }
        BackupSettingsAndDetailsModalController.prototype.getBackupSettings = function () {
            var self = this;
            self.$http.post(self.Commands.data.backupAndRestore.getBackupSettings, null)
                .success(function (data, status, headers, config) {
                self.backupSettings = data.responseObj;
            })
                .error(function (data, status, headers, config) {
                //TODO: Add error messaging
                var x = 0;
            });
        };
        BackupSettingsAndDetailsModalController.prototype.save = function (isValid) {
            var self = this;
            if (!isValid) {
                self.submitform = true;
                return;
            }
            self.$http.post(self.Commands.data.backupAndRestore.saveBackupSettings, { requestObj: this.backupSettings })
                .success(function (data, status, headers, config) {
                self.$scope.modal.close();
            })
                .error(function (data, status, headers, config) {
                //TODO: Add error messaging
                var x = 0;
            });
        };
        BackupSettingsAndDetailsModalController.prototype.testConnection = function (isValid) {
            var self = this;
            if (!isValid) {
                self.submitform = true;
                return;
            }
            self.$http.post(self.Commands.data.backupAndRestore.testBackupConnection, { requestObj: this.backupSettings })
                .success(function (data, status, headers, config) {
                var confirm = self.Dialog((self.$translate.instant('BACKUPNOW_testconnection_title')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('The test was successful')), true);
            })
                .error(function (data, status, headers, config) {
                //TODO: Add error messaging
                var x = 0;
            });
        };
        BackupSettingsAndDetailsModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        BackupSettingsAndDetailsModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        BackupSettingsAndDetailsModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$translate', 'Commands'];
        return BackupSettingsAndDetailsModalController;
    }());
    asm.BackupSettingsAndDetailsModalController = BackupSettingsAndDetailsModalController;
    angular
        .module('app')
        .controller('BackupSettingsAndDetailsModalController', BackupSettingsAndDetailsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editbackupsettingsanddetailsModal.js.map
var asm;
(function (asm) {
    var EditCredentialsController = (function () {
        //public availableCredentials: any[];
        //public editMode: any;
        //public credentialId: any;
        //public credentialName: any;
        //public submitForm: boolean;
        function EditCredentialsController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.viewModel = {};
            var self = this;
            //this.viewData = {
            //    availableCredentials : [
            //        { "id": "notselected", "name": "Select a Credential Type..." },
            //        { "id": "chassis", "name": "Chassis" },
            //        { "id": "server", "name": "Server" },
            //        { "id": "iom", "name": "Switch" },
            //        { "id": "vcenter", "name": "vCenter" },
            //        { "id": "scvmm", "name": "SCVMM" },
            //        { "id": "storage", "name": "Storage" },
            //        { "id": "em", "name": "Element Manager" }
            //    ],
            self.viewData = {
                availableCredentials: constants.availableResourceTypes,
                editMode: $scope.modal.params.editMode,
                credentialId: $scope.modal.params.id,
                //name is provided by
                //deviceConfig.ts (will be Chassis, Server, Switch)
                credentialName: $scope.modal.params.editName,
                friendlyName: '',
                submitForm: false,
                objectId: ''
            };
            if (!self.viewData.credentialName) {
                // notselected = 'Select a Credential Type...'
                var index = _.indexOf(self.viewData.availableCredentials, _.find(self.viewData.availableCredentials, { id: 'all' }));
                if (index >= 0)
                    self.viewData.availableCredentials.splice(index, 1, { id: 'notselected', name: 'Select a Credential Type...' });
            }
            self.viewModel.typeId = 'notselected';
            self.activate();
        }
        EditCredentialsController.prototype.activate = function () {
            var self = this;
            if (self.viewData.credentialId) {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
                // exists - go get it
                var data;
                data = { 'id': self.viewData.credentialId };
                self.$http.post(self.Commands.data.credential.getCredentialById, { requestObj: data }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                    self.viewModel = data.data.responseObj;
                    self.viewData.friendlyName = _.find(self.viewData.availableCredentials, function (o) { return o.id == self.viewModel.typeId; }).name;
                    deferred.resolve();
                })
                    .catch(function (data) {
                    //need to handle error
                    deferred.resolve();
                    //error is in data
                    self.GlobalServices.DisplayError(data.data);
                });
            }
            else {
                if (self.viewData.credentialName && self.viewData.editMode == 'create') {
                    //when called by
                    //deviceConfig.ts;  credentialName will be Chassis, Server, Switch, etc
                    //and edit mode will be 'create'.  
                    //typeId needs to be set if data is saved
                    self.viewModel.typeId = _.find(self.viewData.availableCredentials, function (o) { return o.id == self.viewData.credentialName; }).id;
                    self.viewData.friendlyName = _.find(self.viewData.availableCredentials, function (o) { return o.id == self.viewData.credentialName; }).name;
                }
                // new item, set some defaults
                angular.merge(self.viewModel, {
                    candelete: true,
                    canedit: true,
                    communityString: "public",
                    credentialProtocol: "ssh",
                    enableCertificateCheck: false,
                    numberOfDevices: "0",
                    username: "root"
                });
            }
        };
        EditCredentialsController.prototype.doSave = function (formHasErrors) {
            var self = this;
            self.viewData.submitForm = true;
            if (formHasErrors || self.viewModel.password !== self.viewModel.confirmPassword) {
                return;
            }
            var d = self.$q.defer();
            self.Loading(d.promise);
            //this will do an update/create
            self.$http.post(self.Commands.data.credential.saveCredential, self.viewModel).then(function (data) {
                self.viewData.objectId = data.data.responseObj.id;
                self.close();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        EditCredentialsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        EditCredentialsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants'];
        return EditCredentialsController;
    }());
    asm.EditCredentialsController = EditCredentialsController;
    angular
        .module('app')
        .controller('EditCredentialsController', EditCredentialsController);
})(asm || (asm = {}));
//# sourceMappingURL=editcredentials.js.map
var asm;
(function (asm) {
    var EditDeviceModalController = (function () {
        function EditDeviceModalController($scope, Modal, Dialog, $http, globalServices, $rootScope, commands, loading, $q, $translate, constants) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.globalServices = globalServices;
            this.$rootScope = $rootScope;
            this.commands = commands;
            this.loading = loading;
            this.$q = $q;
            this.$translate = $translate;
            this.constants = constants;
            this.options = {};
            var self = this;
            self.refresh();
        }
        EditDeviceModalController.prototype.refresh = function () {
            var self = this;
            self.type = self.$scope.modal.params.type;
            self.mode = self.$scope.modal.params.mode;
            self.user = self.$scope.modal.params.user || { enabled: true };
            angular.extend(self.options, {
                availableCMCUserRoles: self.constants.availableCMCUserRoles,
                availableLanRoles: self.constants.availableLanRoles,
                availableiDracUserRoles: self.constants.availableiDracUserRoles
            });
        };
        EditDeviceModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close(self.user);
        };
        EditDeviceModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        EditDeviceModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', 'GlobalServices',
            '$rootScope', "Commands", "Loading", "$q", "$translate", "constants"];
        return EditDeviceModalController;
    }());
    asm.EditDeviceModalController = EditDeviceModalController;
    angular
        .module('app')
        .controller('EditDeviceModalController', EditDeviceModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editDeviceUserModal.js.map
var asm;
(function (asm) {
    var EditPoolController = (function () {
        function EditPoolController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            //used in form
            this.id = '';
            this.type = '';
            this.identitycount = 0;
            this.autogenerate = false;
            this.submitForm = false;
            var self = this;
            self.id = $scope.modal.params.id;
            self.type = $scope.modal.params.type;
            self.activate();
        }
        EditPoolController.prototype.activate = function () {
            var self = this;
            if (self.id) {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
                var results;
                var data;
                data = { 'id': self.id };
                self.$http.post(self.Commands.data.pools.getPoolById, { requestObj: data }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: data }).then(function(data:any){
                    results = data.data.responseObj;
                    switch (self.type) {
                        case "mac":
                            self.autogenerate = results.virtualMACAutoGenerateOnDeploy;
                            break;
                        case "iqn":
                            self.autogenerate = results.virtualIQNAutoGenerateOnDeploy;
                            break;
                        case "wwpn":
                            self.autogenerate = results.virtualWWPNAutoGenerateOnDeploy;
                            break;
                        case "wwnn":
                            self.autogenerate = results.virtualWWNNAutoGenerateOnDeploy;
                            break;
                    }
                    deferred.resolve();
                })
                    .catch(function (data) {
                    //need to handle error
                    deferred.resolve();
                    //error is in data
                    self.GlobalServices.DisplayError(data.data);
                });
            }
        };
        EditPoolController.prototype.doSave = function (formHasErrors) {
            var self = this;
            if (formHasErrors)
                return;
            var myScope = this.$scope;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            //this will do an update/create
            self.$http.post(self.Commands.data.pools.updatePool, {
                requestObj: {
                    'id': self.id,
                    'type': self.type,
                    'identitycount': self.identitycount,
                    'autogenerate': self.autogenerate
                }
            }).then(function (data) {
                //self.$http.post('bogus', { requestObj: self }).then(function (data: any) {
                deferred.resolve();
                myScope.modal.close();
            }).catch(function (data) {
                //need to handle error
                deferred.resolve();
                //error is in data
                self.GlobalServices.DisplayError(data.data);
            });
        };
        EditPoolController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditPoolController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return EditPoolController;
    }());
    asm.EditPoolController = EditPoolController;
    angular
        .module('app')
        .controller('EditPoolController', EditPoolController);
})(asm || (asm = {}));
//# sourceMappingURL=editpool.js.map
var asm;
(function (asm) {
    var EditScheduledBackupModalController = (function () {
        function EditScheduledBackupModalController($scope, Modal, Dialog, $http, $translate, $q, $filter, loading, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.$q = $q;
            this.$filter = $filter;
            this.loading = loading;
            this.Commands = Commands;
            this.getBackupScheduleInfo();
            this.deferred = this.$q.defer();
            this.errors = '';
        }
        EditScheduledBackupModalController.prototype.getBackupScheduleInfo = function () {
            var self = this;
            self.$http.post(self.Commands.data.backupAndRestore.getBackupScheduleInfo, null)
                .success(function (data, status, headers, config) {
                self.backupScheduleInfo = data.responseObj;
                self.timeOfBackup = moment(data.responseObj.timeOfBackup).format('HH:mm');
            })
                .error(function (data, status, headers, config) {
                //TODO: Add error messaging
                var x = 0;
            });
        };
        EditScheduledBackupModalController.prototype.save = function () {
            var self = this;
            self.loading(self.deferred.promise);
            var time = $('#txtTimeOfBackup').val();
            var date = moment(new Date()).format('YYYY-MM-DD');
            var isotime = moment(date + 'T' + time, "YYYY-MM-DDTHH:mm").toDate();
            self.backupScheduleInfo.timeOfBackup = (self.backupScheduleInfo.enabled == 'true' ? isotime : null);
            self.$http.post(self.Commands.data.backupAndRestore.setBackupScheduleInfo, self.backupScheduleInfo)
                .success(function (data, status, headers, config) {
                self.deferred.resolve();
                self.$scope.modal.close();
            })
                .error(function (data, status, headers, config) {
                //TODO: Add error messaging
                self.deferred.resolve();
            });
        };
        EditScheduledBackupModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        EditScheduledBackupModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditScheduledBackupModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$translate', '$q', '$filter', 'Loading', 'Commands'];
        return EditScheduledBackupModalController;
    }());
    asm.EditScheduledBackupModalController = EditScheduledBackupModalController;
    angular
        .module('app')
        .controller('EditScheduledBackupModalController', EditScheduledBackupModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editscheduledbackup.js.map
var asm;
(function (asm) {
    var EditUserModalController = (function () {
        function EditUserModalController($scope, Modal, Dialog, $http, GlobalServices, $rootScope, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.Commands = Commands;
            this.modalUser = $scope.modal.params.selecteduser[0];
            this.submitform = false;
            this.userRole = 'Select a Role...';
            this.roles = [];
            this.currentPassword = false;
            this.getRoles();
            this.getUser();
        }
        EditUserModalController.prototype.getUser = function () {
            var self = this;
            self.$http.post(self.Commands.data.users.getUserById, { requestObj: this.modalUser }).then(function (data) {
                self.originalUser = data.data.responseObj;
                self.originalUser.confirmationPassword = self.originalUser.password;
                self.modalUser = angular.copy(self.originalUser);
                //select the correct role from the roles list
                self.roles.forEach(function (role, index) {
                    if (role.id == self.modalUser.roleId) {
                        self.userRole = self.roles[index];
                    }
                });
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        EditUserModalController.prototype.getRoles = function () {
            var self = this;
            this.$http.post(self.Commands.data.users.getRoles, null).then(function (data) {
                self.roles = data.data.responseObj;
                var item = { id: 'Select', name: 'Select a Role...' };
                self.roles.splice(0, 0, item);
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        EditUserModalController.prototype.saveUser = function () {
            var self = this;
            if (self.userRole.id != 'Select') {
                this.modalUser.roleId = this.userRole.id;
                this.modalUser.rolename = this.userRole.name;
                self.$http.post(self.Commands.data.users.saveUser, { requestObj: this.modalUser }).then(function (data) {
                    self.$scope.modal.close();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            }
        };
        EditUserModalController.prototype.cancel = function () {
            var self = this;
            self.modalUser = self.originalUser;
            self.$rootScope.$broadcast('clearErrors');
            self.$scope.modal.cancel();
        };
        EditUserModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', 'GlobalServices', '$rootScope', 'Commands'];
        return EditUserModalController;
    }());
    asm.EditUserModalController = EditUserModalController;
    angular
        .module('app')
        .controller('EditUserModalController', EditUserModalController);
})(asm || (asm = {}));
//# sourceMappingURL=edituserModal.js.map
var asm;
(function (asm) {
    var ExportTemplateController = (function () {
        function ExportTemplateController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.form = {
                templateId: this.$scope.modal.params.templateId,
                useEncPwdFromBackup: true
            };
            this.submitForm = false;
        }
        ExportTemplateController.prototype.doExport = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.templates.validateExport, self.form).then(function (data) {
                d.resolve();
                $('#form_exporttemplate').submit();
                self.close();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        ExportTemplateController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ExportTemplateController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ExportTemplateController;
    }());
    asm.ExportTemplateController = ExportTemplateController;
    angular
        .module('app')
        .controller('ExportTemplateController', ExportTemplateController);
})(asm || (asm = {}));
//# sourceMappingURL=exportTemplate.js.map
var asm;
(function (asm) {
    var GenericModalController = (function () {
        function GenericModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.initialize();
        }
        GenericModalController.prototype.initialize = function () {
            var self = this;
            self.params = self.$scope.modal.params.params;
        };
        GenericModalController.prototype.ok = function () {
            var self = this;
            self.$scope.modal.close();
        };
        GenericModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        GenericModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return GenericModalController;
    }());
    asm.GenericModalController = GenericModalController;
    angular
        .module('app')
        .controller('GenericModalController', GenericModalController);
})(asm || (asm = {}));
//# sourceMappingURL=genericModalController.js.map
var asm;
(function (asm) {
    var ImportActiveDirDetailsModalController = (function () {
        function ImportActiveDirDetailsModalController($scope, Modal, Dialog, $http, GlobalServices, $rootScope, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.Commands = Commands;
            this.selectedItem = $scope.modal.params.selecteditem;
            this.isuser = $scope.modal.params.isuser;
            this.groupdetails = '';
            this.displayedgroupdetails = '';
            this.getdetails();
        }
        ImportActiveDirDetailsModalController.prototype.getdetails = function () {
            var self = this;
            if (!self.isuser) {
                self.$http.post(self.Commands.data.users.getGroupDetails, { requestObj: self.selectedItem }).then(function (data) {
                    self.groupdetails = data.data.responseObj;
                    self.displayedgroupdetails = [].concat(self.groupdetails);
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                });
            }
        };
        ;
        ImportActiveDirDetailsModalController.prototype.cancel = function () {
            var self = this;
            self.$rootScope.$broadcast('clearErrors');
            self.$scope.modal.cancel();
        };
        ImportActiveDirDetailsModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', 'GlobalServices', '$rootScope', 'Commands'];
        return ImportActiveDirDetailsModalController;
    }());
    asm.ImportActiveDirDetailsModalController = ImportActiveDirDetailsModalController;
    angular
        .module('app')
        .controller('ImportActiveDirDetailsModalController', ImportActiveDirDetailsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=importactivedirectoryDetailsModal.js.map
var asm;
(function (asm) {
    var ImportDirUsersModalController = (function () {
        //public showFindUserError: boolean;
        function ImportDirUsersModalController($scope, Modal, Dialog, $http, GlobalServices, $rootScope, $q, Loading, $translate, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.GlobalServices = GlobalServices;
            this.$rootScope = $rootScope;
            this.$q = $q;
            this.Loading = Loading;
            this.$translate = $translate;
            this.Commands = Commands;
            this.importDirectoryList = [];
            this.directoryUsers = [];
            this.importRoles = [];
            this.results = [];
            this.displayedresults = [];
            this.rightcol = [];
            this.leftcol = [];
            this.displayedleftcol = [];
            this.viewBy = 'usersgroups';
            //this.showFindUserError = false;
            this.getDirectories();
            this.getImportDirectoryList();
            this.getImportRoles();
            this.jobRequest = { criteriaObj: { filterObj: [{ field: '', op: '', opTarget: '' }] } };
            this.updateSearch();
        }
        //get directories drop down list
        ImportDirUsersModalController.prototype.getDirectories = function () {
            var self = this;
            this.$http.post(self.Commands.data.users.getDirectoryList, null).then(function (data) {
                self.directories = data.data.responseObj;
                var item = { id: 'Select', serverName: self.$translate.instant('SETTINGS_ActiveDirectorySelectARoleAlt') };
                self.directories.splice(0, 0, item);
                self.selectedDirectory = self.directories[0].serverName;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        //get import roles dropdown list
        ImportDirUsersModalController.prototype.getImportRoles = function () {
            var self = this;
            this.$http.post(self.Commands.data.users.getImportRoles, null).then(function (data) {
                self.importRoles = data.data.responseObj;
                self.importRoles.unshift({ id: 'Select Role', roleId: self.$translate.instant('SETTINGS_ActiveDirectorySelectARole') });
                self.selectedRoleId = self.importRoles[0].id;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ImportDirUsersModalController.prototype.getImportDirectoryList = function () {
            var self = this;
            this.$http.post(self.Commands.data.users.getImportDirectoryList, null).then(function (data) {
                self.importDirectoryList = data.data.responseObj;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ImportDirUsersModalController.prototype.updateSearch = function () {
            var self = this;
            var keyword = self.searchText;
            if (keyword && keyword.length > 2) {
                if (searchtimeout) {
                    clearTimeout(searchtimeout);
                }
                var searchtimeout = setTimeout(function () {
                    self.refresh();
                }, 200); // 200ms delay
            }
        };
        ImportDirUsersModalController.prototype.refresh = function () {
            var self = this;
            if (self.searchText.length >= 3) {
                //self.showFindUserError = false;
                self.jobRequest = { criteriaObj: { filterObj: [{ field: '', op: '', opTarget: '' }] } };
                self.directoryUsers = [];
                self.results = [];
                self.displayedresults = [];
                var qArray = [];
                var keyword = self.searchText;
                if (keyword && keyword != '') {
                    self.jobRequest.criteriaObj.filterObj[0] = { field: 'keyword', op: '=', opTarget: [keyword] };
                }
                self.jobRequest.criteriaObj.filterObj.push({ field: 'server', op: '=', opTarget: [this.selectedDirectory] });
                //get all users and groups
                qArray.push(this.$http.post(self.Commands.data.users.getDirectoryUsers, { requestObj: null, criteriaObj: self.jobRequest.criteriaObj }).then(function (data) {
                    self.directoryUsers = data.data.responseObj;
                    if (self.viewBy == 'users') {
                        self.directoryUsers = _.filter(self.directoryUsers, { 'isGroup': false });
                    }
                    if (self.viewBy == 'groups') {
                        self.directoryUsers = _.filter(self.directoryUsers, { 'isGroup': true });
                    }
                    self.directoryUsers.forEach(function (user) {
                        if (user.roleId == null) {
                            user.roleId = self.importRoles[0].id;
                            user.rolename = self.importRoles[0].roleId;
                        }
                    });
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                }));
                this.$q.all(qArray)
                    .then(function (respone) {
                    self.leftcol = [].concat(self.directoryUsers);
                    self.displayedleftcol = [].concat(self.leftcol);
                    if (self.movingLeft) {
                        self.removeRightColItems();
                    }
                    else {
                        self.removeLeftColItems();
                    }
                    self.movingLeft = false;
                });
            }
            //else
            //self.showFindUserError = true;
        };
        ImportDirUsersModalController.prototype.selectedItems = function () {
            return _.filter(this.displayedleftcol, { 'isSelected': true });
        };
        ImportDirUsersModalController.prototype.selectedRightItems = function () {
            return _.filter(this.rightcol, { 'isSelected': true });
        };
        ImportDirUsersModalController.prototype.noRoles = function () {
            var self = this;
            if (self.rightcol.length) {
                return _.filter(this.rightcol, { 'roleId': self.importRoles[0].id });
            }
        };
        //TODO: Need pattern for check all boxes
        ImportDirUsersModalController.prototype.leftCheckAll = function () {
            var self = this;
            this.leftcol.forEach(function (x) {
                if (self.leftCheckAllBox == true) {
                    x.isSelected = true;
                }
                else {
                    x.isSelected = false;
                }
            });
        };
        //TODO: Need pattern for check all boxes
        ImportDirUsersModalController.prototype.rightCheckAll = function () {
            var self = this;
            this.rightcol.forEach(function (x) {
                if (self.rightCheckAllBox == true) {
                    x.isSelected = true;
                }
                else {
                    x.isSelected = false;
                }
            });
        };
        ImportDirUsersModalController.prototype.removeLeftColItems = function () {
            var _this = this;
            var self = this;
            this.rightcol.forEach(function (rightitem) {
                _this.leftcol.forEach(function (leftitem, index) {
                    if (rightitem.id == leftitem.id) {
                        _this.leftcol.splice(index, 1);
                    }
                });
            });
            self.displayedleftcol = [].concat(self.leftcol);
            self.leftCheckAllBox = false;
            self.rightCheckAllBox = false;
        };
        ImportDirUsersModalController.prototype.removeRightColItems = function () {
            var _this = this;
            var self = this;
            this.rightcol.forEach(function (rightitem, index) {
                if (rightitem.isSelected) {
                    _this.rightcol.splice(index, 1);
                }
            });
            this.removeLeftColItems();
        };
        ImportDirUsersModalController.prototype.moveRight = function () {
            var self = this;
            var items = this.selectedItems();
            items.forEach(function (x) {
                self.rightcol.push(x);
                x.isSelected = false;
            });
            this.removeLeftColItems();
        };
        ImportDirUsersModalController.prototype.moveLeft = function () {
            var self = this;
            var items = this.selectedRightItems();
            var moveLeft = true;
            items.forEach(function (x, index) {
                self.rightcol.forEach(function (x, index) {
                    if (x.isSelected) {
                        self.rightcol.splice(index, 1);
                    }
                });
            });
            self.movingLeft = true;
            self.refresh();
        };
        ImportDirUsersModalController.prototype.changeRoles = function () {
            var self = this;
            var rightcolselected = self.selectedRightItems();
            rightcolselected.forEach(function (x) {
                x.rolename = self.selectedRoleId;
                self.importRoles.forEach(function (role) {
                    if (role.id == self.selectedRoleId) {
                        x.roleId = role.id;
                    }
                });
            });
        };
        ImportDirUsersModalController.prototype.saveUsers = function () {
            var self = this;
            var d = this.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.users.saveImportDirectoryUsers, { requestObj: this.rightcol }).then(function (data) {
                console.log('Directory User Update Success');
                self.$scope.modal.close();
                d.resolve();
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ImportDirUsersModalController.prototype.viewdetails = function (item) {
            var self = this;
            if (item.firstname) {
                var user = true;
                var name = item.firstname;
            }
            else {
                var name = item.name;
                var user = false;
            }
            var detailsModal = this.Modal({
                title: name,
                modalSize: 'modal-lg',
                templateUrl: 'views/importactivedirdetailsModal.html',
                controller: 'ImportActiveDirDetailsModalController as detailsModal',
                params: {
                    selecteditem: item,
                    isuser: user
                },
                onComplete: function () {
                },
                close: function () {
                    var self = this;
                    self.$scope.modal.close();
                },
                cancel: function () {
                    var self = this;
                    self.$scope.modal.dismiss();
                }
            });
            detailsModal.modal.show();
        };
        ImportDirUsersModalController.prototype.cancel = function () {
            var self = this;
            self.$rootScope.$broadcast('clearErrors');
            self.$scope.modal.cancel();
        };
        ImportDirUsersModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', 'GlobalServices', '$rootScope', '$q', 'Loading', '$translate', 'Commands'];
        return ImportDirUsersModalController;
    }());
    asm.ImportDirUsersModalController = ImportDirUsersModalController;
    angular
        .module('app')
        .controller('ImportDirUsersModalController', ImportDirUsersModalController);
})(asm || (asm = {}));
//# sourceMappingURL=importactivedirusersModal.js.map
var asm;
(function (asm) {
    var ImportTemplateModalController = (function () {
        function ImportTemplateModalController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.templateId = "";
            this.templates = null;
            this.selectedId = null;
            var self = this;
            self.templateId = self.$scope.modal.params.template;
            self.getTemplateList();
        }
        ImportTemplateModalController.prototype.getTemplateList = function () {
            var self = this;
            self.$http.post(self.Commands.data.templates.getTemplateList, {}).then(function (data) {
                self.templates = data.data.responseObj;
            }).catch(function (data) {
            });
        };
        ImportTemplateModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ImportTemplateModalController.prototype.import = function () {
            var self = this;
            var params = {
                id: self.templateId,
                importId: self.selectedId
            };
            self.$http.post(self.Commands.data.templates.importTemplate, params).then(function (data) {
                self.$scope.modal.close();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ImportTemplateModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ImportTemplateModalController;
    }());
    asm.ImportTemplateModalController = ImportTemplateModalController;
    angular
        .module('app')
        .controller('ImportTemplateModalController', ImportTemplateModalController);
})(asm || (asm = {}));
//# sourceMappingURL=importtemplate.js.map
var asm;
(function (asm) {
    var JobsModalController = (function () {
        function JobsModalController(Modal, Dialog, $http, $timeout, $q, $translate, $rootScope, GlobalServices, commands, loading) {
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.$rootScope = $rootScope;
            this.GlobalServices = GlobalServices;
            this.commands = commands;
            this.loading = loading;
            var self = this;
            self.buttonActive = false;
            self.checkAllBox = false;
            self.refresh();
            self.activate();
        }
        JobsModalController.prototype.activate = function () {
            var self = this;
            self.selectedjobs = self.checkselected();
            var jobstimer = self.$timeout(function () {
                self.refresh();
                self.activate();
            }, 60000);
            self.$rootScope.$on('$locationChangeSuccess', function () {
                self.$timeout.cancel(jobstimer);
            });
        };
        JobsModalController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.loading(d.promise);
            //Get All Jobs
            self.$http.post(self.commands.data.jobs.getJobList, {}).then(function (data) {
                self.results = data.data.responseObj;
                self.displayedresults = [].concat(self.results);
                if (self.checkselected().length == 0) {
                    self.buttonActive = false;
                }
                //when finished getting jobs, reselect the selected and include elapsed time
                angular.forEach(_.filter(self.results, function (job) {
                    return job.endDate || job.status === 'running';
                }), function (job) {
                    var now = job.endDate ? moment(job.endDate) : moment(), then = moment(job.startDate), duration = moment.duration(now.diff(then)), days = Math.floor(duration.asDays()), hours = Math.floor(duration.asHours()), minutes = Math.floor(duration.asMinutes());
                    if (days === 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_aday');
                    }
                    else if (days > 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_numDays', { number: days });
                    }
                    else if (hours === 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_anhour');
                    }
                    else if (hours > 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_numHours', { number: hours });
                    }
                    else if (minutes === 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_amimute');
                    }
                    else if (minutes > 0) {
                        job.elapsedTime = self.$translate.instant('SETTINGS_numMinutes', { number: minutes });
                    }
                    job.isSelected = self.selectedjobs.length >= 1 && !!_.find(self.selectedjobs, { id: job.id });
                });
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () {
                d.resolve();
            });
        };
        ;
        JobsModalController.prototype.checkselected = function () {
            var self = this;
            return _.filter(self.results, { 'isSelected': true });
        };
        JobsModalController.prototype.cancelButtonActive = function () {
            var self = this, returnVal = true;
            if (self.results) {
                self.results.forEach(function (x) {
                    if (x.isSelected && x.status !== 'scheduled') {
                        returnVal = false;
                    }
                });
            }
            return returnVal;
        };
        //check all checkbox
        JobsModalController.prototype.checkAll = function () {
            var self = this;
            self.results.forEach(function (job) {
                if (self.checkAllBox) {
                    job.isSelected = true;
                }
                else {
                    job.isSelected = false;
                }
            });
        };
        ;
        //cancel job
        JobsModalController.prototype.cancelJob = function () {
            var self = this, selectedusers = _.map(self.checkselected(), 'id'), d = self.$q.defer();
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETTINGS_ConfirmJobCancel')))
                .then(function () {
                self.loading(d.promise);
                self.$http.post(self.commands.data.jobs.deleteJob, selectedusers)
                    .then(function (data) {
                    self.refresh();
                })
                    .catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                }).finally(function () { return d.resolve(); });
                //self.checkselected() = [];
            });
        };
        JobsModalController.prototype.modalTest = function () {
            var self = this;
            var modalJobs = [];
            //angular loop
            //Move Selected jobs into an array
            self.displayedresults.forEach(function (job) {
                if (job.isSelected) {
                    modalJobs.push(job.id);
                }
            });
            var testModal = self.Modal({
                title: 'Jobs Test Modal Title',
                modalSize: 'modal-lg',
                templateUrl: 'views/testModal.html',
                controller: 'TestModalController as TestModal',
                params: {
                    jobs: modalJobs
                },
                close: function (modalScope) {
                    self.refresh();
                }
            });
            testModal.modal.show();
        };
        JobsModalController.$inject = ['Modal', 'Dialog', '$http', '$timeout', '$q', '$translate', '$rootScope', 'GlobalServices', "Commands", "Loading"];
        return JobsModalController;
    }());
    asm.JobsModalController = JobsModalController;
    angular
        .module('app')
        .controller('JobsModalController', JobsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=jobsModal.js.map
var asm;
(function (asm) {
    var NtpEditModalController = (function () {
        function NtpEditModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.Commands = Commands;
            this.viewModel = { monitoringSettings: {} };
            var self = this;
            self.initialize();
        }
        NtpEditModalController.prototype.initialize = function () {
            var self = this;
            self.viewModel = self.$scope.modal.params.viewModel;
        };
        NtpEditModalController.prototype.save = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.saveNtpTimeZoneSettings(self.viewModel.ntpTimeZoneSettings).then(function (response) {
                d.resolve();
                self.close();
            }).catch(function (response) {
                d.resolve();
                self.GlobalServices.DisplayError(response.data);
            });
        };
        ;
        NtpEditModalController.prototype.saveNtpTimeZoneSettings = function (settings) {
            var self = this;
            return self.$http.post(self.Commands.data.environment.setNtpTimeZoneSettings, settings);
        };
        NtpEditModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        NtpEditModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        NtpEditModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', 'Commands'];
        return NtpEditModalController;
    }());
    asm.NtpEditModalController = NtpEditModalController;
    angular
        .module('app')
        .controller('NtpEditModalController', NtpEditModalController);
})(asm || (asm = {}));
//# sourceMappingURL=ntpEditModal.js.map
var asm;
(function (asm) {
    var PurgeLogsController = (function () {
        function PurgeLogsController($http, $timeout, 
            //private $scope: ng.IScope,
            $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.olderThanDisplayIsValid = true;
            this.severityinformation = false;
            this.severitywarning = false;
            this.severitycritical = false;
            var self = this;
            self.olderThan = self.getCurrentDate();
            self.olderThanDisplay = self.getCurrentDate();
        }
        PurgeLogsController.prototype.getCurrentDate = function () {
            var d = new Date(), month = '' + (d.getMonth() + 1), day = '' + d.getDate(), year = d.getFullYear();
            if (month.length < 2)
                month = '0' + month;
            if (day.length < 2)
                day = '0' + day;
            return [year, month, day].join('-');
        };
        PurgeLogsController.prototype.doPurge = function () {
            var self = this;
            var myScope = this.$scope;
            var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('PURGELOGS_Confirmation'));
            confirm.then(function () {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
                self.$http.post(self.Commands.data.logs.purgeLogs, {
                    requestObj: {
                        'olderThanDisplayIsValid': self.olderThanDisplayIsValid,
                        'olderThan': self.olderThan,
                        'olderThanDisplay': self.olderThanDisplay,
                        'severityinformation': self.severityinformation,
                        'severitywarning': self.severitywarning,
                        'severitycritical': self.severitycritical
                    }
                }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: self.viewModel }).then(function(data:any) {
                    deferred.resolve();
                    myScope.modal.close();
                }).catch(function (data) {
                    //need to handle error
                    //error is in data
                    deferred.resolve();
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        PurgeLogsController.prototype.validateForm = function () {
            var self = this;
            var formats = ["MM/DD/YYYY", "MM-DD-YYYY", "YYYY-MM-DD"];
            self.olderThanDisplayIsValid = moment(this.olderThanDisplay, formats, true).isValid();
            //var str = moment(self.olderThan).toISOString();
        };
        PurgeLogsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        PurgeLogsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return PurgeLogsController;
    }());
    asm.PurgeLogsController = PurgeLogsController;
    angular
        .module('app')
        .controller('PurgeLogsController', PurgeLogsController);
})(asm || (asm = {}));
//# sourceMappingURL=purgelogs.js.map
var asm;
(function (asm) {
    var RestoreNowModalController = (function () {
        function RestoreNowModalController($scope, $rootScope, $window, $timeout, Modal, Dialog, $http, $translate, $q, $filter, loading, GlobalServices, Commands) {
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$window = $window;
            this.$timeout = $timeout;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$translate = $translate;
            this.$q = $q;
            this.$filter = $filter;
            this.loading = loading;
            this.GlobalServices = GlobalServices;
            this.Commands = Commands;
            this.refreshTimer = null;
            this.submitform = false;
            this.getBackupSettings();
            //this.deferred = this.$q.defer();
            this.errors = '';
        }
        RestoreNowModalController.prototype.$onDestroy = function () {
            var self = this;
            if (self.refreshTimer)
                self.$timeout.cancel(self.refreshTimer);
        };
        RestoreNowModalController.prototype.canDeactivate = function () {
            var self = this;
            var allow = true;
            return allow;
        };
        RestoreNowModalController.prototype.getBackupSettings = function () {
            var self = this;
            self.$http.post(self.Commands.data.backupAndRestore.getBackupSettings, null)
                .then(function (response) {
                self.backupSettings = response.data.responseObj;
            })
                .catch(function (response) { self.GlobalServices.DisplayError(response.data); });
        };
        //getJobs() {
        //    var self = this;
        //    //Get jobs
        //    var jobs = self.$http.post('jobs/getjoblist', null)
        //                .then((response: any) => {
        //                    self.runningJobs = self.$filter('filter')(response.data.responseObj, { status: "running" }).length;
        //                    self.scheduledJobs = self.$filter('filter')(response.data.responseObj, { status: "scheduled" }).length;
        //                })
        //                .catch(response => { self.GlobalServices.DisplayError(response.data) });
        //    return jobs;
        //}
        //getUsers() {
        //    var self = this;
        //    //Get users
        //    var users = self.$http.post('appliance/getcurrentusersandjobs', null)
        //                .then((response: any) => {
        //                    self.currentUsers = response.data.responseObj.currentusers;
        //                })
        //                .catch(response => { self.GlobalServices.DisplayError(response.data) });
        //    return users;
        //}
        RestoreNowModalController.prototype.restore = function (isValid) {
            var self = this;
            if (!isValid) {
                self.submitform = true;
                return;
            }
            var modal = self.Modal({
                title: self.$translate.instant('RESTORENOW_confirm_title'),
                modalSize: 'modal-lg',
                templateUrl: '/views/settings/backupandrestore/restoreconfirmmodal.html',
                controller: 'RestoreConfirmModalController as restoreConfirmModalController',
                params: {},
                onComplete: function () {
                    self.$http.post(self.Commands.data.backupAndRestore.restore, self.backupSettings)
                        .then(function (data) {
                        self.restoreFailed = false;
                        self.getRestoreStatus();
                    }).catch(function (error) {
                        self.$rootScope.ASM.DisplayError(error, self.$rootScope.errors);
                    });
                },
                onCancel: function () {
                }
            });
            modal.modal.show();
            //var jobs = self.getJobs();
            //var users = self.getUsers();
            //var promise = self.$q.all([jobs, users])
            //    .then(function (data) {
            //var confirm = self.Dialog(
            //    self.$translate.instant('RESTORENOW_confirm_title'), 
            //    self.$translate.instant('RESTORENOW_confirm_text') + '<br/><br/><ul><li>' +
            //self.$translate.instant('RESTORENOW_confirm_userinfo') + self.currentUsers + '</li><li>' +
            //self.$translate.instant('RESTORENOW_confirm_jobinfo') + self.runningJobs.length + '</li><li>' +
            //self.$translate.instant('RESTORENOW_confirm_scheduledjobinfo') + self.scheduledJobs.length + '</li></ul>' +
            //self.$translate.instant('RESTORENOW_confirm_footnote')
            //)
            //confirm.then(function() {
            //        self.$http.post('backupandrestore/restore', { requestObj: this.backupSettings })
            //            .success(function (data: any, status, headers, config) {
            //                self.restoreFailed = false;
            //                self.getRestoreStatus();
            //            });
            //})
            //})
            //.catch(response => { self.GlobalServices.DisplayError(response.data) });
        };
        RestoreNowModalController.prototype.getRestoreStatus = function () {
            var self = this;
            //if (self.loader == null) {
            //    self.loader = new LoaderRestore();
            //    self.loader.setMessage('Starting Restoration');
            //}
            var d = self.$q.defer();
            self.loading(d.promise);
            self.$http.post(self.Commands.data.backupAndRestore.getRestoreStatus, { requestObj: this.backupSettings })
                .success(function (data, status, headers, config) {
                if (data.responseObj == "waiting_for_restart") {
                    d.resolve();
                    self.$window.location.href = 'status.html#/status';
                }
                else if (data.responseObj == "not_in_progress") {
                }
                else if (data.responseObj == "preparing_for_download") {
                }
                else if (data.responseObj == "downloading") {
                }
                else if (data.responseObj == "unpacking") {
                }
                else if (data.responseObj == "verifying") {
                }
                else if (data.responseObj == "failed") {
                    self.restoreFailed = true;
                }
                if (!self.restoreFailed) {
                    self.refreshTimer = self.$timeout(function () {
                        self.getRestoreStatus();
                    }, 5000);
                }
            })
                .error(function (data, status, headers, config) {
                d.resolve();
                self.errors = self.GlobalServices.DisplayError(data.data);
            });
        };
        RestoreNowModalController.prototype.testConnection = function (isValid) {
            var self = this;
            if (!isValid) {
                self.submitform = true;
                return;
            }
            self.$http.post(self.Commands.data.backupAndRestore.testRestoreConnection, { requestObj: this.backupSettings })
                .success(function (data, status, headers, config) {
                var confirm = self.Dialog((self.$translate.instant('BACKUPNOW_testconnection_title')), ('<i class="text-success ci-health-square-check"></i> ' + self.$translate.instant('The test was successful')), true);
            })
                .error(function (data, status, headers, config) {
                self.errors = self.GlobalServices.DisplayError(data.data);
            });
        };
        RestoreNowModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        RestoreNowModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        RestoreNowModalController.$inject = ['$scope', '$rootScope', '$window', '$timeout', 'Modal', 'Dialog', '$http', '$translate', '$q', '$filter', 'Loading', 'GlobalServices', 'Commands'];
        return RestoreNowModalController;
    }());
    asm.RestoreNowModalController = RestoreNowModalController;
    angular
        .module('app')
        .controller('RestoreNowModalController', RestoreNowModalController);
})(asm || (asm = {}));
//# sourceMappingURL=restorenowModal.js.map
var asm;
(function (asm) {
    var SetupWizardController = (function () {
        function SetupWizardController(Modal, $scope, Dialog, $http, Loading, $q, $timeout, $rootScope, Commands, $translate, GlobalServices) {
            this.Modal = Modal;
            this.$scope = $scope;
            this.Dialog = Dialog;
            this.$http = $http;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.$rootScope = $rootScope;
            this.Commands = Commands;
            this.$translate = $translate;
            this.GlobalServices = GlobalServices;
            this.setupData = {};
            this.aboutData = {};
            this.timeZones = new Array();
            this.ranges = {
                days: 31,
                hours: 24,
                minutes: 60,
                seconds: 60
            };
            this.testProxyRunning = false;
            this.licenseFile = {};
            var self = this;
            self.refresh();
            //Wrap in a timeout to give screen time to render.  ////TODO: Replace with $onInit or similar.
            self.$timeout(function () {
                document.getElementById('idLocationFileUpload').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    self.licenseFile = element.files[0];
                    self.setupData.licenseData.licensefile = element.value;
                    self.$timeout(function () { self.verifyLicense(); }, 10); //Wrap in a timeout to trigger a digest cycle.
                };
            }, 500);
        }
        SetupWizardController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$q.all([
                self.$http.post(self.Commands.data.initialSetup.getInitialSetup, null)
                    .then(function (response) {
                    self.setupData = response.data.responseObj;
                }),
                self.$http.post(self.Commands.data.timezones.getTimeZones, null)
                    .then(function (response) {
                    self.timeZones = response.data.responseObj;
                })
            ]).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        SetupWizardController.prototype.verifyLicense = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.applianceManagement.verifylicense, self.setupData.licenseData)
                .then(function (response) {
                self.setupData.licenseData = response.data.responseObj;
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        SetupWizardController.prototype.updateLicense = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$q.all([
                self.$http.post(self.Commands.data.initialSetup.updateLicenseData, self.setupData.licenseData)
                    .then(function (response) {
                    self.setupData.licenseData = response.data.responseObj;
                }),
                self.aboutData.serviceTag && self.$http.post(self.Commands.data.applianceManagement.updateServiceTag, self.aboutData.serviceTag)
            ]).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        SetupWizardController.prototype.updateNTP = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.initialSetup.updateTimeData, self.setupData.timeData)
                .then(function (response) {
                self.setupData.timeData = response.data.responseObj;
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        SetupWizardController.prototype.updateProxy = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            var onNext = self.$http.post(self.Commands.data.initialSetup.updateProxyData, self.setupData.proxyData)
                .then(function (response) {
                self.setupData.proxyData = response.data.responseObj;
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        SetupWizardController.prototype.updateDHCP = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.initialSetup.updateDhcpData, self.setupData.dhcpData)
                .then(function (response) {
                self.setupData.dhcpData = response.data.responseObj;
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        SetupWizardController.prototype.getSelectedTimeZoneName = function () {
            var self = this;
            if (self.timeZones.length) {
                return _.find(self.timeZones, function (tz) {
                    return tz.id == self.setupData.timeData.timeZone;
                }).name;
            }
        };
        SetupWizardController.prototype.finishWizard = function () {
            var self = this;
            var d = self.$q.defer();
            self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SETUPWIZARD_SubmitInfo'))).then(function () {
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.initialSetup.completeInitialSetup, self.setupData)
                    .then(function () {
                    d.resolve();
                    self.$scope.modal.close();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data);
                    d.resolve();
                });
            });
        };
        SetupWizardController.prototype.testProxy = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.testProxyRunning = true;
            self.$http.post(self.Commands.data.initialSetup.testProxy, self.setupData.proxyData)
                .then(function (response) {
                self.Dialog(self.$translate.instant("GENERIC_Alert"), self.$translate.instant("SETUPWIZARD_ProxySettingsProxyConnectionSuccess"), true);
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () {
                d.resolve();
                self.testProxyRunning = false;
            });
        };
        SetupWizardController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        SetupWizardController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        SetupWizardController.$inject = ['Modal', '$scope', 'Dialog', '$http', 'Loading', '$q', '$timeout', '$rootScope', 'Commands', '$translate', 'GlobalServices'];
        return SetupWizardController;
    }());
    asm.SetupWizardController = SetupWizardController;
    angular
        .module('app')
        .controller('SetupWizardController', SetupWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=setupwizard.js.map
var asm;
(function (asm) {
    var StopManagingApplicationsModalController = (function () {
        function StopManagingApplicationsModalController($scope, Modal, Dialog, $http, $q, Loading, Commands, GlobalServices) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.Loading = Loading;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.initialize();
        }
        StopManagingApplicationsModalController.prototype.initialize = function () {
            var self = this;
            self.serviceId = self.$scope.modal.params.serviceId;
            self.selectedComponent = self.$scope.modal.params.selectedComponent;
        };
        StopManagingApplicationsModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        StopManagingApplicationsModalController.prototype.getNumberOfComponents = function () {
            var self = this;
            return _.filter(self.selectedComponent.relatedcomponents, function (rc) {
                return rc.installOrder > 0;
            }).length;
        };
        StopManagingApplicationsModalController.prototype.getCheckedApplications = function () {
            var self = this;
            var checkedItems = _.filter(self.selectedComponent.relatedcomponents, function (rc) {
                return rc.rowChecked == true;
            });
            var idList = [];
            angular.forEach(checkedItems, function (item) {
                idList.push(item.id);
            });
            return idList;
        };
        StopManagingApplicationsModalController.prototype.isApplicationChecked = function () {
            var self = this;
            return self.getCheckedApplications().length > 0;
            //var self: StopManagingApplicationsModalController = this;
            //return _.filter(self.selectedComponent.relatedcomponents,
            //    function (rc: any) {
            //        return rc.rowChecked == true
            //    }
            //).length>0;
        };
        StopManagingApplicationsModalController.prototype.stopManagingApps = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.services.stopManagingApplications, {
                requestObj: {
                    serviceId: self.serviceId,
                    componentId: self.selectedComponent.id,
                    applicationIds: self.getCheckedApplications()
                }
            }).then(function (data) {
                d.resolve();
                self.$scope.modal.close();
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        StopManagingApplicationsModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        StopManagingApplicationsModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', 'Loading', 'Commands', 'GlobalServices'];
        return StopManagingApplicationsModalController;
    }());
    asm.StopManagingApplicationsModalController = StopManagingApplicationsModalController;
    angular
        .module('app')
        .controller('StopManagingApplicationsModalController', StopManagingApplicationsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=stopManagingApplicationsModal.js.map
var asm;
(function (asm) {
    var AddAttachmentModalController = (function () {
        function AddAttachmentModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, Commands) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.Commands = Commands;
            this.errors = new Array();
            this.template = {
                id: "",
            };
            this.repo = { packagesource: "import" };
            //this.deferred = this.$q.defer();
            var self = this;
            self.template.id = $scope.modal.params.templateId;
            $scope.uploader = new FileUploader({
                url: 'templates/addattachment',
                filters: [
                    {
                        name: "fileSize", fn: function (file) {
                            return !(self.tooBigError = file.size > 52428800);
                        }
                    }
                ]
            });
            self.$timeout(function () {
                document.getElementById('templateattachmentfile').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    self.$timeout(function () { self.repoFile = element.files[0]; }, 10); //Wrap in a timeout to trigger a digest cycle.
                };
            }, 500);
        }
        AddAttachmentModalController.prototype.save = function () {
            var self = this;
            //using angular uploader
            self.$scope.uploader.formData.push(self.template);
            //set error and success callbacks 
            angular.merge(self.$scope.uploader, {
                onErrorItem: function (fileItem, response, status, headers) {
                    //self.GlobalServices.DisplayError();
                },
                onCompleteItem: function (item, response, status, headers) {
                    if (!response.errorObj) {
                        self.$scope.modal.close(response.responseObj.attachments);
                    }
                },
                onBeforeUploadItem: function (item) {
                    item.formData = angular.copy(item.uploader.formData);
                }
            });
            self.tooBigError || self.$scope.uploader.uploadAll();
        };
        AddAttachmentModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddAttachmentModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        AddAttachmentModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', 'Commands'];
        return AddAttachmentModalController;
    }());
    asm.AddAttachmentModalController = AddAttachmentModalController;
    angular
        .module('app')
        .controller('AddAttachmentModalController', AddAttachmentModalController);
})(asm || (asm = {}));
//# sourceMappingURL=templateaddattachmentModal.js.map
var asm;
(function (asm) {
    var TestModalController = (function () {
        function TestModalController($scope, Modal, Dialog) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.jobs = $scope.modal.params.jobs;
        }
        TestModalController.$inject = ['$scope', 'Modal', 'Dialog'];
        return TestModalController;
    }());
    asm.TestModalController = TestModalController;
    angular
        .module('app')
        .controller('TestModalController', TestModalController);
})(asm || (asm = {}));
//# sourceMappingURL=testModal.js.map
var asm;
(function (asm) {
    var UpdateDeviceFirmwareModalController = (function () {
        function UpdateDeviceFirmwareModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, $translate, constants, commands, $location, $filter) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.$translate = $translate;
            this.constants = constants;
            this.commands = commands;
            this.$location = $location;
            this.$filter = $filter;
            //public helpUrl: ASM.urlConfig.help.resourcesupdatingfirmware,
            this.scheduletype = "updatenow";
            this.updateEstimate = '';
            this.now_CancelMaintenance = false;
            this.scheduled_CancelMaintenance = false;
            this.enteredDate = moment(new Date()).format('YYYY-MM-DD');
            this.enteredHour = '01';
            this.enteredMinute = '00';
            this.enteredMeridiem = 'a';
            this.hoursList = [];
            this.minutesList = [];
            this.confirmMessage = '';
            this.confirmIsAlert = false;
            this.confirmCallbackTrue = null;
            this.confirmCallbackFalse = null;
            //public devices: new Collection([], { model: Device });
            this.devices = [];
            this.deviceType = '';
            this.isUpdated = false;
            this.id = '';
            this.datePicker = {
                options: {
                    format: "L hh:mm A",
                    minDate: moment(),
                },
                selectedDate: moment().add(1, 'hour'),
            };
            this.jobRequest = {
                requestObj: {
                    exitMaintenanceMode: { boolean: false },
                    idList: [{ string: '' }],
                    scheduleDate: { string: '' },
                    scheduleType: { string: '' }
                }
            };
            this.submitted = false;
            var self = this;
            var uploader = $scope.uploader = new FileUploader({
                url: self.commands.data.addonmodules.uploadAddOnModule,
            });
            //self.deviceType = $scope.modal.params.resource.deviceType;
            self.resource = $scope.modal.params.resource;
            self.update();
            self.initialize();
        }
        UpdateDeviceFirmwareModalController.prototype.updateScheduleDate = function () {
            var self = this;
            var dateString = self.enteredDate;
            var timeWeekly = self.enteredHour + ':' + self.enteredMinute;
            var ampm = self.enteredMeridiem;
            var isotimeWeekly = moment(dateString + 'T' + timeWeekly + ampm, "YYYY-MM-DDThh:mmA").toDate();
            var scheduleDate = moment(isotimeWeekly) != undefined ? moment(isotimeWeekly).toISOString() : '';
            self.scheduledate = scheduleDate;
        };
        UpdateDeviceFirmwareModalController.prototype.initialize = function () {
            var self = this;
            //self.base('initialize', arguments);
        };
        //update(params) {
        UpdateDeviceFirmwareModalController.prototype.update = function () {
            var self = this;
            //ASM.clearErrors();
            //self.base('update', arguments);
            //Fill the "Time" arrays.
            self.hoursList = [];
            self.minutesList = [];
            for (var c = 0; c < 60; c++) {
                var value = '00' + c;
                value = value.substr(value.length - 2);
                if (c > 0 && c < 13)
                    self.hoursList.push(value);
                self.minutesList.push(value);
            }
            self.devices.push(self.resource.id);
            if (self.resource && self.devices.length > 0) {
                if (self.GlobalServices.IsDeviceType(self.resource.deviceType, "Server")) {
                    self.deviceType = 'Server';
                }
                if (self.GlobalServices.IsDeviceType(self.resource.deviceType, "Chassis")) {
                    self.deviceType = 'Chassis';
                }
                if (self.GlobalServices.IsDeviceType(self.resource.deviceType, "Switch")) {
                    self.deviceType = 'Switch';
                }
            }
        };
        UpdateDeviceFirmwareModalController.prototype.timeInvalid = function () {
            var self = this;
            return moment().isBefore(self.datePicker.selectedDate.toISOString());
        };
        UpdateDeviceFirmwareModalController.prototype.refresh = function () {
            var self = this;
        };
        UpdateDeviceFirmwareModalController.prototype.submit = function () {
            var self = this;
            //    ASM.clearErrors();
            //    var valid = true;
            self.submitted = true;
            //    var request = new UpdateDeviceFirmwareRequest();
            self.jobRequest.requestObj.scheduleType = self.scheduletype;
            if (self.jobRequest.requestObj.scheduleType == "updatenow") {
                self.jobRequest.requestObj.exitMaintenanceMode = true;
            }
            if (self.jobRequest.requestObj.scheduleType == "schedule") {
                self.jobRequest.requestObj.exitMaintenanceMode = false;
                if (self.datePicker.selectedDate) {
                    self.validDate = moment().isBefore(self.datePicker.selectedDate.toISOString());
                    if (!self.validDate) {
                        return;
                    }
                }
                else {
                    return;
                }
            }
            else {
                self.jobRequest.requestObj.exitMaintenanceMode = false;
            }
            //self.request.exitMaintenanceMode = self.request.scheduleType == "updatenow" ? true : (self.request.scheduleType() == "schedule" ? false : null);
            //if (self.jobRequest.requestObj.scheduleType == "schedule") { 
            self.jobRequest.requestObj.scheduleDate = self.datePicker.selectedDate.toISOString();
            //}
            self.jobRequest.requestObj.idList = self.devices;
            //$.each(self.devices, function (idx, d) { selectedDevices.push(d.id); });
            self.$http.post(self.commands.data.devices.updatedevicefirmware, self.jobRequest.requestObj)
                .then(function (data) {
                self.$scope.modal.close();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
        };
        UpdateDeviceFirmwareModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', '$translate', 'constants', 'Commands', '$location', '$filter'];
        return UpdateDeviceFirmwareModalController;
    }());
    asm.UpdateDeviceFirmwareModalController = UpdateDeviceFirmwareModalController;
    angular
        .module('app')
        .controller('UpdateDeviceFirmwareModalController', UpdateDeviceFirmwareModalController);
})(asm || (asm = {}));
//# sourceMappingURL=updatedevicefirmwareModal.js.map
var asm;
(function (asm) {
    var UploadTemplateModalController = (function () {
        function UploadTemplateModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, Commands, $translate, constants, $location) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.Commands = Commands;
            this.$translate = $translate;
            this.constants = constants;
            this.$location = $location;
            this.templates = this.$scope.modal.params.templates;
            this.forms = { step1: {}, step2: {} };
            this.template = {
                "id": null,
                "templateName": null,
                "description": "",
                "type": "new",
                "cloneexistingtemplateid": null,
                "category": null,
                "manageFirmware": false,
                "firmwarePackageId": null,
                "updateServerFirmware": false,
                "updateNetworkFirmware": false,
                "updateStorageFirmware": false,
                "enableApps": false,
                "enableVMs": false,
                "enableCluster": false,
                "enableServer": false,
                "enableStorage": false,
                "allStandardUsers": false,
                "assignedUsers": [],
                "templateAdditionalSetting": {},
                "useEncPwdFromBackup": true,
                "encryptionPassword": "",
            };
            this.categories = new Array();
            this.firmwares = new Array();
            var self = this;
            var uploader = $scope.uploader = new FileUploader({
                url: self.Commands.data.templates.uploadTemplates,
            });
            var uploader2 = $scope.uploader2 = new FileUploader({
                url: self.Commands.data.templates.uploadTemplates,
            });
            //set file form element to value of file (truthy or undefined)
            self.$timeout(function () {
                document.getElementById('templatefile').onchange = function (evt) {
                    var element = angular.element(evt.target)[0];
                    self.$timeout(function () { self.fileModel = element.files[0]; });
                };
            }, 500);
            self.activate();
        }
        UploadTemplateModalController.prototype.activate = function () {
            var self = this;
            self.getCategories();
            self.getFirmwares();
        };
        UploadTemplateModalController.prototype.getCategories = function () {
            var self = this;
            var x = _.groupBy(self.templates, 'category');
            for (var categoryName in x) {
                if (x.hasOwnProperty(categoryName)) {
                    self.categories.push({ name: categoryName, id: categoryName });
                }
            }
            self.categories = self.categories.concat([
                { name: '____________________', id: null, disabled: true },
                { name: self.$translate.instant('TEMPLATES_CreateNewCategory'), id: 'new' }
            ]);
        };
        UploadTemplateModalController.prototype.getFirmwares = function () {
            var self = this;
            self.$http.post(self.Commands.data.firmwarepackages.getAvailableFirmwarePackages, {}).then(function (response) {
                self.firmwares = response.data.responseObj;
            });
        };
        UploadTemplateModalController.prototype.save = function (isValid, wizardFinish) {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            if (self.categoryOption !== "new") {
                //user has chosen existing category
                self.template.category = self.categoryOption;
            }
            if (!self.template.manageFirmware) {
                self.template.firmwarePackageId = null;
            }
            if (self.template.allStandardUsers === true) {
                self.template.assignedUsers = [];
            }
            if (!wizardFinish) {
                //using angular uploader
                self.$scope.uploader.formData.push(self.template);
                //set error and success callbacks 
                angular.extend(self.$scope.uploader, {
                    onErrorItem: function (fileItem, response, status, headers) {
                        d.resolve();
                        self.GlobalServices.DisplayError(response.data);
                    },
                    onCompleteAll: function (criteriaObj, errorObj, responseObj, responseCode) {
                        d.resolve();
                        //self.close();
                    },
                    onBeforeUploadItem: function (item) {
                        item.formData = angular.copy(item.uploader.formData);
                    },
                    onSuccessItem: function (item, response, status, headers) {
                        self.template = response.responseObj;
                        self.$scope.uploader.formData = [];
                    }
                });
                self.$scope.uploader.uploadAll();
            }
            else {
                angular.forEach(self.template.templateAdditionalSetting.networkSettings, function (network) {
                    network.type = network.selectedOption;
                });
                angular.forEach(self.template.templateAdditionalSetting.osSettings, function (os) {
                    os.type = os.selectedOption;
                });
                angular.forEach(self.template.templateAdditionalSetting.serverPoolSettings, function (pool) {
                    pool.type = pool.selectedOption;
                });
                angular.forEach(self.template.templateAdditionalSetting.storageSettings, function (storage) {
                    storage.type = storage.selectedOption;
                });
                angular.forEach(self.template.templateAdditionalSetting.clusterSettings, function (cluster) {
                    cluster.type = cluster.selectedOption;
                });
                self.$http.post(self.Commands.data.templates.saveTemplateAdditionalSettings, self.template)
                    .then(function (data) {
                    d.resolve();
                    self.$timeout(function () {
                        self.$location.path("templatebuilder/" + data.data.responseObj.id + "/edit");
                    }, 500);
                    d.resolve();
                    self.close();
                });
            }
        };
        UploadTemplateModalController.prototype.viewComponents = function (selected) {
            var self = this, modal = self.Modal({
                title: 'View components for ' + selected.name,
                modalSize: 'modal-lg',
                templateUrl: '/views/templates/viewcomponents.html',
                controller: 'ViewComponentsController as viewComponents',
                params: {
                    selected: selected
                },
            });
            modal.modal.show();
        };
        UploadTemplateModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close(self.template.category);
        };
        UploadTemplateModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UploadTemplateModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q',
            '$timeout', 'Loading', 'GlobalServices',
            'FileUploader', 'Commands', '$translate', 'constants', '$location'];
        return UploadTemplateModalController;
    }());
    asm.UploadTemplateModalController = UploadTemplateModalController;
    angular
        .module('app')
        .controller('UploadTemplateModalController', UploadTemplateModalController);
})(asm || (asm = {}));
//# sourceMappingURL=uploadtemplateModal.js.map
var asm;
(function (asm) {
    var ViewComponentsController = (function () {
        function ViewComponentsController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.components = self.$scope.modal.params.selected.components;
            self.displayedComponents = [].concat(self.components);
            self.componentType();
            //self.getFilterItems();
        }
        ViewComponentsController.prototype.getFilterItems = function () {
            var self = this;
            var allfilterItems = _.map(self.components, 'basicType');
            self.filterItems = [];
            angular.forEach(allfilterItems, function (item) {
                if (!(_.includes(self.filterItems, item))) {
                    self.filterItems.push(item);
                }
            });
        };
        ViewComponentsController.prototype.componentType = function () {
            var self = this;
            angular.forEach(self.components, function (component) {
                if (self.GlobalServices.IsDeviceType(component.type, "Server")) {
                    component.basicType = 'Server';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "Chassis")) {
                    component.basicType = 'Chassis';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "Switch")) {
                    component.basicType = 'Switch';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "IOM")) {
                    component.basicType = 'IOM';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "RackServer")) {
                    component.basicType = 'Rack Server';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "BladeServer")) {
                    component.basicType = 'Blade Server';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "FXServer")) {
                    component.basicType = 'FX Server';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "VM")) {
                    component.basicType = 'VM';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "vCenter")) {
                    component.basicType = 'vCenter';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "SCVMM")) {
                    component.basicType = 'SCVMM';
                }
                if (self.GlobalServices.IsDeviceType(component.type, "Storage")) {
                    component.basicType = 'Storage';
                }
            });
            self.getFilterItems();
        };
        ViewComponentsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ViewComponentsController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ViewComponentsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ViewComponentsController;
    }());
    asm.ViewComponentsController = ViewComponentsController;
    angular
        .module('app')
        .controller('ViewComponentsController', ViewComponentsController);
})(asm || (asm = {}));
//# sourceMappingURL=viewcomponentsModal.js.map
var asm;
(function (asm) {
    var ConfigureChassisWizardController = (function () {
        function ConfigureChassisWizardController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, commands, GlobalServices, FileUploader, constants, $filter, $anchorScroll) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.constants = constants;
            this.$filter = $filter;
            this.$anchorScroll = $anchorScroll;
            this.mode = "resource";
            this.chassisDevices = this.$scope.modal.params.devices;
            this.deviceConfigEditMode1 = true;
            this.deviceConfigEditMode2 = false;
            this.summary_display_row_firmwareCompliance = true;
            this.stepCompleted = {
                one: false
            };
            this.allFirmwareSelected = false;
            this.vltObj = {
                uplinkName: "VLT",
                uplinkId: "VLT",
                portChannel: '',
                networks: [],
                networkNames: []
            };
            this.displayedDevices = [];
            this.noChassisFound = false;
            this.noneFound = false;
            this.selectedFirmwarePackage = null;
            this.checkingFirmwareCompliance = true;
            this.hasChassis = false;
            this.needsUpdates = false;
            this.isIOMconfigurable = true;
            this.steps = {
                ioModuleSettings: { invalid: false }
            };
            var self = this;
            self.mode = self.$scope.modal.params.mode;
            self.refresh();
            var uploader = self.$scope.uploader = new FileUploader({
                url: self.commands.data.configureChassis.uploadPortConfiguration
            });
        }
        ConfigureChassisWizardController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$q.all([
                self.getCredentialList().then(function (response) {
                    self.credentials = response.data.responseObj;
                }),
                self.getFirmwarePackages().then(function (response) {
                    self.firmwarePackages = response.data.responseObj;
                    if (self.selectedFirmwarePackage == null)
                        self.selectedFirmwarePackage = self.firmwarePackages[0];
                }),
            ]).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () {
                d.resolve();
            });
        };
        ConfigureChassisWizardController.prototype.finishWizard = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.configureChassis(self.configureResources)
                .then(function () {
                d.resolve();
                self.close();
            })
                .catch(function (response) {
                d.resolve();
                self.GlobalServices.DisplayError(response.data);
            });
        };
        ConfigureChassisWizardController.prototype.goToIndex = function (x) {
            var self = this;
            if (self.mode == 'resource') {
                self.$scope.$root.$broadcast("wizard:goto", 3);
            }
            else {
                self.$scope.$root.$broadcast("wizard:goto", 1);
            }
        };
        ConfigureChassisWizardController.prototype.uplinkPortConfigurationShown = function () {
            var self = this;
            //Check for FNIOA and if they are configurable (ASM-6731 UI - Block users from configuring FN-IOA uplinks with firmware less than 9.9)
            var selectedDevices = _.filter(self.configureResources.devices, function (device) {
                return device.isFNioa && device.fnioaUpdateRequired && !device.updateFW;
            });
            self.isIOMconfigurable = (selectedDevices.length == 0);
        };
        ConfigureChassisWizardController.prototype.getUplinkList = function (arr, vltenabled) {
            var self = this;
            var x = angular.copy(arr);
            if (vltenabled)
                x.unshift(self.vltObj);
            return x;
        };
        ConfigureChassisWizardController.prototype.getUplinksLength = function (options) {
            var self = this;
            return !!_.find(options, { id: self.vltObj.id }) ? options.length - 1 : options.length;
        };
        ConfigureChassisWizardController.prototype.getUplinks = function (options, vltEnabled) {
            var self = this;
            var hasVltObj = !!_.find(options, { id: self.vltObj.id });
            if (vltEnabled) {
                return hasVltObj ? options : [self.vltObj].concat(options);
            }
            else {
                return hasVltObj ? _.pull(options, self.vltObj) : options;
            }
        };
        ConfigureChassisWizardController.prototype.firmwareComplianceShown = function () {
            var self = this;
            if (!self.stepCompleted.one) {
                self.stepCompleted.one = true;
                self.checkingFirmwareCompliance = true;
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.getConfigurableResources(false, self.chassisDevices && {
                    filterObj: [{
                            field: "id",
                            op: "=",
                            opTarget: self.chassisDevices
                        }]
                }).then(function (response) {
                    self.configureResources = response.data.responseObj;
                    self.markChassis();
                    self.noneFound = self.configureResources.devices.length < 1;
                    angular.forEach(self.configureResources.devices, function (device) {
                        if (self.isTypeChassis(device.resourceType)) {
                            device.chassisId = device.id;
                            self.hasChassis = true;
                        }
                    });
                    self.configureResources.devices.comparator = function (item) {
                        return (item.chassisId || item.id) + (self.isTypeChassis(item.resourceType)
                            ? '000'
                            : item.resourceType.indexOf('Server')
                                ? '001'
                                : '002');
                    };
                    self.configureResources.devices.sort();
                    $.each(self.configureResources.devices, function (index, device) {
                        var d = device;
                        $.each(device.firmwarecomponents, function (index2, fc) {
                            if (!fc.compliant) {
                                self.needsUpdates = true;
                                d.compliant = false;
                                d.rowChecked = false;
                            }
                        });
                    });
                    self.checkingFirmwareCompliance = false;
                    self.configureResources.configIOMMode = self.$filter("filteredDevices")(self.configureResources.devices).length > 1 &&
                        self.configureResources.canConfigAllIOM == true
                        ? "all"
                        : "independent";
                    self.displayedDevices = angular.copy(self.configureResources.devices);
                    var x = true;
                    angular.forEach(self.configureResources.devices, function (device) {
                        if (device.isChassis && device.chassisConfiguration.configChassis && x) {
                            device.uniqueChassisExpanded = true;
                            x = false;
                        }
                        else {
                            device.uniqueChassisExpanded = false;
                        }
                    });
                }).catch(function (response) {
                    self.GlobalServices.DisplayError(response.data);
                }).finally(function () {
                    d.resolve();
                });
            }
        };
        ConfigureChassisWizardController.prototype.getAllFirmwareSelected = function () {
            var self = this;
            return self.allFirmwareSelected = !_.find(self.configureResources.devices, { updateFW: false });
        };
        ConfigureChassisWizardController.prototype.getCheckedChassis = function () {
            var self = this;
            return _.filter(self.configureResources.devices, function (device) {
                return device.isChecked === true && self.isTypeChassis(device.deviceType);
            }).map(function (chassis) { return chassis.id; });
        };
        ConfigureChassisWizardController.prototype.selectAllFirmware = function () {
            var self = this, selectAll = !self.getAllFirmwareSelected();
            self.configureResources.devices = _.map(self.configureResources.devices, function (device) {
                device.updateFW = selectAll;
                return device;
            });
            self.getAllFirmwareSelected();
        };
        ConfigureChassisWizardController.prototype.getSelectedFirmware = function (devices) {
            var self = this;
            return _.filter(angular.isDefined(devices) ? devices : self.configureResources.devices, { updateFW: true });
        };
        ConfigureChassisWizardController.prototype.getNonCompliantFirmware = function () {
            var self = this;
            return _.filter(self.configureResources.devices, { complianceDetails: "noncompliant" });
        };
        ConfigureChassisWizardController.prototype.getChassisNonCompliantValues = function () {
            var self = this;
            return {
                numIdentified: self.getNonCompliantFirmware().length,
                numSelected: self.getSelectedFirmware(self.getNonCompliantFirmware()).length
            };
        };
        ConfigureChassisWizardController.prototype.getUpdateRequiredFirmware = function () {
            var self = this;
            return _.filter(self.configureResources.devices, { complianceDetails: "updaterequired" });
        };
        ConfigureChassisWizardController.prototype.getChassisRequiredUpdateValues = function () {
            var self = this;
            return {
                numIdentified: self.getUpdateRequiredFirmware().length,
                numSelected: self.getSelectedFirmware(self.getUpdateRequiredFirmware()).length
            };
        };
        ConfigureChassisWizardController.prototype.initFileWatcher = function () {
            var self = this;
            self.$timeout(function () {
                document.getElementById('configFile').onchange = function (evt) {
                    //causes upload to take place on change
                    self.$timeout(function () { self.uploadPortConfiguration(); }, 10); //Wrap in a timeout to trigger a digest cycle.
                };
            }, 500);
        };
        ConfigureChassisWizardController.prototype.uploadPortConfiguration = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            var fileName = "";
            //using angular uploader
            //set error and success callbacks 
            angular.extend(self.$scope.uploader, {
                onBeforeUploadItem: function (item) {
                    fileName = item.file.name;
                },
                onErrorItem: function (fileItem, response, status, headers) {
                    d.resolve();
                    self.GlobalServices.DisplayError(response.data);
                },
                onCompleteAll: function (fileItem, response, status, headers) {
                    self.configureResources.configIOMXMLSettingsFileName = fileName;
                    d.resolve();
                }
            });
            self.$scope.uploader.uploadAll();
        };
        ConfigureChassisWizardController.prototype.isTypeChassis = function (type) {
            return !!_.find(["ChassisM1000e", "ChassisVRTX", "ChassisFX"], function (val) { return val === type; });
        };
        ConfigureChassisWizardController.prototype.getDiscoveredResources = function (reset) {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.getConfigurableResources(false).then(function (data) {
                self.configureResources = data.data.responseObj;
                self.markChassis();
                //self.wizard.currentStep().isValid(true);
                self.noneFound = self.configureResources.devices.length < 1;
                angular.forEach(self.configureResources.devices, function (device) {
                    if (self.isTypeChassis(device.resourceType)) {
                        device.chassisId = device.id;
                    }
                });
                self.configureResources.devices.comparator = function (item) {
                    return (item.chassisId || item.id) + (self.isTypeChassis(item.resourceType) ? '000' : item.resourceType.indexOf('Server') ? '001' : '002');
                };
                self.configureResources.devices.sort();
                self.displayedDevices = angular.copy(self.configureResources.devices);
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () {
                d.resolve();
            });
        };
        ConfigureChassisWizardController.prototype.markChassis = function () {
            var self = this;
            angular.forEach(self.configureResources.devices, function (resource) {
                if (self.isTypeChassis(resource.resourceType)) {
                    resource.isChassis = resource.chassisConfiguration.configChassis = true;
                    self.noChassisFound = false;
                }
                ;
            });
            self.noChassisFound = !_.find(self.configureResources.devices, function (device) {
                return device.chassisConfiguration && device.chassisConfiguration.configChassis === true;
            });
        };
        ConfigureChassisWizardController.prototype.removeDevice = function (id) {
            var self = this;
            var confirm = self.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('CONFIGURECHASSIS_DeleteConfirm')));
            confirm.then(function () {
                var d = self.$q.defer();
                self.Loading(d.promise);
                var z = [];
                z.push(id);
                self.$http.post(self.commands.data.devices.remove, z)
                    .then(function (data) {
                    d.resolve();
                    self.displayedDevices = [];
                    self.getDiscoveredResources(true);
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                    d.resolve();
                });
            });
        };
        //Modals
        ConfigureChassisWizardController.prototype.viewBundles = function (selectedFirmware) {
            var self = this;
            var theModal = self.Modal({
                title: selectedFirmware.name,
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/viewBundles.html',
                controller: 'ViewBundlesController as vb',
                params: {
                    id: selectedFirmware.id
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            theModal.modal.show();
        };
        ConfigureChassisWizardController.prototype.defineUplinks = function (chassisConfig) {
            //passing in chassisConfig instead of uplinks so that on save the reference is changed and not just value
            var self = this;
            var theModal = self.Modal({
                title: self.$translate.instant("DEFINE_UPLINKS_DefineUplinks"),
                modalSize: 'modal-lg',
                templateUrl: 'views/resources/modals/DefineUplinksModal.html',
                controller: 'DefineUplinksController as defineUplinksController',
                params: {
                    uplinks: angular.copy(chassisConfig.uplinks),
                    vltModel: self.vltObj
                },
                onComplete: function (uplinks) {
                    chassisConfig.uplinks = uplinks;
                }
            });
            theModal.modal.show();
        };
        ConfigureChassisWizardController.prototype.portVisible = function (index, slotNum, context, configureAll, multiFabric) {
            var self = this, slot = {
                hasSlot: "hasSlot" + slotNum,
                slotPorts: "slot" + slotNum + "Ports",
                slotQuadPortSupported: "slot" + slotNum + "QuadPortSupported",
                slotFCModule: "slot" + slotNum + "FCModule"
            };
            if (configureAll) {
                if (multiFabric) {
                    return (context[slot.hasSlot] &&
                        context.iomconfigurable &&
                        context.iompresent &&
                        context[slot.slotPorts] == 2 &&
                        context[slot.slotQuadPortSupported] &&
                        (index == 3 || index == 7) ||
                        (!context[slot.slotQuadPortSupported] && index < context[slot.slotPorts]) ||
                        (context.quadPortMode && context[slot.slotQuadPortSupported]))
                        && !context[slot.slotFCModule];
                }
                else {
                    return context[slot.hasSlot] &&
                        context.iomconfigurable &&
                        context.iompresent &&
                        context[slot.slotPorts] == 2 &&
                        context[slot.slotQuadPortSupported] &&
                        (index == 3 || index == 7) ||
                        (!context[slot.slotQuadPortSupported] && index < context[slot.slotPorts]) ||
                        (context.quadPortMode && context[slot.slotQuadPortSupported]);
                }
            }
            else {
                if (multiFabric) {
                    return (context[slot.hasSlot] &&
                        context.iomconfigurable &&
                        context.iompresent &&
                        (context[slot.slotPorts] == 2 &&
                            context[slot.slotQuadPortSupported] &&
                            (index == 3 || index == 7)) ||
                        (!context[slot.slotQuadPortSupported] && index < context[slot.slotPorts]) ||
                        (context.quadPortMode && context[slot.slotQuadPortSupported])) &&
                        !context[slot.slotFCModule];
                }
                else {
                    return (context[slot.hasSlot] &&
                        context.iomconfigurable &&
                        context.iompresent &&
                        (context[slot.slotPorts] == 2 &&
                            context[slot.slotQuadPortSupported] &&
                            (index == 3 || index == 7)) ||
                        (!context[slot.slotQuadPortSupported] && index < context[slot.slotPorts]) ||
                        (context.quadPortMode && context[slot.slotQuadPortSupported]));
                }
            }
        };
        ConfigureChassisWizardController.prototype.validateUplinks = function () {
            var self = this, chassisToCheck = [], chassis = [], slotNum, 
            //standardizes formatting for validating below
            format = function (arrayOfSwitches, configureAll, multiFabric) {
                chassis = [];
                //for each fabric
                angular.forEach(_.filter(arrayOfSwitches, function (slot) { return slot.iompresent && slot.iomconfigurable; }), function (_switch) {
                    chassis.push({});
                    var slots = angular.copy([
                        _switch.slot1Config,
                        _switch.slot2Config,
                        _switch.slot3Config
                    ]);
                    angular.forEach(slots, function (slotConfig, slotConfigIndex) {
                        //remove ports that aren't visible
                        _.pullAll(slotConfig, _.filter(slotConfig, function (port, portIndex) {
                            return !self.portVisible(portIndex, slotConfigIndex + 1, _switch, configureAll, multiFabric);
                        }));
                        //set speeds of remaining ports
                        angular.forEach(slotConfig, function (port) {
                            port._speed = self
                                .getPortType(port.portType, chassis.indexOf(port), _switch.quadPortSupported, slotConfig, _switch.quadPortMode).id;
                        });
                    });
                    angular.extend(chassis[multiFabric ? arrayOfSwitches.indexOf(_switch) : 0], {
                        ports: _.flatten(_.filter(slots, function (slotConfig) {
                            return slotConfig.length;
                        })),
                        multiFabric: multiFabric
                    });
                });
                chassisToCheck.push(chassis);
            };
            if (self.configureResources.configUplinks) {
                if (self.configureResources.configIOMMode === "all") {
                    if (!self.configureResources.configAllIOM) {
                        // All / Configure all
                        format([self.configureResources.commonIOMConfiguration], true, false);
                    }
                    else {
                        //All / Configure switches independently
                        format(self.configureResources.iomConfiguration, false, true);
                    }
                }
                if (self.configureResources.configIOMMode === "independent") {
                    var filteredDevices = self.$filter("filteredDevices")(self.configureResources.devices);
                    angular.forEach(filteredDevices, function (chassis) {
                        // Independent / Configure all
                        if (!chassis.chassisConfiguration.configAllIOM) {
                            format([chassis.chassisConfiguration.commonIOMConfiguration], false, false);
                        }
                        else {
                            // Independent / Configure switches Independently
                            format(chassis.chassisConfiguration.iomConfiguration, true, true);
                        }
                    });
                }
                var mismatchPortSpeed = false, vltFabricSpeed;
                //look for invalid chassis
                /*chassisToCheck looks like this :

                [
                    [chassis],
                    [
                        [switches],
                        [
                            {switch},
                            {
                                multiFabric: boolean
                                ports: []
                            }
                        ]
                    ]
                ]


                */
                self.steps.ioModuleSettings.invalid = !!_.find(chassisToCheck, function (chassis) {
                    //filter for valid fabrics
                    return mismatchPortSpeed ||
                        _.find(_.filter(chassis, function (_switch) {
                            return chassis.indexOf(_switch) % 2 === 0;
                        }), function (_switch) {
                            vltFabricSpeed = 0;
                            var allPorts = angular.copy(_switch.ports), fabricSwitches = [_switch];
                            if (_switch.multiFabric) {
                                allPorts = _.flatten([allPorts, chassis[chassis.indexOf(_switch) + 1].ports]);
                                fabricSwitches.push(chassis[chassis.indexOf(_switch) + 1]);
                            }
                            var portsWithUplinks = function (switchPorts) { return _.filter(switchPorts, function (port) {
                                return port.uplinkId;
                            }); }, hasUplinkNoVLT = function (switchPorts) { return _.filter(switchPorts, function (port) {
                                return port.uplinkId && port.uplinkId !== self.vltObj.uplinkId;
                            }); }, noUplinksFound = _.find(fabricSwitches, function (_switch) {
                                return !_.find(_switch.ports, function (port) {
                                    return port.uplinkId && port.uplinkId !== self.vltObj.uplinkId;
                                });
                            });
                            //filter for invalid slots
                            var slotConflicts = _.find(fabricSwitches, function (_switch) {
                                return _.find(portsWithUplinks(_switch.ports), function (port) {
                                    //An uplink cannot have two different speeds on a single switch within a fabric
                                    var intraSwitchSpeedConflict = _.find(hasUplinkNoVLT(_switch.ports), function (portToSearch) {
                                        if (port.uplinkId === portToSearch.uplinkId && port._speed !== portToSearch._speed) {
                                            console.log("uplink issue");
                                            return mismatchPortSpeed = true;
                                        }
                                    });
                                    //VLT cannot be different speeds across switches within a fabric
                                    var crossSlotVLTPortSpeedConflict = function () {
                                        if (port.uplinkId === self.vltObj.uplinkId) {
                                            if (vltFabricSpeed === 0) {
                                                vltFabricSpeed = port._speed;
                                            }
                                            else if (vltFabricSpeed !== port._speed) {
                                                console.log("vlt issue");
                                                return mismatchPortSpeed = true;
                                            }
                                        }
                                    };
                                    return intraSwitchSpeedConflict || crossSlotVLTPortSpeedConflict();
                                });
                            });
                            return noUplinksFound || slotConflicts;
                        });
                });
                if (self.steps.ioModuleSettings.invalid) {
                    self.GlobalServices.DisplayError({
                        severity: "critical", message: mismatchPortSpeed
                            ? self.$translate.instant("DEFINE_UPLINKS_mismatchPortSpeed")
                            : self.$translate.instant("DEFINE_UPLINKS_ErrorMessage")
                    });
                    self.$anchorScroll("page_configureChassisWizard");
                }
            }
            //create promise to return to wizard step
            var d = self.$q.defer();
            if (self.steps.ioModuleSettings.invalid) {
                d.reject();
            }
            else {
                d.resolve();
            }
            return d.promise;
        };
        ConfigureChassisWizardController.prototype.getPortType = function (portType, index, quadPortSupported, slot, quadPortMode) {
            var self = this;
            if (portType === "Fo" &&
                slot.length === 2 &&
                quadPortSupported === true &&
                (index == 3 || index == 7)) {
                return quadPortMode === false
                    ? { id: 40, name: self.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_40Gb") }
                    : { id: 10, name: self.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_10Gb") };
            }
            else {
                return portType === "Fo"
                    ? { id: 40, name: self.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_40Gb") }
                    : { id: 10, name: self.$translate.instant("CONFIGURECHASSIS_DEVICE_CONFIG_10Gb") };
            }
        };
        ConfigureChassisWizardController.prototype.viewPackageBundleDetails = function (selectedItem, packageId) {
            var self = this;
            var theModal = self.Modal({
                title: selectedItem.bundleName,
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/repositories/viewBundleDetails.html',
                controller: 'ViewBundleDetailsController as vbd',
                params: {
                    firmwarePackageId: packageId,
                    firmwareBundleId: selectedItem.id
                },
                onComplete: function (modalScope) {
                    self.refresh();
                }
            });
            theModal.modal.show();
        };
        ConfigureChassisWizardController.prototype.addRepo = function () {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_ResyncOSRepo'),
                modalSize: 'modal-lg',
                templateUrl: 'views/settings/Repositories/EditRepoModal.html',
                controller: 'EditRepoModalController as editRepoModalController',
                params: {
                    repo: {},
                    type: 'add'
                },
                onComplete: function () {
                    self.refresh();
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        ConfigureChassisWizardController.prototype.deleteRepo = function (repo) {
            var self = this;
            var modal = self.Modal({
                title: self.$translate.instant('SETTINGS_Repositories_Confirm'),
                modalSize: 'modal-md',
                templateUrl: 'views/settings/Repositories/ConfirmDeleteRepo.html',
                controller: 'GenericModalController as c',
                params: {},
                onComplete: function () {
                    var d = self.$q.defer();
                    self.Loading(d.promise);
                    self.$http.post(self.commands.data.repository.deleteRepository, { requestObj: { id: repo.id } }).then(function (response) {
                        d.resolve();
                        self.refresh();
                    }).catch(function (error) { d.resolve(); self.GlobalServices.DisplayError(error.data); });
                },
                onCancel: function () {
                    self.refresh();
                    modal.modal.dismiss();
                }
            });
            modal.modal.show();
        };
        //APIs
        ConfigureChassisWizardController.prototype.getHardwareManagementNetworks = function () {
            var self = this;
            return self.$http.post(self.commands.data.networking.networks.getHardwareManagementNetworks, []);
        };
        ConfigureChassisWizardController.prototype.getFirmwarePackages = function (array) {
            var self = this;
            //dunno where this array is coming from
            return self.$http.post(self.commands.data.firmwarepackages.getFirmwarePackages, null);
        };
        ConfigureChassisWizardController.prototype.getCredentialList = function (array) {
            var self = this;
            //dunno where this array is coming from
            return self.$http.post(self.commands.data.credential.getCredentialList, array);
        };
        ConfigureChassisWizardController.prototype.getConfigurableResources = function (requireComplianceCheck, criteriaObj) {
            var self = this;
            return self.$http.post(self.commands.data.configureChassis.getConfigurableResources, {
                requireComplianceCheck: requireComplianceCheck,
                criteriaObj: criteriaObj
            });
        };
        ConfigureChassisWizardController.prototype.setDefaultFirmwarePackage = function (id) {
            var self = this;
            return self.$http.post(self.commands.data.firmwarepackages.setDefaultFirmwarePackage, id);
        };
        ConfigureChassisWizardController.prototype.getTimeZones = function () {
            var self = this;
            return self.$http.post(self.commands.data.environment.getTimeZones, null);
        };
        ConfigureChassisWizardController.prototype.configureChassis = function (chassis) {
            var self = this;
            return self.$http.post(self.commands.data.configureChassis.configureResources, chassis);
        };
        ConfigureChassisWizardController.prototype.saveBundle = function (form) {
            var self = this;
            self.config = {
                directPost: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            };
            return self.$http.post(self.commands.data.firmwarepackages.saveFirmwareBundle, form, self.config);
        };
        ConfigureChassisWizardController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ConfigureChassisWizardController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ConfigureChassisWizardController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal',
            'Loading', 'Dialog', 'Commands', 'GlobalServices', 'FileUploader', "constants", "$filter", "$anchorScroll"];
        return ConfigureChassisWizardController;
    }());
    asm.ConfigureChassisWizardController = ConfigureChassisWizardController;
    angular
        .module("app")
        .controller("ConfigureChassisWizardController", ConfigureChassisWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=configureChassisWizard.js.map
var asm;
(function (asm) {
    var DefineUplinksController = (function () {
        function DefineUplinksController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, constants, $rootScope) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.$rootScope = $rootScope;
            this.rangeDropdown = function () {
                var array = [], i = 1;
                for (i; i <= 128; i++) {
                    array.push(i);
                }
                return array;
            };
            var self = this;
            self.refresh();
            self.rangeDropdown = self.initRangeDropdown();
        }
        DefineUplinksController.prototype.refresh = function () {
            var self = this;
            self.localUplinks = self.localUplinks || self.$scope.modal.params.uplinks || [];
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.getNetworks().then(function (response) {
                self.networks = response.data.responseObj;
                angular.forEach(self.localUplinks, function (uplink) {
                    if (uplink.networks.length && !uplink._networkTypes) {
                        //if modal just opened and network is already associated with networks, push them into the uplink's _networkTypes array
                        uplink._networkTypes = angular.copy(self.networks);
                        angular.forEach(uplink._networkTypes, function (network) {
                            network.included = _.indexOf(uplink.networks, network.id) >= 0;
                        });
                    }
                    else {
                        //if modal has not just opened 
                        uplink._networkTypes = uplink._networkTypes
                            ? uplink._networkTypes.concat(_.filter(angular.copy(self.networks), function (network) { return !_.find(uplink._networkTypes, network.id); }))
                            : angular.copy(self.networks);
                    }
                });
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { d.resolve(); });
        };
        DefineUplinksController.prototype.initRangeDropdown = function () {
            var array = [], i = 1;
            for (i; i <= 128; i++) {
                array.push(i);
            }
            return array;
        };
        ;
        DefineUplinksController.prototype.newUplink = function () {
            var self = this;
            self.localUplinks.push({
                uplinkName: 'Uplink ' + (self.localUplinks.length + 1),
                _networkTypes: angular.copy(self.networks),
                networkNames: [],
                networks: [],
                portChannel: 1,
                uplinkId: self.$rootScope.ASM.NewGuid()
            });
        };
        DefineUplinksController.prototype.getSelectedNetworks = function (networkTypes) {
            return _.filter(networkTypes, { included: true });
        };
        DefineUplinksController.prototype.addNetwork = function () {
            var self = this;
            var editNetworkModal = self.Modal({
                title: self.$translate.instant('NETWORKS_Edit_CreateTitle'),
                modalSize: 'modal-lg',
                templateUrl: 'views/networking/networks/editNetwork.html',
                controller: 'EditNetworkModalController as editNetwork',
                params: {
                    editMode: "CREATE",
                    id: ""
                },
                onComplete: function () {
                    self.refresh();
                }
            });
            editNetworkModal.modal.show();
        };
        DefineUplinksController.prototype.checkForm = function () {
            var self = this;
            return !self.localUplinks || !!_.find(self.localUplinks, function (uplink) {
                return (!uplink._networkTypes
                    || uplink._networkTypes.length === 0
                    || !self.getSelectedNetworks(uplink._networkTypes).length)
                    || _.find(self.localUplinks, function (searchUplink) {
                        return searchUplink.portChannel === uplink.portChannel &&
                            searchUplink.uplinkId !== uplink.uplinkId;
                    });
            });
        };
        DefineUplinksController.prototype.getRealUplinksLength = function () {
            var self = this;
            return _.filter(self.localUplinks, function (uplink) { return uplink.uplinkId !== self.$scope.modal.params.vltModel.uplinkId; }).length;
        };
        DefineUplinksController.prototype.getNetworks = function () {
            var self = this;
            return self.$http.post(self.Commands.data.networking.networks.getUplinkNetworksList, []);
        };
        DefineUplinksController.prototype.close = function () {
            var self = this;
            angular.forEach(self.localUplinks, function (uplink) {
                uplink.networks = _.map(self.getSelectedNetworks(uplink._networkTypes), "id");
                delete uplink._networkTypes;
            });
            self.$scope.modal.close(self.localUplinks);
        };
        DefineUplinksController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        DefineUplinksController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants', '$rootScope'];
        return DefineUplinksController;
    }());
    asm.DefineUplinksController = DefineUplinksController;
    angular
        .module("app")
        .controller("DefineUplinksController", DefineUplinksController);
})(asm || (asm = {}));
//# sourceMappingURL=defineUplinks.js.map
var asm;
(function (asm) {
    var NewServerPoolWizardController = (function () {
        function NewServerPoolWizardController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.GlobalServices = GlobalServices;
            this.pool = {
                canDelete: false,
                canEdit: false,
                createdby: "",
                createDate: moment(),
                description: "",
                id: null,
                isSelected: false,
                name: "",
                servers: [],
                users: [],
            };
            this.allServersSelected = false;
            this.serverSelected = false;
            this.calledFromDiscoverWizard = false;
            this.editMode = false;
            this.allUsersSelected = false;
            this.smartTableOptions = {
                itemsPerPage: 7,
                pagesShown: 10
            };
            var self = this;
            self.calledFromDiscoverWizard = self.$scope.modal.params.calledFromDiscoverWizard;
            self.pool = self.$scope.modal.params.pool || self.pool;
            self.editMode = !!self.$scope.modal.params.editMode;
            self.refresh();
        }
        NewServerPoolWizardController.prototype.activate = function () {
            var self = this;
        };
        NewServerPoolWizardController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$q.all([
                self.getDeviceList().then(function (response) {
                    self.devices = response.data.responseObj;
                    self.safeSource = angular.copy(response.data.responseObj);
                }),
                self.getUsers().then(function (response) {
                    self.users = response.data.responseObj;
                    self.safeUsers = angular.copy(response.data.responseObj);
                }),
                self.getCurrentUser().then(function (response) {
                    self.pool.createdby = response.data.responseObj.username;
                })
            ]).then(function () {
                //if editing a pool, loop through servers and users and mark matching ones as being selected already
                if (self.editMode) {
                    self.safeUsers = _.map(self.safeUsers, function (user) {
                        return angular.extend(user, {
                            selected: !!_.find(self.pool.users, function (poolUser) {
                                return poolUser.id === user.id;
                            })
                        });
                    });
                    self.safeSource = _.map(self.safeSource, function (device) {
                        return angular.extend(device, {
                            selected: !!_.find(self.pool.servers, function (poolDevice) {
                                return poolDevice.id === device.id;
                            })
                        });
                    });
                }
            }).catch(function (data) { self.GlobalServices.DisplayError(data.data); })
                .finally(function () { d.resolve(); });
        };
        NewServerPoolWizardController.prototype.selectAllServers = function () {
            var self = this;
            var allSelected = self.pool.servers.length === self.safeSource.length;
            self.selectAll(self.safeSource, !allSelected);
            if (!allSelected) {
                self.pool.servers = angular.copy(self.safeSource);
            }
            else {
                self.pool.servers = [];
            }
        };
        NewServerPoolWizardController.prototype.selectAllUsers = function () {
            var self = this;
            var allSelected = self.pool.users.length === self.safeUsers.length;
            self.selectAll(self.safeUsers, !allSelected);
            if (!allSelected) {
                self.pool.users = angular.copy(self.safeUsers);
            }
            else {
                self.pool.users = [];
            }
        };
        NewServerPoolWizardController.prototype.selectAll = function (safeSource, selectAll) {
            angular.forEach(safeSource, function (device) {
                device.selected = selectAll;
            });
        };
        NewServerPoolWizardController.prototype.finishWizard = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.saveServerPool(self.pool).then(function (data) {
                self.objectId = data.data.responseObj.id;
                d.resolve();
                self.close();
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        NewServerPoolWizardController.prototype.updateServers = function () {
            var self = this;
            self.pool.servers = _.filter(self.safeSource, { selected: true });
        };
        NewServerPoolWizardController.prototype.updateUsers = function () {
            var self = this;
            self.pool.users = _.filter(self.safeUsers, { selected: true });
        };
        NewServerPoolWizardController.prototype.getUsers = function () {
            var self = this;
            return self.$http.post(self.commands.data.users.getUsers, {
                criteriaObj: {
                    filterObj: [
                        {
                            field: "roleId",
                            op: "=",
                            opTarget: ["standard"]
                        }]
                }
            });
        };
        NewServerPoolWizardController.prototype.getDeviceList = function () {
            var self = this;
            return self.$http.post(self.commands.data.devices.getDeviceList, null);
        };
        NewServerPoolWizardController.prototype.getCurrentUser = function () {
            var self = this;
            return self.$http.post(self.commands.data.users.getCurrentUser, null);
        };
        NewServerPoolWizardController.prototype.saveServerPool = function (pool) {
            var self = this;
            return self.$http.post(self.commands.data.serverpools.saveServerPool, pool);
        };
        NewServerPoolWizardController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        NewServerPoolWizardController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        NewServerPoolWizardController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return NewServerPoolWizardController;
    }());
    asm.NewServerPoolWizardController = NewServerPoolWizardController;
    angular
        .module("app")
        .controller("NewServerPoolWizardController", NewServerPoolWizardController);
})(asm || (asm = {}));
//# sourceMappingURL=newServerPoolWizard.js.map
var asm;
(function (asm) {
    var ResourceComplianceReportController = (function () {
        function ResourceComplianceReportController($http, $timeout, $scope, $q, $translate, modal, Loading, Dialog, commands, globalServices, FileUploader, constants, $filter) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.FileUploader = FileUploader;
            this.constants = constants;
            this.$filter = $filter;
            this.compliant = "green";
            var self = this;
            self.activate();
        }
        ResourceComplianceReportController.prototype.activate = function () {
            var self = this, d = self.$q.defer(), firmwareCompliant, softwareCompliant;
            self.Loading(d.promise);
            self.$q.all([
                self.getFirmwareReport(self.$scope.modal.params.id, "resource")
                    .then(function (response) {
                    self.reportObj = response.data.responseObj[0];
                    firmwareCompliant = !_.find(self.reportObj.firmwareComponents, { compliant: false }),
                        softwareCompliant = !_.find(self.reportObj.softwareComponents, { compliant: false });
                    //logic to determine radio button default view selection of firmware or software
                    //default to firmware, unless there is a reson to view software due to greater importance/criticality
                    //possible compliance values, in increasting order of importance, are unknown (n/a), compliant (success), noncompliant (warning), updaterequired (critical)
                    //note:  this only applies to resources (not services) because there would have to be a way to determine which firmware reports mattered with the results of the tests below
                    angular.extend(self.reportObj, {
                        softwareComponentsSafe: angular.copy(self.reportObj.softwareComponents),
                        firmwareComponentsSafe: angular.copy(self.reportObj.firmwareComponents)
                    });
                    self.componentSelection = (firmwareCompliant && !softwareCompliant) ? "sw" : "fw";
                }),
                self.getDeviceById(self.$scope.modal.params.id).then(function (data) {
                    self.resource = data.data.responseObj;
                })
            ]).catch(function (data) {
                self.globalServices.DisplayError(data.data);
            }).finally(function () {
                if (!firmwareCompliant || !softwareCompliant) {
                    self.compliant = "yellow";
                }
                if (self.resource.compliant === "noncompliant") {
                    self.compliant = "red";
                }
                d.resolve();
            });
        };
        ResourceComplianceReportController.prototype.disableUpdate = function () {
            var self = this;
            if (!self.resource)
                return true;
            if (self.resource.availability != 'notinuse' && self.resource.status != 'ready') {
                return true;
            }
            if (self.$filter("isTypeChassis")(self.resource) && self.resource.availability == 'inuse') {
                return true;
            }
            if (self.resource.compliant == 'compliant' || self.resource.compliant == 'updating') {
                return true;
            }
            if (self.resource.state === 'unmanaged') {
                return true;
            }
            if (self.isStorage(self.resource)) {
                return true;
            }
            return false;
        };
        ResourceComplianceReportController.prototype.updateResource = function () {
            var self = this;
            ;
            var updatedeviceModal = self.modal({
                title: self.$translate.instant('SERVICE_APPLY_RESOURCE_UPDATES_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/updatedevicefirmware.html',
                controller: 'UpdateDeviceFirmwareModalController as updatedeviceFirmware',
                params: {
                    deviceType: self.resource.deviceType,
                    resource: self.resource
                },
                onComplete: function () {
                    self.$scope.modal.close();
                }
            });
            updatedeviceModal.modal.show();
        };
        ResourceComplianceReportController.prototype.isStorage = function (device) {
            return device.deviceType == 'storage' || device.deviceType == 'compellent' || device.deviceType == 'equallogic' || device.deviceType == 'netapp' || device.deviceType == 'emcvnx';
        };
        ResourceComplianceReportController.prototype.getDeviceById = function (id) {
            var self = this;
            return self.$http.post(self.commands.data.devices.getDeviceById, { id: id });
        };
        ResourceComplianceReportController.prototype.getFirmwareReport = function (id, type) {
            var self = this;
            return self.$http.post(self.commands.data.firmwareReport.getfirmwarereport, { id: id, type: type });
        };
        ResourceComplianceReportController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ResourceComplianceReportController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ResourceComplianceReportController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal',
            'Loading', 'Dialog', 'Commands', 'GlobalServices', 'FileUploader', "constants", "$filter"];
        return ResourceComplianceReportController;
    }());
    asm.ResourceComplianceReportController = ResourceComplianceReportController;
    angular
        .module("app")
        .controller("ResourceComplianceReportController", ResourceComplianceReportController);
})(asm || (asm = {}));
//# sourceMappingURL=resourceComplianceReport.js.map
var asm;
(function (asm) {
    var ResourceLogsController = (function () {
        function ResourceLogsController($http, $timeout, $q, $translate, modal, loading, commands, globalServices, $scope, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.loading = loading;
            this.commands = commands;
            this.globalServices = globalServices;
            this.$scope = $scope;
            this.constants = constants;
            this.logs = [];
            this.logsSafe = [];
            var self = this;
            self.refresh();
        }
        ResourceLogsController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.loading(d.promise);
            self.$http.post(self.commands.data.services.getPuppetLogs, {}).then(function (data) {
                self.logs = data.data.responseObj;
                angular.forEach(self.logs, function (log) {
                    angular.extend(log, { _severity: self.getSeverityColor(log.severity) });
                });
                self.logsSafe = angular.copy(self.logs);
            }).catch(function (response) {
                self.globalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        ResourceLogsController.prototype.getSeverityColor = function (severity) {
            switch (severity) {
                case "success":
                    return "green";
                case "critical":
                    return "red";
                case "warning":
                    return "yellow";
                case "info":
                    return "blue";
                default:
                    return "unknown";
            }
        };
        ResourceLogsController.prototype.exportLogs = function () {
            var self = this, d = self.$q.defer();
            self.loading(d.promise);
            self.$http({
                method: 'GET',
                url: self.commands.data.services.exportPuppetLogs,
                params: {
                    criteriaObj: {
                        filterObj: [
                            {
                                field: "componentid",
                                op: "=",
                                opTarget: [self.$scope.modal.params.componentid]
                            },
                            {
                                field: "deploymentid",
                                op: "=",
                                opTarget: [self.$scope.modal.params.deploymentid]
                            },
                        ]
                    }
                }
            }).then(function (response) {
                var link = document.createElement('a'), data = encodeURI('data:text/csv;charset=utf-8,' + response.data);
                link.setAttribute('href', data);
                link.setAttribute('download', "PuppetLogs.csv");
                link.click();
            }).catch(function (response) {
                self.globalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        ResourceLogsController.$inject = ['$http', '$timeout', '$q', '$translate', 'Modal', 'Loading', 'Commands', 'GlobalServices', "$scope", "constants"];
        return ResourceLogsController;
    }());
    asm.ResourceLogsController = ResourceLogsController;
    angular
        .module("app")
        .controller("ResourceLogsController", ResourceLogsController);
})(asm || (asm = {}));
//# sourceMappingURL=resourceLogs.js.map
var asm;
(function (asm) {
    var AddExistingServiceController = (function () {
        function AddExistingServiceController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.service = {
                template: {
                    "id": null,
                    "name": null,
                    "description": "",
                    "type": "new",
                    "cloneexistingtemplateid": null,
                    "category": "",
                    "manageFirmware": false,
                    "firmwarePackageId": null,
                    "updateServerFirmware": false,
                    "updateNetworkFirmware": false,
                    "updateStorageFirmware": false,
                    "enableApps": false,
                    "enableVMs": false,
                    "enableCluster": false,
                    "enableServer": false,
                    "enableStorage": false,
                    "allStandardUsers": false,
                    "assignedUsers": []
                }
            };
            this.warning = "warning";
            var self = this;
            self.refresh();
        }
        AddExistingServiceController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.getFirmwarePackages().then(function (response) {
                self.repos = response.data.responseObj;
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        AddExistingServiceController.prototype.step1Complete = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.getVmWareComponent().then(function (response) {
                angular.extend(self.service.template, response.data.responseObj);
                self.service.template.categories = self.filterComponents(self.service.template);
                console.log(self.service.template);
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        AddExistingServiceController.prototype.step2Complete = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.getExistingService(self.service).then(function (response) {
                self.existingService = response.data.responseObj;
                angular.extend(self.existingService, {
                    available: {
                        clusters: _.filter(self.existingService.clusterlist, function (cluster) { return self.availableInventory(cluster.state); }).length,
                        servers: _.filter(self.existingService.serverlist, function (server) { return self.availableInventory(server.state); }).length,
                        storages: _.filter(self.existingService.storagelist, function (storage) { return self.availableInventory(storage.state); }).length
                    }
                });
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
        };
        AddExistingServiceController.prototype.finishWizard = function () {
            var self = this, d = self.$q.defer();
            self.Dialog(self.$translate.instant("GENERIC_Confirm"), self.$translate.instant("SERVICES_ExistingServiceConfirmationMessage"), false)
                .then(function () {
                self.Loading(d.promise);
                self.addExistingService(self.existingService)
                    .then(function (response) {
                    d.resolve();
                    self.close();
                })
                    .catch(function (response) {
                    self.GlobalServices.DisplayError(response.data);
                })
                    .finally(function () { return d.resolve(); });
            });
        };
        AddExistingServiceController.prototype.settingVisible = function (setting, component) {
            var self = this;
            switch (setting.datatype) {
                case "raidconfiguration":
                case "biosconfiguration":
                case "networkconfiguration":
                    return false;
            }
            if (setting.hidefromtemplate) {
                return false;
            }
            ;
            if (!setting || !component || !setting.dependencyTarget)
                return true;
            if (setting.dependencyTarget && setting.dependencyValue) {
                var targetSetting = null;
                $.each(component.categories, function (ix, c) {
                    var matchingSetting = _.find(c.settings, function (s) {
                        return (s.id == setting.dependencyTarget);
                    });
                    if (matchingSetting) {
                        targetSetting = matchingSetting;
                        return;
                    }
                });
                var matchingValue = false;
                if (targetSetting && targetSetting.value != null) {
                    var settingvalues = setting.dependencyValue.split(',');
                    $.each(settingvalues, function (idx, val) {
                        if (val.toString() == targetSetting.value.toString())
                            matchingValue = true;
                    });
                }
                return matchingValue && self.settingVisible(targetSetting, component);
            }
            return true;
        };
        AddExistingServiceController.prototype.availableInventory = function (state) {
            return !(state === 'unmanaged' || state === 'updating');
        };
        AddExistingServiceController.prototype.filterComponents = function (template) {
            var self = this;
            //template > categories > settings
            _.forEach(_.filter(template.categories = _.filter(template.categories, function (category) {
                category.settings = _.filter(category.settings, function (setting) {
                    return self.settingVisible(setting, template);
                });
                return category.settings.length > 0;
            })), function (category) {
                category.show = true;
                _.forEach(category.settings, function (setting) {
                    setting.show = true;
                });
            });
            return template.categories;
        };
        AddExistingServiceController.prototype.getFirmwarePackages = function () {
            var self = this;
            return self.$http.post(self.Commands.data.firmwarepackages.getAvailableFirmwarePackages, {});
        };
        AddExistingServiceController.prototype.getVmWareComponent = function () {
            var self = this;
            return self.$http.post(self.Commands.data.templates.getVMWareComponent, { id: "cluster" });
        };
        AddExistingServiceController.prototype.getExistingService = function (service) {
            var self = this;
            return self.$http.post(self.Commands.data.services.getExistingService, service);
        };
        AddExistingServiceController.prototype.addExistingService = function (existingService) {
            var self = this;
            return self.$http.post(self.Commands.data.services.addExistingService, existingService);
        };
        AddExistingServiceController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        AddExistingServiceController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        AddExistingServiceController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants'];
        return AddExistingServiceController;
    }());
    asm.AddExistingServiceController = AddExistingServiceController;
    angular
        .module("app")
        .controller("AddExistingServiceController", AddExistingServiceController);
})(asm || (asm = {}));
//# sourceMappingURL=addExistingService.js.map
var asm;
(function (asm) {
    var AdjustResourcesController = (function () {
        function AdjustResourcesController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.viewModel = {};
            this.serviceId = '';
            var self = this;
            self.serviceId = $scope.modal.params.serviceId,
                self.refresh();
        }
        AdjustResourcesController.prototype.activate = function () {
            var self = this;
        };
        AdjustResourcesController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
        };
        AdjustResourcesController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        AdjustResourcesController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return AdjustResourcesController;
    }());
    asm.AdjustResourcesController = AdjustResourcesController;
    angular
        .module("app")
        .controller("AdjustResourcesController", AdjustResourcesController);
})(asm || (asm = {}));
//# sourceMappingURL=adjustresources.js.map
var asm;
(function (asm) {
    var DeleteResourcesController = (function () {
        function DeleteResourcesController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.viewModel = {};
            this.serviceId = '';
            var self = this;
            self.serviceId = $scope.modal.params.serviceId,
                self.refresh();
        }
        DeleteResourcesController.prototype.activate = function () {
            var self = this;
        };
        DeleteResourcesController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.$http.post(self.Commands.data.services.getServiceById, {
                requestObj: { "id": self.serviceId, "scaleup": true }
            }).then(function (data) {
                d.resolve();
                self.viewModel = data.data.responseObj;
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        DeleteResourcesController.prototype.doDeleteResources = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            var deleteRequest = {
                serviceId: '',
                applicationList: [],
                serverList: [],
                vmList: [],
                clusterList: [],
                volumeList: [],
            };
            deleteRequest.serviceId = self.serviceId;
            deleteRequest.applicationList = (_.map(self.getSelectedItems(self.viewModel.applicationlist), 'id'));
            deleteRequest.serverList = (_.map(self.getSelectedItems(self.viewModel.serverlist), 'id'));
            deleteRequest.vmList = (_.map(self.getSelectedItems(self.viewModel.vmlist), 'id'));
            deleteRequest.clusterList = (_.map(self.getSelectedItems(self.viewModel.clusterlist), 'id'));
            deleteRequest.volumeList = (_.map(self.getSelectedItems(self.viewModel.storagelist), 'id'));
            angular.forEach(deleteRequest.serverList, function (id) {
                var c = _.find(self.viewModel.components, function (comp) {
                    return comp.id == id;
                });
                if (c) {
                    angular.forEach(c.relatedcomponents, function (rcItem) {
                        if (rcItem.installOrder > 0) {
                            deleteRequest.applicationList.push(rcItem.id);
                        }
                    });
                }
            });
            angular.forEach(deleteRequest.vmList, function (id) {
                var c = _.find(self.viewModel.components, function (comp) {
                    return comp.id == id;
                });
                if (c) {
                    angular.forEach(c.relatedcomponents, function (rcItem) {
                        if (rcItem.installOrder > 0) {
                            deleteRequest.applicationList.push(rcItem.id);
                        }
                    });
                }
            });
            self.$http.post(self.Commands.data.services.deleteResources, deleteRequest)
                .then(function (data) {
                d.resolve();
                self.$scope.modal.close();
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        DeleteResourcesController.prototype.getSelectedItems = function (items) {
            return _.filter(items, { 'isSelected': true });
        };
        DeleteResourcesController.prototype.disableDeleteButton = function () {
            var self = this;
            if (self.getSelectedItems(self.viewModel.applicationlist).length +
                self.getSelectedItems(self.viewModel.serverlist).length +
                self.getSelectedItems(self.viewModel.vmlist).length +
                self.getSelectedItems(self.viewModel.clusterlist).length +
                self.getSelectedItems(self.viewModel.storagelist).length <= 0)
                return true;
            else
                return false;
        };
        DeleteResourcesController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        DeleteResourcesController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return DeleteResourcesController;
    }());
    asm.DeleteResourcesController = DeleteResourcesController;
    angular
        .module("app")
        .controller("DeleteResourcesController", DeleteResourcesController);
})(asm || (asm = {}));
//# sourceMappingURL=deleteresources.js.map
var asm;
(function (asm) {
    var DeleteServiceModalController = (function () {
        function DeleteServiceModalController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $filter, MessageBox, $location) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.MessageBox = MessageBox;
            this.$location = $location;
            var self = this;
            self.service = $scope.modal.params.service;
            self.activate();
        }
        DeleteServiceModalController.prototype.activate = function () {
            var self = this;
            if (self.service != undefined) {
                //Why do I need to empty out the existing null items in these?? -MH
                self.service.serverlist = [];
                self.service.vmlist = [];
                self.service.clusterlist = [];
                self.service.storagelist = [];
                var qArray = [];
                qArray.push($.each(self.service.components, function (idx, cmp) {
                    if (cmp.type == "server") {
                        self.service.serverlist.push(cmp);
                    }
                    if (cmp.type == "vm") {
                        self.service.vmlist.push(cmp);
                    }
                    if (cmp.type == "cluster") {
                        self.service.clusterlist.push(cmp);
                    }
                    if (cmp.type == "storage") {
                        self.service.storagelist.push(cmp);
                    }
                }));
                self.$q.all(qArray)
                    .then(function (respone) {
                    console.log(self.service);
                });
            }
        };
        DeleteServiceModalController.prototype.serverids = function () {
            var self = this;
            return _.filter(self.service.serverlist, null).map(function (pool) { return pool.id; });
        };
        DeleteServiceModalController.prototype.vmids = function () {
            var self = this;
            return _.filter(self.service.vmlist, { isSelected: true }).map(function (pool) { return pool.id; });
        };
        DeleteServiceModalController.prototype.clusterids = function () {
            var self = this;
            return _.filter(self.service.clusterlist, { isSelected: true }).map(function (pool) { return pool.id; });
        };
        DeleteServiceModalController.prototype.storageids = function () {
            var self = this;
            return _.filter(self.service.storagelist, { isSelected: true }).map(function (pool) { return pool.id; });
        };
        DeleteServiceModalController.prototype.delete = function () {
            var self = this;
            self.deleteRequest.serviceId = self.service.id;
            if (self.deleteRequest.deleteServers) {
                self.deleteRequest.serverList = self.serverids();
            }
            if (self.deleteRequest.deleteVMs) {
                self.deleteRequest.vmList = self.vmids();
            }
            if (self.deleteRequest.deleteClusters) {
                self.deleteRequest.clusterList = self.clusterids();
            }
            if (self.deleteRequest.deleteStorageVolumes) {
                self.deleteRequest.volumeList = self.storageids();
            }
            var request = self.deleteRequest;
            var confirm = this.Dialog((self.$translate.instant('GENERIC_Confirm')), (self.$translate.instant('SERVICE_DELETE_SERVICE')));
            confirm.then(function () {
                var d = self.$q.defer();
                self.Loading(d.promise);
                self.$http.post(self.Commands.data.services.deleteService, request)
                    .then(function (data) {
                    d.resolve();
                    self.$scope.modal.close();
                    self.$timeout(function () {
                        self.$location.path('services/');
                    }, 1000);
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                    d.resolve();
                });
            });
        };
        DeleteServiceModalController.prototype.close = function () {
            var self = this;
            //self.$scope.modal.dismiss();
            self.$scope.modal.cancel();
        };
        DeleteServiceModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog',
            'Commands', 'GlobalServices', '$filter', 'Messagebox', '$location'];
        return DeleteServiceModalController;
    }());
    asm.DeleteServiceModalController = DeleteServiceModalController;
    angular
        .module('app')
        .controller('DeleteServiceModalController', DeleteServiceModalController);
})(asm || (asm = {}));
//# sourceMappingURL=deleteserviceModal.js.map
var asm;
(function (asm) {
    var EditServiceModalController = (function () {
        function EditServiceModalController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, $filter, MessageBox, Modal) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.$filter = $filter;
            this.MessageBox = MessageBox;
            this.Modal = Modal;
            this.service = {};
            this.firmwarepackages = [];
            this.managePermissions = false;
            var self = this;
            self.serviceId = $scope.modal.params.id || '';
            self.activate();
        }
        EditServiceModalController.prototype.activate = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            if (self.serviceId) {
                self.$q.all([
                    self.$http.post(self.Commands.data.firmwarepackages.getAvailableFirmwarePackages, null)
                        .then(function (data) {
                        self.firmwarepackages = data.data.responseObj;
                    }),
                    self.$http.post(self.Commands.data.services.getServiceById, { id: self.serviceId, scaleup: true })
                        .then(function (data) {
                        self.service = data.data.responseObj;
                        self.managePermissions = (self.service.allStandardUsers || self.service.assignedUsers.length > 0);
                    })
                ]).catch(function (data) {
                    d.resolve();
                    self.GlobalServices.DisplayError(data.data);
                }).finally(function () { return d.resolve(); });
            }
        };
        EditServiceModalController.prototype.setDefaultFirmware = function () {
            var self = this;
            if (self.service && !self.service.firmwarePackageId) {
                if (self.service.manageFirmware) {
                    var pkg = _.find(self.firmwarepackages, { defaultpackage: true });
                    if (pkg) {
                        self.service.firmwarePackageId = pkg.id;
                    }
                }
                else {
                    self.service.firmwarePackageId = "";
                }
            }
        };
        EditServiceModalController.prototype.submit = function (formHasErrors) {
            var self = this;
            if (formHasErrors)
                return;
            var d = self.$q.defer();
            self.Loading(d.promise);
            if (!self.managePermissions) {
                //if not managing permissions, clear out the settings
                self.service.allStandardUsers = false;
                self.service.assignedUsers = [];
            }
            else {
                if (self.service.allStandardUsers)
                    self.service.assignedUsers = [];
            }
            angular.forEach(self.service.components, function (component) {
                angular.forEach(component.settings, function (setting) {
                    if (typeof setting.value != 'string') {
                        setting.value = JSON.stringify(setting.value);
                    }
                });
            });
            //TODO: do we need to modify/customstringify prior to saving?
            self.$http.post(self.Commands.data.services.updateService, self.service)
                .then(function (data) {
                d.resolve();
                //wait for loading spinner clears because a new one is going to go up as soon as this closes
                self.$timeout(function () { self.$scope.modal.close(); }, 500);
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        EditServiceModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        EditServiceModalController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog',
            'Commands', 'GlobalServices', '$filter', 'Messagebox', 'Modal'];
        return EditServiceModalController;
    }());
    asm.EditServiceModalController = EditServiceModalController;
    angular
        .module('app')
        .controller('EditServiceModalController', EditServiceModalController);
})(asm || (asm = {}));
//# sourceMappingURL=editServiceModal.js.map
var asm;
(function (asm) {
    var MigrateController = (function () {
        function MigrateController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.viewModel = {};
            this.displayedData = [];
            this.serverPools = {};
            this.selectedServer = {};
            this.serviceId = '';
            var self = this;
            self.serviceId = $scope.modal.params.serviceId,
                self.refresh();
        }
        MigrateController.prototype.activate = function () {
            var self = this;
        };
        MigrateController.prototype.refresh = function () {
            var self = this;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            var processes = [];
            var loadServices = self.$http.post(self.Commands.data.services.getServiceById, { requestObj: { "id": self.serviceId } }).then(function (data) {
                self.viewModel = data.data.responseObj;
                self.displayedData = [].concat(self.viewModel);
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
            processes.push(loadServices);
            var loadPools = self.$http.post(self.Commands.data.serverpools.getServerPools, null).then(function (data) {
                self.serverPools = data.data.responseObj;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            });
            processes.push(loadPools);
            self.$q.all(processes)
                .then(function () {
                self.matchServerListWithServerPool();
                deferred.resolve();
            }).catch(function () {
                deferred.resolve();
            });
        };
        MigrateController.prototype.matchServerListWithServerPool = function () {
            var self = this;
            angular.forEach(self.viewModel.serverlist, function (sl) {
                var sp = _.find(self.serverPools, function (sp) {
                    return sp.name == sl.serverpool;
                });
                sl.originalserverpoolid = sp.id;
                sl.serverpoolid = sp.id;
            });
        };
        MigrateController.prototype.getNewServerPoolName = function (id) {
            var self = this;
            var sp = _.find(self.serverPools, function (sp) {
                return sp.id == id;
            });
            return sp.name;
        };
        MigrateController.prototype.doMigrate = function () {
            var self = this;
            var myScope = this.$scope;
            //var msg: string = "Are you sure you want to migrate the selected server(s)?" + "<br/>" +
            //    "<ul><li>" + self.selectedServer.ipAddress + " - " + self.getNewServerPoolName(self.selectedServer.serverpoolid) + 
            //    "</li></ul>";
            var msg = self.$translate.instant('MIGRATE_SERVER_Confirm');
            msg = msg.replace('#from#', self.selectedServer.ipAddress).replace('#to#', self.getNewServerPoolName(self.selectedServer.serverpoolid));
            var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant(msg));
            confirm.then(function () {
                var deferred = self.$q.defer();
                self.Loading(deferred.promise);
                self.$http.post(self.Commands.data.services.migrate, {
                    requestObj: {
                        'serviceId': self.serviceId,
                        'migrateAllServers': false,
                        'targetServerPool': '',
                        'migrateServers': [{ 'id': self.selectedServer.id, 'name': self.selectedServer.serverpoolid }]
                    }
                }).then(function (data) {
                    //self.$http.post('bogus', { requestObj: self.viewModel }).then(function(data:any) {
                    deferred.resolve();
                    alert(self.$translate.instant('MIGRATE_SERVER_Submitted'));
                    myScope.modal.close();
                }).catch(function (data) {
                    //need to handle error
                    //error is in data
                    deferred.resolve();
                    self.GlobalServices.DisplayError(data.data);
                });
            });
        };
        MigrateController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        MigrateController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return MigrateController;
    }());
    asm.MigrateController = MigrateController;
    angular
        .module("app")
        .controller("MigrateController", MigrateController);
})(asm || (asm = {}));
//# sourceMappingURL=migrate.js.map
var asm;
(function (asm) {
    var ServiceComplianceReportController = (function () {
        function ServiceComplianceReportController($http, $timeout, $scope, $q, $translate, modal, Loading, Dialog, commands, globalServices, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.modal = modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.globalServices = globalServices;
            this.constants = constants;
            this.tableView = 'firmware';
            this.compliant = "green";
            var self = this;
            self.type = $scope.modal.params.type || '';
            self.id = $scope.modal.params.id || '';
            self.activate();
        }
        ServiceComplianceReportController.prototype.activate = function () {
            var self = this, d = self.$q.defer(), firmwareCompliant, softwareCompliant;
            self.Loading(d.promise);
            self.$q.all([
                self.getFirmwareReport(self.id, self.type)
                    .then(function (response) {
                    self.firmwareReport = response.data.responseObj;
                    self.firmwareReportSafe = angular.copy(self.firmwareReport);
                    self.compliant = _.find(self.firmwareReport, function (report) {
                        return !!_.find([report.firmwareComponents, report.softwareComponents], function (array) { return _.find(array, { compliant: false }); });
                    })
                        ? "yellow"
                        : "green";
                }),
                self.getServiceById(self.id, true).then(function (data) {
                    var service = data.data.responseObj;
                    self.service = service;
                    self.updateAllowed = !(service.firmwareCompliant === 'compliant' || service.health === 'unknown' || service.state === "In Progress");
                })
            ]).catch(function (data) {
                self.globalServices.DisplayError(data.data);
            }).finally(function () {
                d.resolve();
            });
        };
        ServiceComplianceReportController.prototype.updateServiceResource = function () {
            var self = this;
            ;
            var updateserviceModal = self.modal({
                title: self.$translate.instant('SERVICE_APPLY_RESOURCE_UPDATES_Title'),
                modalSize: 'modal-lg',
                templateUrl: 'views/services/updateservicefirmware.html',
                controller: 'UpdateServiceFirmwareController as UpdateServiceFirmware',
                params: {
                    id: self.id
                },
                onComplete: function () {
                    self.$scope.modal.close();
                }
            });
            updateserviceModal.modal.show();
        };
        ServiceComplianceReportController.prototype.getFirmwareReport = function (id, type) {
            var self = this;
            return self.$http.post(self.commands.data.firmwareReport.getfirmwarereport, { id: id, type: type });
        };
        ServiceComplianceReportController.prototype.getServiceById = function (id, scaleup) {
            var self = this;
            return self.$http.post(self.commands.data.services.getServiceById, { id: id, scaleup: scaleup });
        };
        ServiceComplianceReportController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ServiceComplianceReportController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ServiceComplianceReportController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants'];
        return ServiceComplianceReportController;
    }());
    asm.ServiceComplianceReportController = ServiceComplianceReportController;
    angular
        .module("app")
        .controller("ServiceComplianceReportController", ServiceComplianceReportController);
})(asm || (asm = {}));
//# sourceMappingURL=serviceComplianceReport.js.map
var asm;
(function (asm) {
    var ServiceComponentModalController = (function () {
        function ServiceComponentModalController($scope, Modal, Dialog, $http, $q, $timeout, Loading, GlobalServices, FileUploader, $translate, constants, commands, $location, $filter) {
            this.$scope = $scope;
            this.Modal = Modal;
            this.Dialog = Dialog;
            this.$http = $http;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Loading = Loading;
            this.GlobalServices = GlobalServices;
            this.FileUploader = FileUploader;
            this.$translate = $translate;
            this.constants = constants;
            this.commands = commands;
            this.$location = $location;
            this.$filter = $filter;
            this.settings = {
                newSetting: undefined,
                numInstances: 1,
                serviceToDuplicate: undefined
            };
            var self = this;
            self.refresh();
        }
        ServiceComponentModalController.prototype.refresh = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.availableComponents = _.filter(self.$scope.modal.params.service.components, { type: self.$scope.modal.params.type });
            self.settings.newSetting = (self.$scope.modal.params.type !== "storage" || self.$scope.modal.params.type !== "cluster") || !self.availableComponents.length;
            self.$http.post(self.commands.data.templates.getTemplateBuilderComponents, {
                id: self.$scope.modal.params.type,
                templateId: self.$scope.modal.params.templateId,
                serviceId: self.$scope.modal.params.serviceId
            }).then(function (data) {
                self.$scope.modal.params.availableComponents = data.data.responseObj;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        ServiceComponentModalController.prototype.continue = function () {
            var self = this;
            self.getAdjustServiceComponents(self.settings.serviceToDuplicate.id, self.settings.numInstances, self.$scope.modal.params.serviceId).then(function (response) {
                self.newComponents = self.namePicker(self.$scope.modal.params.service.components, self.filterComponents(response.data.responseObj), self.settings.serviceToDuplicate.name);
            });
        };
        ServiceComponentModalController.prototype.namePicker = function (namedArray, unNamedArray, baseName) {
            var nameToTry = "", i = 1;
            _.map(unNamedArray, function (unNamedItem) {
                var originalName = unNamedItem.name;
                while (originalName === unNamedItem.name) {
                    nameToTry = baseName + ' ' + '(' + i + ')';
                    if (!(_.find(namedArray, { name: nameToTry }) || _.find(unNamedArray, { name: nameToTry }))) {
                        //untaken name found
                        unNamedItem.name = nameToTry;
                    }
                    i++;
                }
            });
            return unNamedArray;
        };
        ServiceComponentModalController.prototype.filterComponents = function (components) {
            var self = this, a, b;
            //template > components > categories > settings
            //marks settings that return true from settingVisible with show = true
            //marks parents up the line with the same property if they have children
            _.forEach(components, function (component) {
                //b filter returns all hidden children of component
                b = _.filter(component.categories, function (category) {
                    a = _.filter(category.settings, { requireatdeployment: false });
                    _.forEach(category.settings, function (setting) {
                        setting._hidden = !setting.requireatdeployment;
                    });
                    return category._hidden = a.length === category.settings.length;
                });
                //component hidden if all children are
                component._hidden = b.length === component.categories.length;
            });
            return components;
        };
        ServiceComponentModalController.prototype.adjustService = function () {
            var self = this;
            var d = self.$q.defer();
            self.Loading(d.promise);
            self.adjustServiceCall(self.settings.serviceToDuplicate.id, self.newComponents, self.$scope.modal.params.serviceId).then(function () {
                d.resolve();
                self.close();
            }).catch(function (data) {
                d.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ServiceComponentModalController.prototype.getAdjustServiceComponents = function (componentId, instances, serviceId) {
            var self = this;
            return self.$http.post(self.commands.data.services.getAdjustServiceComponents, { componentId: componentId, instances: instances, serviceId: serviceId });
        };
        ServiceComponentModalController.prototype.adjustServiceCall = function (componentId, components, serviceId) {
            var self = this;
            return self.$http.post(self.commands.data.services.adjustService, { componentId: componentId, components: components, serviceId: serviceId });
        };
        ServiceComponentModalController.prototype.saveService = function (data) {
            var self = this;
            return self.adjustServiceCall(data.newComponent.id, [data.component], data.config.service.id);
        };
        ServiceComponentModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        ServiceComponentModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ServiceComponentModalController.$inject = ['$scope', 'Modal', 'Dialog', '$http', '$q', '$timeout', 'Loading', 'GlobalServices', 'FileUploader', '$translate', 'constants', 'Commands', '$location', '$filter'];
        return ServiceComponentModalController;
    }());
    asm.ServiceComponentModalController = ServiceComponentModalController;
    angular
        .module('app')
        .controller('ServiceComponentModalController', ServiceComponentModalController);
})(asm || (asm = {}));
//# sourceMappingURL=serviceComponentWrapper.js.map
var asm;
(function (asm) {
    var ServiceSettingsController = (function () {
        function ServiceSettingsController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, Commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.serviceId = '';
            var self = this;
            self.serviceId = $scope.modal.params.serviceId,
                self.refresh();
        }
        ServiceSettingsController.prototype.activate = function () {
            var self = this;
        };
        ServiceSettingsController.prototype.refresh = function () {
            var self = this;
            var deferred = self.$q.defer();
            self.Loading(deferred.promise);
            self.$http.post(self.Commands.data.services.getServiceSettingsById, { requestObj: { "id": self.serviceId } }).then(function (data) {
                self.serviceSettings = data.data.responseObj;
                deferred.resolve();
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
                deferred.resolve();
            });
        };
        ServiceSettingsController.prototype.isSettingVisible = function (setting, component) {
            var self = this;
            if (!setting || !component)
                return true;
            if (setting.dependencyTarget && setting.dependencyValue()) {
                var targetSetting = null;
                angular.forEach(component.categories, function (value, key) {
                    var matchingSetting = _.find(key.settings, function (s) {
                        return (s.id == setting.dependencyTarget());
                    });
                    if (matchingSetting) {
                        targetSetting = matchingSetting;
                        return;
                    }
                });
                var matchingValue = false;
                if (targetSetting && targetSetting.value() != null) {
                    var settingvalues = setting.dependencyValue().split(',');
                    angular.forEach(settingvalues, function (value, key) {
                        if (value.toString() == targetSetting.toString())
                            matchingValue = true;
                    });
                }
                return matchingValue && self.isSettingVisible(targetSetting, component);
            }
            return true;
        };
        ServiceSettingsController.prototype.isCategoryVisible = function (category, component) {
            var self = this;
            if (!category || !component)
                return true;
            var visible = false;
            angular.forEach(category.settings, function (value, key) {
                if (!visible && self.isSettingVisible(value, component))
                    visible = true;
            });
            return visible;
        };
        ServiceSettingsController.prototype.isAppSettingsVisible = function (components) {
            if (components) {
                var apps = components.filter(function (comp) {
                    return comp.installOrder > 0;
                });
                return apps.length > 0;
            }
            else
                return false;
        };
        ServiceSettingsController.prototype.getAppSettings = function (id) {
            var self = this;
            var apps = self.serviceSettings.components.where({ id: id });
            return apps;
        };
        ServiceSettingsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        ServiceSettingsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ServiceSettingsController;
    }());
    asm.ServiceSettingsController = ServiceSettingsController;
    angular
        .module("app")
        .controller("ServiceSettingsController", ServiceSettingsController);
})(asm || (asm = {}));
//# sourceMappingURL=servicesettings.js.map
var asm;
(function (asm) {
    var UpdateComponentsController = (function () {
        function UpdateComponentsController($http, $timeout, $scope, $q, $translate, Modal, loading, Dialog, Commands, GlobalServices, constants) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.loading = loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.constants = constants;
            this.serviceId = this.$scope.modal.params.serviceId;
            this.mode = "edit";
            var self = this;
            self.refresh();
        }
        UpdateComponentsController.prototype.refresh = function () {
            var self = this, d = self.$q.defer();
            self.loading(d.promise);
            self.getUpdatableService(self.serviceId).then(function (response) {
                self.serviceSettings = response.data.responseObj;
            }).catch(function (response) {
                self.GlobalServices.DisplayError(response.data);
            }).finally(function () { return d.resolve(); });
            d.resolve();
        };
        UpdateComponentsController.prototype.save = function (forceRetry) {
            var self = this, d = self.$q.defer();
            self.serviceSettings.forceRetry = forceRetry;
            self.loading(d.promise);
            self.saveService(self.serviceSettings)
                .then(function () {
                d.resolve();
                self.close();
            })
                .catch(function (response) { return self.GlobalServices.DisplayError(response.data); })
                .finally(function () { return d.resolve(); });
        };
        UpdateComponentsController.prototype.settingVisible = function (setting, component) {
            var self = this;
            var targetSetting = null;
            if (setting && component && setting.dependencyTarget && setting.dependencyValue) {
                _.find(component.categories, function (c) {
                    targetSetting = _.find(c.settings, { id: setting.dependencyTarget }) || null;
                    return targetSetting;
                });
                var matchingValue = false;
                if (targetSetting && targetSetting.value != null) {
                    var settingvalues = setting.dependencyValue().split(',');
                    matchingValue = !!_.find(settingvalues, function (val) {
                        return (val.toString() == targetSetting.value().toString());
                    });
                }
                return matchingValue && self.settingVisible(targetSetting, component);
            }
            return true;
        };
        ;
        UpdateComponentsController.prototype.categoryVisible = function (category, component) {
            var self = this;
            return (!category || !component || !!_.find(category.settings, function (setting) {
                return (self.settingVisible(setting, component));
            }));
        };
        ;
        UpdateComponentsController.prototype.remainingFields = function () {
            var self = this, count = 0;
            angular.forEach(self.serviceSettings.components, function (component) {
                angular.forEach(component.categories, function (category) {
                    count += _.filter(category.settings, function (s) {
                        return (!s.hidefromtemplate && self.settingVisible(s, component) && s.required && !s.value);
                    }).length;
                });
            });
            return count;
        };
        UpdateComponentsController.prototype.getUpdatableService = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.services.getUpdatableServiceSettingsById, { id: id });
        };
        UpdateComponentsController.prototype.saveService = function (service) {
            var self = this;
            return self.$http.post(self.Commands.data.services.updateComponents, service);
        };
        UpdateComponentsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.close();
        };
        UpdateComponentsController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        UpdateComponentsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices', 'constants'];
        return UpdateComponentsController;
    }());
    asm.UpdateComponentsController = UpdateComponentsController;
    angular
        .module("app")
        .controller("UpdateComponentsController", UpdateComponentsController);
})(asm || (asm = {}));
//# sourceMappingURL=updateComponents.js.map
var asm;
(function (asm) {
    /*
    Parameters:
    id : string
     */
    var UpdateServiceFirmwareController = (function () {
        function UpdateServiceFirmwareController($http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices, modal) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.modal = modal;
            this.datePicker = {
                options: {
                    format: "L hh:mm A",
                    minDate: moment(),
                },
                selectedDate: moment().add(1, 'hour'),
            };
            var self = this;
            self.update = {
                idList: [self.$scope.modal.params.id],
                scheduleType: 'updatenow',
                exitMaintenanceMode: false,
                scheduleDate: moment(),
            };
        }
        UpdateServiceFirmwareController.prototype.doSave = function () {
            var self = this, d = self.$q.defer();
            self.update.isValid = moment().isBefore(self.datePicker.selectedDate.toISOString());
            if (!self.update.isValid) {
                return;
            }
            self.update.scheduleDate = self.update.scheduleType === "schedule" ? self.datePicker.selectedDate.toISOString() : "";
            var confirm = self.Dialog(self.$translate.instant('GENERIC_Confirm'), self.$translate.instant('UPDATE_SERVICE_FIRMWARE_Confirmation'));
            confirm.then(function () {
                self.Loading(d.promise);
                //this is what we need to ship off
                //idList: [],
                //scheduleType: 'updatenow',
                //exitMaintenanceMode: false,
                //scheduleDate: new Date(0)
                //asm logic =  the values now_CancelMaintenance and scheduled_CancelMaintenance are initialized as false
                //and do not change; the UI had logic to adjust these values but it is commented out
                //request.exitMaintenanceMode(request.scheduleType() == "updatenow" ? self.now_CancelMaintenance() : (request.scheduleType() == "schedule" ? self.scheduled_CancelMaintenance() : false));
                //net effect is that exitMaintenanceMode is always false
                self.$http.post(self.Commands.data.services.updateservicefirmware, self.update)
                    .then(function (data) {
                    self.$scope.modal.close();
                }).catch(function (data) {
                    self.GlobalServices.DisplayError(data.data);
                }).finally(function () { return d.resolve(); });
            });
        };
        UpdateServiceFirmwareController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        UpdateServiceFirmwareController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices', "Modal"];
        return UpdateServiceFirmwareController;
    }());
    asm.UpdateServiceFirmwareController = UpdateServiceFirmwareController;
    angular
        .module('app')
        .controller('UpdateServiceFirmwareController', UpdateServiceFirmwareController);
})(asm || (asm = {}));
//# sourceMappingURL=updateservicefirmware.js.map
var asm;
(function (asm) {
    var ValidateSettingsController = (function () {
        function ValidateSettingsController($http, $timeout, $scope, $q, $translate, Modal, Loading, Dialog, commands, GlobalServices) {
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Modal = Modal;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.commands = commands;
            this.GlobalServices = GlobalServices;
            var self = this;
            self.activate();
        }
        ValidateSettingsController.prototype.activate = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.testSettingsValidity(self.$scope.modal.params.component).then(function (response) {
                self.devices = response.data.responseObj.devices;
                self.devicesSafe = angular.copy(self.devices);
                self.totalServers = response.data.responseObj.totalservers;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        ValidateSettingsController.prototype.testSettingsValidity = function (template) {
            var self = this;
            return self.$http.post(self.commands.data.templates.validateSettings, template);
        };
        ValidateSettingsController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        ValidateSettingsController.$inject = ['$http', '$timeout', '$scope', '$q', '$translate', 'Modal', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ValidateSettingsController;
    }());
    asm.ValidateSettingsController = ValidateSettingsController;
    angular
        .module("app")
        .controller("ValidateSettingsController", ValidateSettingsController);
})(asm || (asm = {}));
//# sourceMappingURL=validateSettings.js.map
var asm;
(function (asm) {
    var CloneController = (function () {
        function CloneController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.devices = {};
            this.selectedDevice = {};
            this.displayedData = [];
            var self = this;
            self.initialize();
        }
        CloneController.prototype.initialize = function () {
            var self = this;
            self.selectedDevice = '';
            var deferred = this.$q.defer();
            self.Loading(deferred.promise);
            //get the list
            self.$http.post(self.Commands.data.devices.getAvailableCloneDeviceList, null).then(function (data) {
                //self.$http.post('bogus', null).then(function (data: any) {
                self.devices = data.data.responseObj;
                self.displayedData = [].concat(self.devices);
                deferred.resolve();
            }).catch(function (data) {
                //error
                self.devices = [];
                deferred.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        CloneController.prototype.onSelectedDevice = function (selectedDevice) {
            var self = this;
            self.selectedDevice = selectedDevice;
        };
        CloneController.prototype.submit = function () {
            var self = this;
            self.$scope.modal.close();
        };
        CloneController.prototype.close = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        CloneController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return CloneController;
    }());
    asm.CloneController = CloneController;
    angular
        .module('app')
        .controller('CloneController', CloneController);
})(asm || (asm = {}));
//# sourceMappingURL=Clone.js.map
var asm;
(function (asm) {
    var ImportFromTemplateController = (function () {
        function ImportFromTemplateController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.templates = {};
            this.components = {};
            this.selectedComponent = '';
            this.selectedTemplate = '';
            var self = this;
            self.initialize();
        }
        ImportFromTemplateController.prototype.initialize = function () {
            var self = this;
            self.existingComponentId = self.$scope.modal.params.existingComponentId;
            self.componentsFound = false;
            var deferred = this.$q.defer();
            self.Loading(deferred.promise);
            //get the list
            self.$http.post(self.Commands.data.templates.getTemplateBuilderList, null).then(function (data) {
                //self.$http.post('bogus', null).then(function (data: any) {
                self.templates = data.data.responseObj;
                deferred.resolve();
                if (self.templates)
                    self.setFilteredComponents();
            }).catch(function (data) {
                //error
                self.components = [];
                deferred.resolve();
                self.GlobalServices.DisplayError(data.data);
            });
        };
        ImportFromTemplateController.prototype.setFilteredComponents = function () {
            var self = this;
            angular.forEach(self.templates, function (templateItem) {
                templateItem.filteredComponents = [];
                angular.forEach(templateItem.components, function (componentItem) {
                    // this should be ==
                    if (componentItem.id == self.existingComponentId) {
                        templateItem.filteredComponents.push(componentItem);
                        self.componentsFound = true;
                    }
                });
            });
        };
        ImportFromTemplateController.prototype.onSelectedComponent = function (selectedComponent) {
            var self = this;
            self.selectedComponent = selectedComponent;
        };
        ImportFromTemplateController.prototype.submit = function () {
            var self = this;
            var templateId = '';
            var component = null;
            angular.forEach(self.templates, function (templateItem) {
                if (component == null) {
                    var exists = _.find(templateItem.components, function (component) {
                        return component.id == self.selectedComponent.id;
                    });
                    if (exists) {
                        component = exists;
                        self.selectedTemplate = templateItem;
                    }
                    else
                        self.selectedTemplate = 'n/a';
                }
            });
            self.$scope.modal.close();
            //ASM logic
            //if (this.selectedComponentId() == '') return null;
            //var templateId = '';
            //var component = null;
            //var componentId = this.selectedComponentId();
            //this.templates.each(function (t) {
            //    if (component == null) {
            //        var exists = t.components.where({ id: componentId });
            //        if (exists.length > 0) {
            //            component = exists[0];
            //            templateId = t.id;
            //        }
            //    }
            //});
            //return templateId;
        };
        ImportFromTemplateController.prototype.close = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ImportFromTemplateController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ImportFromTemplateController;
    }());
    asm.ImportFromTemplateController = ImportFromTemplateController;
    angular
        .module('app')
        .controller('ImportFromTemplateController', ImportFromTemplateController);
})(asm || (asm = {}));
//# sourceMappingURL=ImportFromTemplate.js.map
var asm;
(function (asm) {
    var UploadConfigController = (function () {
        function UploadConfigController(Modal, $scope, Dialog, $http, Loading, $q, $timeout, globalServices, FileUploader) {
            this.Modal = Modal;
            this.$scope = $scope;
            this.Dialog = Dialog;
            this.$http = $http;
            this.Loading = Loading;
            this.$q = $q;
            this.$timeout = $timeout;
            this.globalServices = globalServices;
            this.FileUploader = FileUploader;
            this.configData = {};
            this.configFile = {};
            this.referenceId = {};
            var self = this;
            var uploader = $scope.uploader = new FileUploader({
                url: 'templates/uploadconfigfile',
            });
        }
        UploadConfigController.prototype.isFileSelected = function () {
            var self = this;
            var retValue = false;
            if (document.getElementById("configFile").value != "") {
                // you have a file
                retValue = true;
            }
            return retValue;
        };
        UploadConfigController.prototype.uploadConfigFile = function () {
            var self = this;
            var d = this.$q.defer();
            self.Loading(d.promise);
            //self.$http.post('templates/uploadconfigfile', { requestObj: self.configData })
            //    .then(function (data: any) {
            //        self.configData = data.data.responseObj;
            //    }).catch(function (error) {
            //        self.$rootScope.ASM.DisplayError(error, self.$rootScope.errors);
            //    });
            //d.resolve();
            //using angular uploader
            //self.$scope.uploader.formData.push(self.bundle);
            //set error and success callbacks 
            angular.extend(self.$scope.uploader, {
                onErrorItem: function (fileItem, response, status, headers) {
                    d.resolve();
                    self.globalServices.DisplayError(response.data);
                },
                onCompleteAll: function (fileItem, response, status, headers) {
                    d.resolve();
                    // old ASM stuff the filename into referenceId... lets just do the same
                    self.referenceId = document.getElementById("configFile").value;
                    self.$scope.modal.close();
                } //,
            });
            self.$scope.uploader.uploadAll();
        };
        UploadConfigController.prototype.close = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        UploadConfigController.$inject = ['Modal', '$scope', 'Dialog', '$http', 'Loading', '$q', '$timeout', 'GlobalServices', 'FileUploader'];
        return UploadConfigController;
    }());
    asm.UploadConfigController = UploadConfigController;
    angular
        .module('app')
        .controller('UploadConfigController', UploadConfigController);
})(asm || (asm = {}));
//# sourceMappingURL=UploadConfig.js.map
var asm;
(function (asm) {
    var ViewTemplateDetailsModalController = (function () {
        function ViewTemplateDetailsModalController(Modal, $http, $timeout, $scope, $q, $translate, Loading, Dialog, Commands, GlobalServices) {
            this.Modal = Modal;
            this.$http = $http;
            this.$timeout = $timeout;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.Loading = Loading;
            this.Dialog = Dialog;
            this.Commands = Commands;
            this.GlobalServices = GlobalServices;
            this.readOnly = true;
            var self = this;
            self.initialize();
        }
        ViewTemplateDetailsModalController.prototype.initialize = function () {
            var self = this;
            self.template = self.$scope.modal.params.getTemplate
                ? self.getTemplateDetails()
                : angular.copy(self.$scope.modal.params.template);
        };
        ViewTemplateDetailsModalController.prototype.getTemplateDetails = function () {
            var self = this, d = self.$q.defer();
            self.Loading(d.promise);
            self.getTemplate(self.$scope.modal.params.template.id).then(function (response) {
                self.template = response.data.responseObj;
                self.hideSettings();
                return self.template;
            }).catch(function (data) {
                self.GlobalServices.DisplayError(data.data);
            }).finally(function () { return d.resolve(); });
        };
        ViewTemplateDetailsModalController.prototype.hideSettings = function () {
            var self = this;
            _.remove(self.template.components, function (component) {
                if (component.type === 'application') {
                    return true;
                }
                _.remove(component.categories, function (category) {
                    _.remove(category.settings, function (setting) { return self.settingVisible(setting, component); });
                    return self.categoryVisible(category, component);
                });
            });
        };
        ViewTemplateDetailsModalController.prototype.categoryVisible = function (category, component) {
            var self = this;
            return (category
                && component
                && !_.find(category.settings, function (setting) {
                    return setting.hideFromTemplate || !self.settingVisible(setting, component);
                }));
        };
        ViewTemplateDetailsModalController.prototype.settingVisible = function (setting, component) {
            var self = this;
            if (!setting || !component || !setting.dependencyTarget)
                return true;
            if (setting.dependencyTarget && setting.dependencyValue) {
                var targetSetting = null;
                $.each(component.categories, function (ix, c) {
                    var matchingSetting = _.find(c.settings, function (s) {
                        return (s.id == setting.dependencyTarget);
                    });
                    if (matchingSetting) {
                        targetSetting = matchingSetting;
                        return;
                    }
                });
                var matchingValue = false;
                if (targetSetting && targetSetting.value != null) {
                    var settingvalues = setting.dependencyValue.split(',');
                    $.each(settingvalues, function (idx, val) {
                        if (val.toString() == targetSetting.value.toString())
                            matchingValue = true;
                    });
                }
                return matchingValue && self.settingVisible(targetSetting, component);
            }
            return true;
        };
        ViewTemplateDetailsModalController.prototype.getTemplate = function (id) {
            var self = this;
            return self.$http.post(self.Commands.data.templates.loadTemplateDetails, { id: id });
        };
        ViewTemplateDetailsModalController.prototype.cancel = function () {
            var self = this;
            self.$scope.modal.cancel();
        };
        ViewTemplateDetailsModalController.prototype.close = function () {
            var self = this;
            self.$scope.modal.dismiss();
        };
        ViewTemplateDetailsModalController.$inject = ['Modal', '$http', '$timeout', '$scope', '$q', '$translate', 'Loading', 'Dialog', 'Commands', 'GlobalServices'];
        return ViewTemplateDetailsModalController;
    }());
    asm.ViewTemplateDetailsModalController = ViewTemplateDetailsModalController;
    angular
        .module('app')
        .controller('ViewTemplateDetailsModalController', ViewTemplateDetailsModalController);
})(asm || (asm = {}));
//# sourceMappingURL=ViewTemplateDetails.js.map
